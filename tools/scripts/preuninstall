#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-sync */

'use strict';

// MODULES //

var path = require( 'path' );
var fs = require( 'fs' );
var logger = require( 'debug' );


// VARIABLES //

var debug = logger( 'stdlib:pre-uninstall' );

// Resolve the root project directory (WARNING: this is fragile and likely needs to be updated should this file move!):
var ROOT_DIR = path.resolve( __dirname, '..', '..' );

// Resolve the project package directory:
var PKG_DIR = path.join( ROOT_DIR, 'lib', 'node_modules', '@stdlib' );

// Resolve the post-install meta data file:
var META_FILE = path.join( ROOT_DIR, '.postinstall.json' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var action;
	var stats;
	var meta;
	var op;
	var np;
	var p;
	var i;

	debug( 'Root directory: %s', ROOT_DIR );
	debug( 'Package directory: %s', PKG_DIR );

	debug( 'Reading meta data...' );
	meta = require( META_FILE ); // eslint-disable-line stdlib/no-dynamic-require

	debug( 'Reverting changes...' );
	for ( i = meta.length-1; i >= 0; i-- ) { // NOTE: reverting changes in reverse order!!!
		action = meta[ i ][ 0 ];
		if ( action === 'rename' ) {
			op = meta[ i ][ 1 ];
			np = meta[ i ][ 2 ];
			if ( fs.existsSync( np ) ) {
				debug( 'Renaming: %s...', np );
				fs.renameSync( np, op );
			} else {
				debug( 'Path does not exist: %s. Skipping...', np );
			}
		} else if ( action === 'create' ) {
			p = meta[ i ][ 1 ];
			if ( fs.existsSync( p ) ) {
				stats = fs.statSync( p );
				if ( stats.isFile() ) {
					debug( 'Deleting file: %s...', p );
					fs.unlinkSync( p );
				} else if ( stats.isDirectory() ) {
					debug( 'Removing directory: %s...', p );
					fs.rmdirSync( p );
				} else if ( stats.isSymbolicLink() ) {
					debug( 'Removing symbolic link: %s...', p );
					fs.unlinkSync( p );
				} else {
					debug( 'Error: unexpected file type. Path: %s', p );
				}
			} else {
				debug( 'Path does not exist: %s. Skipping...', p );
			}
		}
	}
	debug( 'Finished reverting changes.' );
}

main();
