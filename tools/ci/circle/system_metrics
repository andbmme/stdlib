#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2018 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Build script to log metrics in order to monitor resource usage over time.

# VARIABLES #

# Define an output file to store metrics:
log_file="${CIRCLE_ARTIFACTS}/system_metrics.txt"

# Define an interval for logging metrics:
interval='1s'


# FUNCTIONS #

# Defines an error handler.
on_error() {
	echo 'ERROR: An error was encountered during execution.' >&2
	exit 1
}

# Prints system memory usage.
#
# Format:
#
#   memory_used_in_MB,total_memory_in_MB,percent_used
#
memory_usage() {
	local mem
	mem=$(free -m | awk 'NR==2 {printf "%sMB,%sMB,%.2f%%)", $3, $2, $3*100/$2}')
	echo "${mem}"
}

# Prints system disk usage.
#
# Format:
#
#    disk_used_in_GB,total_disk_space_in_GB,percent_used
#
disk_usage() {
	local disk
	disk=$(df -h | awk '$NF=="/" {printf "%dGB,%dGB,%s", $3, $2, $5}')
	echo "${disk}"
}

# Prints the system load average.
load_avg() {
	local load
	load=$(top -bn1 | grep load | awk '{printf "%.2f", $(NF-2)}')
	echo "${load}"
}

# Polls the system for system metrics.
#
# $1 - poll interval
# $2 - output log file
poll() {
	local disk
	local mem
	local cpu

	# Set headers:
	echo 'mem,total,pct,du,total,pct,load' >> "$2"

	# Poll for metrics:
	while true; do
		mem=$(memory_usage);
		disk=$(disk_usage);
		cpu=$(load_avg);
		echo "${mem},${disk},${cpu}" >> "$2";
		sleep "$1";
	done
}

# Main execution sequence.
main() {
	poll "${interval}" "${log_file}"
}

# Set an error handler:
trap 'on_error' ERR

# Run main:
main
