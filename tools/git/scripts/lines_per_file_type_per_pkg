#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2017 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Prints the number of lines in a package.
#
# <package_path> <percentage> <total_lines> <number_of_files> <average_length> <file_type>
#
# Notes:
#
# -   Results should NOT be confused with source lines of code (SLOC). This implementation measures absolute file length.

# Determine root directory:
root="$(git rev-parse --show-toplevel)"

# Define the path to a utility to list packages:
find_pkgs="${root}/tools/scripts/find_packages"

# Define the path to a utility to list files:
find_files="${root}/tools/scripts/find_files"

# Define the path to a utility to annotate a file statistic stream:
annotate_file_type="${root}/tools/git/scripts/annotate_file_type.awk"

# Get a list of packages:
pkgs="$(PACKAGES_FILTER=${PACKAGES_FILTER} ${find_pkgs})"

# For each package, determine the number of lines...
for pkg in ${pkgs}; do
	# * `find_files`
	#   - Find package files.
	# * `xargs wc -l`
	#   - Compute the number of lines within each file.
	# * `awk '{}'`
	#   - Extract `count` and `filename` columns.
	# * `annotate_file_type`
	#   - Prefix each result with a file type.
	# * `awk '{}'`
	#   - Compute statistics.
	# * `sort -k2nr`
	#   - Sort in reverse numeric order based on the computed percentage.
	FILES_PATTERN="${FILES_PATTERN}" FILES_FILTER="$pkg/.*" "${find_files}" | xargs wc -l | awk '
$2 ~ /^total$/ {
	next
}
{
	print $1 OFS $2
}
' | awk -f "${annotate_file_type}" | awk -v pkg="$pkg" '
$3 ~ /README\.md$/ {
	lines["README"] += $2
	N["README"] += 1
}

{
	lines[$1] += $2
	N[$1] += 1

	lines["total"] += $2
	N["total"] += 1
}

END {
	total = lines["total"]
	for (k in lines) {
		len = lines[k];
		n = N[k]
		pct = int(len/total*10000)/10000
		mu = int(len/n*10000)/10000
		print pkg OFS pct OFS len OFS n OFS mu OFS k
	}
}
' | sort -k2nr
done
