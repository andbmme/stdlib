/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var arc4 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof arc4, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws a type error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			arc4( value );
		};
	}
});

tape( 'the function returns a function', function test( t ) {
	t.equal( typeof arc4( 'pwd12' ), 'function', 'returns a function' );
	t.end();
});

tape( 'the returned function throws a type error if not provided a string', function test( t ) {
	var values;
	var cipher;
	var i;

	cipher = arc4( 'pwd12' );

	values = [
		5,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			cipher( value );
		};
	}
});

tape( 'the returned function encrypts (and decrypts) provided text', function test( t ) {
	var expected;
	var encrypt;
	var decrypt;
	var actual;
	var hex;
	var str;
	var out;
	var i;

	encrypt = arc4( 'pwd12' );

	// Test string and expected value from http://www.math.washington.edu/~nichifor/310_2008_Spring/Pres_RC4%20Encryption.pdf
	str = 'Math 310 Proves!';
	expected = '6CA86FE3CBC33C162595C3E78B9C97BC';

	// Encrypt the text:
	out = encrypt( str );
	actual = '';
	for ( i = 0; i < out.length; i++ ) {
		hex = out.charCodeAt( i ).toString( 16 );
		actual += hex;
	}

	t.equal( actual.toLowerCase(), expected.toLowerCase(), 'returns expected encrypted string' );

	// Decrypt the text:
	decrypt = arc4( 'pwd12' );
	out = decrypt( out );

	t.equal( out, str, 'returns expected decrypted string' );

	t.end();
});

tape( 'if provided an empty string, the returned function returns an empty string', function test( t ) {
	var encrypt = arc4( 'pwd12' );
	t.equal( encrypt( '' ), '', 'returns an empty string' );
	t.end();
});
