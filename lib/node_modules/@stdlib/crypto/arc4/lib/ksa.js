/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var swap = require( './swap.js' );


// VARIABLES //

var NUM_BYTES = 256; // 2^8


// MAIN //

/**
* Key-scheduling algorithm to initialize a permutation vector.
*
* ## Method
*
* 1.  Initialize a byte array `S` to the identity permutation.
* 2.  Using a provided `key`, process `S` for `N` iterations, where `N` is the number of all possible bytes, to generate a vector permutation.
*
*
* ## References
*
* -   See [Wikipedia][rc4].
*
* [rc4]: https://en.wikipedia.org/wiki/RC4
*
* @private
* @param {string} key - key used to permute a byte array
* @returns {Uint8Array} permuted byte array
*
* @example
* var S = ksa( 'pwd12' );
* // returns <Uint8Array>
*/
function ksa( key ) {
	var len;
	var S;
	var i;
	var j;
	var k;

	S = new Uint8Array( NUM_BYTES );

	// Initialize a byte array to the identity permutation...
	for ( i = 0; i < NUM_BYTES; i++ ) {
		S[ i ] = i;
	}
	// Generate a permutation using the provided key...
	len = key.length;
	j = 0;
	for ( i = 0; i < NUM_BYTES; i++ ) {
		// Get a value on the interval [0,255]:
		k = key.charCodeAt( i % len );

		// Compute the next index to swap:
		j = (j + S[i] + k) % NUM_BYTES;

		// Permute the byte array:
		swap( S, i, j );
	}
	return S;
}


// EXPORTS //

module.exports = ksa;
