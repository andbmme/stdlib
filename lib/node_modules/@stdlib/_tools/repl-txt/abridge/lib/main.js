/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var pluck = require( '@stdlib/utils/pluck' );
var signature2typed = require( '@stdlib/_tools/repl-txt/typed-signature' );
var wrap = require( '@stdlib/_tools/repl-txt/wrap-signature' );


// VARIABLES //

var RE_SHORT_DESC_END = /\.\n\n/;


// FUNCTIONS //

/**
* Returns a section AST node having a specified title.
*
* @private
* @param {ObjectArray} nodes - section AST nodes
* @param {string} name - section name
* @returns {(Object|null)} AST node or null
*/
function findSection( nodes, name ) {
	var i;
	for ( i = 0; i < nodes.length; i++ ) {
		if ( nodes[ i ].title === name ) {
			return nodes[ i ];
		}
	}
	return null;
}

/**
* Filters section tag objects (nodes) based on a list of provided tag names.
*
* @private
* @param {ObjectArray} tags - list of tag objects
* @param {Array} names - list of tag names
* @returns {Array} filtered array
*/
function filterTags( tags, names ) {
	var out;
	var i;

	out = [];
	for ( i = 0; i < tags.length; i++ ) {
		if ( contains( names, tags[ i ].name ) ) {
			out.push( tags[ i ] );
		}
	}
	return out;
}


// MAIN //

/**
* Generates abbreviated help text from a REPL text AST interface node.
*
* @param {Node} node - AST node
* @returns {string} abbreviated help text
*
* @example
* // TODO
*/
function abridge( node ) {
	var tags;
	var desc;
	var out;
	var tmp;
	var sig;
	var s;

	sig = node.signature.raw;
	out = '\n';

	// Check that the interface is a function...
	if ( sig.length !== node.signature.name.length ) {
		s = findSection( node.sections, 'Parameters' );
		if ( s ) {
			// Note: number of tags may not match the number of signature parameters, as the parameters section may also document option properties, etc.
			tags = filterTags( s.tags, pluck( node.signature.parameters, 'name' ) );
			sig = signature2typed( sig, tags );
		}
		sig = wrap( sig );
	}
	out += sig + '\n';

	// Note: descriptions should already be text wrapped at 80 characters, so text wrapping should not be a concern when appending the description text...
	if ( node.description ) {
		tmp = node.description.raw.split( RE_SHORT_DESC_END );
		if ( tmp.length === 1 ) {
			// Description does not include an extended description:
			desc = tmp[ 0 ];
		} else if ( tmp.length > 1 ) {
			// Description includes an extended description:
			desc = tmp[ 0 ] + '.\n';
		}
	} else {
		// Unable to resolve short description due to missing interface description...
		desc = '';
	}
	out += desc;

	return out;
}


// EXPORTS //

module.exports = abridge;
