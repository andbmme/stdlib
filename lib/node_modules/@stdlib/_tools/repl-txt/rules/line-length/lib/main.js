/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var replace = require( '@stdlib/string/replace' );
var namespace = require( '@stdlib/namespace' );


// VARIABLES //

var NAMESPACE = namespace();
var MAX_LINE_LENGTH = 80;
var RE_OUTSIDE_ALIAS = /{{alias:([\s\S]+?)}}/g;


// FUNCTIONS //

/**
* Returns the REPL alias for a given package name.
*
* @private
* @param {string} pkg - package name
* @returns {(string|null)} alias name or null
*/
function pkg2alias( pkg ) {
	var i;

	for ( i = 0; i < NAMESPACE.length; i++ ) {
		if ( pkg === NAMESPACE[ i ].path ) {
			return NAMESPACE[ i ].alias;
		}
	}
	return null;
}


// MAIN //

/**
* Rule for enforcing that lines in `repl.txt` files do not exceed a specified length.
*
* @param {Context} context - lint context
* @param {Array} options - rule options
* @returns {Object} validators
*/
function main( context ) {
	var maxLength = context.options[ 0 ] || MAX_LINE_LENGTH;

	/**
	* Checks whether lines in `repl.txt` files do not exceed a specified length.
	*
	* @private
	* @param {Object} ast - full AST
	*/
	function lineLength( ast ) {
		var lines;
		var line;
		var i;
		lines = ast.raw.split( '\n' );
		for ( i = 0; i < lines.length; i++ ) {
			line = lines[ i ];
			line = replace( line, RE_OUTSIDE_ALIAS, substituteAlias );
			if ( line.length > maxLength ) {
				context.report( 'Lines must not exceed '+maxLength+' characters', {
					'start': i,
					'end': i
				});
			}
		}
	}

	/**
	* Replaces a matched alias annoation with the alias corresponding to the package path.
	*
	* @private
	* @param {string} match - alias annotation
	* @param {string} pkg - package name
	* @returns {string} alias name or original string
	*/
	function substituteAlias( match, pkg ) {
		var alias = pkg2alias( pkg );
		if ( alias ) {
			return alias;
		}
		return match;
	}

	return {
		'function': lineLength
	};
}


// EXPORTS //

module.exports = main;
