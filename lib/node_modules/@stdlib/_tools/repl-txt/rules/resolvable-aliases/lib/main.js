/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var namespace = require( '@stdlib/namespace' );
var isNull = require( '@stdlib/assert/is-null' );


// VARIABLES //

var NAMESPACE = namespace();
var RE_OUTSIDE_ALIAS = /{{alias:([\s\S]+?)}}/g;
var RE_NEWLINE = /\r?\n/g;


// FUNCTIONS //

/**
* Counts the number of lines in a string.
*
* @private
* @param {string} str - input string
* @returns {PositiveInteger} number of lines
*/
function countLines( str ) {
	return ( str.match( RE_NEWLINE ) || '' ).length + 1;
}

/**
* Returns the REPL alias for a given package.
*
* @private
* @param {string} pkg - package path
* @returns {string|null} package alias
*/
function pkg2alias( pkg ) {
	var i;

	for ( i = 0; i < NAMESPACE.length; i++ ) {
		if ( pkg === NAMESPACE[ i ].path ) {
			return NAMESPACE[ i ].alias;
		}
	}
	return null;
}


// MAIN //

/**
* Rule for enforcing that packages in outside aliases are resolvable.
*
* @param {Context} context - lint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Checks that all packages in aliases are resolvable.
	*
	* @private
	* @param {Object} ast - full AST
	*/
	function resolvableAliases( ast ) {
		var substr;
		var alias;
		var match;
		var line;
		var pos;

		match = RE_OUTSIDE_ALIAS.exec( ast.raw );
		while ( !isNull( match ) ) {
			alias = pkg2alias( match[ 1 ] );
			if ( !alias ) {
				substr = ast.raw.substring( 0, RE_OUTSIDE_ALIAS.lastIndex );
				line = countLines( substr );
				pos = {
					'start': line,
					'end': line
				};
				context.report( match[ 1 ]+' does not map to any REPL alias', pos );
			}
			match = RE_OUTSIDE_ALIAS.exec( ast.raw );
		}
	}
	return {
		'function': resolvableAliases
	};
}


// EXPORTS //

module.exports = main;
