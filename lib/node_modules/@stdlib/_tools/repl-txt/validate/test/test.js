/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isArray = require( '@stdlib/assert/is-array' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var isValid = require( './../lib' );


// FIXTURES //

var REPL1 = readFileSync( resolve( __dirname, 'fixtures', 'repl1.txt' ) ).toString();
var REPL2 = readFileSync( resolve( __dirname, 'fixtures', 'repl2.txt' ) ).toString();
var REPL3 = readFileSync( resolve( __dirname, 'fixtures', 'repl3.txt' ) ).toString();
var REPL4 = readFileSync( resolve( __dirname, 'fixtures', 'repl4.txt' ) ).toString();
var REPL5 = readFileSync( resolve( __dirname, 'fixtures', 'repl5.txt' ) ).toString();
var REPL6 = readFileSync( resolve( __dirname, 'fixtures', 'repl6.txt' ) ).toString();
var REPL7 = readFileSync( resolve( __dirname, 'fixtures', 'repl7.txt' ) ).toString();
var REPL8 = readFileSync( resolve( __dirname, 'fixtures', 'repl8.txt' ) ).toString();
var REPL9 = readFileSync( resolve( __dirname, 'fixtures', 'repl9.txt' ) ).toString();
var REPL10 = readFileSync( resolve( __dirname, 'fixtures', 'repl10.txt' ) ).toString();
var REPL11 = readFileSync( resolve( __dirname, 'fixtures', 'repl11.txt' ) ).toString();
var REPL12 = readFileSync( resolve( __dirname, 'fixtures', 'repl12.txt' ) ).toString();


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof isValid, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided a valid `repl.txt`', function test( t ) {
	var bool;

	bool = isValid( REPL1 );

	t.strictEqual( bool, true, 'returns true' );
	t.strictEqual( isValid.errors, null, 'errors property is `null`' );
	t.end();
});

tape( 'the function returns `true` if provided a valid `repl.txt` (multiple documented functions)', function test( t ) {
	var bool;

	bool = isValid( REPL2 );

	t.strictEqual( bool, true, 'returns true' );
	t.strictEqual( isValid.errors, null, 'errors property is `null`' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (invalid section ordering)', function test( t ) {
	var bool;

	bool = isValid( REPL3 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (unknown section)', function test( t ) {
	var bool;

	bool = isValid( REPL4 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (line with too many characters)', function test( t ) {
	var bool;

	bool = isValid( REPL5 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (invalid position for "See Also" section when multiple functions are documented)', function test( t ) {
	var bool;

	bool = isValid( REPL6 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (invalid "See Also" section)', function test( t ) {
	var bool;

	bool = isValid( REPL7 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (invalid tag type)', function test( t ) {
	var bool;

	bool = isValid( REPL8 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `false` if provided an invalid `repl.txt` (invalid typed object)', function test( t ) {
	var bool;

	bool = isValid( REPL9 );

	t.strictEqual( bool, false, 'returns false' );
	t.strictEqual( isArray( isValid.errors ), true, 'errors property is an array' );
	t.end();
});

tape( 'the function returns `true` if provided a valid `repl.txt` (multi-line parameter descriptions)', function test( t ) {
	var bool;

	bool = isValid( REPL10 );

	t.strictEqual( bool, true, 'returns true' );
	t.strictEqual( isValid.errors, null, 'errors property is `null`' );
	t.end();
});

tape( 'the function returns `true` if provided a valid `repl.txt` (TODO comment)', function test( t ) {
	var bool;

	bool = isValid( REPL11 );

	t.strictEqual( bool, true, 'returns true' );
	t.strictEqual( isValid.errors, null, 'errors property is `null`' );
	t.end();
});

tape( 'the function returns `true` if provided a valid `repl.txt` (multi-line parameter descriptions', function test( t ) {
	var bool;

	bool = isValid( REPL12 );

	t.strictEqual( bool, true, 'returns true' );
	t.strictEqual( isValid.errors, null, 'errors property is `null`' );
	t.end();
});
