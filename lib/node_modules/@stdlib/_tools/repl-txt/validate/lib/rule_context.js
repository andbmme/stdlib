/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );


// FUNCTIONS //

/**
* Pushes a lint error to the current array of violations.
*
* @private
* @param {string} message - error message
* @param {Object} node - node for which to log error
*/
function report( message, node ) {
	this.api.report( this.id, this.severity, message, node );
}


// MAIN //

/**
* Creates a rule context object.
*
* @private
* @param {string} id - rule id
* @param {string} severity - rule severity (`error` or `warn`)
* @param {Object} api - lint API object
* @param {Array} options - rule options
* @returns {RuleContext} context for rule with the given id
*/
function RuleContext( id, severity, api, options ) {
	setReadOnly( this, 'id', id );
	setReadOnly( this, 'severity', severity );
	setReadOnly( this, 'api', api );
	setReadOnly( this, 'meta', api.meta );
	setReadOnly( this, 'options', options );
	return this;
}

setNonEnumerableReadOnly( RuleContext.prototype, 'report', report );


// EXPORTS //

module.exports = RuleContext;
