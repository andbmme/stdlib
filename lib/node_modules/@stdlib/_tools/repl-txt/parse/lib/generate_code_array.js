/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var replace = require( '@stdlib/string/replace' );
var trim = require( '@stdlib/string/trim' );


// VARIABLES //

var RE_PROMPT = /(?= {4}>)/;
var RE_CODE_OUTPUT_SEP = /\n {4}(?!\.\.\.)/;


// MAIN //

/**
* Extracts code chunks of `Examples` section.
*
* @private
* @param {*} str - contents of `Examples` section
* @returns {Array} array of code objects
*/
function generateCodeArray( str ) {
	var prompts;
	var output;
	var code;
	var arr;
	var out;
	var i;

	out = [];
	prompts = str.split( RE_PROMPT );
	for ( i = 1; i < prompts.length; i++ ) {
		arr = prompts[ i ].split( RE_CODE_OUTPUT_SEP );

		// Remove initial prompt:
		code = replace( arr[ 0 ], /^ {4}>/, '' );

		// Remove `...` in code blocks spanning multiple lines:
		code = replace( code, '\n    ...', '\n' );

		// Remove indentation:
		code = replace( code, '\n    ', '\n' );
		output = arr[ 1 ];
		if ( output ) {
			output = replace( output, /\/\/[^\n]*\n/g, '' );
			output = replace( output, /\/\/[^\n]*\n/g, '' );
		} else {
			output = '';
		}
		out.push({
			'code': trim( code ),
			'rawCode': arr[ 0 ],
			'output': trim( output )
		});
	}
	return out;
}


// EXPORTS //

module.exports = generateCodeArray;
