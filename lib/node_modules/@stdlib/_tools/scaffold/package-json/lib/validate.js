/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;


// VARIABLES //

var RE = /^@stdlib\/.+/;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.name] - package name
* @param {string} [options.desc] - package description
* @param {StringArray} [options.keywords] - package keywords
* @param {string} [options.cmd] - package command for use as a CLI tool
* @param {string} [options.browser] - browser entry point
* @returns {(Error|null)} error object or null
*
* @example
* var opts = {};
* var options = {
*     'name': '@stdlib/beep/boop'
* };
*
* var err = validate( opts, options );
* if ( err ) {
*    throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options +
			'`.' );
	}
	if ( hasOwnProp( options, 'name' ) ) {
		opts.name = options.name;
		if ( !isString( opts.name ) ) {
			return new TypeError( 'invalid option. `name` option must be a primitive string. Option: `' + opts.name + '`.' );
		}
		if ( !RE.test( opts.name ) ) {
			return new Error( 'invalid option. `name` option must begin with `@stdlib/`. Option: `'+ opts.name + '`.' );
		}
	}
	if ( hasOwnProp( options, 'desc' ) ) {
		opts.desc = options.desc;
		if ( !isString( opts.desc ) ) {
			return new TypeError( 'invalid option. `desc` option must be a primitive string. Option: `' + opts.desc + '`.' );
		}
	}
	if ( hasOwnProp( options, 'keywords' ) ) {
		opts.keywords = options.keywords;
		if ( !isStringArray( opts.keywords ) ) {
			return new TypeError( 'invalid option. `keywords` option must be a string array. Option: `' + opts.keywords + '`.' );
		}
	}
	if ( hasOwnProp( options, 'cmd' ) ) {
		opts.cmd = options.cmd;
		if ( !isString( opts.cmd ) ) {
			return new TypeError( 'invalid option. `cmd` option must be a primitive string. Option: `' + opts.cmd + '`.' );
		}
	}
	if ( hasOwnProp( options, 'browser' ) ) {
		opts.browser = options.browser;
		if ( !isString( opts.browser ) ) {
			return new TypeError( 'invalid option. `browser` option must be a primitive string. Option: `' + opts.browser + '`.' );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
