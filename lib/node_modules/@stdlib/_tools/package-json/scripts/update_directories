#!/usr/bin/env node
'use strict';

/*
* Update package `package.json` files by setting the `directories` field.
*
* This script is called with the following arguments:
*
* * *$1*: root search directory
*
* If not provided a root search directory, the root search directory is the current working directory.
*
* To enable verbose logging, set the `DEBUG` environment variable.
*
* ``` bash
* $ DEBUG=* update_directories .
* ```
*/

// MODULES //

var debug = require( 'debug' )( 'update-package-directories' );
var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var parseArgs = require( 'minimist' );
var cwd = require( '@stdlib/process/cwd' );
var exists = require( '@stdlib/fs/exists' ).sync;
var findPkgs = require( '@stdlib/_tools/pkgs/find' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var standardize = require( '@stdlib/_tools/package-json/standardize' );


// VARIABLES //

var DIR_KEYS = [
	'benchmark',
	'bin',
	'data',
	'doc',
	'example',
	'include',
	'lib',
	'man',
	'scripts',
	'src',
	'test'
];
var DIR_PATHS = [
	'benchmark',
	'bin',
	'data',
	'docs',
	'examples',
	'include',
	'lib',
	'man',
	'scripts',
	'src',
	'test'
];
var opts;
var args;
var dir;


// FUNCTIONS //

/**
* Updates package `package.json` files by setting the `directories` field.
*
* @private
* @param {string} dir - root search directory
*/
function main( dir ) {
	var fpath;
	var opts;
	var pkgs;
	var dir;
	var pkg;
	var i;
	var j;

	debug( 'Searching for packages in %s.', dir );
	opts = {
		'dir': dir,
		'pattern': '**/package.json'
	};
	pkgs = findPkgs( opts );
	debug( 'Found %d packages.', pkgs.length );

	for ( i = 0; i < pkgs.length; i++ ) {
		fpath = join( pkgs[ i ], 'package.json' );
		debug( 'Loading package file: %s (%d of %d).', fpath, i+1, pkgs.length );
		pkg = require( fpath ); // eslint-disable-line stdlib/no-dynamic-require

		if ( pkg.os ) {
			debug( 'Current directories: %s.', JSON.stringify( pkg.directories ) );
		}
		debug( 'Updating directories.' );
		pkg.directories = {};
		for ( j = 0; j < DIR_PATHS.length; j++ ) {
			dir = DIR_PATHS[ j ];
			if ( exists( join( pkgs[ i ], dir ) ) ) {
				pkg.directories[ DIR_KEYS[ j ] ] = './'+dir;
			}
		}

		debug( 'Standardizing package data.' );
		pkg = standardize( pkg );

		debug( 'Serializing package data.' );
		pkg = JSON.stringify( pkg, null, 2 ); // 2-space indentation

		debug( 'Writing package data to file.' );
		writeFile( fpath, pkg+'\n', {
			'encoding': 'utf8'
		});
	}
	debug( 'Finished updating all packages.' );
}


// MAIN //

// Parse command-line arguments:
opts = {};
args = parseArgs( process.argv.slice( 2 ), opts );

if ( args._[ 0 ] ) {
	dir = resolve( cwd(), args._[ 0 ] );
} else {
	dir = cwd();
}
main( dir );
