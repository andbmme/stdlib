/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var glob = require( 'glob' ).sync;
var logger = require( 'debug' );
var cwd = require( '@stdlib/process/cwd' );
var copy = require( '@stdlib/utils/copy' );
var linter = require( '@stdlib/_tools/lint/license-header-file-list' ).sync;
var DEFAULTS = require( './defaults.js' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'lint:license-header-glob:sync' );


// MAIN //

/**
* Synchronously lints license headers for a file glob.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for files
* @param {string} [options.pattern='**\/*'] - filename pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @param {(string|RegExp|Object)} [options.header] - license header to lint against
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} unexpected error
* @returns {(EmptyArray|ObjectArray)} lint errors
*
* @example
* var opts = {
*     'dir': __dirname
* };
*
* var errs = lint( opts );
* // returns [...]
*/
function lint( options ) {
	var names;
	var gopts;
	var opts;
	var errs;
	var err;
	var dir;

	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Options: %s', JSON.stringify( opts ) );
	if ( opts.dir ) {
		dir = resolve( cwd(), opts.dir );
	} else {
		dir = cwd();
	}
	debug( 'Directory: %s', dir );

	gopts = {
		'cwd': dir,
		'ignore': opts.ignore,
		'realpath': true, // return absolute file paths
		'nodir': true // do not match directories
	};
	debug( 'Glob options: %s', JSON.stringify( gopts ) );

	debug( 'Searching for files...' );
	names = glob( opts.pattern, gopts );

	debug( 'Found %d matching files.', names.length );
	if ( names.length === 0 ) {
		debug( 'No files to lint.' );
		return [];
	}
	debug( 'Linting files...' );
	errs = linter( names, opts.header );
	if ( errs instanceof Error ) {
		debug( 'Encountered an error when linting files. Error: %s', errs.message );
		throw errs;
	}
	debug( 'Found %d lint errors.', errs.length );
	return errs;
}


// EXPORTS //

module.exports = lint;
