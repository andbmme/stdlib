/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var lint = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a first argument which is either a string or Buffer', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lint( value, '// @license Apache-2.0' );
		};
	}
});

tape( 'the function throws an error if not provided a second argument which is either a string or regular expression', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lint( 'var x = 3.14', value );
		};
	}
});

tape( 'the function returns `null` if a file blob does not contain lint errors (string; string)', function test( t ) {
	var str;
	var err;
	var h;

	str = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = '@license Apache-2.0';

	err = lint( str, h );
	t.strictEqual( err, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns `null` if a file blob does not contain lint errors (string; regexp)', function test( t ) {
	var str;
	var err;
	var h;

	str = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.strictEqual( err, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns `null` if a file blob does not contain lint errors (file buffer; string)', function test( t ) {
	var str;
	var err;
	var h;

	str = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = string2buffer( str.join( '\n' ) );

	h = '@license Apache-2.0';

	err = lint( str, h );
	t.strictEqual( err, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns `null` if a file blob does not contain lint errors (file buffer; regexp)', function test( t ) {
	var str;
	var err;
	var h;

	str = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = string2buffer( str.join( '\n' ) );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.strictEqual( err, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns a lint error if a file blob does not contain a specified license header', function test( t ) {
	var expected;
	var str;
	var err;
	var h;

	expected = {
		'error': 'malformed or missing license header.'
	};

	str = [
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.deepEqual( err, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns a lint error if a file blob does not contain a specified license header (malformed)', function test( t ) {
	var expected;
	var str;
	var err;
	var h;

	expected = {
		'error': 'malformed or missing license header.'
	};

	str = [
		'// @licence Apache 2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.deepEqual( err, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns a lint error if a file blob contain more than 1 specified license header', function test( t ) {
	var expected;
	var str;
	var err;
	var h;

	expected = {
		'error': 'more than 1 license header.'
	};

	str = [
		'// @license Apache-2.0',
		'',
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.deepEqual( err, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns a lint error if a file blob contain more than 1 specified license header (global flag)', function test( t ) {
	var expected;
	var str;
	var err;
	var h;

	expected = {
		'error': 'more than 1 license header.'
	};

	str = [
		'// @license Apache-2.0',
		'',
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/g;

	err = lint( str, h );
	t.deepEqual( err, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns a lint error if a license header does not appear within the first 5 lines of a file blob', function test( t ) {
	var expected;
	var str;
	var err;
	var h;

	expected = {
		'error': 'license header should appear within the first 5 lines of a file. Starting line: 6.'
	};

	str = [
		'',
		'',
		'',
		'',
		'',
		'',
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	str = str.join( '\n' );

	h = /@license Apache-2\.0/;

	err = lint( str, h );
	t.deepEqual( err, expected, 'returns expected value' );
	t.end();
});
