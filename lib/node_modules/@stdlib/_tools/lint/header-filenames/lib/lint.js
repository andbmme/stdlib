/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var basename = require( 'path' ).basename; // TODO: use stdlib module
var objectKeys = require( '@stdlib/utils/keys' );
var extname = require( '@stdlib/utils/extname' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var indexOf = require( '@stdlib/utils/index-of' );
var C_HEADERS = require( './c_headers.json' );
var CPP_HEADERS = require( './cpp_headers.json' );


// MAIN //

/**
* Lints an array of filenames.
*
* @private
* @param {StringArray} arr - array of filenames
* @returns {(ObjectArray|EmptyArray)} array of lint errors
*/
function lint( arr ) {
	var headers;
	var fnames;
	var fname;
	var list;
	var exts;
	var ext;
	var tmp;
	var out;
	var i;
	var j;
	var k;

	headers = {};
	out = [];
	for ( i = 0; i < arr.length; i++ ) {
		fname = basename( arr[ i ] );
		ext = extname( fname );
		fname = fname.substring( 0, fname.length-ext.length );

		// Ensure a header basename does not match a C/C++ standard library header...
		if ( indexOf( C_HEADERS, fname ) !== -1 ) {
			out.push({
				'name': arr[ i ],
				'error': 'should not match a C standard library header.'
			});
		} else if ( indexOf( CPP_HEADERS, fname ) !== -1 ) {
			out.push({
				'name': arr[ i ],
				'error': 'should not match a C++ standard library header.'
			});
		}

		// Cache basenames...
		if ( !headers[ ext ] ) {
			headers[ ext ] = {};
		}
		if ( hasOwnProp( headers[ ext ], fname ) ) {
			headers[ ext ][ fname ].push( arr[ i ] );
		} else {
			headers[ ext ][ fname ] = [ arr[ i ] ];
		}
	}
	// For every basename found multiple times, log a lint error...
	exts = objectKeys( headers );
	for ( i = 0; i < exts.length; i++ ) {
		tmp = headers[ exts[ i ] ];
		fnames = objectKeys( tmp );
		for ( j = 0; j < fnames.length; j++ ) {
			list = tmp[ fnames[ j ] ];
			if ( list.length > 1 ) {
				for ( k = 0; k < list.length; k++ ) {
					out.push({
						'name': list[ k ],
						'error': 'duplicate header filename.'
					});
				}
			}
		}
	}
	return out;
}


// EXPORTS //

module.exports = lint;
