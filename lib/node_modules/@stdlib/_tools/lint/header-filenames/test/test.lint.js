/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var isArray = require( '@stdlib/assert/is-array' );
var isObjectArray = require( '@stdlib/assert/is-plain-object-array' );
var lint = require( './../lib/lint.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function enforces that all header base filenames differ from C standard library headers', function test( t ) {
	var values;
	var names;

	values = [
		'math.h',
		'./include/assert.h',
		'../../complex.h'
	];
	names = lint( values );

	t.equal( isObjectArray( names ), true, 'returns an object array' );
	t.equal( names.length, values.length, 'has expected length' );
	t.end();
});

tape( 'the function enforces that all header base filenames differ from C++ standard library headers', function test( t ) {
	var values;
	var names;

	values = [
		'cmath.h',
		'./include/stdlib.h',
		'../../algorithm.h'
	];
	names = lint( values );

	t.equal( isObjectArray( names ), true, 'returns an object array' );
	t.equal( names.length, values.length, 'has expected length' );
	t.end();
});

tape( 'the function enforces that all header base filenames are valid', function test( t ) {
	var values;
	var names;

	if ( IS_WINDOWS ) {
		values = [
			'./foo/beep.h',
			'C:\\bar\\include\\beep.h',
			'/a/b/c/boop.hpp',
			'boop.hpp'
		];
	} else {
		values = [
			'./foo/beep.h',
			'../../include/beep.h',
			'/a/b/c/boop.hpp',
			'boop.hpp'
		];
	}
	names = lint( values );

	t.equal( isObjectArray( names ), true, 'returns an object array' );
	t.equal( names.length, values.length, 'has expected length' );
	t.end();
});

tape( 'the function returns an empty array if all header base filenames are valid', function test( t ) {
	var values;
	var names;

	if ( IS_WINDOWS ) {
		values = [
			'./foo/beep.h',
			'C:\\bar\\include\\boop.h',
			'/a/b/c/beep.hpp',
			'boop.hpp'
		];
	} else {
		values = [
			'./foo/beep.h',
			'../../include/boop.h',
			'/a/b/c/beep.hpp',
			'boop.hpp'
		];
	}
	names = lint( values );

	t.equal( isArray( names ), true, 'returns an array' );
	t.equal( names.length, 0, 'returns an empty array' );
	t.end();
});
