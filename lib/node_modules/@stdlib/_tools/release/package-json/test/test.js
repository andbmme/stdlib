/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isString = require( '@stdlib/assert/is-string' );
var objectKeys = require( '@stdlib/utils/keys' );
var prepare = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof prepare, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided a first argument which is not a string primitive', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			prepare( value );
		};
	}
});

tape( 'the function throws an error if provided a first argument which is not an existing `@stdlib` package', function test( t ) {
	var values;
	var i;

	values = [
		'@stdlib/assert/beep',
		'@stdlib/assert/memoize',
		'@stdlib/asserts/is-boolean'
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			prepare( value );
		};
	}
});

tape( 'the function returns an updated `package.json` object for individual package release', function test( t ) {
	var deps;
	var out;

	out = prepare( '@stdlib/plot/ctor' );
	t.strictEqual( out.name, '@stdlib/plot-ctor', 'has updated name' );
	t.strictEqual( out.version !== '0.0.0', true, 'has updated version' );
	deps = objectKeys( out.dependencies );
	t.strictEqual( deps.length > 0, true, 'includes dependencies' );

	t.end();
});

tape( 'the function returns an updated `package.json` object for individual package release (`devDependencies` option)', function test( t ) {
	var devDep;
	var deps;
	var out;

	devDep = 'tape';
	out = prepare( '@stdlib/plot/ctor', {
		'devDependencies': [ devDep ]
	});
	t.strictEqual( out.name, '@stdlib/plot-ctor', 'has updated name' );
	t.strictEqual( out.version !== '0.0.0', true, 'has updated version' );
	deps = objectKeys( out.dependencies );
	t.strictEqual( deps.length > 0, true, 'includes dependencies' );

	t.strictEqual( isString( out.devDependencies[ devDep ] ), true, 'includes supplied development dependencies' );

	t.end();
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			prepare( '@stdlib/plot/ctor', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		10,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 1, 2, 3 ],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'devDependencies': value
			};
			prepare( '@stdlib/plot/ctor', opts );
		};
	}
});
