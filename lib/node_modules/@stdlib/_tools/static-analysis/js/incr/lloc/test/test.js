/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var objectKeys = require( '@stdlib/utils/keys' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var incrlloc = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof incrlloc, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a function', function test( t ) {
	var f = incrlloc();
	t.strictEqual( typeof f, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function which throws an error if not provided either a string or Buffer', function test( t ) {
	var values;
	var f;
	var i;

	f = incrlloc();

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			f( value );
		};
	}
});

tape( 'the function returns a function which incrementally calculates a logical lines of code (LLOC) statistical summary', function test( t ) {
	var f = incrlloc();
	var o;

	o = f( 'var x = 5;' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'y = foo( x );' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'if ( x < y ) {\n\tconsole.log( "x < y" );\n} else {\n\tconsole.log( "x >= y " );\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'function foo( x ) {\n\treturn bar;\n\n\tfunction bar( y ) {\n\t\tvar z = 5 * y;\n\t\treturn z;\n\t}\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'for ( i = 0; i < 10; i++ ) {\n\tconsole.log( i );\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'i = 0;\nwhile ( i < 10 ) {\n\tconsole.log( i );\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'var f = function() {\n\treturn "beep";\n};\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'switch ( i ) {\ncase 0:\n\tbreak;\ncase 1:\n\tbreak;\ndefault:\n\tbreak;\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'var arr = [ 1, 2, 3 ];\nfor ( i in arr ) {\n\tif ( hasOwnProp( arr, i ) ) {\n\t\tconsole.log( i );\n\t}\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'var arr = [ 1, 2, 3 ];\nfor ( v of arr ) {\n\tconsole.log( v );\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'o = {\n\t"x": 1,\n\t"y": 2\n};\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'arr = [ 1, 2, 3 ];' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'i += 1;\ni += 2;\ni *= 3;\ni /= 4;\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'x = 5, y = 10;' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'i = 0;\ndo {\n\ti += 1;\n} while ( i < 10 );\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'z = ( x < 10 ) ? -y : y;' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( '// this is a comment' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( '/* this is a comment */' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( '/**\n* this is a comment.\n*/\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'f = new Foo();' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'var self = this;' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'try {\n\tthrow new Error( "BEEP!" );\n} catch ( err ) {\n\tthrow err;\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	o = f( 'function* gen() {\n\tyield 5;\n}\n' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	t.end();
});

tape( 'the function returns a function which returns the accumulated summary when invoked without arguments', function test( t ) {
	var f = incrlloc();
	var o;

	o = f();
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length, 0, 'has no keys' );

	f( 'var x = 5;' );
	f( 'y = foo( x );' );
	f( 'if ( x < y ) {\n\tconsole.log( "x < y" );\n}\n' );

	o = f();
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has keys' );

	t.end();
});
