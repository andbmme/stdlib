/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var objectKeys = require( '@stdlib/utils/keys' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var isArray = require( '@stdlib/assert/is-array' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isPlainObjectArray = require( '@stdlib/assert/is-plain-object-array' );
var analyze = require( './../lib/sync.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'cumulative': value
			};
			analyze( opts );
		};
	}
});

tape( 'the function returns an error if an error is encountered when analyzing files', function test( t ) {
	var analyze;
	var opts;
	var err;

	analyze = proxyquire( './../lib/sync.js', {
		'@stdlib/_tools/static-analysis/js/summarize-file-list': {
			'sync': mock
		}
	});
	opts = {
		'dir': __dirname
	};
	err = analyze( opts );

	t.strictEqual( instanceOf( err, Error ), true, 'returns an error' );
	t.end();

	function mock() {
		return new Error( 'beep' );
	}
});

tape( 'if unable to resolve any files, the function returns `null` for analysis results', function test( t ) {
	var analyze;
	var out;

	analyze = proxyquire( './../lib/sync.js', {
		'glob': {
			'sync': glob
		}
	});
	out = analyze();

	t.strictEqual( out, null, 'returns expected value' );
	t.end();

	function glob() {
		return [];
	}
});

tape( 'if unable to resolve any files, the function returns `null` for analysis results (options)', function test( t ) {
	var opts;
	var out;

	opts = {
		'dir': join( __dirname, 'dkafadjlfkadsjfljsdflalkdfa' ) // non-existent directory
	};
	out = analyze( opts );

	t.strictEqual( out, null, 'returns expected value' );
	t.end();
});

tape( 'if unable to resolve any files and the `cumulative` option is `true`, the function returns `null` for analysis results', function test( t ) {
	var opts;
	var out;

	opts = {
		'cumulative': true,
		'dir': join( __dirname, 'dkafadjlfkadsjfljsdflalkdfa' ) // non-existent directory
	};
	out = analyze( opts );

	t.strictEqual( out, null, 'returns expected value' );
	t.end();
});

tape( 'if unable to resolve any files and the `cumulative` option is `false`, the function returns an empty array for analysis results', function test( t ) {
	var opts;
	var out;

	opts = {
		'cumulative': false,
		'dir': join( __dirname, 'dkafadjlfkadsjfljsdflalkdfa' ) // non-existent directory
	};
	out = analyze( opts );

	t.strictEqual( isArray( out ), true, 'returns an array' );
	t.strictEqual( out.length, 0, 'returns an empty array' );
	t.end();
});

tape( 'by default, the function analyzes a glob and returns a cumulative static summary', function test( t ) {
	var opts;
	var o;

	opts = {
		'dir': __dirname
	};
	o = analyze( opts );

	t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has key-value pairs' );
	t.end();
});

tape( 'if the `cumulative` option is `true`, the function analyzes a glob and returns a cumulative static summary', function test( t ) {
	var opts;
	var o;

	opts = {
		'cumulative': true,
		'dir': __dirname
	};
	o = analyze( opts );

	t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has key-value pairs' );
	t.end();
});

tape( 'if the `cumulative` option is `false`, the function analyzes a glob and returns an array of program summaries', function test( t ) {
	var opts;
	var i;
	var o;

	opts = {
		'cumulative': false,
		'dir': __dirname
	};
	o = analyze( opts );

	t.strictEqual( isPlainObjectArray( o ), true, 'returns a plain object array' );
	for ( i = 0; i < o.length; i++ ) {
		t.strictEqual( objectKeys( o[ i ] ).length > 0, true, 'has key-value pairs' );
	}
	t.end();
});
