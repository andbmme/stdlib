/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var objectKeys = require( '@stdlib/utils/keys' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' ).primitives;
var analyze = require( './../lib/sync.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a list of files', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 5 ],
		[ '5', null ],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value );
		};
	}
});

tape( 'the function throws an error if not provided a list of files (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		[ 5 ],
		[ '5', null ],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value, {} );
		};
	}
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( [ 'a', 'b' ], value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'cumulative': value
			};
			analyze( [ 'a', 'b' ], opts );
		};
	}
});

tape( 'the function returns an error if an error is encountered when reading files', function test( t ) {
	var doesNotExist = 'akfjdalfkjsdlfjdasfjadsfjdslfjldajfasdjfasjfjasdlfjasdlfj.js';
	var err = analyze( [ doesNotExist ] );

	t.strictEqual( instanceOf( err, Error ), true, 'returns an error' );
	t.end();
});

tape( 'the function returns an error if an error is encountered when reading files (options)', function test( t ) {
	var doesNotExist = 'akfjdalfkjsdlfjdasfjadsfjdslfjldajfasdjfasjfjasdlfjasdlfj.js';
	var err = analyze( [ doesNotExist ], {} );

	t.strictEqual( instanceOf( err, Error ), true, 'returns an error' );
	t.end();
});

tape( 'by default, the function analyzes input files and returns a cumulative SLOC summary', function test( t ) {
	var files;
	var o;

	files = [ __filename, __filename ];
	o = analyze( files );

	t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has key-value pairs' );
	t.end();
});

tape( 'if the `cumulative` option is `true`, the function analyzes input files and returns a cumulative SLOC summary', function test( t ) {
	var files;
	var opts;
	var o;

	files = [ __filename, __filename ];
	opts = {
		'cumulative': true
	};
	o = analyze( files, opts );

	t.strictEqual( isPlainObject( o ), true, 'returns a plain object' );
	t.strictEqual( objectKeys( o ).length > 0, true, 'has key-value pairs' );
	t.end();
});

tape( 'if the `cumulative` option is `false`, the function analyzes input files and returns an array of SLOC results', function test( t ) {
	var files;
	var opts;
	var o;

	files = [ __filename, __filename ];
	opts = {
		'cumulative': false
	};
	o = analyze( files, opts );

	t.strictEqual( isNonNegativeIntegerArray( o ), true, 'returns an array of nonnegative integers' );
	t.end();
});
