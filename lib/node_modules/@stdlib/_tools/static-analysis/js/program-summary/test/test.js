/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var analyze = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string or a Buffer', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			analyze( value );
		};
	}
});

tape( 'the function returns a object (string)', function test( t ) {
	var o = analyze( 'var beep = "boop";' );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns a object (Buffer)', function test( t ) {
	var o = analyze( string2buffer( 'var beep = "boop";' ) );
	t.strictEqual( isPlainObject( o ), true, 'returns an object' );
	t.end();
});

tape( 'the function analyzes a JavaScript program (block comment)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'block_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/block_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (block comment; single line)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'single_line_block_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/single_line_block_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (block comment; JSDoc)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'jsdoc_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/jsdoc_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (block comment; nested JSDoc)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_jsdoc_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_jsdoc_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (line comment)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'line_comment.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/line_comment.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (if)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'if_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/if_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (if shorthand)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'if_statement_shorthand.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/if_statement_shorthand.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (if-else)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'if_else.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/if_else.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (if-else-if)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'if_else_if.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/if_else_if.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (nested if)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_if_statements.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_if_statements.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (ternary)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'conditional_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/conditional_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (switch)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'switch_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/switch_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (while)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'while_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/while_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (doWhile)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'do_while_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/do_while_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (for)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'for_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/for_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (for...in)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'for_in_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/for_in_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (guarded for...in)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'guarded_for_in_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/guarded_for_in_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (for...of)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'for_of_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/for_of_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (throw)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'throw_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/throw_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (try)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'try_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/try_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (var)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'variable_declaration.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/variable_declaration.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (const)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'variable_declaration_const.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/variable_declaration_const.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (let)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'variable_declaration_let.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/variable_declaration_let.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (variable declaration medley)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'variable_declaration_medley.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/variable_declaration_medley.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (function)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'function_declaration.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/function_declaration.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (nested functions)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_function_declarations.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_function_declarations.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (expression statement; multi-line object)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'multiline_object.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/multiline_object.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (empty function)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'empty_function_declaration.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/empty_function_declaration.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (function expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'function_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/function_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (nested function expressions)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_function_expressions.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_function_expressions.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (empty function expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'empty_function_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/empty_function_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (anonymous function)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'anonymous_function.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/anonymous_function.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (empty anonymous function)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'empty_anonymous_function.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/empty_anonymous_function.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (iife)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'iife.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/iife.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (callback function expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'callback_function_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/callback_function_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (anonymous callback function expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'anonymous_callback_function_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/anonymous_callback_function_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (literals)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'literals.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/literals.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (array expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'array_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/array_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (assignment expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'assignment_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/assignment_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (binary expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'binary_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/binary_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (call expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'call_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/call_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (logical expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'logical_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/logical_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (member expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'member_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/member_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (new expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'new_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/new_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (object expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'object_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/object_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (sequence expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'sequence_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/sequence_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (this expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'this_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/this_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (unary expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'unary_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/unary_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (update expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'update_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/update_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (yield expression)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'yield_expression.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/yield_expression.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (break statement)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'break_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/break_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (nested break statement)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_break_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_break_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (continue statement)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'continue_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/continue_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (nested continue statement)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', 'nested_continue_statement.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/nested_continue_statement.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (medley)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', '1.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/1.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});

tape( 'the function analyzes a JavaScript program (sample file)', opts, function test( t ) {
	var expected;
	var fpath;
	var prog;
	var o;

	fpath = join( __dirname, 'fixtures', '2.js.txt' );
	prog = readFileSync( fpath );

	expected = require( './fixtures/2.json' );

	o = analyze( prog );
	t.deepEqual( o, expected, 'returns expected value' );

	t.end();
});
