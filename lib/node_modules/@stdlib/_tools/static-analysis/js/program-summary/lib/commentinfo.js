/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the comment metrics for an AST node.
*
* @private
* @param {Object} results - results object
* @param {ObjectArray} comments - comments data
* @param {NonNegativeInteger} start - character offset for AST node start
* @param {NonNegativeInteger} end - character offset for AST node end
*/
function commentinfo( results, comments, start, end ) {
	var inline;
	var obj;
	var d;
	var c;
	var i;

	// Extract comment data "belonging" to an AST node:
	for ( i = 0; i < comments.length; i++ ) {
		c = comments[ i ];

		// If we have found a comment occurring after the last character belonging to an AST node, we are finished...
		if ( c.start >= end ) {
			break;
		}
		// Ignore any comments occurring before an AST node begins...
		if ( c.start < start ) {
			continue;
		}
		// We have found a relevant comment...
		d = c.summary;
		inline = ( d.inline ) ? 1 : 0;

		results.comments[ d.type ].count += 1;
		results.comments[ d.type ].length += d.length;
		results.comments[ d.type ].whitespace += d.whitespace;
		results.comments[ d.type ].lines += d.lines;
		results.comments[ d.type ].inline += inline;

		if ( d.jsdoc ) {
			results.comments.jsdoc.count += 1;
			results.comments.jsdoc.length += d.length;
			results.comments.jsdoc.whitespace += d.whitespace;
			results.comments.jsdoc.lines += d.lines;
			results.comments.jsdoc.inline += inline;
		}
		// Update total comment totals:
		results.comments.count += 1;
		results.comments.length += d.length;
		results.comments.whitespace += d.whitespace;
		results.comments.lines += d.lines;
		results.comments.inline += inline;

		// Append a comment summary:
		obj = {
			'type': d.type,
			'length': d.length,
			'whitespace': d.whitespace,
			'lines': d.lines,
			'inline': d.inline,
			'jsdoc': d.jsdoc
		};
		results.comments.data.push( obj );
	}
}


// EXPORTS //

module.exports = commentinfo;
