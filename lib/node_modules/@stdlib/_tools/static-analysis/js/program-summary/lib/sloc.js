/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var TABLE = require( './sloc_table.js' );


// MAIN //

/**
* Calculates the number of source lines of code.
*
* @private
* @param {Array<Node>} nodes - list of nodes
* @returns {NonNegativeInteger} number of source lines of code
*/
function sloc( nodes ) {
	var count;
	var node;
	var type;
	var inc;
	var i;

	count = 0;
	for ( i = 0; i < nodes.length; i++ ) {
		node = nodes[ i ];
		type = node.type;
		inc = TABLE[ type ];
		if ( inc === void 0 ) {
			continue;
		}
		// Avoid double counting for `if/else if` and account for `else` blocks...
		if ( type === 'IfStatement' && node.alternate ) {
			if ( node.alternate.type === 'BlockStatement' ) {
				inc += 1; // else
			} else {
				inc -= 1; // if/else if
			}
		}
		// Account for `case` nodes...
		else if ( type === 'SwitchStatement' && node.cases ) {
			inc += node.cases.length * TABLE[ 'SwitchCase' ];
		}
		// Account for an empty function declaration...
		else if (
			type === 'FunctionDeclaration' &&
			node.body.end - node.body.start <= 2 // i.e., function body: {}
		) {
			inc -= 1;
		}
		count += inc;
	}
	return count;
}


// EXPORTS //

module.exports = sloc;
