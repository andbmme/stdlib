/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var type2key = require( './type2key.js' );
var expression2key = require( './expression2key.js' );
var statements = require( './statements.json' );


// MAIN //

/**
* Tabulates the number of select AST node types.
*
* @private
* @param {Object} results - output results object
* @param {Array<Node>} nodes - AST nodes
* @returns {Object} results object
*/
function tabulate( results, nodes ) {
	var node;
	var type;
	var key;
	var i;

	for ( i = 0; i < nodes.length; i++ ) {
		node = nodes[ i ];
		type = node.type;
		key = type2key( type );
		if ( key ) {
			if ( typeof results[ key ] === 'object' ) {
				results[ key ].count += 1;
			} else {
				results[ key ] += 1;
			}
		}
		if ( contains( statements, type ) ) {
			results.statements += 1;
		}
		if ( type === 'SwitchStatement' ) {
			results.branches += node.cases.length;
		} else if (
			type === 'IfStatement' ||
			type === 'ConditionalExpression' || // ternary condition
			type === 'TryStatement'
		) {
			results.branches += 2; // if/else, try/catch
		}
		key = expression2key( type );
		if ( key ) {
			results.expressions[ key ] += 1;
		}
	}
	return results;
}


// EXPORTS //

module.exports = tabulate;
