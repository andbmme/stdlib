/* key: <sloc> (<lloc>) */
'use strict'; // 1 (1)

var hasOwnProp = require( '@stdlib/assert/has-own-property' ); // 2 (2)

/**
* Adds two numbers.
*
* @private
* @param {number} x - first number
* @param {number} y - second number
* @returns {number} sum
*/
function add( x, y ) { // 3 (3)
	return x + y; // 4 (4)
} // 5

// Add numbers without assignment:
add( 3, 5 ); // 6 (5)

// Add numbers with assignment:
var z = add( 3, 5 ); // 7 (6)

var i; // 8 (7)
for ( i = 0; i < 10; i++ ) { // 9 (8)
	z = add( 0, i ); // 10 (9)
	continue; // 11 (10)
} // 12

i = 0; // 13 (11)
while ( i < 10 ) { // 14 (12)
	z = add( 0, i ); // 15 (13)
	i += 1; // 16 (14)
} // 17

i = 0; // 18 (15)
do { // 19 (16)
	z = add( 0, i ); // 20 (17)
	i += 1; // 21 (18)
} while ( i < 10 ); // 22

// Insert a random check:
if ( i > 20 ) { // 23 (19)
	throw new Error( 'unexpected' ); // 24 (20)
} // 25

switch ( i ) { // 26 (21)
case 0: // 27
	i += 1; // 28 (22)
	break; // 29 (23)
case 1: // 30
	i += 2; // 31 (24)
	break; // 32 (25)
default: // 33
	i += 3; // 34 (26)
	break; // 35 (27)
} // 36

try { // 37 (28)
	i += 4; // 38 (29)
} catch ( err ) { // 39
	throw err; // 40 (30)
} // 41

z = ( i < 10 ) ? -1 : 1; // 42 (31)

var arr = [ 1, 2, 3 ]; // 43 (32)
var idx; // 44 (33)
for ( idx in arr ) { // 45 (34)
	// Make sure we guard against prototype properties...
	if ( hasOwnProp( arr, idx ) ) { // 46 (35)
		z *= arr[ idx ]; // 47 (36)
	} // 48
} // 49

// Insert another random check:
if ( z < 0 ) { // 50 (37)
	throw new Error( 'unexpected' ); // 51 (38)
} else if ( z > 100 ) { // 52 (39)
	throw new Error( 'unexpected' ); // 53 (40)
} else if ( z !== z ) { // 54 (41)
	throw new Error( 'unexpected' ); // 55 (42)
} else { // 56
	z = add( z, z ); // 57 (43)
} // 58
