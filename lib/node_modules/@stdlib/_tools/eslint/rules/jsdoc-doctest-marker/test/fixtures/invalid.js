/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} x*x',
		'* @example',
		'* var y = square( 3.0 );',
		'* // returns 9.0',
		'*',
		'* console.log( square( 2.0 ) );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Only include `// returns` after variable declarations or assignment expressions (use `=>` after `console.log`)',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., => 0.5363925252089496',
		'*/',
		'function rand( x ) {',
		'  return Math.random();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} x*x',
		'* @example',
		'* var y = square( 3.0 );',
		'* // returns 9.0',
		'*',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an orphaned return annotation without a preceding node',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Tests if a value is a `SharedArrayBuffer`.',
		'*',
		'* @param {*} value - value to test',
		'* @returns {boolean} boolean indicating whether value is a `SharedArrayBuffer`',
		'*',
		'* @example',
		'* var SharedArrayBuffer = require( \'@stdlib/array/shared-buffer\' );',
		'*',
		'* try {',
		'*     var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) );',
		'*     // => true',
		'* } catch ( err ) {',
		'*     console.log( \'Environment does not support SharedArrayBuffers.\' );',
		'* }',
		'*',
		'* @example',
		'* var bool = isSharedArrayBuffer( [] );',
		'* // returns false',
		'*/',
		'function isSharedArrayBuffer( value ) {',
		'  return (',
		'    ( hasSharedArrayBuffer && value instanceof SharedArrayBuffer ) || // eslint-disable-line stdlib/require-globals, no-undef',
		'    nativeClass( value ) === \'[object SharedArrayBuffer]\'',
		'  );',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
