/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var remark = require( 'remark' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true
};
var rule;


// FUNCTIONS //

/**
* Rule for linting JSDoc descriptions using remark.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var options;
	var source;
	var lint;
	var opts;

	options = context.options[ 0 ];
	opts = {};
	if ( hasOwnProp( options, 'config' ) ) {
		opts.config = options.config;
	} else {
		opts.config = {};
	}
	lint = remark().use( opts.config ).processSync;
	source = context.getSourceCode();

	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Lints JSDoc descriptions.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var jsdoc;
		var vfile;
		var ast;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			if ( ast.description ) {
				vfile = lint( ast.description );
				if ( vfile.messages.length ) {
					reportErrors( vfile.messages, jsdoc.loc );
				}
			}
		}
	}

	/**
	* Reports Markdown lint errors.
	*
	* @private
	* @param {ObjectArray} errors - Markdown lint errors
	* @param {Object} loc - JSDoc location information
	*/
	function reportErrors( errors, loc ) {
		var err;
		var msg;
		var i;
		for ( i = 0; i < errors.length; i++ ) {
			err = errors[ i ];
			msg = err.name;
			msg += '  ';
			if ( err.fatal ) {
				msg += 'error';
				msg += '    ';
			} else {
				msg += 'warning';
				msg += '  ';
			}
			msg += err.message;
			msg += '  ';
			msg += err.ruleId;
			msg += '  ';
			msg += err.source;
			report( msg, loc );
		}
	}

	/**
	* Reports an error message.
	*
	* @private
	* @param {string} msg - error message
	* @param {Object} loc - AST node location
	*/
	function report( msg, loc ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'lint JSDoc descriptions using remark'
		},
		'schema': [
			{
				'type': 'object',
				'properties': {
					'config': {
						'type': 'object'
					}
				},
				'additionalProperties': false
			}
		]
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
