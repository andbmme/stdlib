/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUppercase = require( '@stdlib/assert/is-uppercase' );
var endsWith = require( '@stdlib/string/ends-with' );
var contains = require( '@stdlib/assert/contains' );


// VARIABLES //

var HEADERS = [
	'MODULES',
	'VARIABLES',
	'FUNCTIONS',
	'METHODS',
	'MAIN',
	'EXPORTS',
	'NOTES',
	'FIXTURES',
	'TESTS'
];
var REGEXP_HEADER = /^( )*[A-Z][A-Z0-9 ]+( )*(\/\/)?$/;
var rule;


// FUNCTIONS //

/**
* Checks whether a comment is a section header.
*
* @private
* @param {Object} comment - comment object
* @returns {boolean} boolean indicating if a line comment denotes a section header
*/
function isSectionHeader( comment ) {
	var val;
	if (
		comment.type !== 'Line' ||
		comment.loc.start.column !== 0
	) {
		return false;
	}
	val = comment.value;
	return REGEXP_HEADER.test( val ) || endsWith( val, '//' );
}

/**
* Rule for validating that section header comments are properly formatted.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {string} msg - message to report
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( msg, loc ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	}

	/**
	* Checks section header comments.
	*
	* @private
	*/
	function validate() {
		var comments;
		var current;
		var i;

		comments = source.getAllComments();
		for ( i = 0; i < comments.length; i++ ) {
			current = comments[ i ];
			if ( isSectionHeader( current ) ) {
				validateHeader( current );
			}
		}
	}

	/**
	* Checks whether a section header comment is properly formatted.
	*
	* @private
	* @param {string} comment - literal value of comment
	* @returns {void}
	*/
	function validateHeader( comment ) {
		var val = comment.value;

		if ( isUppercase( val ) ) {
			if ( endsWith( val, '//' ) ) {
				if ( val[ 0 ] !== ' ' || val[ val.length-3 ] !== ' ' ) {
					return report( 'Header title must be padded by exactly one space after and before comment slashes', comment.loc );
				}
				val = val.substring( 1, val.length-3 );
				if ( contains( val, ' ' ) ) {
					return report( 'Header title must be padded by exactly one space after and before comment slashes and should not contain any other spaces', comment.loc );
				}
				if ( !contains( HEADERS, val ) ) {
					report( 'Invalid header comment type (must be any one of '+HEADERS.join( ', ' )+'). Value: "'+val+'"', comment.loc );
				}
			} else {
				report( 'Header comment must end with two trailing slashes', comment.loc );
			}
		} else {
			report( 'Header comment must be in capital letters', comment.loc );
		}
	}

	return {
		'Program': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce formatting of header comments'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
