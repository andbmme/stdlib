/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var endsWith = require( '@stdlib/string/ends-with' );
var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var rule;
var RE_TAG_SPACES = /\*(\s*)@(returns|param|throws|type)(\s*){([^}]*)}(\s*)/;
var RE_SIMPLE_TAGS = /\*(\s*)@(see|private|module|namespace|name|memberof|readonly|constructor|constant|function|default|example)(\s*)/;


// FUNCTIONS //

/**
* Rule for validating that JSDoc tags adhere to a padding style.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source;

	source = context.getSourceCode();
	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Checks whether JSDoc tags adhere to a padding style.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var lineNumber;
		var matches;
		var match;
		var lines;
		var jsdoc;
		var line;
		var loc;
		var tag;
		var i;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			lines = jsdoc.value.split( '\n' );
			for ( i = 0; i < lines.length; i++ ) {
				line = lines[ i ];
				matches = line.match( RE_TAG_SPACES );
				if ( matches ) {
					lineNumber = node.loc.start.line - lines.length + i;
					loc = {
						'start': {
							'line': lineNumber,
							'column': 0
						},
						'end': {
							'line': lineNumber,
							'column': line.length
						}
					};
					tag = matches[ 2 ];
					match = matches[ 1 ];
					if ( match.length < 1 ) {
						report( '"@'+tag+'" tag should be padded by a space at the beginning', loc );
					} else if ( match.length > 1 ) {
						report( '"@'+tag+'" tag should be padded by only one space at the beginning', loc );
					}
					match = matches[ 3 ];
					if ( match.length < 1 ) {
						report( '"@'+tag+'" tag should be separated from opening curly brace by one space', loc );
					} else if ( match.length > 1 ) {
						report( '"@'+tag+'" tag should be separated from opening curly brace by only one space', loc );
					}
					match = matches[ 4 ];
					if ( contains( match, ' ' ) && tag !== 'see' ) {
						report( 'there should be no spaces inside of JSDoc type definitions', loc );
					}
					if ( !endsWith( line, '}' ) ) {
						match = matches[ 5 ];
						if ( match.length < 1 ) {
							report( 'there should be a space after the closing curly brace', loc );
						} else if ( match.length > 1 ) {
							report( 'there should be only one space after the closing curly brace', loc );
						}
					}
				}
				matches = line.match( RE_SIMPLE_TAGS );
				if ( matches ) {
					lineNumber = node.loc.start.line - lines.length + i;
					loc = {
						'start': {
							'line': lineNumber,
							'column': 0
						},
						'end': {
							'line': lineNumber,
							'column': line.length
						}
					};
					match = matches[ 1 ];
					tag = matches[ 2 ];
					if ( match.length < 1 ) {
						report( '"@'+tag+'" tag should be padded by a space at the beginning', loc );
					} else if ( match.length > 1 ) {
						report( '"@'+tag+'" tag should be padded by only one space at the beginning', loc );
					}
					match = matches[ 3 ];
					if ( match && match.length > 1 ) {
						report( '"@'+tag+'" tag should be padded by only one space at the end', loc );
					}
				}
			}
		}
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {string} msg - error message
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( msg, loc ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce a padding style for JSDoc tags'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
