/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var anyBy = require( '@stdlib/utils/any-by' );
var contains = require( '@stdlib/assert/contains' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isUppercase = require( '@stdlib/assert/is-uppercase' );
var namespaces = require( '@stdlib/_tools/pkgs/namespaces' ).sync;


// VARIABLES //

var rule;
var opts = {
	'pattern': '**/constants/**/package.json',
	'ignore': [ '@stdlib/constants/package.json' ]
};
var ns = namespaces( opts );


// FUNCTIONS //

/**
* Rule for validating that required `stdlib` constants have uppercase variable names.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'stdlib constants must be uppercase'
		});
	}

	/**
	* Checks that a required `stdlib` constant is uppercase.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var callExpression;
		var requirePath;
		var declaration;
		var name;

		declaration = node.declarations[ 0 ];
		if ( declaration.type === 'VariableDeclarator' ) {
			callExpression = declaration.init;
			if (
				callExpression &&
				callExpression.callee &&
				callExpression.callee.name === 'require'
			) {
				name = declaration.id.name;
				requirePath = callExpression.arguments[ 0 ].value;
				if (
					isString( requirePath ) &&
					anyBy( ns, checkNamespace ) &&
					!isUppercase( name )
				) {
					report( node );
				}
			}
		}

		/**
		* Checks whether the require path corresponds to a package belonging to a certain namespace.
		*
		* @private
		* @param {string} ns - namespace path
		* @returns {boolean} boolean indicating whether `requirePath` belongs to the given namespace
		*/
		function checkNamespace( ns ) {
			return contains( requirePath, ns+'/' );
		}
	}

	return {
		'VariableDeclaration': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that required `stdlib` constants have uppercase variable names'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
