/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Checks whether a node is a variable or function expression.
*
* @private
* @param {ASTNode} node - node to examine
* @returns {boolean} boolean indicating whether node represents a variable or function expression
*/
function isVariableOrFunction( node ) {
	if ( !node ) {
		return false;
	}
	if ( node.type === 'MemberExpression' ) {
		return !node.computed;
	}
	return (
		node.type === 'Literal' ||
		node.type === 'Identifier' ||
		node.type === 'FunctionExpression'
	);
}

/**
* Checks whether a node is an object expression for which no properties have values that are the result of a function call.
*
* @private
* @param {ASTNode} node - node to examine
* @returns {boolean} boolean indicating whether an object property is the result of a function call
*/
function isStaticObject( node ) {
	var prop;
	var i;
	if ( !node ) {
		return false;
	}
	if ( node.type !== 'ObjectExpression' ) {
		return false;
	}
	for ( i = 0; i < node.properties.length; i++ ) {
		prop = node.properties[ i ];
		if ( prop.type === 'CallExpression' ) {
			return false;
		}
		if (
			prop.type === 'ObjectExpression' &&
			!isStaticObject( prop )
		) {
			return false;
		}
	}
	return true;
}

/**
* Checks whether a node represents an assignment to `module.exports`.
*
* @private
* @param {ASTNode} node - node to examine
* @returns {boolean} boolean indicating whether node represents a `module.exports` assignment
*/
function isExportStatement( node ) {
	if (
		node.left.type === 'MemberExpression'
	) {
		if (
			node.left.object.name === 'module' &&
			node.left.property.name === 'exports'
		) {
			return true;
		}
		if ( node.left.object.name === 'exports' ) {
			return true;
		}
	}
	return false;
}

/**
* Rule for validating that only statically analyzable values are exported.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'Only variables, literals, and functions should be exported'
		});
	}

	/**
	* Checks whether only variables and functions are assigned to `module.exports`.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		if ( isExportStatement( node ) ) {
			if (
				!isVariableOrFunction( node.right ) &&
				!isStaticObject( node.right )
			) {
				report( node );
			}
		}
	}

	/**
	* Checks whether only variables and functions are assigned to a default export declaration.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validateDefaultExport( node ) {
		if (
			!isVariableOrFunction( node.declaration ) &&
			!isStaticObject( node.declaration )
		) {
			report( node );
		}
	}

	return {
		'AssignmentExpression': validate,
		'ExportDefaultDeclaration': validateDefaultExport
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that only statically analyzable values are exported'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
