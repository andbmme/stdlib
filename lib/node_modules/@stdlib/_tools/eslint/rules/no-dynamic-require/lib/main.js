/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Checks whether an input argument is a string literal.
*
* @private
* @param {Object} arg - input argument
* @returns {boolean} boolean indicating whether argument is a string literal
*/
function isLiteral( arg ) {
	return arg.type === 'Literal';
}

/**
* Rule for validating that `require()` calls have only string literals as arguments.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'require() calls should only use string literals'
		});
	}

	/**
	* Checks whether require path is a string literal.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		if (
			node.callee.name === 'require' &&
			!isLiteral( node.arguments[ 0 ] )
		) {
			report( node );
		}
	}

	return {
		'CallExpression': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that require() calls have only string literals as arguments'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
