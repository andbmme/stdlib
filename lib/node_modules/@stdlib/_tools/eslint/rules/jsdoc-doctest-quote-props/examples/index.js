/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var Linter = require( 'eslint' ).Linter;
var rule = require( './../lib' );

var linter = new Linter();
var result;
var code;

code = [
	'/**',
	'* Copies or deep clones a value to an arbitrary depth.',
	'*',
	'* @param {*} value - value to copy',
	'* @param {NonNegativeInteger} [level=+infinity] - copy depth',
	'* @returns {*} value copy',
	'*',
	'* @example',
	'* var value = [',
	'*     {',
	'*         \'a\': 1,',
	'*         \'b\': true,',
	'*         \'c\': [ 1, 2, 3 ]',
	'*     }',
	'* ];',
	'* var out = copy( value );',
	'* // returns [ { a: 1, b: true, c: [ 1, 2, 3 ] } ]',
	'*/',
	'function copy( value, level ) {',
	'  var out;',
	'  if ( arguments.length > 1 ) {',
	'    if ( !isNonNegativeInteger( level ) ) {',
	'      throw new TypeError( \'invalid argument. `level` must be a 	nonnegative integer. Value: `\' + level + \'`.\' );',
	'    }',
	'    if ( level === 0 ) {',
	'      return value;',
	'    }',
	'  } else {',
	'    level = PINF;',
	'  }',
	'  out = ( isArray( value ) ) ? new Array( value.length ) : {};',
	'  return deepCopy( value, out, [value], [out], level );',
	'}'
].join( '\n' );

linter.defineRule( 'jsdoc-doctest-quote-props', rule );

result = linter.verify( code, {
	'rules': {
		'jsdoc-doctest-quote-props': 'error'
	}
});
console.log( result );
/* =>
	[
		{
			'ruleId': 'jsdoc-doctest-quote-props',
			'severity': 2,
			'message': 'Use single quotes around property names',
			'line': 19,
			'column': 1,
			'nodeType': 'FunctionDeclaration',
			'source': 'function copy( value, level ) {',
			'endLine': 33,
			'endColumn': 2
		}
	]
*/
