/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var analyze = require( './../lib/analyze.js' );


// FIXTURES //

var FILE = '"use strict";\n\nvar foo = require( "foo" );\nimport beep from "beep";\nvar fs = require( "fs" );\nvar os = require( "os" );\nvar stream = require( "str"+"eam" );\nvar bar = require( "./bar.js" );\nvar bop = require( "./../bop" );';


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns module dependencies (including built-ins)', function test( t ) {
	var expected;
	var actual;

	expected = {
		'relative': [
			'./bar.js',
			'./../bop'
		],
		'packages': [
			'foo',
			'beep',
			'fs',
			'os'
		]
	};
	actual = analyze( FILE, true );

	t.deepEqual( actual.relative.sort(), expected.relative.sort(), 'returns relative module dependencies' );
	t.deepEqual( actual.packages.sort(), expected.packages.sort(), 'returns package dependencies' );

	t.end();
});

tape( 'the function returns module dependencies (excluding built-ins)', function test( t ) {
	var expected;
	var actual;

	expected = {
		'relative': [
			'./bar.js',
			'./../bop'
		],
		'packages': [
			'foo',
			'beep'
		]
	};
	actual = analyze( FILE, false );

	t.deepEqual( actual.relative.sort(), expected.relative.sort(), 'returns relative module dependencies' );
	t.deepEqual( actual.packages.sort(), expected.packages.sort(), 'returns package dependencies' );

	t.end();
});
