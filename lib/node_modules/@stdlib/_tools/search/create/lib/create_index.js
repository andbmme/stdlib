/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var remarkUnlink = require( 'remark-unlink' );
var remark = require( 'remark' );
var lunr = require( 'lunr' );
var removePunctuation = require( '@stdlib/string/remove-punctuation' );
var lowercase = require( '@stdlib/string/lowercase' );
var trim = require( '@stdlib/string/trim' );
var removeElements = require( './remove_elements.js' );
var extractor = require( './extractor.js' );


// VARIABLES //

var TITLE_REGEXP = /#[ ]*([^\n]+)\r?\n/;
var DESCR_REGEXP = />[ ]*([^\n]+)\r?\n/;
var processer = {
	'intro': remark()
		.use( extractor( 'intro' ) )
		.use( remarkUnlink )
		.use( removeElements )
		.processSync,
	'notes': remark()
		.use( extractor( 'notes' ) )
		.use( remarkUnlink )
		.use( removeElements )
		.processSync,
	'usage': remark()
		.use( extractor( 'usage' ) )
		.use( remarkUnlink )
		.use( removeElements )
		.processSync,
	'cli': remark()
		.use( extractor( 'cli' ) )
		.use( remarkUnlink )
		.use( removeElements )
		.processSync,
	'references': remark()
		.use( extractor( 'references' ) )
		.use( remarkUnlink )
		.use( removeElements )
		.processSync
};


// FUNCTIONS //

/**
* Extracts and cleans up text related to a given section.
*
* @private
* @param {string} readme - full readme text
* @param {string} section - section name
* @returns {string} processed text
*/
function getSectionText( readme, section ) {
	var out = processer[ section ]( readme ).contents;

	// Remove all comments:
	out = out.replace( /<!--[^->]+-->/g, '' );

	// Remove other special characters:
	out = out.replace( /[#*_\-=]/g, '' );

	out = lowercase( out );
	out = removePunctuation( out );
	out = trim( out );
	return out;
}


// MAIN //

/**
* Indexes a document using lunr.
*
* @private
* @param {Array} files - input files
* @returns {Object} serialized lunr object
*/
function createIndex( files ) {
	var idx = lunr( initialize );
	return idx.toJSON();

	/**
	* Initializes the `lunr` search engine.
	*
	* @private
	*/
	function initialize() {
		/* eslint-disable no-invalid-this */
		var references;
		var notes;
		var intro;
		var usage;
		var file;
		var cli;
		var doc;
		var i;

		this.field( 'title', {
			'boost': 10
		});
		this.field( 'description', {
			'boost': 5
		});
		this.field( 'intro', {
			'boost': 3
		});
		this.field( 'usage', {
			'boost': 3
		});
		this.field( 'notes', {
			'boost': 2
		} );
		this.field( 'cli', {
			'boost': 1
		});
		this.field( 'references', {
			'boost': 1
		});
		this.ref( 'id' );

		// Add documents to search index:
		for ( i = 0; i < files.length; i++ ) {
			file = files[ i ];
			intro = getSectionText( file.data, 'intro' );
			notes = getSectionText( file.data, 'notes' );
			usage = getSectionText( file.data, 'usage' );
			cli = getSectionText( file.data, 'cli' );
			references = getSectionText( file.data, 'references' );
			doc = {
				'title': file.data.match( TITLE_REGEXP )[ 1 ],
				'description': file.data.match( DESCR_REGEXP )[ 1 ],
				'intro': intro,
				'usage': usage,
				'notes': notes,
				'cli': cli,
				'references': references,
				'id': file.file
			};
			this.add( doc );
		}
	}
}


// EXPORTS //

module.exports = createIndex;
