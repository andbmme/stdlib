/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - options to validate
* @param {string} [options.protocol] - request protocol
* @param {string} [options.hostname] - endpoint hostname
* @param {NonNegativeInteger} [options.port] - endpoint port
* @param {string} [options.pathname] - resource pathname
* @param {PositiveInteger} [options.page] - resource page
* @param {PositiveInteger} [options.last_page] - last resource page
* @param {PositiveInteger} [options.per_page] - page size
* @param {string} [options.query] - params portion of a query string
* @param {string} [options.token] - GitHub access token
* @param {string} [options.accept] - media type
* @param {string} [options.useragent] - user agent string
* @returns {(Error|null)} error or null
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid argument. Options argument must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'protocol' ) ) {
		opts.protocol = options.protocol;
		if ( !isString( opts.protocol ) ) {
			return new TypeError( 'invalid option. `protocol` option must be a string primitive. Option: `' + opts.protocol + '`.' );
		}
		if ( opts.protocol !== 'http' && opts.protocol !== 'https' ) {
			return new Error( 'invalid option. `protocol` must be either `http` or `https`. Option: `' + opts.protocol + '`.' );
		}
	}
	if ( hasOwnProp( options, 'hostname' ) ) {
		opts.hostname = options.hostname;
		if ( !isString( opts.hostname ) ) {
			return new TypeError( 'invalid option. `hostname` option must be a string primitive. Option: `' + opts.hostname + '`.' );
		}
	}
	if ( hasOwnProp( options, 'port' ) ) {
		opts.port = options.port;
		if ( !isNonNegativeInteger( opts.port ) ) {
			return new TypeError( 'invalid option. `port` option must be a nonnegative integer. Option: `' + opts.port + '`.' );
		}
	}
	if ( hasOwnProp( options, 'pathname' ) ) {
		opts.pathname = options.pathname;
		if ( !isString( opts.pathname ) ) {
			return new TypeError( 'invalid option. `pathname` option must be a string primitive. Option: `' + opts.pathname + '`.' );
		}
	}
	if ( hasOwnProp( options, 'page' ) ) {
		opts.page = options.page;
		if ( !isPositiveInteger( opts.page ) ) {
			return new TypeError( 'invalid option. `page` option must be a positive integer. Option: `' + opts.page + '`.' );
		}
	}
	if ( hasOwnProp( options, 'last_page' ) ) {
		opts.last_page = options.last_page;
		if ( !isPositiveInteger( opts.last_page ) && opts.last_page !== 'last' ) {
			return new TypeError( 'invalid option. `last_page` option must be a positive integer or \'last\'. Option: `' + opts.last_page + '`.' );
		}
	}
	if ( hasOwnProp( options, 'per_page' ) ) {
		opts.per_page = options.per_page;
		if ( !isPositiveInteger( opts.per_page ) ) {
			return new TypeError( 'invalid option. `per_page` option must be a positive integer. Option: `' + opts.per_page + '`.' );
		}
	}
	if ( hasOwnProp( options, 'query' ) ) {
		opts.query = options.query;
		if ( !isString( opts.query ) ) {
			return new TypeError( 'invalid option. `query` option must be a string primitive. Option: `' + opts.query + '`.' );
		}
	}
	if ( hasOwnProp( options, 'token' ) ) {
		opts.token = options.token;
		if ( !isString( opts.token ) ) {
			return new TypeError( 'invalid option. `token` option must be a string primitive. Option: `' + opts.token + '`.' );
		}
	}
	if ( hasOwnProp( options, 'accept' ) ) {
		opts.accept = options.accept;
		if ( !isString( opts.accept ) ) {
			return new TypeError( 'invalid option. `accept` option must be a string primitive. Option: `' + opts.accept + '`.' );
		}
	}
	if ( hasOwnProp( options, 'useragent' ) ) {
		opts.useragent = options.useragent;
		if ( !isString( opts.useragent ) ) {
			return new TypeError( 'invalid option. `useragent` option must be a string primitive. Option: `' + opts.useragent + '`.' );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
