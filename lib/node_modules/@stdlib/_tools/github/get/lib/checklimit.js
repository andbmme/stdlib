/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var copy = require( '@stdlib/utils/copy' );


// VARIABLES //

var debug = logger( 'github-get:checklimit' );


// MAIN //

/**
* Checks the response headers to determine if the rate limit information should be updated.
*
* @private
* @param {Object} curr - current rate limit info
* @param {Object} headers - HTTP response headers
* @returns {Object} updated rate limit info
*/
function update( curr, headers ) {
	var reset;
	var rem;

	curr = copy( curr );

	reset = +headers[ 'x-ratelimit-reset' ];

	// Account for responses having an old reset time arriving after a rate limit reset. Only consider responses having the latest reset time...
	if ( reset < curr.reset ) {
		debug( 'Response has an old reset time and does not contain any new rate limit information. Reset: %s. Remaining: %s.', curr.reset, curr.remaining );
		return curr;
	}
	rem = +headers[ 'x-ratelimit-remaining' ];

	// Account for the rate limit being reset during a query sequence...
	if ( reset > curr.reset ) {
		debug( 'Rate limit was reset during query sequence. Reset: %s. Remaining: %s.', reset, rem );
		curr.reset = reset;
		curr.remaining = rem;
		return curr;
	}
	// Account for responses having the same reset time arriving out-of-order (i.e., a response indicating a higher remaining limit arriving after a response indicating a lower remaining limit).
	if ( rem < curr.remaining ) {
		curr.remaining = rem;
	}
	debug( 'Reset: %s. Remaining: %s.', reset, rem );
	return curr;
}


// EXPORTS //

module.exports = update;
