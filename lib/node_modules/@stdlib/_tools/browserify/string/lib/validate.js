/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isArray = require( '@stdlib/assert/is-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var objectKeys = require( '@stdlib/utils/keys' );


// VARIABLES //

var SPECIAL_KEYS = {
	'requireName': true,
	'exportName': true,
	'standalone': true,
	'transforms': true,
	'plugins': true,
	'external': true
};


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.standalone] - standalone browserify bundle export name
* @param {string} [options.requireName] - `require` name
* @param {string} [options.exportName] - bundle target name
* @param {Array} [options.transforms] - transforms to apply when bundling
* @param {Array} [options.plugins] - plugins to apply when bundling
* @param {StringArray} [options.external] - module(s) to omit from a generated bundle
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*    'standalone': 'foo'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	var keys;
	var k;
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'requireName' ) ) {
		opts.externalRequireName = options.requireName;
		if ( !isString( opts.externalRequireName ) ) {
			return new TypeError( 'invalid option. `requireName` option must be a string. Option: `' + opts.externalRequireName + '`.' );
		}
	}
	if ( hasOwnProp( options, 'exportName' ) ) {
		opts.exportName = options.exportName;
		if ( !isString( opts.exportName ) ) {
			return new TypeError( 'invalid option. `exportName` option must be a string. Option: `' + opts.exportName + '`.' );
		}
	}
	if ( hasOwnProp( options, 'standalone' ) ) {
		opts.standalone = options.standalone;
		if ( !isString( opts.standalone ) ) {
			return new TypeError( 'invalid option. `standalone` option must be a string. Option: `' + opts.standalone + '`.' );
		}
	}
	if ( hasOwnProp( options, 'transforms' ) ) {
		opts.transforms = options.transforms;
		if ( !isArray( opts.transforms ) ) {
			return new TypeError( 'invalid option. `transforms` option must be an array. Option: `' + opts.transforms + '`.' );
		}
	}
	if ( hasOwnProp( options, 'plugins' ) ) {
		opts.plugins = options.plugins;
		if ( !isArray( opts.plugins ) ) {
			return new TypeError( 'invalid option. `plugins` option must be an array. Option: `' + opts.plugins + '`.' );
		}
	}
	if ( hasOwnProp( options, 'external' ) ) {
		opts.external = options.external;
		if ( !isStringArray( opts.external ) ) {
			return new TypeError( 'invalid option. `external` option must be an array of strings. Option: `' + opts.external + '`.' );
		}
	}
	// Merge any remaining options...
	keys = objectKeys( options );
	for ( i = 0; i < keys.length; i++ ) {
		k = keys[ i ];
		if ( hasOwnProp( SPECIAL_KEYS, k ) === false ) {
			opts[ k ] = options[ k ];
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
