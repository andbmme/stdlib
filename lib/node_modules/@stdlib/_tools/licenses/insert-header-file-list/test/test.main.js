/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var unlink = require( '@stdlib/fs/unlink' ).sync;
var exists = require( '@stdlib/fs/exists' ).sync;
var noop = require( '@stdlib/utils/noop' );
var licenseHeader = require( '@stdlib/_tools/licenses/header' );
var insertHeader = require( './../lib/main.js' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};
var TMP = join( __dirname, 'fixtures', 'tmp.js.txt' );
var FILE = join( __dirname, 'fixtures', 'file.js.txt' );
var FILE_SHEBANG = join( __dirname, 'fixtures', 'file_shebang.js.txt' );
var EXPECTED_HEADER_STRING = join( __dirname, 'fixtures', 'expected_header_string.js.txt' );
var EXPECTED_HEADER_OBJECT = join( __dirname, 'fixtures', 'expected_header_object.js.txt' );
var EXPECTED_HEADER_STRING_SHEBANG = join( __dirname, 'fixtures', 'expected_header_string_shebang.js.txt' ); // eslint-disable-line id-length
var EXPECTED_HEADER_OBJECT_SHEBANG = join( __dirname, 'fixtures', 'expected_header_object_shebang.js.txt' ); // eslint-disable-line id-length


// FUNCTIONS //

/**
* Creates a temporary file.
*
* @private
* @param {boolean} bool - boolean indicating whether a temporary file should include a "shebang"
* @param {string} [f] - filename
* @throws {Error} unexpected error
* @returns {string} temporary file filename
*/
function tmp( bool ) {
	var err;
	var f;
	if ( arguments.length > 1 ) {
		f = arguments[ 1 ];
	} else {
		f = TMP;
	}
	if ( bool ) {
		err = writeFile( f, readFile( FILE_SHEBANG ) );
	} else {
		err = writeFile( f, readFile( FILE ) );
	}
	if ( err ) {
		throw err;
	}
	return f;
}

/**
* Removes a temporary file.
*
* @private
* @param {string} [f] - filename
* @throws {Error} unexpected error
*/
function cleanup() {
	var err;
	var f;
	if ( arguments.length ) {
		f = arguments[ 0 ];
	} else {
		f = TMP;
	}
	err = unlink( f );
	if ( err ) {
		throw err;
	}
}


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof insertHeader, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a first argument which is not a list of files, the function throws an error', opts, function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			insertHeader( value, {}, noop );
		};
	}
});

tape( 'if provided a header argument which is not either a string or an object mapping file types to license header strings, the function throws an error', opts, function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{
			'foo': null
		},
		{
			'js': []
		},
		{
			'js': {}
		},
		{
			'awk': '# @license Apache-2.0',
			'js': '// @license Apache-2.0',
			'jl': 3.14
		},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			insertHeader( [ __filename ], value, noop );
		};
	}
});

tape( 'if provided a callback argument which is not a function, the function throws an error', opts, function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			insertHeader( [ __filename ], {}, value );
		};
	}
});

tape( 'the function returns an error if an error is encountered when reading a file', opts, function test( t ) {
	var header;
	var files;

	files = [ 'dakfjdlfjsdfjasdjf/aldfkajdlfjsadl.jsdfad' ]; // File should not exist!
	header = {
		'jsdfad': 'beep boop'
	};
	insertHeader( files, header, done );

	function done( err ) {
		t.strictEqual( err instanceof Error, true, 'returns an error' );
		t.end();
	}
});

tape( 'the function returns an error if an error is encountered when writing a file', opts, function test( t ) {
	var insertHeader;
	var header;
	var files;

	insertHeader = proxyquire( './../lib/main.js', {
		'@stdlib/fs/write-file': writeFile
	});

	files = [ __filename ];
	header = {
		'js': '// @license Apache-2.0\n'
	};
	insertHeader( files, header, done );

	function done( err ) {
		t.strictEqual( err instanceof Error, true, 'returns an error' );
		t.end();
	}

	function writeFile() {
		var clbk = arguments[ arguments.length-1 ];
		setTimeout( onTimeout, 0 );
		function onTimeout() {
			clbk( new Error( 'beep' ) );
		}
	}
});

tape( 'the function supports providing an empty file array', opts, function test( t ) {
	insertHeader( [], {}, done );

	function done( err ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.end();
	}
});

tape( 'the function supports providing an empty header string', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file:
	f = tmp( false );

	// Create an empty header string:
	header = '';

	// Attempt to insert headers:
	insertHeader( [ f, f, f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has not changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( FILE, 'utf8' );
			t.strictEqual( actual, expected, 'file is unchanged' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing an empty header object', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file:
	f = tmp( false );

	// Create an empty header object:
	header = {};

	// Attempt to insert headers:
	insertHeader( [ f, f, f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has not changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( FILE, 'utf8' );
			t.strictEqual( actual, expected, 'file is unchanged' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header string', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file:
	f = tmp( false );

	// Create a header string:
	header = '// @license Apache-2.0\n';

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_STRING, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header string (shebang)', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file which includes a shebang:
	f = tmp( true );

	// Create a header string:
	header = '// @license Apache-2.0\n';

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_STRING_SHEBANG, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header string (file lacking filename extension)', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file without a filename extension:
	f = tmp( false, join( __dirname, 'fixtures', 'tmp' ) );

	// Create a header string:
	header = '// @license Apache-2.0\n';

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_STRING, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup( f );
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header object', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file:
	f = tmp( false );

	// Create a header object:
	header = {
		'txt': licenseHeader( 'Apache-2.0', 'js', {
			'year': 2018,
			'copyright': 'The Stdlib Authors'
		})
	};

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_OBJECT, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header object (shebang)', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file which includes a shebang:
	f = tmp( true );

	// Create a header object:
	header = {
		'txt': licenseHeader( 'Apache-2.0', 'js', {
			'year': 2018,
			'copyright': 'The Stdlib Authors'
		})
	};

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_OBJECT_SHEBANG, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header object (file lacking filename extension)', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file without a filename extension:
	f = tmp( false, join( __dirname, 'fixtures', 'tmp' ) );

	// Create a header object:
	header = {
		'tmp': licenseHeader( 'Apache-2.0', 'js', {
			'year': 2018,
			'copyright': 'The Stdlib Authors'
		})
	};

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_OBJECT, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup( f );
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});

tape( 'the function supports providing a header object containing a `default` header string', opts, function test( t ) {
	var header;
	var f;

	// Create a temporary file:
	f = tmp( false );

	// Create a header object:
	header = {
		'f': licenseHeader( 'Apache-2.0', 'f', {
			'year': 2050,
			'copyright': 'The Stdlib Authors and Contributors'
		}),
		'default': licenseHeader( 'Apache-2.0', 'js', {
			'year': 2018,
			'copyright': 'The Stdlib Authors'
		})
	};

	// Attempt to insert headers:
	insertHeader( [ f ], header, done );

	function done( err ) {
		var expected;
		var actual;
		if ( err ) {
			t.fail( err.message );
		} else {
			// Check that the temporary file has changed:
			actual = readFile( f, 'utf8' );
			expected = readFile( EXPECTED_HEADER_OBJECT, 'utf8' );
			t.strictEqual( actual, expected, 'file contains header' );
		}
		// Cleanup:
		cleanup();
		t.strictEqual( exists( f ), false, 'tmp file removed' );

		t.end();
	}
});
