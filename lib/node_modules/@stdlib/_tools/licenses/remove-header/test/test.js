/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var removeHeader = require( './../lib' );


// VARIABLES //

var HEADER = '// This file is a part of stdlib. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0';


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof removeHeader, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a source code string or Buffer', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			removeHeader( value, HEADER );
		};
	}
});

tape( 'the function throws an error if not provided a header argument which is either a string, Buffer, or regular expression', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			removeHeader( '// @license Apache-2.0\n\n"use strict";\n\nvar x = 3.14\n', value );
		};
	}
});

tape( 'the function removes a license header from a source code string', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, HEADER+'\n' );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code string (empty header string)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, '' );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code string (buffer header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, string2buffer( HEADER+'\n' ) );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code string (empty buffer header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, string2buffer( '' ) );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code string (regular expression header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, /\/\/ @license Apache-2\.0\n\n/ );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a multi-line license header from a source code string (regular expression header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		'/**',
		'* @license Apache-2.0',
		'*/',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 4 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, /\/\*\*\n\* @license Apache-2\.0\n\*\/\n\n/ );

	t.strictEqual( isString( actual ), true, 'returns a string' );
	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code buffer', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = string2buffer( src.join( '\n' ) );
	expected = expected.join( '\n' );

	actual = removeHeader( src, HEADER+'\n' );

	t.strictEqual( isBuffer( actual ), true, 'returns a buffer' );
	t.strictEqual( actual.toString(), expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code buffer (empty header string)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();

	src = string2buffer( src.join( '\n' ) );
	expected = expected.join( '\n' );

	actual = removeHeader( src, '' );

	t.strictEqual( isBuffer( actual ), true, 'returns a buffer' );
	t.strictEqual( actual.toString(), expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code buffer (buffer header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = string2buffer( src.join( '\n' ) );
	expected = expected.join( '\n' );

	actual = removeHeader( src, string2buffer( HEADER+'\n' ) );

	t.strictEqual( isBuffer( actual ), true, 'returns a buffer' );
	t.strictEqual( actual.toString(), expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header from a source code buffer (regular expression header)', function test( t ) {
	var expected;
	var actual;
	var src;

	src = [
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice( 2 );

	src = string2buffer( src.join( '\n' ) );
	expected = expected.join( '\n' );

	actual = removeHeader( src, /\/\/ @license Apache-2\.0\n\n/ );

	t.strictEqual( isBuffer( actual ), true, 'returns a buffer' );
	t.strictEqual( actual.toString(), expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (JavaScript)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var src;

	shebang = '#!/usr/bin/env node';
	src = [
		shebang,
		'',
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();
	expected.splice( 1, 2 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, HEADER );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (JavaScript; empty header string)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var src;

	shebang = '#!/usr/bin/env node';
	src = [
		shebang,
		'',
		HEADER,
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, '' );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (JavaScript; regular expression header)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var src;

	shebang = '#!/usr/bin/env node';
	src = [
		shebang,
		'',
		'// @license Apache-2.0',
		'',
		'"use strict";',
		'',
		'var x = 3.14;',
		''
	];
	expected = src.slice();
	expected.splice( 1, 2 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, /\/\/ @license Apache-2\.0\n\n/ );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (Julia)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env julia';
	header = '# ' + HEADER.substring( 2 );

	src = [
		shebang,
		header,
		'',
		'x = 3.14;',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, header );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (Julia; regular expression header)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env julia';
	header = '#\n# @license Apache-2.0';

	src = [
		shebang,
		header,
		'',
		'x = 3.14;',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, /#\n# @license Apache-2\.0\n/ );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (Python)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env python';
	header = '# ' + HEADER.substring( 2 );

	src = [
		shebang,
		header,
		'',
		'x = 3.14',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, header );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (R)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env Rscript';
	header = '# ' + HEADER.substring( 2 );

	src = [
		shebang,
		header,
		'',
		'x <- 3.14;',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, header );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (AWK)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env awk -f';
	header = '# ' + HEADER.substring( 2 );

	src = [
		shebang,
		header,
		'',
		'BEGIN {',
		'\tcount = 0',
		'}',
		'END {',
		'\tprint count',
		'}',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, header );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function removes a license header after a shebang (Bash)', function test( t ) {
	var expected;
	var shebang;
	var actual;
	var header;
	var src;

	shebang = '#!/usr/bin/env bash';
	header = '# ' + HEADER.substring( 2 );

	src = [
		shebang,
		header,
		'',
		'echo "beep"',
		''
	];
	expected = src.slice();
	expected.splice( 1, 1 );

	src = src.join( '\n' );
	expected = expected.join( '\n' );

	actual = removeHeader( src, header );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});
