/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var readFile = require( '@stdlib/fs/read-file' );


// VARIABLES //

var debug = logger( 'licenses:infer:read-files' );


// MAIN //

/**
* Reads a list of files.
*
* @private
* @param {StringArray} files - file list
* @param {Callback} clbk - callback to invoke after reading files
* @returns {void}
*/
function readFiles( files, clbk ) {
	var count;
	var opts;
	var out;
	var i;

	out = {};
	if ( files.length === 0 ) {
		debug( 'No files to read.' );
		return clbk( null, out );
	}
	count = 0;
	opts = {
		'encoding': 'utf8'
	};
	debug( 'Reading %d files...', files.length );
	for ( i = 0; i < files.length; i++ ) {
		debug( 'Reading file: %s.', files[ i ] );
		readFile( files[ i ], opts, onReadFactory( i ) );
	}
	/**
	* Returns a callback to be invoked upon reading a file.
	*
	* @private
	* @param {NonNegativeInteger} idx - index
	* @returns {Callback} callback
	*/
	function onReadFactory( idx ) {
		return onRead;

		/**
		* Callback to be invoked upon reading a file.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {(Buffer|string)} data - file content
		* @returns {void}
		*/
		function onRead( error, data ) {
			if ( error ) {
				debug( 'Encountered an error while attempting to read file: %s. Error: %s.', files[ idx ], error.message );
				return clbk( error );
			}
			count += 1;

			debug( 'Successfully read file: %s.', files[ idx ] );
			out[ files[ idx ] ] = data.toString();

			debug( 'Read %d of %d files.', count, files.length );
			if ( count === files.length ) {
				debug( 'Finished reading files.' );
				clbk( null, out );
			}
		}
	}
}


// EXPORTS //

module.exports = readFiles;
