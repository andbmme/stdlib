/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var glob = require( 'glob' ).sync;
var cwd = require( '@stdlib/process/cwd' );
var copy = require( '@stdlib/utils/copy' );
var dirname = require( '@stdlib/utils/dirname' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var config = require( './config.json' );
var validate = require( './validate.js' );


// MAIN //

/**
* Synchronously finds packages containing TypeScript declarations.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for packages containing TypeScript declarations
* @param {string} [options.pattern='**\/package.json'] - glob pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `pattern` option must end with `package.json`
* @throws {Error} unable to parse `package.json` as JSON
* @returns {(EmptyArray|StringArray)} list of packages
*
* @example
* var pkgs = findTypes();
* // returns [...]
*/
function findTypes( options ) {
	var gopts;
	var files;
	var opts;
	var err;
	var dir;
	var out;
	var pkg;
	var i;

	opts = copy( config );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.dir ) {
		dir = resolve( cwd(), opts.dir );
	} else {
		dir = cwd();
	}
	// Find `package.json` files...
	gopts = {
		'cwd': dir,
		'ignore': opts.ignore,
		'realpath': true // return absolute file paths
	};
	files = glob( opts.pattern, gopts );

	// Check for packages containing TypeScript declarations...
	out = [];
	for ( i = 0; i < files.length; i++ ) {
		pkg = readJSON( files[ i ] );
		if ( pkg.types ) {
			out.push( dirname( files[ i ] ) );
		}
	}
	return out;
}


// EXPORTS //

module.exports = findTypes;
