/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var readJSON = require( '@stdlib/fs/read-json' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// VARIABLES //

var debug = logger( 'pkgs:clis:read-pkgs' );


// MAIN //

/**
* Reads `package.json` files and resolves command-line interface commands.
*
* @private
* @param {StringArray} files - list of `package.json` files
* @param {Callback} clbk - callback to invoke upon completion
* @returns {void}
*/
function readPkgs( files, clbk ) {
	var total;
	var out;
	var i;

	total = files.length;
	i = -1;
	out = [];

	return next();

	/**
	* Reads the next `package.json` file.
	*
	* @private
	*/
	function next() {
		i += 1;
		debug( 'Reading package %d of %d: %s', i+1, total, files[ i ] );
		readJSON( files[ i ], onRead );
	}

	/**
	* Callback invoked upon reading a `package.json` file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} json - JSON object
	* @returns {void}
	*/
	function onRead( error, json ) {
		var keys;
		var j;
		var k;

		j = i + 1;
		if ( error ) {
			debug( 'Encountered an error reading file: %s (%d of %d). Error: %s', files[ i ], j, total, error.message );
			return done( error );
		}
		debug( 'Successfully read file: %s (%d of %d).', files[ i ], j, total );

		if ( isString( json.bin ) ) {
			debug( 'Resolved %s.', json.name );
			out.push( json.name );
		} else if ( hasOwnProp( json, 'bin' ) ) {
			debug( 'Resolving CLI commands...' );
			keys = objectKeys( json.bin );
			for ( k = 0; k < keys.length; k++ ) {
				debug( 'Resolved %s.', keys[ k ] );
				out.push( keys[ k ] );
			}
			debug( 'Finished resolving CLI commands.' );
		}
		if ( j < total ) {
			debug( 'Read %d of %d files.', j, total );
			return next();
		}
		debug( 'Successfully read all files.' );
		return done();
	}

	/**
	* Callback invoked upon reading all files.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return clbk( error );
		}
		clbk( null, out );
	}
}


// EXPORTS //

module.exports = readPkgs;
