/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );
var logger = require( 'debug' );
var mkdirp = require( 'mkdirp' );
var build = require( '@stdlib/_tools/tests/browser-build' );


// VARIABLES //

var debug = logger( 'test-bundles:bundle' );


// MAIN //

/**
* Generates test bundles for a list of packages.
*
* @private
* @param {(EmptyArray|StringArray)} pkgs - package list
* @param {string} dest - output directory
* @param {Object} opts - options
* @param {string} opts.bundle - bundle filename
* @param {string} opts.dir - root directory
* @param {string} opts.html - HTML filename
* @param {string} opts.mount - base URL mount
* @param {Object} opts.files_pattern - glob pattern
* @param {string} opts.title - HTML title
* @param {Callback} clbk - callback to invoke upon completion
* @returns {void}
*/
function bundle( pkgs, dest, opts, clbk ) {
	var total;
	var ppath;
	var dpath;
	var pkg;
	var i;

	total = pkgs.length;
	i = -1;

	return next();

	/**
	* Generates the next bundle.
	*
	* @private
	*/
	function next() {
		i += 1;

		pkg = pkgs[ i ];
		ppath = pkg.substring( opts.dir.length+1 ); // +1 to account for path separator
		dpath = path.join( dest, ppath );

		debug( 'Creating output directory: %s', dpath );
		mkdirp( dpath, onDir );
	}

	/**
	* Callback invoked upon creating an output directory.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onDir( error ) {
		var bopts;
		if ( error ) {
			debug( 'Encountered an error when creating output directory. Package: %s (%d of %d). Directory: %s. Error: %s', pkg, i+1, total, dpath, error.message );
			return clbk( error );
		}
		debug( 'Successfully created output directory.' );

		debug( 'Generating package bundle %d of %d: %s', i+1, total, pkg );
		bopts = {
			'pattern': opts.files_pattern,
			'bundle': opts.bundle,
			'html': opts.html,
			'mount': opts.mount + ppath,
			'title': opts.title
		};
		build( pkg, dpath, bopts, onBundle );
	}

	/**
	* Callback invoked upon generating a bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {boolean} bool - boolean indicating whether a bundle was created
	* @returns {void}
	*/
	function onBundle( error, bool ) {
		if ( error ) {
			debug( 'Encountered an error when generating a bundle. Package: %s (%d of %d). Destination: %s. Error: %s', pkg, i+1, total, dpath, error.message );
			return clbk( error );
		}
		if ( bool ) {
			debug( 'Successfully generated a bundle.' );
		} else {
			debug( 'No bundle generated.' );
		}
		done();
	}

	/**
	* Callback invoked upon generating bundles.
	*
	* @private
	* @returns {void}
	*/
	function done() {
		var j = i + 1;
		if ( j < total ) {
			debug( 'Generated %d of %d bundles.', j, total );
			return next();
		}
		debug( 'Successfully generated all bundles.' );
		return clbk();
	}
}


// EXPORTS //

module.exports = bundle;
