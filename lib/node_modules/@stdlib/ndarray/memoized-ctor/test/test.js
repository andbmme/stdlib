/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a supported ndarray data type', function test( t ) {
	var values;
	var i;

	values = [
		'float',
		'double',
		'int',
		'uint',
		'integer',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( value, 3 );
		};
	}
});

tape( 'the function throws an error if not provided a supported ndarray data type (options)', function test( t ) {
	var values;
	var i;

	values = [
		'float',
		'double',
		'int',
		'uint',
		'integer',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( value, 3, {} );
		};
	}
});

tape( 'the function throws an error if not provided a positive integer value for the number of ndarray dimensions', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5,
		0,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( 'float64', value );
		};
	}
});

tape( 'the function throws an error if not provided a positive integer value for the number of ndarray dimensions (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		-5,
		0,
		3.14,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( 'float64', value, {} );
		};
	}
});

tape( 'the function throws an error if provided a number of ndarray dimensions which may cause stack limits to be exceeded', function test( t ) {
	var values;
	var i;

	values = [
		1e6,
		1e9,
		1e12,
		1e15,
		1e200
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( 'float64', value );
		};
	}
});

tape( 'the function throws an error if provided a number of ndarray dimensions which may cause stack limits to be exceeded (options)', function test( t ) {
	var values;
	var i;

	values = [
		1e6,
		1e9,
		1e12,
		1e15,
		1e200
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( 'float64', value, {} );
		};
	}
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			ctor( 'float64', 3, value );
		};
	}
});

tape( 'the function throws an error if not provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'codegen': value
			};
			ctor( 'float64', 3, opts );
		};
	}
});

tape( 'the function returns an ndarray constructor', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var F;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	F = ctor( dtype, shape.length );
	arr = new F( buffer, shape, strides, offset, order );

	t.strictEqual( instanceOf( arr, F ), true, 'returns an instance' );
	t.end();
});

tape( 'the function returns an ndarray constructor (options)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var F;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	F = ctor( dtype, shape.length, {} );
	arr = new F( buffer, shape, strides, offset, order );

	t.strictEqual( instanceOf( arr, F ), true, 'returns an instance' );
	t.end();
});

tape( 'the function returns an ndarray constructor (options; codegen=false)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var F;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	opts = {
		'codegen': false
	};

	F = ctor( dtype, shape.length, opts );
	arr = new F( buffer, shape, strides, offset, order );

	t.strictEqual( instanceOf( arr, F ), true, 'returns an instance' );
	t.end();
});

tape( 'the function returns an ndarray constructor (options; codegen=true)', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var opts;
	var arr;
	var F;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	opts = {
		'codegen': true
	};

	F = ctor( dtype, shape.length, opts );
	arr = new F( buffer, shape, strides, offset, order );

	t.strictEqual( instanceOf( arr, F ), true, 'returns an instance' );
	t.end();
});

tape( 'the function returns an ndarray constructor which does not require the `new` keyword', function test( t ) {
	var strides;
	var buffer;
	var offset;
	var dtype;
	var order;
	var shape;
	var arr;
	var f;

	dtype = 'generic';
	buffer = [ 1.0, 2.0, 3.0, 4.0 ];
	shape = [ 2, 2 ];
	order = 'row-major';
	strides = [ 2, 1 ];
	offset = 0;

	f = ctor( dtype, shape.length );
	arr = f( buffer, shape, strides, offset, order );

	t.strictEqual( instanceOf( arr, f ), true, 'returns an instance' );
	t.end();
});

tape( 'the function returns a memoized ndarray constructor', function test( t ) {
	var f1;
	var f2;

	f1 = ctor( 'generic', 999 );
	f2 = ctor( 'generic', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 999 );
	f2 = ctor( 'float64', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 999 );
	f2 = ctor( 'float32', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 999 );
	f2 = ctor( 'int16', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 999 );
	f2 = ctor( 'int32', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 999 );
	f2 = ctor( 'int8', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 999 );
	f2 = ctor( 'uint16', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 999 );
	f2 = ctor( 'uint32', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 999 );
	f2 = ctor( 'uint8', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 999 );
	f2 = ctor( 'uint8c', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 999 );
	f2 = ctor( 'binary', 999 );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options)', function test( t ) {
	var f1;
	var f2;

	f1 = ctor( 'generic', 998, {} );
	f2 = ctor( 'generic', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 998, {} );
	f2 = ctor( 'float64', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 998, {} );
	f2 = ctor( 'float32', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 998, {} );
	f2 = ctor( 'int16', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 998, {} );
	f2 = ctor( 'int32', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 998, {} );
	f2 = ctor( 'int8', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 998, {} );
	f2 = ctor( 'uint16', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 998, {} );
	f2 = ctor( 'uint32', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 998, {} );
	f2 = ctor( 'uint8', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 998, {} );
	f2 = ctor( 'uint8c', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 998, {} );
	f2 = ctor( 'binary', 998, {} );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; codegen=true)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'codegen': true
	};

	f1 = ctor( 'generic', 997, opts );
	f2 = ctor( 'generic', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 997, opts );
	f2 = ctor( 'float64', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 997, opts );
	f2 = ctor( 'float32', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 997, opts );
	f2 = ctor( 'int16', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 997, opts );
	f2 = ctor( 'int32', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 997, opts );
	f2 = ctor( 'int8', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 997, opts );
	f2 = ctor( 'uint16', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 997, opts );
	f2 = ctor( 'uint32', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 997, opts );
	f2 = ctor( 'uint8', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 997, opts );
	f2 = ctor( 'uint8c', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 997, opts );
	f2 = ctor( 'binary', 997, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; codegen=false)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'codegen': false
	};

	f1 = ctor( 'generic', 996, opts );
	f2 = ctor( 'generic', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 996, opts );
	f2 = ctor( 'float64', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 996, opts );
	f2 = ctor( 'float32', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 996, opts );
	f2 = ctor( 'int16', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 996, opts );
	f2 = ctor( 'int32', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 996, opts );
	f2 = ctor( 'int8', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 996, opts );
	f2 = ctor( 'uint16', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 996, opts );
	f2 = ctor( 'uint32', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 996, opts );
	f2 = ctor( 'uint8', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 996, opts );
	f2 = ctor( 'uint8c', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 996, opts );
	f2 = ctor( 'binary', 996, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; codegen,mode,submode)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'codegen': true,
		'mode': 'wrap',
		'submode': [ 'clamp', 'wrap', 'clamp', 'throw', 'throw', 'wrap' ]
	};

	f1 = ctor( 'generic', 995, opts );
	f2 = ctor( 'generic', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 995, opts );
	f2 = ctor( 'float64', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 995, opts );
	f2 = ctor( 'float32', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 995, opts );
	f2 = ctor( 'int16', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 995, opts );
	f2 = ctor( 'int32', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 995, opts );
	f2 = ctor( 'int8', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 995, opts );
	f2 = ctor( 'uint16', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 995, opts );
	f2 = ctor( 'uint32', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 995, opts );
	f2 = ctor( 'uint8', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 995, opts );
	f2 = ctor( 'uint8c', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 995, opts );
	f2 = ctor( 'binary', 995, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; codegen,mode)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'codegen': true,
		'mode': 'clamp'
	};

	f1 = ctor( 'generic', 994, opts );
	f2 = ctor( 'generic', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 994, opts );
	f2 = ctor( 'float64', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 994, opts );
	f2 = ctor( 'float32', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 994, opts );
	f2 = ctor( 'int16', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 994, opts );
	f2 = ctor( 'int32', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 994, opts );
	f2 = ctor( 'int8', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 994, opts );
	f2 = ctor( 'uint16', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 994, opts );
	f2 = ctor( 'uint32', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 994, opts );
	f2 = ctor( 'uint8', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 994, opts );
	f2 = ctor( 'uint8c', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 994, opts );
	f2 = ctor( 'binary', 994, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; codegen,submode)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'codegen': true,
		'submode': [ 'clamp', 'wrap', 'throw' ]
	};

	f1 = ctor( 'generic', 993, opts );
	f2 = ctor( 'generic', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 993, opts );
	f2 = ctor( 'float64', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 993, opts );
	f2 = ctor( 'float32', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 993, opts );
	f2 = ctor( 'int16', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 993, opts );
	f2 = ctor( 'int32', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 993, opts );
	f2 = ctor( 'int8', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 993, opts );
	f2 = ctor( 'uint16', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 993, opts );
	f2 = ctor( 'uint32', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 993, opts );
	f2 = ctor( 'uint8', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 993, opts );
	f2 = ctor( 'uint8c', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 993, opts );
	f2 = ctor( 'binary', 993, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});

tape( 'the function returns a memoized ndarray constructor (options; mode,submode)', function test( t ) {
	var opts;
	var f1;
	var f2;

	opts = {
		'mode': 'throw',
		'submode': [ 'throw', 'wrap', 'clamp' ]
	};

	f1 = ctor( 'generic', 992, opts );
	f2 = ctor( 'generic', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float64', 992, opts );
	f2 = ctor( 'float64', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'float32', 992, opts );
	f2 = ctor( 'float32', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int16', 992, opts );
	f2 = ctor( 'int16', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int32', 992, opts );
	f2 = ctor( 'int32', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'int8', 992, opts );
	f2 = ctor( 'int8', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint16', 992, opts );
	f2 = ctor( 'uint16', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint32', 992, opts );
	f2 = ctor( 'uint32', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8', 992, opts );
	f2 = ctor( 'uint8', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'uint8c', 992, opts );
	f2 = ctor( 'uint8c', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	f1 = ctor( 'binary', 992, opts );
	f2 = ctor( 'binary', 992, opts );
	t.strictEqual( f1, f2, 'returns expected value' );

	t.end();
});
