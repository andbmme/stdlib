/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an ndarray constructor which has a static `BYTES_PER_ELEMENT` property specifying the size (in bytes) of each array element (typed)', function test( t ) {
	var expected;
	var values;
	var f;
	var i;

	values = [
		'float64',
		'float32',
		'int8',
		'uint8',
		'uint8c',
		'int16',
		'uint16',
		'int32',
		'uint32'
	];

	expected = [
		8,
		4,
		1,
		1,
		1,
		2,
		2,
		4,
		4
	];

	for ( i = 0; i < values.length; i++ ) {
		f = ctor( values[ i ], 2 );
		t.strictEqual( hasOwnProp( f, 'BYTES_PER_ELEMENT' ), true, 'has property' );
		t.strictEqual( f.BYTES_PER_ELEMENT, expected[ i ], 'has expected value' );
	}
	t.end();
});

tape( 'the function returns an ndarray constructor which has a static `BYTES_PER_ELEMENT` property specifying the size (in bytes) of each array element (binary)', function test( t ) {
	var f = ctor( 'binary', 2 );
	t.strictEqual( hasOwnProp( f, 'BYTES_PER_ELEMENT' ), true, 'has property' );
	t.strictEqual( f.BYTES_PER_ELEMENT, 1, 'has expected value' );
	t.end();
});

tape( 'the function returns an ndarray constructor which has a static `BYTES_PER_ELEMENT` property specifying the size (in bytes) of each array element (generic)', function test( t ) {
	var f = ctor( 'generic', 2 );
	t.strictEqual( hasOwnProp( f, 'BYTES_PER_ELEMENT' ), true, 'has property' );
	t.strictEqual( f.BYTES_PER_ELEMENT, null, 'has expected value' );
	t.end();
});

tape( 'the function returns an ndarray constructor which has a static `dtype` property specifying the underlying data type', function test( t ) {
	var values;
	var i;
	var f;

	values = [
		'float64',
		'float32',
		'int8',
		'uint8',
		'uint8c',
		'int16',
		'uint16',
		'int32',
		'uint32',
		'binary',
		'generic'
	];

	for ( i = 0; i < values.length; i++ ) {
		f = ctor( values[ i ], 2 );
		t.strictEqual( hasOwnProp( f, 'dtype' ), true, 'has property' );
		t.strictEqual( f.dtype, values[ i ], 'has expected value' );
	}
	t.end();
});

tape( 'the function returns an ndarray constructor which has a static `ndims` property specifying the number of array dimensions', function test( t ) {
	var values;
	var i;
	var f;

	values = [
		1,
		2,
		3,
		4,
		5,
		6,
		7,
		8,
		9,
		10
	];

	for ( i = 0; i < values.length; i++ ) {
		f = ctor( 'float64', values[ i ] );
		t.strictEqual( hasOwnProp( f, 'ndims' ), true, 'has property' );
		t.strictEqual( f.ndims, values[ i ], 'has expected value' );
	}
	t.end();
});
