/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var getIndex = require( '@stdlib/ndarray/base/ind' );


// MAIN //

/**
* Returns a setter function for arrays having a specified number of dimensions.
*
* @private
* @param {PositiveInteger} ndims - array dimensions
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} setter
*
* @example
* var f = set( 3 );
* // returns <Function>
*/
function set( ndims, mode ) {
	var n = ndims - 1;
	var f;
	var i;

	// Code generation. Start with function definition...
	f = '(function iife(){return function set(';

	/*
	* Create the index input arguments along with the value to set...
	* > function set( i0, i1, ..., v ) {
	*/
	for ( i = 0; i < ndims; i++ ) {
		f += 'i' + i + ',';
	}
	f += 'v){';

	// Create the function body...

	/*
	* Type check each index.
	* > if ( !isInteger( i0 ) ) { throw new TypeError( ... ) }
	*/
	for ( i = 0; i < ndims; i++ ) {
		f += 'if(!f.__isint__(i'+i+')){throw new TypeError(\'invalid argument. Indices must be integer valued. Argument: '+i+'. Value: `\'+i'+i+'+\'`.\');}';
	}
	/*
	* Resolve indices based on the index mode.
	* > i0 = getIndex( i0, shape[0]-1, mode );
	*/
	for ( i = 0; i < ndims; i++ ) {
		f += 'i'+i+'=f.__get_index__(i'+i+',this._shape['+i+']-1,\''+mode[i%mode.length]+'\');';
	}
	/*
	* Index into the array according to the offset and strides...
	* > data[offset+strides[0]*i0+strides[1]*i1+...] = v;
	*/
	f += 'this._buffer[this._offset+';
	for ( i = 0; i < ndims; i++ ) {
		f += 'this._strides['+i+']*i'+i;
		if ( i < n ) {
			f += '+';
		}
	}
	f += ']=v;';

	// Return the ndarray instance:
	f += 'return this;';

	// Close the function:
	f += '}';

	// Close the IIFE:
	f += '})()';

	// Add a source directive for debugging:
	f += '//# sourceURL=ndarray.ctor.set.js';

	// Create the function in the current scope to allow access to required modules:
	f = eval( f ); // eslint-disable-line no-eval
	f.__isint__ = isInteger; // eslint-disable-line no-underscore-dangle
	f.__get_index__ = getIndex; // eslint-disable-line no-underscore-dangle

	return f;

	/*
	* e.g.,
	*     function set( i0, i1, i2, v ) {
	*         if ( !isInteger( i0 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 0. Value: `'+i0+'`.' );
	*         }
	*         if ( !isInteger( i1 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 1. Value: `'+i1+'`.' );
	*         }
	*         if ( !isInteger( i2 ) ) {
	*             throw new TypeError( 'invalid argument. Indices must be integer valued. Argument: 2. Value: `'+i2+'`.' );
	*         }
	*         i0 = getIndex( i0, this._shape[0]-1, 'throw' );
	*         i1 = getIndex( i1, this._shape[1]-1, 'throw' );
	*         i2 = getIndex( i2, this._shape[2]-1, 'throw' );
	*         this._buffer[ this._offset + this._strides[0]*i0 + this._strides[1]*i1 + this._strides[2]*i2 ] = v;
	*         return this;
	*     }
	*/
}


// EXPORTS //

module.exports = set;
