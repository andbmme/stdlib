/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var getIndex = require( '@stdlib/ndarray/base/ind' );


// FUNCTIONS //

/**
* Returns a method for returning an array element.
*
* @private
* @param {StringArray} mode - specifies how to handle indices which exceed array dimensions
* @returns {Function} method for returning an array element
*/
function wrap( mode ) {
	var mi = mode[ 0%mode.length ];
	var mj = mode[ 1%mode.length ];
	var mk = mode[ 2%mode.length ];
	var ml = mode[ 3%mode.length ];
	return get;

	/**
	* Returns an array element.
	*
	* @private
	* @param {integer} i - index for first dimension
	* @param {integer} j - index for second dimension
	* @param {integer} k - index for third dimension
	* @param {integer} l - index for fourth dimension
	* @throws {TypeError} index for first dimension must be an integer value
	* @throws {TypeError} index for second dimension must be an integer value
	* @throws {TypeError} index for third dimension must be an integer value
	* @throws {TypeError} index for fourth dimension must be an integer value
	* @throws {RangeError} index exceeds array dimensions
	* @returns {*} array element
	*/
	function get( i, j, k, l ) {
		/* eslint-disable no-invalid-this */
		var idx;
		if ( !isInteger( i ) ) {
			throw new TypeError( 'invalid argument. Index for first dimension must be an integer value. Value: `'+i+'`.' );
		}
		if ( !isInteger( j ) ) {
			throw new TypeError( 'invalid argument. Index for second dimension must be an integer value. Value: `'+j+'`.' );
		}
		if ( !isInteger( k ) ) {
			throw new TypeError( 'invalid argument. Index for third dimension must be an integer value. Value: `'+k+'`.' );
		}
		if ( !isInteger( l ) ) {
			throw new TypeError( 'invalid argument. Index for fourth dimension must be an integer value. Value: `'+l+'`.' );
		}
		i = getIndex( i, this._shape[0]-1, mi );
		j = getIndex( j, this._shape[1]-1, mj );
		k = getIndex( k, this._shape[2]-1, mk );
		l = getIndex( l, this._shape[3]-1, ml );

		idx = this._offset + ( this._strides[0]*i ) + ( this._strides[1]*j ) + ( this._strides[2]*k ) + ( this._strides[3]*l ); // eslint-disable-line max-len
		return this._buffer[ idx ];
	}
}


// EXPORTS //

module.exports = wrap;
