
{{alias}}( dtype, ndims[, options] )
    Returns a memoized ndarray constructor.

    Parameters
    ----------
    dtype: string
        Underlying data type.

    ndims: integer
        Number of dimensions.

    options: Object (optional)
        Options.

    options.codegen: boolean (optional)
        Boolean indicating whether to use code generation. Code generation can
        boost performance, but may be problematic in browser contexts enforcing
        a strict content security policy (CSP). Default: true.

    Returns
    -------
    ctor: Function
        Memoized ndarray constructor.

    ctor.BYTES_PER_ELEMENT: integer
        Size (in bytes) of each array element (if known).

    ctor.dtype: string
        Underlying data type.

    ctor.ndims: integer
        Number of dimensions.

    ctor.prototype.byteLength: integer
        Size (in bytes) of the array (if known).

    ctor.prototype.BYTES_PER_ELEMENT: integer
        Size (in bytes) of each array element (if known).

    ctor.prototype.data: ArrayLikeObject|TypedArray|Buffer
        Pointer to the underlying data buffer.

    ctor.prototype.dtype: string
        Underlying data type.

    ctor.prototype.flags: Object
        Information about the memory layout of the array.

    ctor.prototype.length: integer
        Length of the array (i.e., number of elements).

    ctor.prototype.ndims: integer
        Number of dimensions.

    ctor.prototype.offset: integer
        Index offset which specifies the buffer index at which to start
        iterating over array elements.

    ctor.prototype.order: string
        Array order. The array order is either row-major (C-style) or column-
        major (Fortran-style).

    ctor.prototype.shape: Array
        Array shape.

    ctor.prototype.strides: Array
        Index strides which specify how to access data along corresponding array
        dimensions.

    ctor.prototype.get: Function
        Returns an array element specified according to provided subscripts. The
        number of provided subscripts should equal the number of dimensions.

    ctor.prototype.iget: Function
        Returns an array element located at a specified linear index.

    ctor.prototype.set: Function
        Sets an array element specified according to provided subscripts. The
        number of provided subscripts should equal the number of dimensions.

    ctor.prototype.iset: Function
        Sets an array element located at a specified linear index.

    ctor.prototype.toString: Function
        Serializes an ndarray as a string. This method does **not** serialize
        data outside of the buffer region defined by the array configuration.

    ctor.prototype.toJSON: Function
        Serializes an ndarray as a JSON object. This method does **not**
        serialize data outside of the buffer region defined by the array
        configuration.

    Examples
    --------
    > var ctor = {{alias}}( 'float64', 3 )
    <Function>
    > var f = {{alias}}( 'float64', 3 )
    <Function>
    > var bool = ( f === ctor )
    true

    // To create a new instance...
    > var b = [ 1, 2, 3, 4 ]; // underlying data buffer
    > var d = [ 2, 2 ]; // shape
    > var s = [ 2, 1 ]; // strides
    > var o = 0; // index offset
    > var arr = ctor( b, d, s, o, 'row-major' )
    <ndarray>

    // Get an element using subscripts:
    > var v = arr.get( 1, 1 )
    4

    // Get an element using a linear index:
    > v = arr.iget( 3 )
    4

    // Set an element using subscripts:
    > arr.set( 1, 1, 40 );
    > arr.get( 1, 1 )
    40

    // Set an element using a linear index:
    > arr.iset( 3, 99 );
    > arr.get( 1, 1 )
    99

    See Also
    --------

