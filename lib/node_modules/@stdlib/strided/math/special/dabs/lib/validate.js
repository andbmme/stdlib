/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isArrayBuffer = require( '@stdlib/assert/is-arraybuffer' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {PositiveInteger} [options.memory] - total memory
* @param {PositiveInteger} [options.stack] - total stack size
* @param {ArrayBuffer} [options.buffer] - memory
* @returns {(Error|null)} null or an error object
*
* @example
* var ArrayBuffer = require( '@stdlib/array/buffer' );
*
* var opts = {};
* var options = {
*     'memory': 16777216,
*     'stack': 1024,
*     'buffer': new ArrayBuffer( 16777216 )
* };
*
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'stack' ) ) {
		opts.TOTAL_STACK = options.stack;
		if ( !isPositiveInteger( options.stack ) ) {
			return new TypeError( 'invalid option. `stack` option must be a positive integer. Option: `' + options.stack + '`.' );
		}
	}
	if ( hasOwnProp( options, 'memory' ) ) {
		opts.TOTAL_MEMORY = options.memory;
		if ( !isPositiveInteger( options.memory ) ) {
			return new TypeError( 'invalid option. `memory` option must be a positive integer. Option: `' + options.memory + '`.' );
		}
		if ( opts.TOTAL_MEMORY <= opts.TOTAL_STACK ) {
			return new RangeError( 'invalid option. `memory` option must be greater than total stack size: `' + opts.TOTAL_STACK + '`. Option: `' + opts.TOTAL_MEMORY + '`.' );
		}
	}
	if ( hasOwnProp( options, 'buffer' ) ) {
		opts.buffer = options.buffer;
		if ( !isArrayBuffer( options.buffer ) ) {
			return new TypeError( 'invalid option. `buffer` option must be an ArrayBuffer. Option: `' + options.buffer + '`.' );
		}
		// eslint-disable-next-line max-len
		if ( opts.TOTAL_MEMORY && opts.buffer.byteLength !== opts.TOTAL_MEMORY ) {
			return new RangeError( 'invalid option. `memory` option must equal the buffer length: `' + opts.buffer.byteLength + '. Option: `' + opts.TOTAL_MEMORY + '`.' );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
