/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the absolute value for each element in `x` and assign the result to an element in `y`.
*
* @module @stdlib/strided/math/special/dabs
*
* @example
* var dabs = require( '@stdlib/strided/math/special/dabs' );
*
* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* dabs( x.length, x, 1, y, 1 );
* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* @example
* var dabs = require( '@stdlib/strided/math/special/dabs' );
*
* var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* dabs.ndarray( x.length, x, 1, 0, y, 1, 0 );
* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* @example
* var factory = require( '@stdlib/strided/math/special/dabs' ).wasm;
*
* // Create a new WASM instance:
* var wasm = factory();
*
* // Number of data elements:
* var N = 5;
*
* // Allocate space on the heap:
* var xbytes = wasm.malloc( N * 8 ); // 8 bytes per double
* var ybytes = wasm.malloc( N * 8 );
*
* // Create Float64Array views:
* var x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );
* var y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
*
* // Copy data to the heap:
* x.set( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
* y.set( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* // Evaluate:
* wasm( N, xbytes, 1, ybytes, 1 );
*
* // Extract the results from the heap:
* var z = new Float64Array( N );
* var i;
* for ( i = 0; i < N; i++ ) {
*     z[ i ] = y[ i ];
* }
* // z => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]
*
* // Free the memory:
* wasm.free( xbytes );
* wasm.free( ybytes );
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var wasm = require( './wasm.js' );


// MAIN //

var dabs = tryRequire( join( __dirname, './native.js' ) );
if ( dabs instanceof Error ) {
	dabs = require( './main.js' );
}
setReadOnly( dabs, 'wasm', wasm );


// EXPORTS //

module.exports = dabs;
