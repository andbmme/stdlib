
{{alias}}( N, x, strideX, y, strideY )
    Computes the absolute value for each element in `x` and assigns the result
    to an element in `y`.

    The `N` and `stride` parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    y: Float64Array
        Destination array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: Float64Array
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ -1.0, -2.0, -3.0, -4.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( x.length, x, 1, y, 1 )
    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]

    // Using `N` and `stride` parameters:
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( N, x, 2, y, -1 )
    <Float64Array>[ 0.0, 0.0, 3.0, 1.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ -1.0, -2.0, -3.0, -4.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > {{alias}}( N, x1, -2, y1, 1 )
    <Float64Array>[ 4.0, 2.0 ]
    > y0
    <Float64Array>[ 0.0, 0.0, 4.0, 2.0 ]


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Computes the absolute value for each element in `x` and assigns the result
    to an element in `y`, with alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offsetX` and `offsetY` parameters support indexing semantics
    based on starting indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: Float64Array
        Destination array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: Float64Array
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ -1.0, -2.0, -3.0, -4.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0 )
    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float64}}( [ -1.0, -2.0, -3.0, -4.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}.ndarray( N, x, 2, 1, y, -1, y.length-1 )
    <Float64Array>[ 0.0, 0.0, 4.0, 2.0 ]


{{alias}}.wasm( [options] )
    Returns a memory managed function to compute the absolute value for each
    element in `x` and assigns the result to an element in `y`.

    For externally defined `Float64Arrays`, data must be copied to the heap.

    Parameters
    ----------
    options: Object (optional)
        Options.

    options.memory: integer (optional)
        Total memory. If not provided a buffer, setting the memory option
        instructs the returned function to allocate an internal memory store of
        the specified size.

    options.stack: integer (optional)
        Total stack size. Must be less than the memory option and large enough
        for a program's needs. Default: `1024` bytes.

    options.buffer: ArrayBuffer (optional)
        `ArrayBuffer` serving as the underlying memory store. If not provided,
        each returned function will allocate and manage its own memory. If
        provided a memory option, the buffer `byteLength` must equal the
        specified total memory.

    Returns
    -------
    out: Function
        Memory managed function.

    Examples
    --------
    > var wasm = {{alias}}.wasm();
    > var N = 5;

    // Allocate space on the heap:
    > var xbytes = wasm.malloc( N * 8 );
    > var ybytes = wasm.malloc( N * 8 );

    // Create Float64Array views:
    > var x = new {{alias:@stdlib/array/float64}}( xbytes.buffer, xbytes.byteOffset, N );
    > var y = new {{alias:@stdlib/array/float64}}( ybytes.buffer, ybytes.byteOffset, N );

    // Copy data to the heap:
    > x.set( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
    > y.set( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

    // Evaluate:
    > wasm( x.length, xbytes, 1, ybytes, 1 );
    > y
    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]

    // Free the memory:
    > wasm.free( xbytes );
    > wasm.free( ybytes );

    See Also
    --------

