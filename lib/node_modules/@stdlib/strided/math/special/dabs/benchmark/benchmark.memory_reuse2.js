/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var pow = require( '@stdlib/math/base/special/pow' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var tryRequire = require( '@stdlib/utils/try-require' );
var pkg = require( './../package.json' ).name;
var dabs = require( './../lib/main.js' );
var factory = require( './../lib/wasm.js' );


// VARIABLES //

var ndabs = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( ndabs instanceof Error )
};


// FUNCTIONS //

/**
* Creates a benchmark function for measuring vanilla JavaScript interface.
*
* @private
* @param {Float64Array} x - array buffer
* @param {Float64Array} y - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark1( x, y ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				x[ j ] = ( randu()*200.0 ) - 100.0;
			}
			z = dabs( x.length, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}

/**
* Creates a benchmark function for measuring native add-on interface.
*
* @private
* @param {Float64Array} x - array buffer
* @param {Float64Array} y - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark2( x, y ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				x[ j ] = ( randu()*200.0 ) - 100.0;
			}
			z = ndabs( x.length, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}

/**
* Creates a benchmark function for measuring WASM interface and using heap `setValue` method.
*
* @private
* @param {Float64Array} x - array buffer
* @param {Float64Array} y - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark3( x, y ) {
	var xbytes;
	var ybytes;
	var nbytes;
	var wasm;

	wasm = factory();

	nbytes = x.length * x.BYTES_PER_ELEMENT;

	xbytes = wasm.malloc( nbytes );
	ybytes = wasm.malloc( nbytes );

	xbytes.set( new Uint8Array( x.buffer ) );
	ybytes.set( new Uint8Array( y.buffer ) );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var v;
		var i;
		var j;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				v = ( randu()*200.0 ) - 100.0;
				xbytes.setValue( j * nbytes, v );

				v = ( randu()*200.0 ) - 100.0;
				ybytes.setValue( j * nbytes, v );
			}
			z = wasm( x.length, xbytes, 1, ybytes, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}

/**
* Creates a benchmark function for measuring WASM interface and using views.
*
* @private
* @param {Float64Array} x - array buffer
* @param {Float64Array} y - array buffer
* @returns {Function} benchmark function
*/
function createBenchmark4( x, y ) {
	var xbytes;
	var ybytes;
	var nbytes;
	var wasm;

	wasm = factory();

	nbytes = x.length * x.BYTES_PER_ELEMENT;

	xbytes = wasm.malloc( nbytes );
	ybytes = wasm.malloc( nbytes );

	xbytes.set( new Uint8Array( x.buffer ) );
	ybytes.set( new Uint8Array( y.buffer ) );

	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var xview;
		var yview;
		var z;
		var v;
		var i;
		var j;

		xview = new Float64Array( xbytes.buffer, xbytes.byteOffset, x.length );
		yview = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			for ( j = 0; j < x.length; j++ ) {
				v = ( randu()*200.0 ) - 100.0;
				xview[ j ] = v;

				v = ( randu()*200.0 ) - 100.0;
				yview[ j ] = v;
			}
			z = wasm( x.length, xbytes, 1, ybytes, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var x;
	var y;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );

		x = new Float64Array( len );
		y = new Float64Array( len );

		f = createBenchmark1( x, y );
		bench( pkg+'::memory-reuse,shared-array,main:len='+len, f );

		f = createBenchmark2( x, y );
		bench( pkg+'::memory-reuse,shared-array,native:len='+len, opts, f );

		f = createBenchmark3( x, y );
		bench( pkg+'::memory-reuse,shared-array,wasm,set-value:len='+len, f );

		f = createBenchmark4( x, y );
		bench( pkg+'::memory-reuse,shared-array,wasm,view:len='+len, f );
	}
}

main();
