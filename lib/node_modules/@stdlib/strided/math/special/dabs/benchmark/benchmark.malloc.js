/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var pkg = require( './../package.json' ).name;
var factory = require( './../lib/wasm.js' );


// FUNCTIONS //

/**
* Wraps `dabs`, explicitly allocating upon receiving typed arrays. This would need to happen if one wanted to provide unique externally defined arrays to a WASM interface.
*
* @private
* @param {Function} dabs - `dabs`
* @param {PositiveInteger} N - number of elements
* @param {Float64Array} x - input array
* @param {integer} strideX - `x` stride length
* @param {Float64Array} y - destination array
* @param {integer} strideY - `y` stride length
* @returns {Float64Array} destination array
*/
function wrapper( dabs, N, x, strideX, y, strideY ) {
	var nbytes;
	var xbytes;
	var ybytes;
	var view;
	var i;

	// Determine the number of bytes:
	nbytes = x.length * x.BYTES_PER_ELEMENT;

	// Allocate space on the heap:
	xbytes = dabs.malloc( nbytes );
	ybytes = dabs.malloc( nbytes );

	// Copy the data to the heap:
	xbytes.set( new Uint8Array( x.buffer ) );
	ybytes.set( new Uint8Array( y.buffer ) );

	// Evaluate:
	dabs( N, xbytes, strideX, ybytes, strideY );

	// Extract the results from the heap:
	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	for ( i = 0; i < N; i++ ) {
		y[ i ] = view[ i ];
	}
	// Free the memory:
	dabs.free( xbytes );
	dabs.free( ybytes );

	return y;
}

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark( len ) {
	var dabs;
	var x;
	var y;
	var i;

	dabs = factory();

	x = new Float64Array( len );
	y = new Float64Array( len );
	for ( i = 0; i < len; i++ ) {
		x[ i ] = ( randu()*200.0 ) - 100.0;
	}
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var z;
		var i;

		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			z = wrapper( dabs, x.length, x, 1, y, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );
		f = createBenchmark( len );
		bench( pkg+'::wasm,malloc:len='+len, f );
	}
}

main();
