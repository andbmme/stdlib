/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var randu = require( '@stdlib/random/base/randu' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var pow = require( '@stdlib/math/base/special/pow' );
var tryFunction = require( '@stdlib/utils/try-function' );
var Float64Array = require( '@stdlib/array/float64' );
var pkg = require( './../package.json' ).name;
var factory = require( './../lib/dabs.wasm.js' );


// VARIABLES //

var opts;
if ( tryFunction( factory )() instanceof Error ) {
	opts = {};
	opts.skip = true;
} else {
	opts = {};
}


// FUNCTIONS //

/**
* Creates a benchmark function.
*
* @private
* @param {PositiveInteger} len - array length
* @returns {Function} benchmark function
*/
function createBenchmark( len ) {
	return benchmark;

	/**
	* Benchmark function.
	*
	* @private
	* @param {Benchmark} b - benchmark instance
	*/
	function benchmark( b ) {
		var xbytes;
		var ybytes;
		var dabs;
		var x;
		var y;
		var z;
		var i;

		dabs = factory();

		xbytes = dabs.malloc( len * 8 ); // 8 bytes per double
		ybytes = dabs.malloc( len * 8 );

		x = new Float64Array( xbytes.buffer, xbytes.byteOffset, len );
		y = new Float64Array( ybytes.buffer, ybytes.byteOffset, len );

		for ( i = 0; i < len; i++ ) {
			x[ i ] = ( randu()*200.0 ) - 100.0;
			y[ i ] = 0.0;
		}
		b.tic();
		for ( i = 0; i < b.iterations; i++ ) {
			z = dabs( x.length, xbytes, 1, ybytes, 1 );
			if ( isnan( z ) ) {
				b.fail( 'should not return NaN' );
			}
		}
		b.toc();
		if ( isnan( z ) ) {
			b.fail( 'should not return NaN' );
		}
		dabs.free( xbytes );
		dabs.free( ybytes );
		b.pass( 'benchmark finished' );
		b.end();
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var len;
	var min;
	var max;
	var f;
	var i;

	min = 1; // 10^min
	max = 6; // 10^max

	for ( i = min; i <= max; i++ ) {
		len = pow( 10, i );
		f = createBenchmark( len );
		bench( pkg+'::wasm:len='+len, opts, f );
	}
}

main();
