/* eslint-disable */var Module = function(Module) {
  Module = Module || {};

var Module = typeof Module !== "undefined" ? Module : {};
Module["print"] = (function() {});
Module["printErr"] = (function() {});
var moduleOverrides = {};
var key;
for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
Module["arguments"] = [];
Module["thisProgram"] = "./this.program";
Module["quit"] = (function(status, toThrow) {
 throw toThrow;
});
Module["preRun"] = [];
Module["postRun"] = [];
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
if (Module["ENVIRONMENT"]) {
 if (Module["ENVIRONMENT"] === "WEB") {
  ENVIRONMENT_IS_WEB = true;
 } else if (Module["ENVIRONMENT"] === "WORKER") {
  ENVIRONMENT_IS_WORKER = true;
 } else if (Module["ENVIRONMENT"] === "NODE") {
  ENVIRONMENT_IS_NODE = true;
 } else if (Module["ENVIRONMENT"] === "SHELL") {
  ENVIRONMENT_IS_SHELL = true;
 } else {
  throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.");
 }
} else {
 ENVIRONMENT_IS_WEB = typeof window === "object";
 ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
 ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
 ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
 var nodeFS;
 var nodePath;
 Module["read"] = function shell_read(filename, binary) {
  var ret;
  ret = tryParseAsDataURI(filename);
  if (!ret) {
   if (!nodeFS) nodeFS = require("fs");
   if (!nodePath) nodePath = require("path");
   filename = nodePath["normalize"](filename);
   ret = nodeFS["readFileSync"](filename);
  }
  return binary ? ret : ret.toString();
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 if (process["argv"].length > 1) {
  Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
 }
 Module["arguments"] = process["argv"].slice(2);
 process["on"]("unhandledRejection", (function(reason, p) {
  process["exit"](1);
 }));
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof read != "undefined") {
  Module["read"] = function shell_read(f) {
   var data = tryParseAsDataURI(f);
   if (data) {
    return intArrayToString(data);
   }
   return read(f);
  };
 }
 Module["readBinary"] = function readBinary(f) {
  var data;
  data = tryParseAsDataURI(f);
  if (data) {
   return data;
  }
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof quit === "function") {
  Module["quit"] = (function(status, toThrow) {
   quit(status);
  });
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function shell_read(url) {
  try {
   var xhr = new XMLHttpRequest;
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  } catch (err) {
   var data = tryParseAsDataURI(url);
   if (data) {
    return intArrayToString(data);
   }
   throw err;
  }
 };
 if (ENVIRONMENT_IS_WORKER) {
  Module["readBinary"] = function readBinary(url) {
   try {
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   } catch (err) {
    var data = tryParseAsDataURI(url);
    if (data) {
     return data;
    }
    throw err;
   }
  };
 }
 Module["readAsync"] = function readAsync(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
    return;
   }
   var data = tryParseAsDataURI(url);
   if (data) {
    onload(data.buffer);
    return;
   }
   onerror();
  };
  xhr.onerror = onerror;
  xhr.send(null);
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 Module["setWindowTitle"] = (function(title) {
  document.title = title;
 });
}
Module["print"] = typeof console !== "undefined" ? console.log.bind(console) : typeof print !== "undefined" ? print : null;
Module["printErr"] = typeof printErr !== "undefined" ? printErr : typeof console !== "undefined" && console.warn.bind(console) || Module["print"];
Module.print = Module["print"];
Module.printErr = Module["printErr"];
for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
moduleOverrides = undefined;
var STACK_ALIGN = 16;
function staticAlloc(size) {
 assert(!staticSealed);
 var ret = STATICTOP;
 STATICTOP = STATICTOP + size + 15 & -16;
 return ret;
}
function dynamicAlloc(size) {
 assert(DYNAMICTOP_PTR);
 var ret = HEAP32[DYNAMICTOP_PTR >> 2];
 var end = ret + size + 15 & -16;
 HEAP32[DYNAMICTOP_PTR >> 2] = end;
 if (end >= TOTAL_MEMORY) {
  var success = enlargeMemory();
  if (!success) {
   HEAP32[DYNAMICTOP_PTR >> 2] = ret;
   return 0;
  }
 }
 return ret;
}
function alignMemory(size, factor) {
 if (!factor) factor = STACK_ALIGN;
 var ret = size = Math.ceil(size / factor) * factor;
 return ret;
}
function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;
 case "i16":
  return 2;
 case "i32":
  return 4;
 case "i64":
  return 8;
 case "float":
  return 4;
 case "double":
  return 8;
 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = parseInt(type.substr(1));
    assert(bits % 8 === 0);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}
function warnOnce(text) {
 if (!warnOnce.shown) warnOnce.shown = {};
 if (!warnOnce.shown[text]) {
  warnOnce.shown[text] = 1;
  Module.printErr(text);
 }
}
var jsCallStartIndex = 1;
var functionPointers = new Array(0);
var funcWrappers = {};
function dynCall(sig, ptr, args) {
 if (args && args.length) {
  return Module["dynCall_" + sig].apply(null, [ ptr ].concat(args));
 } else {
  return Module["dynCall_" + sig].call(null, ptr);
 }
}
var GLOBAL_BASE = 8;
var ABORT = 0;
var EXITSTATUS = 0;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
function getCFunc(ident) {
 var func = Module["_" + ident];
 assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
 return func;
}
var JSfuncs = {
 "stackSave": (function() {
  stackSave();
 }),
 "stackRestore": (function() {
  stackRestore();
 }),
 "arrayToC": (function(arr) {
  var ret = stackAlloc(arr.length);
  writeArrayToMemory(arr, ret);
  return ret;
 }),
 "stringToC": (function(str) {
  var ret = 0;
  if (str !== null && str !== undefined && str !== 0) {
   var len = (str.length << 2) + 1;
   ret = stackAlloc(len);
   stringToUTF8(str, ret, len);
  }
  return ret;
 })
};
var toC = {
 "string": JSfuncs["stringToC"],
 "array": JSfuncs["arrayToC"]
};
function ccall(ident, returnType, argTypes, args, opts) {
 var func = getCFunc(ident);
 var cArgs = [];
 var stack = 0;
 if (args) {
  for (var i = 0; i < args.length; i++) {
   var converter = toC[argTypes[i]];
   if (converter) {
    if (stack === 0) stack = stackSave();
    cArgs[i] = converter(args[i]);
   } else {
    cArgs[i] = args[i];
   }
  }
 }
 var ret = func.apply(null, cArgs);
 if (returnType === "string") ret = Pointer_stringify(ret);
 if (stack !== 0) {
  stackRestore(stack);
 }
 return ret;
}
function cwrap(ident, returnType, argTypes) {
 argTypes = argTypes || [];
 var cfunc = getCFunc(ident);
 var numericArgs = argTypes.every((function(type) {
  return type === "number";
 }));
 var numericRet = returnType !== "string";
 if (numericRet && numericArgs) {
  return cfunc;
 }
 return (function() {
  return ccall(ident, returnType, argTypes, arguments);
 });
}
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for getValue: " + type);
 }
 return null;
}
var ALLOC_STATIC = 2;
var ALLOC_NONE = 4;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return UTF8ToString(ptr);
}
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
function UTF8ArrayToString(u8Array, idx) {
 var endPtr = idx;
 while (u8Array[endPtr]) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var u0, u1, u2, u3, u4, u5;
  var str = "";
  while (1) {
   u0 = u8Array[idx++];
   if (!u0) return str;
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u3 = u8Array[idx++] & 63;
    if ((u0 & 248) == 240) {
     u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
    } else {
     u4 = u8Array[idx++] & 63;
     if ((u0 & 252) == 248) {
      u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
     } else {
      u5 = u8Array[idx++] & 63;
      u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
     }
    }
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
}
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
function demangle(func) {
 return func;
}
function demangleAll(text) {
 var regex = /__Z[\w\d_]+/g;
 return text.replace(regex, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBufferViews() {
 Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
 Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
 Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE, STATICTOP, staticSealed;
var STACK_BASE, STACKTOP, STACK_MAX;
var DYNAMIC_BASE, DYNAMICTOP_PTR;
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;
function abortOnCannotGrowMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
 abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 1024;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
if (Module["buffer"]) {
 buffer = Module["buffer"];
} else {
 {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
 }
 Module["buffer"] = buffer;
}
updateGlobalBufferViews();
function getTotalMemory() {
 return TOTAL_MEMORY;
}
HEAP32[0] = 1668509029;
HEAP16[1] = 25459;
if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) throw "Runtime error: expected the system to be little-endian!";
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
function writeArrayToMemory(array, buffer) {
 HEAP8.set(array, buffer);
}
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var dataURIPrefix = "data:application/octet-stream;base64,";
function isDataURI(filename) {
 return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}
STATIC_BASE = GLOBAL_BASE;
STATICTOP = STATIC_BASE + 512;
__ATINIT__.push();
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
function _abort() {
 Module["abort"]();
}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
DYNAMICTOP_PTR = staticAlloc(4);
STACK_BASE = STACKTOP = alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
staticSealed = true;
var ASSERTIONS = false;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
var decodeBase64 = typeof atob === "function" ? atob : (function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
});
function intArrayFromBase64(s) {
 if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
  var buf;
  try {
   buf = Buffer.from(s, "base64");
  } catch (_) {
   buf = new Buffer(s, "base64");
  }
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
 }
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}
function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "enlargeMemory": enlargeMemory,
 "getTotalMemory": getTotalMemory,
 "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
 "___setErrNo": ___setErrNo,
 "_abort": _abort,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "DYNAMICTOP_PTR": DYNAMICTOP_PTR,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX
};
// EMSCRIPTEN_START_ASM

var asm = (/** @suppress {uselessCode} */ function(global,env,buffer) {

 "use asm";
 var a = new global.Int8Array(buffer);
 var b = new global.Int16Array(buffer);
 var c = new global.Int32Array(buffer);
 var d = new global.Uint8Array(buffer);
 var e = new global.Uint16Array(buffer);
 var f = new global.Uint32Array(buffer);
 var g = new global.Float32Array(buffer);
 var h = new global.Float64Array(buffer);
 var i = env.DYNAMICTOP_PTR | 0;
 var j = env.tempDoublePtr | 0;
 var k = env.ABORT | 0;
 var l = env.STACKTOP | 0;
 var m = env.STACK_MAX | 0;
 var n = 0;
 var o = 0;
 var p = 0;
 var q = 0;
 var r = global.NaN, s = global.Infinity;
 var t = 0, u = 0, v = 0, w = 0, x = 0.0;
 var y = 0;
 var z = global.Math.floor;
 var A = global.Math.abs;
 var B = global.Math.sqrt;
 var C = global.Math.pow;
 var D = global.Math.cos;
 var E = global.Math.sin;
 var F = global.Math.tan;
 var G = global.Math.acos;
 var H = global.Math.asin;
 var I = global.Math.atan;
 var J = global.Math.atan2;
 var K = global.Math.exp;
 var L = global.Math.log;
 var M = global.Math.ceil;
 var N = global.Math.imul;
 var O = global.Math.min;
 var P = global.Math.max;
 var Q = global.Math.clz32;
 var R = env.abort;
 var S = env.assert;
 var T = env.enlargeMemory;
 var U = env.getTotalMemory;
 var V = env.abortOnCannotGrowMemory;
 var W = env.___setErrNo;
 var X = env._abort;
 var Y = env._emscripten_memcpy_big;
 var Z = 0.0;
 
// EMSCRIPTEN_START_FUNCS

function ha(a) {
 a = a | 0;
 var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0;
 C = l;
 l = l + 16 | 0;
 i = C;
 do if (a >>> 0 < 245) {
  o = a >>> 0 < 11 ? 16 : a + 11 & -8;
  a = o >>> 3;
  s = c[2] | 0;
  b = s >>> a;
  if (b & 3 | 0) {
   b = (b & 1 ^ 1) + a | 0;
   d = 48 + (b << 1 << 2) | 0;
   e = d + 8 | 0;
   f = c[e >> 2] | 0;
   g = f + 8 | 0;
   h = c[g >> 2] | 0;
   do if ((h | 0) == (d | 0)) c[2] = s & ~(1 << b); else {
    if ((c[6] | 0) >>> 0 > h >>> 0) X();
    a = h + 12 | 0;
    if ((c[a >> 2] | 0) == (f | 0)) {
     c[a >> 2] = d;
     c[e >> 2] = h;
     break;
    } else X();
   } while (0);
   B = b << 3;
   c[f + 4 >> 2] = B | 3;
   B = f + B + 4 | 0;
   c[B >> 2] = c[B >> 2] | 1;
   B = g;
   l = C;
   return B | 0;
  }
  r = c[4] | 0;
  if (o >>> 0 > r >>> 0) {
   if (b | 0) {
    i = 2 << a;
    b = b << a & (i | 0 - i);
    b = (b & 0 - b) + -1 | 0;
    i = b >>> 12 & 16;
    b = b >>> i;
    e = b >>> 5 & 8;
    b = b >>> e;
    h = b >>> 2 & 4;
    b = b >>> h;
    d = b >>> 1 & 2;
    b = b >>> d;
    a = b >>> 1 & 1;
    a = (e | i | h | d | a) + (b >>> a) | 0;
    b = 48 + (a << 1 << 2) | 0;
    d = b + 8 | 0;
    h = c[d >> 2] | 0;
    i = h + 8 | 0;
    e = c[i >> 2] | 0;
    do if ((e | 0) == (b | 0)) {
     j = s & ~(1 << a);
     c[2] = j;
    } else {
     if ((c[6] | 0) >>> 0 > e >>> 0) X();
     f = e + 12 | 0;
     if ((c[f >> 2] | 0) == (h | 0)) {
      c[f >> 2] = b;
      c[d >> 2] = e;
      j = s;
      break;
     } else X();
    } while (0);
    B = a << 3;
    g = B - o | 0;
    c[h + 4 >> 2] = o | 3;
    f = h + o | 0;
    c[f + 4 >> 2] = g | 1;
    c[h + B >> 2] = g;
    if (r | 0) {
     e = c[7] | 0;
     a = r >>> 3;
     d = 48 + (a << 1 << 2) | 0;
     a = 1 << a;
     if (!(j & a)) {
      c[2] = j | a;
      k = d;
      m = d + 8 | 0;
     } else {
      a = d + 8 | 0;
      b = c[a >> 2] | 0;
      if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
       k = b;
       m = a;
      }
     }
     c[m >> 2] = e;
     c[k + 12 >> 2] = e;
     c[e + 8 >> 2] = k;
     c[e + 12 >> 2] = d;
    }
    c[4] = g;
    c[7] = f;
    B = i;
    l = C;
    return B | 0;
   }
   k = c[3] | 0;
   if (k) {
    b = (k & 0 - k) + -1 | 0;
    A = b >>> 12 & 16;
    b = b >>> A;
    z = b >>> 5 & 8;
    b = b >>> z;
    B = b >>> 2 & 4;
    b = b >>> B;
    d = b >>> 1 & 2;
    b = b >>> d;
    a = b >>> 1 & 1;
    a = c[312 + ((z | A | B | d | a) + (b >>> a) << 2) >> 2] | 0;
    b = (c[a + 4 >> 2] & -8) - o | 0;
    d = c[a + 16 + (((c[a + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!d) {
     j = a;
     h = b;
    } else {
     do {
      A = (c[d + 4 >> 2] & -8) - o | 0;
      B = A >>> 0 < b >>> 0;
      b = B ? A : b;
      a = B ? d : a;
      d = c[d + 16 + (((c[d + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
     } while ((d | 0) != 0);
     j = a;
     h = b;
    }
    f = c[6] | 0;
    if (f >>> 0 > j >>> 0) X();
    i = j + o | 0;
    if (i >>> 0 <= j >>> 0) X();
    g = c[j + 24 >> 2] | 0;
    d = c[j + 12 >> 2] | 0;
    do if ((d | 0) == (j | 0)) {
     b = j + 20 | 0;
     a = c[b >> 2] | 0;
     if (!a) {
      b = j + 16 | 0;
      a = c[b >> 2] | 0;
      if (!a) {
       n = 0;
       break;
      }
     }
     while (1) {
      d = a + 20 | 0;
      e = c[d >> 2] | 0;
      if (e | 0) {
       a = e;
       b = d;
       continue;
      }
      d = a + 16 | 0;
      e = c[d >> 2] | 0;
      if (!e) break; else {
       a = e;
       b = d;
      }
     }
     if (f >>> 0 > b >>> 0) X(); else {
      c[b >> 2] = 0;
      n = a;
      break;
     }
    } else {
     e = c[j + 8 >> 2] | 0;
     if (f >>> 0 > e >>> 0) X();
     a = e + 12 | 0;
     if ((c[a >> 2] | 0) != (j | 0)) X();
     b = d + 8 | 0;
     if ((c[b >> 2] | 0) == (j | 0)) {
      c[a >> 2] = d;
      c[b >> 2] = e;
      n = d;
      break;
     } else X();
    } while (0);
    a : do if (g | 0) {
     a = c[j + 28 >> 2] | 0;
     b = 312 + (a << 2) | 0;
     do if ((j | 0) == (c[b >> 2] | 0)) {
      c[b >> 2] = n;
      if (!n) {
       c[3] = k & ~(1 << a);
       break a;
      }
     } else if ((c[6] | 0) >>> 0 > g >>> 0) X(); else {
      c[g + 16 + (((c[g + 16 >> 2] | 0) != (j | 0) & 1) << 2) >> 2] = n;
      if (!n) break a; else break;
     } while (0);
     b = c[6] | 0;
     if (b >>> 0 > n >>> 0) X();
     c[n + 24 >> 2] = g;
     a = c[j + 16 >> 2] | 0;
     do if (a | 0) if (b >>> 0 > a >>> 0) X(); else {
      c[n + 16 >> 2] = a;
      c[a + 24 >> 2] = n;
      break;
     } while (0);
     a = c[j + 20 >> 2] | 0;
     if (a | 0) if ((c[6] | 0) >>> 0 > a >>> 0) X(); else {
      c[n + 20 >> 2] = a;
      c[a + 24 >> 2] = n;
      break;
     }
    } while (0);
    if (h >>> 0 < 16) {
     B = h + o | 0;
     c[j + 4 >> 2] = B | 3;
     B = j + B + 4 | 0;
     c[B >> 2] = c[B >> 2] | 1;
    } else {
     c[j + 4 >> 2] = o | 3;
     c[i + 4 >> 2] = h | 1;
     c[i + h >> 2] = h;
     if (r | 0) {
      e = c[7] | 0;
      a = r >>> 3;
      d = 48 + (a << 1 << 2) | 0;
      a = 1 << a;
      if (!(s & a)) {
       c[2] = s | a;
       p = d;
       q = d + 8 | 0;
      } else {
       a = d + 8 | 0;
       b = c[a >> 2] | 0;
       if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
        p = b;
        q = a;
       }
      }
      c[q >> 2] = e;
      c[p + 12 >> 2] = e;
      c[e + 8 >> 2] = p;
      c[e + 12 >> 2] = d;
     }
     c[4] = h;
     c[7] = i;
    }
    B = j + 8 | 0;
    l = C;
    return B | 0;
   }
  }
 } else if (a >>> 0 > 4294967231) o = -1; else {
  a = a + 11 | 0;
  o = a & -8;
  k = c[3] | 0;
  if (k) {
   d = 0 - o | 0;
   a = a >>> 8;
   if (!a) h = 0; else if (o >>> 0 > 16777215) h = 31; else {
    q = (a + 1048320 | 0) >>> 16 & 8;
    v = a << q;
    p = (v + 520192 | 0) >>> 16 & 4;
    v = v << p;
    h = (v + 245760 | 0) >>> 16 & 2;
    h = 14 - (p | q | h) + (v << h >>> 15) | 0;
    h = o >>> (h + 7 | 0) & 1 | h << 1;
   }
   b = c[312 + (h << 2) >> 2] | 0;
   b : do if (!b) {
    b = 0;
    a = 0;
    v = 81;
   } else {
    a = 0;
    g = o << ((h | 0) == 31 ? 0 : 25 - (h >>> 1) | 0);
    f = 0;
    while (1) {
     e = (c[b + 4 >> 2] & -8) - o | 0;
     if (e >>> 0 < d >>> 0) if (!e) {
      a = b;
      d = 0;
      e = b;
      v = 85;
      break b;
     } else {
      a = b;
      d = e;
     }
     e = c[b + 20 >> 2] | 0;
     b = c[b + 16 + (g >>> 31 << 2) >> 2] | 0;
     f = (e | 0) == 0 | (e | 0) == (b | 0) ? f : e;
     e = (b | 0) == 0;
     if (e) {
      b = f;
      v = 81;
      break;
     } else g = g << ((e ^ 1) & 1);
    }
   } while (0);
   if ((v | 0) == 81) {
    if ((b | 0) == 0 & (a | 0) == 0) {
     a = 2 << h;
     a = k & (a | 0 - a);
     if (!a) break;
     q = (a & 0 - a) + -1 | 0;
     m = q >>> 12 & 16;
     q = q >>> m;
     j = q >>> 5 & 8;
     q = q >>> j;
     n = q >>> 2 & 4;
     q = q >>> n;
     p = q >>> 1 & 2;
     q = q >>> p;
     b = q >>> 1 & 1;
     a = 0;
     b = c[312 + ((j | m | n | p | b) + (q >>> b) << 2) >> 2] | 0;
    }
    if (!b) {
     j = a;
     h = d;
    } else {
     e = b;
     v = 85;
    }
   }
   if ((v | 0) == 85) while (1) {
    v = 0;
    b = (c[e + 4 >> 2] & -8) - o | 0;
    q = b >>> 0 < d >>> 0;
    b = q ? b : d;
    a = q ? e : a;
    e = c[e + 16 + (((c[e + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!e) {
     j = a;
     h = b;
     break;
    } else {
     d = b;
     v = 85;
    }
   }
   if (j) if (h >>> 0 < ((c[4] | 0) - o | 0) >>> 0) {
    f = c[6] | 0;
    if (f >>> 0 > j >>> 0) X();
    i = j + o | 0;
    if (i >>> 0 <= j >>> 0) X();
    g = c[j + 24 >> 2] | 0;
    d = c[j + 12 >> 2] | 0;
    do if ((d | 0) == (j | 0)) {
     b = j + 20 | 0;
     a = c[b >> 2] | 0;
     if (!a) {
      b = j + 16 | 0;
      a = c[b >> 2] | 0;
      if (!a) {
       r = 0;
       break;
      }
     }
     while (1) {
      d = a + 20 | 0;
      e = c[d >> 2] | 0;
      if (e | 0) {
       a = e;
       b = d;
       continue;
      }
      d = a + 16 | 0;
      e = c[d >> 2] | 0;
      if (!e) break; else {
       a = e;
       b = d;
      }
     }
     if (f >>> 0 > b >>> 0) X(); else {
      c[b >> 2] = 0;
      r = a;
      break;
     }
    } else {
     e = c[j + 8 >> 2] | 0;
     if (f >>> 0 > e >>> 0) X();
     a = e + 12 | 0;
     if ((c[a >> 2] | 0) != (j | 0)) X();
     b = d + 8 | 0;
     if ((c[b >> 2] | 0) == (j | 0)) {
      c[a >> 2] = d;
      c[b >> 2] = e;
      r = d;
      break;
     } else X();
    } while (0);
    c : do if (!g) s = k; else {
     a = c[j + 28 >> 2] | 0;
     b = 312 + (a << 2) | 0;
     do if ((j | 0) == (c[b >> 2] | 0)) {
      c[b >> 2] = r;
      if (!r) {
       s = k & ~(1 << a);
       c[3] = s;
       break c;
      }
     } else if ((c[6] | 0) >>> 0 > g >>> 0) X(); else {
      c[g + 16 + (((c[g + 16 >> 2] | 0) != (j | 0) & 1) << 2) >> 2] = r;
      if (!r) {
       s = k;
       break c;
      } else break;
     } while (0);
     b = c[6] | 0;
     if (b >>> 0 > r >>> 0) X();
     c[r + 24 >> 2] = g;
     a = c[j + 16 >> 2] | 0;
     do if (a | 0) if (b >>> 0 > a >>> 0) X(); else {
      c[r + 16 >> 2] = a;
      c[a + 24 >> 2] = r;
      break;
     } while (0);
     a = c[j + 20 >> 2] | 0;
     if (!a) s = k; else if ((c[6] | 0) >>> 0 > a >>> 0) X(); else {
      c[r + 20 >> 2] = a;
      c[a + 24 >> 2] = r;
      s = k;
      break;
     }
    } while (0);
    do if (h >>> 0 < 16) {
     B = h + o | 0;
     c[j + 4 >> 2] = B | 3;
     B = j + B + 4 | 0;
     c[B >> 2] = c[B >> 2] | 1;
    } else {
     c[j + 4 >> 2] = o | 3;
     c[i + 4 >> 2] = h | 1;
     c[i + h >> 2] = h;
     a = h >>> 3;
     if (h >>> 0 < 256) {
      d = 48 + (a << 1 << 2) | 0;
      b = c[2] | 0;
      a = 1 << a;
      if (!(b & a)) {
       c[2] = b | a;
       t = d;
       u = d + 8 | 0;
      } else {
       a = d + 8 | 0;
       b = c[a >> 2] | 0;
       if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
        t = b;
        u = a;
       }
      }
      c[u >> 2] = i;
      c[t + 12 >> 2] = i;
      c[i + 8 >> 2] = t;
      c[i + 12 >> 2] = d;
      break;
     }
     a = h >>> 8;
     if (!a) a = 0; else if (h >>> 0 > 16777215) a = 31; else {
      A = (a + 1048320 | 0) >>> 16 & 8;
      B = a << A;
      z = (B + 520192 | 0) >>> 16 & 4;
      B = B << z;
      a = (B + 245760 | 0) >>> 16 & 2;
      a = 14 - (z | A | a) + (B << a >>> 15) | 0;
      a = h >>> (a + 7 | 0) & 1 | a << 1;
     }
     d = 312 + (a << 2) | 0;
     c[i + 28 >> 2] = a;
     b = i + 16 | 0;
     c[b + 4 >> 2] = 0;
     c[b >> 2] = 0;
     b = 1 << a;
     if (!(s & b)) {
      c[3] = s | b;
      c[d >> 2] = i;
      c[i + 24 >> 2] = d;
      c[i + 12 >> 2] = i;
      c[i + 8 >> 2] = i;
      break;
     }
     b = h << ((a | 0) == 31 ? 0 : 25 - (a >>> 1) | 0);
     e = c[d >> 2] | 0;
     while (1) {
      if ((c[e + 4 >> 2] & -8 | 0) == (h | 0)) {
       v = 139;
       break;
      }
      d = e + 16 + (b >>> 31 << 2) | 0;
      a = c[d >> 2] | 0;
      if (!a) {
       v = 136;
       break;
      } else {
       b = b << 1;
       e = a;
      }
     }
     if ((v | 0) == 136) if ((c[6] | 0) >>> 0 > d >>> 0) X(); else {
      c[d >> 2] = i;
      c[i + 24 >> 2] = e;
      c[i + 12 >> 2] = i;
      c[i + 8 >> 2] = i;
      break;
     } else if ((v | 0) == 139) {
      a = e + 8 | 0;
      b = c[a >> 2] | 0;
      B = c[6] | 0;
      if (B >>> 0 <= b >>> 0 & B >>> 0 <= e >>> 0) {
       c[b + 12 >> 2] = i;
       c[a >> 2] = i;
       c[i + 8 >> 2] = b;
       c[i + 12 >> 2] = e;
       c[i + 24 >> 2] = 0;
       break;
      } else X();
     }
    } while (0);
    B = j + 8 | 0;
    l = C;
    return B | 0;
   }
  }
 } while (0);
 d = c[4] | 0;
 if (d >>> 0 >= o >>> 0) {
  a = d - o | 0;
  b = c[7] | 0;
  if (a >>> 0 > 15) {
   B = b + o | 0;
   c[7] = B;
   c[4] = a;
   c[B + 4 >> 2] = a | 1;
   c[b + d >> 2] = a;
   c[b + 4 >> 2] = o | 3;
  } else {
   c[4] = 0;
   c[7] = 0;
   c[b + 4 >> 2] = d | 3;
   B = b + d + 4 | 0;
   c[B >> 2] = c[B >> 2] | 1;
  }
  B = b + 8 | 0;
  l = C;
  return B | 0;
 }
 h = c[5] | 0;
 if (h >>> 0 > o >>> 0) {
  z = h - o | 0;
  c[5] = z;
  B = c[8] | 0;
  A = B + o | 0;
  c[8] = A;
  c[A + 4 >> 2] = z | 1;
  c[B + 4 >> 2] = o | 3;
  B = B + 8 | 0;
  l = C;
  return B | 0;
 }
 if (!(c[120] | 0)) {
  c[122] = 4096;
  c[121] = 4096;
  c[123] = -1;
  c[124] = -1;
  c[125] = 0;
  c[113] = 0;
  c[120] = i & -16 ^ 1431655768;
  a = 4096;
 } else a = c[122] | 0;
 i = o + 48 | 0;
 j = o + 47 | 0;
 g = a + j | 0;
 e = 0 - a | 0;
 k = g & e;
 if (k >>> 0 <= o >>> 0) {
  B = 0;
  l = C;
  return B | 0;
 }
 a = c[112] | 0;
 if (a | 0) {
  t = c[110] | 0;
  u = t + k | 0;
  if (u >>> 0 <= t >>> 0 | u >>> 0 > a >>> 0) {
   B = 0;
   l = C;
   return B | 0;
  }
 }
 d : do if (!(c[113] & 4)) {
  b = c[8] | 0;
  e : do if (!b) v = 163; else {
   d = 456;
   while (1) {
    a = c[d >> 2] | 0;
    if (a >>> 0 <= b >>> 0) {
     f = d + 4 | 0;
     if ((a + (c[f >> 2] | 0) | 0) >>> 0 > b >>> 0) break;
    }
    a = c[d + 8 >> 2] | 0;
    if (!a) {
     v = 163;
     break e;
    } else d = a;
   }
   a = g - h & e;
   if (a >>> 0 < 2147483647) {
    b = na(a | 0) | 0;
    if ((b | 0) == ((c[d >> 2] | 0) + (c[f >> 2] | 0) | 0)) {
     if ((b | 0) != (-1 | 0)) {
      h = a;
      g = b;
      v = 180;
      break d;
     }
    } else {
     e = b;
     v = 171;
    }
   } else a = 0;
  } while (0);
  do if ((v | 0) == 163) {
   f = na(0) | 0;
   if ((f | 0) == (-1 | 0)) a = 0; else {
    a = f;
    b = c[121] | 0;
    d = b + -1 | 0;
    a = ((d & a | 0) == 0 ? 0 : (d + a & 0 - b) - a | 0) + k | 0;
    b = c[110] | 0;
    d = a + b | 0;
    if (a >>> 0 > o >>> 0 & a >>> 0 < 2147483647) {
     e = c[112] | 0;
     if (e | 0) if (d >>> 0 <= b >>> 0 | d >>> 0 > e >>> 0) {
      a = 0;
      break;
     }
     b = na(a | 0) | 0;
     if ((b | 0) == (f | 0)) {
      h = a;
      g = f;
      v = 180;
      break d;
     } else {
      e = b;
      v = 171;
     }
    } else a = 0;
   }
  } while (0);
  do if ((v | 0) == 171) {
   d = 0 - a | 0;
   if (!(i >>> 0 > a >>> 0 & (a >>> 0 < 2147483647 & (e | 0) != (-1 | 0)))) if ((e | 0) == (-1 | 0)) {
    a = 0;
    break;
   } else {
    h = a;
    g = e;
    v = 180;
    break d;
   }
   b = c[122] | 0;
   b = j - a + b & 0 - b;
   if (b >>> 0 >= 2147483647) {
    h = a;
    g = e;
    v = 180;
    break d;
   }
   if ((na(b | 0) | 0) == (-1 | 0)) {
    na(d | 0) | 0;
    a = 0;
    break;
   } else {
    h = b + a | 0;
    g = e;
    v = 180;
    break d;
   }
  } while (0);
  c[113] = c[113] | 4;
  v = 178;
 } else {
  a = 0;
  v = 178;
 } while (0);
 if ((v | 0) == 178) if (k >>> 0 < 2147483647) {
  e = na(k | 0) | 0;
  u = na(0) | 0;
  b = u - e | 0;
  d = b >>> 0 > (o + 40 | 0) >>> 0;
  if (!((e | 0) == (-1 | 0) | d ^ 1 | e >>> 0 < u >>> 0 & ((e | 0) != (-1 | 0) & (u | 0) != (-1 | 0)) ^ 1)) {
   h = d ? b : a;
   g = e;
   v = 180;
  }
 }
 if ((v | 0) == 180) {
  a = (c[110] | 0) + h | 0;
  c[110] = a;
  if (a >>> 0 > (c[111] | 0) >>> 0) c[111] = a;
  k = c[8] | 0;
  do if (!k) {
   B = c[6] | 0;
   if ((B | 0) == 0 | g >>> 0 < B >>> 0) c[6] = g;
   c[114] = g;
   c[115] = h;
   c[117] = 0;
   c[11] = c[120];
   c[10] = -1;
   c[15] = 48;
   c[14] = 48;
   c[17] = 56;
   c[16] = 56;
   c[19] = 64;
   c[18] = 64;
   c[21] = 72;
   c[20] = 72;
   c[23] = 80;
   c[22] = 80;
   c[25] = 88;
   c[24] = 88;
   c[27] = 96;
   c[26] = 96;
   c[29] = 104;
   c[28] = 104;
   c[31] = 112;
   c[30] = 112;
   c[33] = 120;
   c[32] = 120;
   c[35] = 128;
   c[34] = 128;
   c[37] = 136;
   c[36] = 136;
   c[39] = 144;
   c[38] = 144;
   c[41] = 152;
   c[40] = 152;
   c[43] = 160;
   c[42] = 160;
   c[45] = 168;
   c[44] = 168;
   c[47] = 176;
   c[46] = 176;
   c[49] = 184;
   c[48] = 184;
   c[51] = 192;
   c[50] = 192;
   c[53] = 200;
   c[52] = 200;
   c[55] = 208;
   c[54] = 208;
   c[57] = 216;
   c[56] = 216;
   c[59] = 224;
   c[58] = 224;
   c[61] = 232;
   c[60] = 232;
   c[63] = 240;
   c[62] = 240;
   c[65] = 248;
   c[64] = 248;
   c[67] = 256;
   c[66] = 256;
   c[69] = 264;
   c[68] = 264;
   c[71] = 272;
   c[70] = 272;
   c[73] = 280;
   c[72] = 280;
   c[75] = 288;
   c[74] = 288;
   c[77] = 296;
   c[76] = 296;
   B = h + -40 | 0;
   z = g + 8 | 0;
   z = (z & 7 | 0) == 0 ? 0 : 0 - z & 7;
   A = g + z | 0;
   z = B - z | 0;
   c[8] = A;
   c[5] = z;
   c[A + 4 >> 2] = z | 1;
   c[g + B + 4 >> 2] = 40;
   c[9] = c[124];
  } else {
   a = 456;
   do {
    b = c[a >> 2] | 0;
    d = a + 4 | 0;
    e = c[d >> 2] | 0;
    if ((g | 0) == (b + e | 0)) {
     v = 188;
     break;
    }
    a = c[a + 8 >> 2] | 0;
   } while ((a | 0) != 0);
   if ((v | 0) == 188) if (!(c[a + 12 >> 2] & 8)) if (g >>> 0 > k >>> 0 & b >>> 0 <= k >>> 0) {
    c[d >> 2] = e + h;
    B = (c[5] | 0) + h | 0;
    z = k + 8 | 0;
    z = (z & 7 | 0) == 0 ? 0 : 0 - z & 7;
    A = k + z | 0;
    z = B - z | 0;
    c[8] = A;
    c[5] = z;
    c[A + 4 >> 2] = z | 1;
    c[k + B + 4 >> 2] = 40;
    c[9] = c[124];
    break;
   }
   a = c[6] | 0;
   if (g >>> 0 < a >>> 0) {
    c[6] = g;
    i = g;
   } else i = a;
   b = g + h | 0;
   a = 456;
   while (1) {
    if ((c[a >> 2] | 0) == (b | 0)) {
     v = 196;
     break;
    }
    a = c[a + 8 >> 2] | 0;
    if (!a) {
     b = 456;
     break;
    }
   }
   if ((v | 0) == 196) if (!(c[a + 12 >> 2] & 8)) {
    c[a >> 2] = g;
    n = a + 4 | 0;
    c[n >> 2] = (c[n >> 2] | 0) + h;
    n = g + 8 | 0;
    n = g + ((n & 7 | 0) == 0 ? 0 : 0 - n & 7) | 0;
    a = b + 8 | 0;
    a = b + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;
    m = n + o | 0;
    j = a - n - o | 0;
    c[n + 4 >> 2] = o | 3;
    do if ((k | 0) == (a | 0)) {
     B = (c[5] | 0) + j | 0;
     c[5] = B;
     c[8] = m;
     c[m + 4 >> 2] = B | 1;
    } else {
     if ((c[7] | 0) == (a | 0)) {
      B = (c[4] | 0) + j | 0;
      c[4] = B;
      c[7] = m;
      c[m + 4 >> 2] = B | 1;
      c[m + B >> 2] = B;
      break;
     }
     b = c[a + 4 >> 2] | 0;
     if ((b & 3 | 0) == 1) {
      h = b & -8;
      f = b >>> 3;
      f : do if (b >>> 0 < 256) {
       d = c[a + 8 >> 2] | 0;
       e = c[a + 12 >> 2] | 0;
       b = 48 + (f << 1 << 2) | 0;
       do if ((d | 0) != (b | 0)) {
        if (i >>> 0 > d >>> 0) X();
        if ((c[d + 12 >> 2] | 0) == (a | 0)) break;
        X();
       } while (0);
       if ((e | 0) == (d | 0)) {
        c[2] = c[2] & ~(1 << f);
        break;
       }
       do if ((e | 0) == (b | 0)) w = e + 8 | 0; else {
        if (i >>> 0 > e >>> 0) X();
        b = e + 8 | 0;
        if ((c[b >> 2] | 0) == (a | 0)) {
         w = b;
         break;
        }
        X();
       } while (0);
       c[d + 12 >> 2] = e;
       c[w >> 2] = d;
      } else {
       g = c[a + 24 >> 2] | 0;
       e = c[a + 12 >> 2] | 0;
       do if ((e | 0) == (a | 0)) {
        e = a + 16 | 0;
        d = e + 4 | 0;
        b = c[d >> 2] | 0;
        if (!b) {
         b = c[e >> 2] | 0;
         if (!b) {
          z = 0;
          break;
         } else d = e;
        }
        while (1) {
         e = b + 20 | 0;
         f = c[e >> 2] | 0;
         if (f | 0) {
          b = f;
          d = e;
          continue;
         }
         e = b + 16 | 0;
         f = c[e >> 2] | 0;
         if (!f) break; else {
          b = f;
          d = e;
         }
        }
        if (i >>> 0 > d >>> 0) X(); else {
         c[d >> 2] = 0;
         z = b;
         break;
        }
       } else {
        f = c[a + 8 >> 2] | 0;
        if (i >>> 0 > f >>> 0) X();
        b = f + 12 | 0;
        if ((c[b >> 2] | 0) != (a | 0)) X();
        d = e + 8 | 0;
        if ((c[d >> 2] | 0) == (a | 0)) {
         c[b >> 2] = e;
         c[d >> 2] = f;
         z = e;
         break;
        } else X();
       } while (0);
       if (!g) break;
       b = c[a + 28 >> 2] | 0;
       d = 312 + (b << 2) | 0;
       do if ((c[d >> 2] | 0) == (a | 0)) {
        c[d >> 2] = z;
        if (z | 0) break;
        c[3] = c[3] & ~(1 << b);
        break f;
       } else if ((c[6] | 0) >>> 0 > g >>> 0) X(); else {
        c[g + 16 + (((c[g + 16 >> 2] | 0) != (a | 0) & 1) << 2) >> 2] = z;
        if (!z) break f; else break;
       } while (0);
       e = c[6] | 0;
       if (e >>> 0 > z >>> 0) X();
       c[z + 24 >> 2] = g;
       b = a + 16 | 0;
       d = c[b >> 2] | 0;
       do if (d | 0) if (e >>> 0 > d >>> 0) X(); else {
        c[z + 16 >> 2] = d;
        c[d + 24 >> 2] = z;
        break;
       } while (0);
       b = c[b + 4 >> 2] | 0;
       if (!b) break;
       if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
        c[z + 20 >> 2] = b;
        c[b + 24 >> 2] = z;
        break;
       }
      } while (0);
      a = a + h | 0;
      f = h + j | 0;
     } else f = j;
     a = a + 4 | 0;
     c[a >> 2] = c[a >> 2] & -2;
     c[m + 4 >> 2] = f | 1;
     c[m + f >> 2] = f;
     a = f >>> 3;
     if (f >>> 0 < 256) {
      d = 48 + (a << 1 << 2) | 0;
      b = c[2] | 0;
      a = 1 << a;
      do if (!(b & a)) {
       c[2] = b | a;
       A = d;
       B = d + 8 | 0;
      } else {
       a = d + 8 | 0;
       b = c[a >> 2] | 0;
       if ((c[6] | 0) >>> 0 <= b >>> 0) {
        A = b;
        B = a;
        break;
       }
       X();
      } while (0);
      c[B >> 2] = m;
      c[A + 12 >> 2] = m;
      c[m + 8 >> 2] = A;
      c[m + 12 >> 2] = d;
      break;
     }
     a = f >>> 8;
     do if (!a) a = 0; else {
      if (f >>> 0 > 16777215) {
       a = 31;
       break;
      }
      A = (a + 1048320 | 0) >>> 16 & 8;
      B = a << A;
      z = (B + 520192 | 0) >>> 16 & 4;
      B = B << z;
      a = (B + 245760 | 0) >>> 16 & 2;
      a = 14 - (z | A | a) + (B << a >>> 15) | 0;
      a = f >>> (a + 7 | 0) & 1 | a << 1;
     } while (0);
     e = 312 + (a << 2) | 0;
     c[m + 28 >> 2] = a;
     b = m + 16 | 0;
     c[b + 4 >> 2] = 0;
     c[b >> 2] = 0;
     b = c[3] | 0;
     d = 1 << a;
     if (!(b & d)) {
      c[3] = b | d;
      c[e >> 2] = m;
      c[m + 24 >> 2] = e;
      c[m + 12 >> 2] = m;
      c[m + 8 >> 2] = m;
      break;
     }
     b = f << ((a | 0) == 31 ? 0 : 25 - (a >>> 1) | 0);
     e = c[e >> 2] | 0;
     while (1) {
      if ((c[e + 4 >> 2] & -8 | 0) == (f | 0)) {
       v = 263;
       break;
      }
      d = e + 16 + (b >>> 31 << 2) | 0;
      a = c[d >> 2] | 0;
      if (!a) {
       v = 260;
       break;
      } else {
       b = b << 1;
       e = a;
      }
     }
     if ((v | 0) == 260) if ((c[6] | 0) >>> 0 > d >>> 0) X(); else {
      c[d >> 2] = m;
      c[m + 24 >> 2] = e;
      c[m + 12 >> 2] = m;
      c[m + 8 >> 2] = m;
      break;
     } else if ((v | 0) == 263) {
      a = e + 8 | 0;
      b = c[a >> 2] | 0;
      B = c[6] | 0;
      if (B >>> 0 <= b >>> 0 & B >>> 0 <= e >>> 0) {
       c[b + 12 >> 2] = m;
       c[a >> 2] = m;
       c[m + 8 >> 2] = b;
       c[m + 12 >> 2] = e;
       c[m + 24 >> 2] = 0;
       break;
      } else X();
     }
    } while (0);
    B = n + 8 | 0;
    l = C;
    return B | 0;
   } else b = 456;
   while (1) {
    a = c[b >> 2] | 0;
    if (a >>> 0 <= k >>> 0) {
     d = a + (c[b + 4 >> 2] | 0) | 0;
     if (d >>> 0 > k >>> 0) break;
    }
    b = c[b + 8 >> 2] | 0;
   }
   f = d + -47 | 0;
   b = f + 8 | 0;
   b = f + ((b & 7 | 0) == 0 ? 0 : 0 - b & 7) | 0;
   f = k + 16 | 0;
   b = b >>> 0 < f >>> 0 ? k : b;
   a = b + 8 | 0;
   e = h + -40 | 0;
   A = g + 8 | 0;
   A = (A & 7 | 0) == 0 ? 0 : 0 - A & 7;
   B = g + A | 0;
   A = e - A | 0;
   c[8] = B;
   c[5] = A;
   c[B + 4 >> 2] = A | 1;
   c[g + e + 4 >> 2] = 40;
   c[9] = c[124];
   e = b + 4 | 0;
   c[e >> 2] = 27;
   c[a >> 2] = c[114];
   c[a + 4 >> 2] = c[115];
   c[a + 8 >> 2] = c[116];
   c[a + 12 >> 2] = c[117];
   c[114] = g;
   c[115] = h;
   c[117] = 0;
   c[116] = a;
   a = b + 24 | 0;
   do {
    B = a;
    a = a + 4 | 0;
    c[a >> 2] = 7;
   } while ((B + 8 | 0) >>> 0 < d >>> 0);
   if ((b | 0) != (k | 0)) {
    g = b - k | 0;
    c[e >> 2] = c[e >> 2] & -2;
    c[k + 4 >> 2] = g | 1;
    c[b >> 2] = g;
    a = g >>> 3;
    if (g >>> 0 < 256) {
     d = 48 + (a << 1 << 2) | 0;
     b = c[2] | 0;
     a = 1 << a;
     if (!(b & a)) {
      c[2] = b | a;
      x = d;
      y = d + 8 | 0;
     } else {
      a = d + 8 | 0;
      b = c[a >> 2] | 0;
      if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
       x = b;
       y = a;
      }
     }
     c[y >> 2] = k;
     c[x + 12 >> 2] = k;
     c[k + 8 >> 2] = x;
     c[k + 12 >> 2] = d;
     break;
    }
    a = g >>> 8;
    if (!a) d = 0; else if (g >>> 0 > 16777215) d = 31; else {
     A = (a + 1048320 | 0) >>> 16 & 8;
     B = a << A;
     z = (B + 520192 | 0) >>> 16 & 4;
     B = B << z;
     d = (B + 245760 | 0) >>> 16 & 2;
     d = 14 - (z | A | d) + (B << d >>> 15) | 0;
     d = g >>> (d + 7 | 0) & 1 | d << 1;
    }
    e = 312 + (d << 2) | 0;
    c[k + 28 >> 2] = d;
    c[k + 20 >> 2] = 0;
    c[f >> 2] = 0;
    a = c[3] | 0;
    b = 1 << d;
    if (!(a & b)) {
     c[3] = a | b;
     c[e >> 2] = k;
     c[k + 24 >> 2] = e;
     c[k + 12 >> 2] = k;
     c[k + 8 >> 2] = k;
     break;
    }
    b = g << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
    e = c[e >> 2] | 0;
    while (1) {
     if ((c[e + 4 >> 2] & -8 | 0) == (g | 0)) {
      v = 289;
      break;
     }
     d = e + 16 + (b >>> 31 << 2) | 0;
     a = c[d >> 2] | 0;
     if (!a) {
      v = 286;
      break;
     } else {
      b = b << 1;
      e = a;
     }
    }
    if ((v | 0) == 286) if ((c[6] | 0) >>> 0 > d >>> 0) X(); else {
     c[d >> 2] = k;
     c[k + 24 >> 2] = e;
     c[k + 12 >> 2] = k;
     c[k + 8 >> 2] = k;
     break;
    } else if ((v | 0) == 289) {
     a = e + 8 | 0;
     b = c[a >> 2] | 0;
     B = c[6] | 0;
     if (B >>> 0 <= b >>> 0 & B >>> 0 <= e >>> 0) {
      c[b + 12 >> 2] = k;
      c[a >> 2] = k;
      c[k + 8 >> 2] = b;
      c[k + 12 >> 2] = e;
      c[k + 24 >> 2] = 0;
      break;
     } else X();
    }
   }
  } while (0);
  a = c[5] | 0;
  if (a >>> 0 > o >>> 0) {
   z = a - o | 0;
   c[5] = z;
   B = c[8] | 0;
   A = B + o | 0;
   c[8] = A;
   c[A + 4 >> 2] = z | 1;
   c[B + 4 >> 2] = o | 3;
   B = B + 8 | 0;
   l = C;
   return B | 0;
  }
 }
 c[(ja() | 0) >> 2] = 12;
 B = 0;
 l = C;
 return B | 0;
}

function ia(a) {
 a = a | 0;
 var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
 if (!a) return;
 d = a + -8 | 0;
 h = c[6] | 0;
 if (d >>> 0 < h >>> 0) X();
 a = c[a + -4 >> 2] | 0;
 b = a & 3;
 if ((b | 0) == 1) X();
 e = a & -8;
 o = d + e | 0;
 a : do if (!(a & 1)) {
  a = c[d >> 2] | 0;
  if (!b) return;
  k = d + (0 - a) | 0;
  j = a + e | 0;
  if (k >>> 0 < h >>> 0) X();
  if ((c[7] | 0) == (k | 0)) {
   a = o + 4 | 0;
   b = c[a >> 2] | 0;
   if ((b & 3 | 0) != 3) {
    r = k;
    f = j;
    m = k;
    break;
   }
   c[4] = j;
   c[a >> 2] = b & -2;
   c[k + 4 >> 2] = j | 1;
   c[k + j >> 2] = j;
   return;
  }
  e = a >>> 3;
  if (a >>> 0 < 256) {
   b = c[k + 8 >> 2] | 0;
   d = c[k + 12 >> 2] | 0;
   a = 48 + (e << 1 << 2) | 0;
   if ((b | 0) != (a | 0)) {
    if (h >>> 0 > b >>> 0) X();
    if ((c[b + 12 >> 2] | 0) != (k | 0)) X();
   }
   if ((d | 0) == (b | 0)) {
    c[2] = c[2] & ~(1 << e);
    r = k;
    f = j;
    m = k;
    break;
   }
   if ((d | 0) == (a | 0)) g = d + 8 | 0; else {
    if (h >>> 0 > d >>> 0) X();
    a = d + 8 | 0;
    if ((c[a >> 2] | 0) == (k | 0)) g = a; else X();
   }
   c[b + 12 >> 2] = d;
   c[g >> 2] = b;
   r = k;
   f = j;
   m = k;
   break;
  }
  g = c[k + 24 >> 2] | 0;
  d = c[k + 12 >> 2] | 0;
  do if ((d | 0) == (k | 0)) {
   d = k + 16 | 0;
   b = d + 4 | 0;
   a = c[b >> 2] | 0;
   if (!a) {
    a = c[d >> 2] | 0;
    if (!a) {
     i = 0;
     break;
    } else b = d;
   }
   while (1) {
    d = a + 20 | 0;
    e = c[d >> 2] | 0;
    if (e | 0) {
     a = e;
     b = d;
     continue;
    }
    d = a + 16 | 0;
    e = c[d >> 2] | 0;
    if (!e) break; else {
     a = e;
     b = d;
    }
   }
   if (h >>> 0 > b >>> 0) X(); else {
    c[b >> 2] = 0;
    i = a;
    break;
   }
  } else {
   e = c[k + 8 >> 2] | 0;
   if (h >>> 0 > e >>> 0) X();
   a = e + 12 | 0;
   if ((c[a >> 2] | 0) != (k | 0)) X();
   b = d + 8 | 0;
   if ((c[b >> 2] | 0) == (k | 0)) {
    c[a >> 2] = d;
    c[b >> 2] = e;
    i = d;
    break;
   } else X();
  } while (0);
  if (!g) {
   r = k;
   f = j;
   m = k;
  } else {
   a = c[k + 28 >> 2] | 0;
   b = 312 + (a << 2) | 0;
   do if ((c[b >> 2] | 0) == (k | 0)) {
    c[b >> 2] = i;
    if (!i) {
     c[3] = c[3] & ~(1 << a);
     r = k;
     f = j;
     m = k;
     break a;
    }
   } else if ((c[6] | 0) >>> 0 > g >>> 0) X(); else {
    c[g + 16 + (((c[g + 16 >> 2] | 0) != (k | 0) & 1) << 2) >> 2] = i;
    if (!i) {
     r = k;
     f = j;
     m = k;
     break a;
    } else break;
   } while (0);
   d = c[6] | 0;
   if (d >>> 0 > i >>> 0) X();
   c[i + 24 >> 2] = g;
   a = k + 16 | 0;
   b = c[a >> 2] | 0;
   do if (b | 0) if (d >>> 0 > b >>> 0) X(); else {
    c[i + 16 >> 2] = b;
    c[b + 24 >> 2] = i;
    break;
   } while (0);
   a = c[a + 4 >> 2] | 0;
   if (!a) {
    r = k;
    f = j;
    m = k;
   } else if ((c[6] | 0) >>> 0 > a >>> 0) X(); else {
    c[i + 20 >> 2] = a;
    c[a + 24 >> 2] = i;
    r = k;
    f = j;
    m = k;
    break;
   }
  }
 } else {
  r = d;
  f = e;
  m = d;
 } while (0);
 if (m >>> 0 >= o >>> 0) X();
 a = o + 4 | 0;
 b = c[a >> 2] | 0;
 if (!(b & 1)) X();
 if (!(b & 2)) {
  if ((c[8] | 0) == (o | 0)) {
   q = (c[5] | 0) + f | 0;
   c[5] = q;
   c[8] = r;
   c[r + 4 >> 2] = q | 1;
   if ((r | 0) != (c[7] | 0)) return;
   c[7] = 0;
   c[4] = 0;
   return;
  }
  if ((c[7] | 0) == (o | 0)) {
   q = (c[4] | 0) + f | 0;
   c[4] = q;
   c[7] = m;
   c[r + 4 >> 2] = q | 1;
   c[m + q >> 2] = q;
   return;
  }
  f = (b & -8) + f | 0;
  e = b >>> 3;
  b : do if (b >>> 0 < 256) {
   b = c[o + 8 >> 2] | 0;
   d = c[o + 12 >> 2] | 0;
   a = 48 + (e << 1 << 2) | 0;
   if ((b | 0) != (a | 0)) {
    if ((c[6] | 0) >>> 0 > b >>> 0) X();
    if ((c[b + 12 >> 2] | 0) != (o | 0)) X();
   }
   if ((d | 0) == (b | 0)) {
    c[2] = c[2] & ~(1 << e);
    break;
   }
   if ((d | 0) == (a | 0)) l = d + 8 | 0; else {
    if ((c[6] | 0) >>> 0 > d >>> 0) X();
    a = d + 8 | 0;
    if ((c[a >> 2] | 0) == (o | 0)) l = a; else X();
   }
   c[b + 12 >> 2] = d;
   c[l >> 2] = b;
  } else {
   g = c[o + 24 >> 2] | 0;
   a = c[o + 12 >> 2] | 0;
   do if ((a | 0) == (o | 0)) {
    d = o + 16 | 0;
    b = d + 4 | 0;
    a = c[b >> 2] | 0;
    if (!a) {
     a = c[d >> 2] | 0;
     if (!a) {
      n = 0;
      break;
     } else b = d;
    }
    while (1) {
     d = a + 20 | 0;
     e = c[d >> 2] | 0;
     if (e | 0) {
      a = e;
      b = d;
      continue;
     }
     d = a + 16 | 0;
     e = c[d >> 2] | 0;
     if (!e) break; else {
      a = e;
      b = d;
     }
    }
    if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
     c[b >> 2] = 0;
     n = a;
     break;
    }
   } else {
    b = c[o + 8 >> 2] | 0;
    if ((c[6] | 0) >>> 0 > b >>> 0) X();
    d = b + 12 | 0;
    if ((c[d >> 2] | 0) != (o | 0)) X();
    e = a + 8 | 0;
    if ((c[e >> 2] | 0) == (o | 0)) {
     c[d >> 2] = a;
     c[e >> 2] = b;
     n = a;
     break;
    } else X();
   } while (0);
   if (g | 0) {
    a = c[o + 28 >> 2] | 0;
    b = 312 + (a << 2) | 0;
    do if ((c[b >> 2] | 0) == (o | 0)) {
     c[b >> 2] = n;
     if (!n) {
      c[3] = c[3] & ~(1 << a);
      break b;
     }
    } else if ((c[6] | 0) >>> 0 > g >>> 0) X(); else {
     c[g + 16 + (((c[g + 16 >> 2] | 0) != (o | 0) & 1) << 2) >> 2] = n;
     if (!n) break b; else break;
    } while (0);
    d = c[6] | 0;
    if (d >>> 0 > n >>> 0) X();
    c[n + 24 >> 2] = g;
    a = o + 16 | 0;
    b = c[a >> 2] | 0;
    do if (b | 0) if (d >>> 0 > b >>> 0) X(); else {
     c[n + 16 >> 2] = b;
     c[b + 24 >> 2] = n;
     break;
    } while (0);
    a = c[a + 4 >> 2] | 0;
    if (a | 0) if ((c[6] | 0) >>> 0 > a >>> 0) X(); else {
     c[n + 20 >> 2] = a;
     c[a + 24 >> 2] = n;
     break;
    }
   }
  } while (0);
  c[r + 4 >> 2] = f | 1;
  c[m + f >> 2] = f;
  if ((r | 0) == (c[7] | 0)) {
   c[4] = f;
   return;
  }
 } else {
  c[a >> 2] = b & -2;
  c[r + 4 >> 2] = f | 1;
  c[m + f >> 2] = f;
 }
 a = f >>> 3;
 if (f >>> 0 < 256) {
  d = 48 + (a << 1 << 2) | 0;
  b = c[2] | 0;
  a = 1 << a;
  if (!(b & a)) {
   c[2] = b | a;
   p = d;
   q = d + 8 | 0;
  } else {
   a = d + 8 | 0;
   b = c[a >> 2] | 0;
   if ((c[6] | 0) >>> 0 > b >>> 0) X(); else {
    p = b;
    q = a;
   }
  }
  c[q >> 2] = r;
  c[p + 12 >> 2] = r;
  c[r + 8 >> 2] = p;
  c[r + 12 >> 2] = d;
  return;
 }
 a = f >>> 8;
 if (!a) a = 0; else if (f >>> 0 > 16777215) a = 31; else {
  p = (a + 1048320 | 0) >>> 16 & 8;
  q = a << p;
  o = (q + 520192 | 0) >>> 16 & 4;
  q = q << o;
  a = (q + 245760 | 0) >>> 16 & 2;
  a = 14 - (o | p | a) + (q << a >>> 15) | 0;
  a = f >>> (a + 7 | 0) & 1 | a << 1;
 }
 e = 312 + (a << 2) | 0;
 c[r + 28 >> 2] = a;
 c[r + 20 >> 2] = 0;
 c[r + 16 >> 2] = 0;
 b = c[3] | 0;
 d = 1 << a;
 do if (!(b & d)) {
  c[3] = b | d;
  c[e >> 2] = r;
  c[r + 24 >> 2] = e;
  c[r + 12 >> 2] = r;
  c[r + 8 >> 2] = r;
 } else {
  b = f << ((a | 0) == 31 ? 0 : 25 - (a >>> 1) | 0);
  e = c[e >> 2] | 0;
  while (1) {
   if ((c[e + 4 >> 2] & -8 | 0) == (f | 0)) {
    a = 124;
    break;
   }
   d = e + 16 + (b >>> 31 << 2) | 0;
   a = c[d >> 2] | 0;
   if (!a) {
    a = 121;
    break;
   } else {
    b = b << 1;
    e = a;
   }
  }
  if ((a | 0) == 121) if ((c[6] | 0) >>> 0 > d >>> 0) X(); else {
   c[d >> 2] = r;
   c[r + 24 >> 2] = e;
   c[r + 12 >> 2] = r;
   c[r + 8 >> 2] = r;
   break;
  } else if ((a | 0) == 124) {
   a = e + 8 | 0;
   b = c[a >> 2] | 0;
   q = c[6] | 0;
   if (q >>> 0 <= b >>> 0 & q >>> 0 <= e >>> 0) {
    c[b + 12 >> 2] = r;
    c[a >> 2] = r;
    c[r + 8 >> 2] = b;
    c[r + 12 >> 2] = e;
    c[r + 24 >> 2] = 0;
    break;
   } else X();
  }
 } while (0);
 r = (c[10] | 0) + -1 | 0;
 c[10] = r;
 if (!r) a = 464; else return;
 while (1) {
  a = c[a >> 2] | 0;
  if (!a) break; else a = a + 8 | 0;
 }
 c[10] = -1;
 return;
}

function ka() {}
function la(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0;
 if ((e | 0) >= 8192) return Y(b | 0, d | 0, e | 0) | 0;
 h = b | 0;
 g = b + e | 0;
 if ((b & 3) == (d & 3)) {
  while (b & 3) {
   if (!e) return h | 0;
   a[b >> 0] = a[d >> 0] | 0;
   b = b + 1 | 0;
   d = d + 1 | 0;
   e = e - 1 | 0;
  }
  e = g & -4 | 0;
  f = e - 64 | 0;
  while ((b | 0) <= (f | 0)) {
   c[b >> 2] = c[d >> 2];
   c[b + 4 >> 2] = c[d + 4 >> 2];
   c[b + 8 >> 2] = c[d + 8 >> 2];
   c[b + 12 >> 2] = c[d + 12 >> 2];
   c[b + 16 >> 2] = c[d + 16 >> 2];
   c[b + 20 >> 2] = c[d + 20 >> 2];
   c[b + 24 >> 2] = c[d + 24 >> 2];
   c[b + 28 >> 2] = c[d + 28 >> 2];
   c[b + 32 >> 2] = c[d + 32 >> 2];
   c[b + 36 >> 2] = c[d + 36 >> 2];
   c[b + 40 >> 2] = c[d + 40 >> 2];
   c[b + 44 >> 2] = c[d + 44 >> 2];
   c[b + 48 >> 2] = c[d + 48 >> 2];
   c[b + 52 >> 2] = c[d + 52 >> 2];
   c[b + 56 >> 2] = c[d + 56 >> 2];
   c[b + 60 >> 2] = c[d + 60 >> 2];
   b = b + 64 | 0;
   d = d + 64 | 0;
  }
  while ((b | 0) < (e | 0)) {
   c[b >> 2] = c[d >> 2];
   b = b + 4 | 0;
   d = d + 4 | 0;
  }
 } else {
  e = g - 4 | 0;
  while ((b | 0) < (e | 0)) {
   a[b >> 0] = a[d >> 0] | 0;
   a[b + 1 >> 0] = a[d + 1 >> 0] | 0;
   a[b + 2 >> 0] = a[d + 2 >> 0] | 0;
   a[b + 3 >> 0] = a[d + 3 >> 0] | 0;
   b = b + 4 | 0;
   d = d + 4 | 0;
  }
 }
 while ((b | 0) < (g | 0)) {
  a[b >> 0] = a[d >> 0] | 0;
  b = b + 1 | 0;
  d = d + 1 | 0;
 }
 return h | 0;
}

function ga(a, b, c, d, e) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, i = 0;
 if ((a | 0) < 1) return;
 if (!((c | 0) == 1 & (e | 0) == 1)) {
  g = 1 - a | 0;
  f = N(g, e) | 0;
  g = N(g, c) | 0;
  f = (e | 0) < 0 ? f : 0;
  g = (c | 0) < 0 ? g : 0;
  i = 0;
  while (1) {
   h[d + (f << 3) >> 3] = +fa(+h[b + (g << 3) >> 3]);
   i = i + 1 | 0;
   if ((i | 0) == (a | 0)) break; else {
    f = f + e | 0;
    g = g + c | 0;
   }
  }
  return;
 }
 f = a & 3;
 if (!f) f = 0; else {
  g = 0;
  do {
   h[d + (g << 3) >> 3] = +fa(+h[b + (g << 3) >> 3]);
   g = g + 1 | 0;
  } while ((g | 0) != (f | 0));
  if (!((a | 0) > 3 & (f | 0) < (a | 0))) return;
 }
 do {
  h[d + (f << 3) >> 3] = +fa(+h[b + (f << 3) >> 3]);
  e = f + 1 | 0;
  h[d + (e << 3) >> 3] = +fa(+h[b + (e << 3) >> 3]);
  e = f + 2 | 0;
  h[d + (e << 3) >> 3] = +fa(+h[b + (e << 3) >> 3]);
  e = f + 3 | 0;
  h[d + (e << 3) >> 3] = +fa(+h[b + (e << 3) >> 3]);
  f = f + 4 | 0;
 } while ((f | 0) < (a | 0));
 return;
}

function ma(b, d, e) {
 b = b | 0;
 d = d | 0;
 e = e | 0;
 var f = 0, g = 0, h = 0, i = 0;
 h = b + e | 0;
 d = d & 255;
 if ((e | 0) >= 67) {
  while (b & 3) {
   a[b >> 0] = d;
   b = b + 1 | 0;
  }
  f = h & -4 | 0;
  g = f - 64 | 0;
  i = d | d << 8 | d << 16 | d << 24;
  while ((b | 0) <= (g | 0)) {
   c[b >> 2] = i;
   c[b + 4 >> 2] = i;
   c[b + 8 >> 2] = i;
   c[b + 12 >> 2] = i;
   c[b + 16 >> 2] = i;
   c[b + 20 >> 2] = i;
   c[b + 24 >> 2] = i;
   c[b + 28 >> 2] = i;
   c[b + 32 >> 2] = i;
   c[b + 36 >> 2] = i;
   c[b + 40 >> 2] = i;
   c[b + 44 >> 2] = i;
   c[b + 48 >> 2] = i;
   c[b + 52 >> 2] = i;
   c[b + 56 >> 2] = i;
   c[b + 60 >> 2] = i;
   b = b + 64 | 0;
  }
  while ((b | 0) < (f | 0)) {
   c[b >> 2] = i;
   b = b + 4 | 0;
  }
 }
 while ((b | 0) < (h | 0)) {
  a[b >> 0] = d;
  b = b + 1 | 0;
 }
 return h - e | 0;
}

function na(a) {
 a = a | 0;
 var b = 0, d = 0;
 d = a + 15 & -16 | 0;
 b = c[i >> 2] | 0;
 a = b + d | 0;
 if ((d | 0) > 0 & (a | 0) < (b | 0) | (a | 0) < 0) {
  V() | 0;
  W(12);
  return -1;
 }
 c[i >> 2] = a;
 if ((a | 0) > (U() | 0)) if (!(T() | 0)) {
  c[i >> 2] = b;
  W(12);
  return -1;
 }
 return b | 0;
}
function _(a) {
 a = a | 0;
 var b = 0;
 b = l;
 l = l + a | 0;
 l = l + 15 & -16;
 return b | 0;
}

function ca(a, b) {
 a = a | 0;
 b = b | 0;
 if (!n) {
  n = a;
  o = b;
 }
}

function fa(a) {
 a = +a;
 return +(a < 0.0 ? -a : a == 0.0 ? 0.0 : a);
}

function ba(a, b) {
 a = a | 0;
 b = b | 0;
 l = a;
 m = b;
}

function da(a) {
 a = a | 0;
 y = a;
}

function aa(a) {
 a = a | 0;
 l = a;
}

function ea() {
 return y | 0;
}

function $() {
 return l | 0;
}

function ja() {
 return 504;
}

// EMSCRIPTEN_END_FUNCS

 return {
  _free: ia,
  _malloc: ha,
  _memcpy: la,
  _memset: ma,
  _sbrk: na,
  _stdlib_strided_dabs: ga,
  establishStackSpace: ba,
  getTempRet0: ea,
  runPostSets: ka,
  setTempRet0: da,
  setThrew: ca,
  stackAlloc: _,
  stackRestore: aa,
  stackSave: $
 };
})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _free = Module["_free"] = asm["_free"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _stdlib_strided_dabs = Module["_stdlib_strided_dabs"] = asm["_stdlib_strided_dabs"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
Module["asm"] = asm;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (memoryInitializer) {
 if (!isDataURI(memoryInitializer)) {
  if (typeof Module["locateFile"] === "function") {
   memoryInitializer = Module["locateFile"](memoryInitializer);
  } else if (Module["memoryInitializerPrefixURL"]) {
   memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer;
  }
 }
 if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
  var data = Module["readBinary"](memoryInitializer);
  HEAPU8.set(data, GLOBAL_BASE);
 } else {
  addRunDependency("memory initializer");
  var applyMemoryInitializer = (function(data) {
   if (data.byteLength) data = new Uint8Array(data);
   HEAPU8.set(data, GLOBAL_BASE);
   if (Module["memoryInitializerRequest"]) delete Module["memoryInitializerRequest"].response;
   removeRunDependency("memory initializer");
  });
  function doBrowserLoad() {
   Module["readAsync"](memoryInitializer, applyMemoryInitializer, (function() {
    throw "could not load memory initializer " + memoryInitializer;
   }));
  }
  var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
  if (memoryInitializerBytes) {
   applyMemoryInitializer(memoryInitializerBytes.buffer);
  } else if (Module["memoryInitializerRequest"]) {
   function useRequest() {
    var request = Module["memoryInitializerRequest"];
    var response = request.response;
    if (request.status !== 200 && request.status !== 0) {
     var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
     if (data) {
      response = data.buffer;
     } else {
      console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
      doBrowserLoad();
      return;
     }
    }
    applyMemoryInitializer(response);
   }
   if (Module["memoryInitializerRequest"].response) {
    setTimeout(useRequest, 0);
   } else {
    Module["memoryInitializerRequest"].addEventListener("load", useRequest);
   }
  } else {
   doBrowserLoad();
  }
 }
}
Module["then"] = (function(func) {
 if (Module["calledRun"]) {
  func(Module);
 } else {
  var old = Module["onRuntimeInitialized"];
  Module["onRuntimeInitialized"] = (function() {
   if (old) old();
   func(Module);
  });
 }
 return Module;
});
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
function run(args) {
 args = args || Module["arguments"];
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"] && status === 0) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["exit"](status);
 }
 Module["quit"](status, new ExitStatus(status));
}
Module["exit"] = exit;
function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
}
Module["abort"] = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
Module["noExitRuntime"] = true;
run();






  return Module;
};
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;
