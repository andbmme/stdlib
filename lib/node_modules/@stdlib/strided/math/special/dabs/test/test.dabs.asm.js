/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var floor = require( '@stdlib/math/base/special/floor' );
var abs = require( '@stdlib/math/base/special/abs' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var factory = require( './../lib/dabs.asm.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory({
				'memory': value
			});
		};
	}
});

tape( 'the function returns a function', function test( t ) {
	var dabs = factory();
	t.strictEqual( typeof dabs, 'function', 'returns a function' );
	t.end();
});

tape( 'the function returns a function (options)', function test( t ) {
	var dabs = factory({
		'memory': 16777216
	});
	t.strictEqual( typeof dabs, 'function', 'returns a function' );
	t.end();
});

tape( 'attached to the returned function is a method to allocate memory', function test( t ) {
	var dabs = factory();
	t.strictEqual( typeof dabs.malloc, 'function', 'has method' );
	t.end();
});

tape( 'attached to the returned function is a method to free memory', function test( t ) {
	var dabs = factory();
	t.strictEqual( typeof dabs.free, 'function', 'has method' );
	t.end();
});

tape( 'the returned function has an arity of 5', function test( t ) {
	var dabs = factory();
	t.strictEqual( dabs.length, 5, 'arity of 5' );
	t.end();
});

tape( 'the returned function computes the absolute value (external data)', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var dabs;
	var view;
	var x;
	var y;
	var i;

	dabs = factory();

	x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
	y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	expected = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	// Short datasets:
	x = new Float64Array( [ -1.0, -2.0 ] );
	y = new Float64Array( [ 0.0, 0.0 ] );

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	expected = new Float64Array( [ 1.0, 2.0 ] );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function computes the absolute value (malloc)', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var dabs;
	var N;
	var x;
	var y;
	var i;

	dabs = factory();

	N = 5;

	xbytes = dabs.malloc( N * 8 ); // 8 bytes per double
	ybytes = dabs.malloc( N * 8 );

	x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );
	x.set( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );

	y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	y.set( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	expected = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	// Short datasets:
	N = 2;

	xbytes = dabs.malloc( N * 8 );
	ybytes = dabs.malloc( N * 8 );

	x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );
	x.set( [ -1.0, -2.0 ] );

	y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );
	y.set( [ 0.0, 0.0 ] );

	expected = new Float64Array( [ 1.0, 2.0 ] );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function supports an `x` stride', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var N;
	var i;

	dabs = factory();

	x = new Float64Array([
		-1.0, // 0
		-2.0,
		-3.0, // 1
		-4.0,
		-5.0  // 2
	]);
	y = new Float64Array([
		0.0, // 0
		0.0, // 1
		0.0, // 2
		0.0,
		0.0
	]);
	N = 3;

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( N, xbytes, 2, ybytes, 1 );

	expected = new Float64Array( [ 1.0, 3.0, 5.0, 0.0, 0.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function supports a `y` stride', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var N;
	var i;

	dabs = factory();

	x = new Float64Array([
		-1.0, // 0
		-2.0, // 1
		-3.0, // 2
		-4.0,
		-5.0
	]);
	y = new Float64Array([
		0.0, // 0
		0.0,
		0.0, // 1
		0.0,
		0.0  // 2
	]);
	N = 3;

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( N, xbytes, 1, ybytes, 2 );

	expected = new Float64Array( [ 1.0, 0.0, 2.0, 0.0, 3.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function returns a reference to the destination heap buffer', function test( t ) {
	var xbytes;
	var ybytes;
	var dabs;
	var out;
	var x;
	var y;

	dabs = factory();

	x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
	y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	out = dabs( x.length, xbytes, 1, ybytes, 1 );

	t.strictEqual( out, ybytes, 'same reference' );

	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the returned function returns `y` unchanged', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var i;

	dabs = factory();

	x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0 ] );
	y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	expected = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( -1, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs( 0, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function supports negative strides', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var N;
	var i;

	dabs = factory();

	x = new Float64Array([
		-1.0, // 2
		-2.0,
		-3.0, // 1
		-4.0,
		-5.0  // 0
	]);
	y = new Float64Array([
		0.0, // 2
		0.0, // 1
		0.0, // 0
		0.0,
		0.0
	]);
	N = 3;

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( N, xbytes, -2, ybytes, -1 );

	expected = new Float64Array( [ 1.0, 3.0, 5.0, 0.0, 0.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function supports complex access patterns', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var N;
	var i;

	dabs = factory();

	x = new Float64Array([
		-1.0, // 0
		-2.0,
		-3.0, // 1
		-4.0,
		-5.0, // 2
		-6.0
	]);
	y = new Float64Array([
		0.0,  // 2
		0.0,  // 1
		0.0,  // 0
		0.0,
		0.0,
		0.0
	]);
	N = 3;

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( N, xbytes, 2, ybytes, -1 );

	expected = new Float64Array( [ 5.0, 3.0, 1.0, 0.0, 0.0, 0.0 ] );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'the returned function supports view offsets', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x0;
	var y0;
	var x1;
	var y1;
	var N;
	var i;

	dabs = factory();

	// Initial arrays...
	x0 = new Float64Array([
		-1.0,
		-2.0, // 2
		-3.0,
		-4.0, // 1
		-5.0,
		-6.0  // 0
	]);
	y0 = new Float64Array([
		0.0,
		0.0,
		0.0,
		0.0, // 0
		0.0, // 1
		0.0  // 2
	]);

	// Create offset views...
	x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // begin at 2nd element
	y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 ); // begin at the 4th element

	N = floor( x0.length / 2 );

	xbytes = dabs.malloc( x1.length * x1.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x1.buffer, x1.byteOffset ) );

	ybytes = dabs.malloc( y1.length * y1.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y1.buffer, y1.byteOffset ) );

	dabs( N, xbytes, -2, ybytes, 1 );

	expected = new Float64Array([
		0.0,
		0.0,
		0.0,
		6.0,
		4.0,
		2.0
	]);

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y1.length );
	for ( i = 0; i < y1.length; i++ ) {
		y1[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y0[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'if both strides are equal to `1`, the returned function efficiently iterates over provided arrays', function test( t ) {
	var expected;
	var xbytes;
	var ybytes;
	var view;
	var dabs;
	var x;
	var y;
	var i;

	dabs = factory();

	x = new Float64Array( 100 );
	y = new Float64Array( x.length );
	expected = new Float64Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = -( i+1 );
		expected[ i ] = abs( x[i] );
	}

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	x = new Float64Array( 123 );
	y = new Float64Array( x.length );
	expected = new Float64Array( x.length );
	for ( i = 0; i < x.length; i++ ) {
		x[ i ] = -( (i+1) * 2 );
		expected[ i ] = abs( x[i] );
	}

	xbytes = dabs.malloc( x.length * x.BYTES_PER_ELEMENT );
	xbytes.set( new Uint8Array( x.buffer ) );

	ybytes = dabs.malloc( y.length * y.BYTES_PER_ELEMENT );
	ybytes.set( new Uint8Array( y.buffer ) );

	dabs( x.length, xbytes, 1, ybytes, 1 );

	view = new Float64Array( ybytes.buffer, ybytes.byteOffset, y.length );
	for ( i = 0; i < y.length; i++ ) {
		y[ i ] = view[ i ];
	}
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( y[ i ], expected[ i ], 'expected value for element '+i );
	}
	dabs.free( xbytes );
	dabs.free( ybytes );

	t.end();
});

tape( 'if provided an unrecognized `x` heap buffer, the returned function throws an error', function test( t ) {
	var dabs = factory();
	var y;

	y = dabs.malloc( 64 );

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		dabs( 8, new Uint8Array( 64 ), 1, y, 1 );
	}
});

tape( 'if provided an unrecognized `y` heap buffer, the returned function throws an error', function test( t ) {
	var dabs = factory();
	var x;

	x = dabs.malloc( 64 );

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		dabs( 8, x, 1, new Uint8Array( 64 ), 1 );
	}
});

tape( 'if provided an `x` heap buffer which has already been freed, the returned function throws an error', function test( t ) {
	var dabs = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var xbytes = dabs.malloc( 64 );
		var ybytes = dabs.malloc( 64 );
		dabs.free( xbytes );
		dabs( 8, xbytes, 1, ybytes, 1 );
	}
});

tape( 'if provided a `y` heap buffer which has already been freed, the returned function throws an error', function test( t ) {
	var dabs = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var xbytes = dabs.malloc( 64 );
		var ybytes = dabs.malloc( 64 );
		dabs.free( ybytes );
		dabs( 8, xbytes, 1, ybytes, 1 );
	}
});

tape( 'if the `free` method is provided an unrecognized buffer, the returned function throws an error', function test( t ) {
	var dabs = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		dabs.free( new Uint8Array( 64 ) );
	}
});

tape( 'if the `free` method is provided a buffer which has already been freed, the returned function throws an error', function test( t ) {
	var dabs = factory();

	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		var bytes = dabs.malloc( 64 );
		dabs.free( bytes );
		dabs.free( bytes );
	}
});

tape( 'the returned function handles repeated memory allocation', function test( t ) {
	var heaps;
	var dabs;
	var i;

	dabs = factory();

	heaps = new Array( 1e5 );
	for ( i = 0; i < heaps.length; i++ ) {
		heaps[ i ] = dabs.malloc( 1 );
	}
	for ( i = 0; i < heaps.length; i++ ) {
		dabs.free( heaps[ i ] );
	}
	t.pass( 'handles repeated memory allocation' );
	t.end();
});

tape( 'the buffer view returned when allocating memory supports accessing a value at a specific memory address', function test( t ) {
	var bytes;
	var dabs;
	var x;
	var y;

	dabs = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = dabs.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT );
	t.strictEqual( y, 4.0, 'returns value' );

	// Specify type:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'returns value' );

	// Word:
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'i32' );
	t.notEqual( y, 4.0, 'returns word' );

	dabs.free( bytes );

	t.end();
});

tape( 'the buffer view returned when allocating memory supports setting a value at a specific memory address', function test( t ) {
	var bytes;
	var dabs;
	var x;
	var y;

	dabs = factory();

	x = new Float64Array( [ 0.0, 2.0, 4.0, 6.0, 8.0, 10.0 ] );

	bytes = dabs.malloc( x.length*x.BYTES_PER_ELEMENT );
	bytes.set( new Uint8Array( x.buffer ) );

	// Default behavior:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Specify type:
	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 10.0, 'double' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 10.0, 'set value' );

	bytes.setValue( 2*x.BYTES_PER_ELEMENT, 4.0 );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.strictEqual( y, 4.0, 'reset value' );

	// Word:
	bytes.setValue( (2*x.BYTES_PER_ELEMENT) + 4, 10, 'i32' );
	y = bytes.getValue( 2*x.BYTES_PER_ELEMENT, 'double' );
	t.notEqual( y, 4.0, 'sets word' );

	dabs.free( bytes );

	t.end();
});
