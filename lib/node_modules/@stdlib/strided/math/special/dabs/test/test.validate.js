/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var copy = require( '@stdlib/utils/copy' );
var ArrayBuffer = require( '@stdlib/array/buffer' );
var DEFAULTS = require( './../lib/defaults.json' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an error if provided an `options` argument which is not an object', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), values[ i ] );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `memory` option which is not a positive integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'memory': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `stack` option which is not a positive integer', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'stack': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `memory` option which is less than or equal to the total stack size', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		1,
		2,
		3,
		DEFAULTS.TOTAL_STACK,
		DEFAULTS.TOTAL_STACK - 1,
		DEFAULTS.TOTAL_STACK - 2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'memory': values[ i ]
		});
		t.strictEqual( err instanceof RangeError, true, 'returns a range error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided a `buffer` option which is not an `ArrayBuffer`', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		true,
		false,
		void 0,
		null,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'buffer': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns an error if provided incompatible `buffer` and `memory` options', function test( t ) {
	var values;
	var buffer;
	var err;
	var i;

	buffer = new ArrayBuffer( DEFAULTS.TOTAL_STACK + 1000 );

	values = [
		buffer.byteLength - 2,
		buffer.byteLength - 1,
		buffer.byteLength + 1,
		buffer.byteLength + 2
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( copy( DEFAULTS ), {
			'memory': values[ i ],
			'buffer': buffer
		});
		t.strictEqual( err instanceof RangeError, true, 'returns a range error when provided '+values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var expected;
	var options;
	var buffer;
	var opts;
	var err;

	buffer = new ArrayBuffer( 16777256 );

	expected = copy( DEFAULTS );
	expected.TOTAL_MEMORY = 16777256;
	expected.TOTAL_STACK = 2048;
	expected.buffer = buffer;

	opts = copy( DEFAULTS );
	options = {
		'memory': 16777256,
		'stack': 2048,
		'buffer': buffer
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, expected, 'sets options' );

	t.end();
});

tape( 'the function will ignore unrecognized options', function test( t ) {
	var options;
	var opts;
	var err;

	opts = {};
	options = {
		'beep': true,
		'boop': 'bop'
	};

	err = validate( opts, options );
	t.strictEqual( err, null, 'returns null' );
	t.deepEqual( opts, {}, 'ignores unrecognized options' );

	t.end();
});
