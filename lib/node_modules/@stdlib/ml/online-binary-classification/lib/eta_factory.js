/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var constantFunction = require( '@stdlib/utils/constant-function' );


// FUNCTIONS //

/**
* Returns a function to retrieve a learning rate.
*
* @private
* @returns {Function} function to retrieve learning rate
*/
function basic() {
	var i = 1;
	return getEta;

	/**
	* Returns a learning rate.
	*
	* @private
	* @returns {number} learning rate
	*/
	function getEta() {
		var eta = 1000.0 / ( i + 1000.0 );
		i += 1;
		return eta;
	}
}

/**
* Returns a function to retrieve a learning rate.
*
* @private
* @param {NonNegativeNumber} lambda - regularization parameter
* @returns {Function} function to retrieve learning rate
*/
function pegasos( lambda ) {
	var i = 1;
	return getEta;

	/**
	* Returns a learning rate.
	*
	* @private
	* @returns {number} learning rate
	*/
	function getEta() {
		var eta = 1.0 / ( lambda * i );
		i += 1;
		return eta;
	}
}


// MAIN //

/**
* Returns a function to retrieve the current learning rate.
*
* @private
* @param {string} type - string denoting the learning rate to use
* @param {PositiveNumber} eta0 - constant learning rate
* @param {NonNegativeNumber} lambda - regularization parameter
* @throws {Error} first argument must be a recognized learning rate
* @returns {Function} function to retrieve current learning rate
*/
function getEta( type, eta0, lambda ) {
	if ( type === 'basic' ) {
		return basic();
	}
	if ( type === 'constant' ) {
		return constantFunction( eta0 );
	}
	if ( type === 'pegasos' ) {
		return pegasos( lambda );
	}
	throw new Error( 'invalid input value. First argument must be a recognized learning rate. Value: `' + type + '`.' );
}


// EXPORTS //

module.exports = getEta;
