/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* global WebAssembly */

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var instanceOf = require( '@stdlib/assert/instance-of' );
var readWASMSync = require( '@stdlib/fs/read-wasm' ).sync;
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var wasmBinaryFile = resolve( __dirname, '..', 'src', 'hypot.wasm' );
var hypot;


// FUNCTIONS //

/**
* Returns a function for computing the hypotenuse avoiding overflow and underflow.
*
* @private
* @returns {Function} function to compute the hypotenuse
*
* @example
* var hypot = load();
* // returns <Function>
*/
function load() {
	var imports;
	var wasm;

	// Synchronously load the WebAssembly binary:
	wasm = readWASMSync( wasmBinaryFile );
	if ( instanceOf( wasm, Error ) ) {
		return;
	}
	// Synchronously create a WebAssembly module:
	wasm = new WebAssembly.Module( wasm );

	// Define module imports:
	imports = {};

	// Define imported global variables:
	imports.global = {
		'NaN': NaN,
		'Infinity': PINF
	};

	// Define the imported module environment:
	imports.env = {};

	// Define the linear memory for the module:
	imports.env.memoryBase = 0;
	imports.env.memory = new WebAssembly.Memory({
		'initial': 256
	});

	// Define the module table for function look-ups:
	imports.env.tableBase = 0;
	imports.env.table = new WebAssembly.Table({
		'initial': 0,
		'element': 'anyfunc'
	});

	// Synchronously create a new WebAssembly module instance:
	wasm = new WebAssembly.Instance( wasm, imports );

	// Return the exported function:
	return wasm.exports._stdlib_base_hypot; // eslint-disable-line no-underscore-dangle
}


// MAIN //

hypot = load();


// EXPORTS //

module.exports = hypot;
