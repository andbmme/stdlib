/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* global WebAssembly */

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var instanceOf = require( '@stdlib/assert/instance-of' );
var readWASMSync = require( '@stdlib/fs/read-wasm' ).sync;
var PINF = require( '@stdlib/constants/math/float64-pinf' );


// VARIABLES //

var wasmBinaryFile = resolve( __dirname, '..', 'src', 'is_infinite.wasm' );
var isInfinite;


// FUNCTIONS //

/**
* Returns a function for testing if a numeric value is infinite.
*
* @private
* @returns {Function} function to test if a numeric value is infinite
*
* @example
* var isInfinite = load();
* // returns <Function>
*/
function load() {
	var imports;
	var wasm;
	var f;

	// Synchronously load the WebAssembly binary:
	wasm = readWASMSync( wasmBinaryFile );
	if ( instanceOf( wasm, Error ) ) {
		return;
	}
	// Synchronously create a WebAssembly module:
	wasm = new WebAssembly.Module( wasm );

	// Define module imports:
	imports = {};

	// Define imported global variables:
	imports.global = {
		'Infinity': PINF
	};

	// Define the imported module environment:
	imports.env = {};

	// Define the linear memory for the module:
	imports.env.memoryBase = 0;
	imports.env.memory = new WebAssembly.Memory({
		'initial': 256
	});

	// Define the module table for function look-ups:
	imports.env.tableBase = 0;
	imports.env.table = new WebAssembly.Table({
		'initial': 0,
		'element': 'anyfunc'
	});

	// Synchronously create a new WebAssembly module instance:
	wasm = new WebAssembly.Instance( wasm, imports );

	// Assign the exported function to a local alias:
	f = wasm.exports._stdlib_base_is_infinite; // eslint-disable-line no-underscore-dangle

	return isInfinite;

	/**
	* Tests if a numeric value is infinite.
	*
	* @private
	* @param {number} x - value to test
	* @returns {boolean} boolean indicating whether the value is infinite
	*/
	function isInfinite( x ) {
		return !!f( x );
	}
}


// MAIN //

isInfinite = load();


// EXPORTS //

module.exports = isInfinite;
