(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.stdlib_stats_base_dists_flat = f()}})(function(){var define,module,exports;
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

var _$main_13 = main;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$main_13 = require( './define_property.js' ); */;


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	var bool;

	if ( typeof _$main_13 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		_$main_13( {}, 'x', {} );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasDefinePropertySupport_15 = hasDefinePropertySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for `Object.defineProperty` support.
*
* @module @stdlib/assert/has-define-property-support
*
* @example
* var hasDefinePropertySupport = require( '@stdlib/assert/has-define-property-support' );
*
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_15 = require( './main.js' ); */;


// EXPORTS //

var _$hasDefinePropertySupport_14 = _$hasDefinePropertySupport_15;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var __defineProperty_1605 = Object.defineProperty;


// EXPORTS //

var _$defineProperty_1605 = __defineProperty_1605;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if an object has a specified property, either own or inherited.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'bap' );
* // returns false
*/
function hasProp( value, property ) {
	if ( value === void 0 || value === null ) {
		return false;
	}
	if ( typeof property === 'symbol' ) {
		return property in Object( value );
	}
	return ( String( property ) in Object( value ) );
}


// EXPORTS //

var _$hasProp_24 = hasProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property, either own or inherited.
*
* @module @stdlib/assert/has-property
*
* @example
* var hasProp = require( '@stdlib/assert/has-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasProp( beep, 'boop' );
* // returns true
*
* bool = hasProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasProp_24 = require( './main.js' ); */;


// EXPORTS //

var _$hasProp_23 = _$hasProp_24;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

var _$hasSymbolSupport_26 = hasSymbolSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasSymbolSupport_26 = require( './main.js' ); */;


// EXPORTS //

var _$hasSymbolSupport_25 = _$hasSymbolSupport_26;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasSymbolSupport_25 = require( '@stdlib/assert/has-symbol-support' ); */;


// VARIABLES //

var FLG = _$hasSymbolSupport_25();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

var _$hasToStringTagSupport_28 = hasToStringTagSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_28 = require( './main.js' ); */;


// EXPORTS //

var _$hasToStringTagSupport_27 = _$hasToStringTagSupport_28;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

var _$toStr_1614 = toStr;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toStr_1614 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return _$toStr_1614.call( v );
}


// EXPORTS //

var _$nativeClass_1612 = nativeClass;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

var _$hasOwnProp_22 = hasOwnProp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

/* removed: var _$hasOwnProp_22 = require( './main.js' ); */;


// EXPORTS //

var _$hasOwnProp_21 = _$hasOwnProp_22;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

var _$toStrTag_1615 = toStrTag;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasOwnProp_21 = require( '@stdlib/assert/has-own-property' ); */;
/* removed: var _$toStrTag_1615 = require( './tostringtag.js' ); */;
/* removed: var _$toStr_1614 = require( './tostring.js' ); */;


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function __nativeClass_1613( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return _$toStr_1614.call( v );
	}
	tag = v[ _$toStrTag_1615 ];
	isOwn = _$hasOwnProp_21( v, _$toStrTag_1615 );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ _$toStrTag_1615 ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return _$toStr_1614.call( v );
	}
	out = _$toStr_1614.call( v );

	if ( isOwn ) {
		v[ _$toStrTag_1615 ] = tag;
	} else {
		delete v[ _$toStrTag_1615 ];
	}
	return out;
}


// EXPORTS //

var _$nativeClass_1613 = __nativeClass_1613;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

/* removed: var _$hasToStringTagSupport_27 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1612 = require( './native_class.js' ); */;
/* removed: var _$nativeClass_1613 = require( './polyfill.js' ); */;


// MAIN //

var __nativeClass_1611;
if ( _$hasToStringTagSupport_27() ) {
	__nativeClass_1611 = _$nativeClass_1613;
} else {
	__nativeClass_1611 = _$nativeClass_1612;
}


// EXPORTS //

var _$nativeClass_1611 = __nativeClass_1611;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( _$nativeClass_1611( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

var _$f_39 = f;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

/* removed: var _$f_39 = require( './main.js' ); */;


// EXPORTS //

var _$isArray_38 = _$f_39;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isArray_38 = require( '@stdlib/assert/is-array' ); */;


// MAIN //

/**
* Tests if a value is an object; e.g., `{}`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an object
*
* @example
* var bool = isObject( {} );
* // returns true
*
* @example
* var bool = isObject( null );
* // returns false
*/
function isObject( value ) {
	return (
		typeof value === 'object' &&
		value !== null &&
		!_$isArray_38( value )
	);
}


// EXPORTS //

var _$isObject_65 = isObject;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an object.
*
* @module @stdlib/assert/is-object
*
* @example
* var isObject = require( '@stdlib/assert/is-object' );
*
* var bool = isObject( {} );
* // returns true
*
* bool = isObject( true );
* // returns false
*/

// MODULES //

/* removed: var _$isObject_65 = require( './main.js' ); */;


// EXPORTS //

var _$isObject_64 = _$isObject_65;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// MODULES //

/* removed: var _$hasProp_23 = require( '@stdlib/assert/has-property' ); */;
/* removed: var _$isObject_64 = require( '@stdlib/assert/is-object' ); */;


// VARIABLES //

var objectProtoype = Object.prototype;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function __defineProperty_1607( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( !_$isObject_64( obj ) ) {
		throw new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );
	}
	if ( !_$isObject_64( descriptor ) ) {
		throw new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );
	}
	hasValue = _$hasProp_23( descriptor, 'value' );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = _$hasProp_23( descriptor, 'get' );
	hasSet = _$hasProp_23( descriptor, 'set' );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

var _$defineProperty_1607 = __defineProperty_1607;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

/* removed: var _$hasDefinePropertySupport_14 = require( '@stdlib/assert/has-define-property-support' ); */;
/* removed: var _$defineProperty_1605 = require( './builtin.js' ); */;
/* removed: var _$defineProperty_1607 = require( './polyfill.js' ); */;


// MAIN //

var __defineProperty_1606;
if ( _$hasDefinePropertySupport_14() ) {
	__defineProperty_1606 = _$defineProperty_1605;
} else {
	__defineProperty_1606 = _$defineProperty_1607;
}


// EXPORTS //

var _$defineProperty_1606 = __defineProperty_1606;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setReadOnly( obj, prop, value ) {
	_$defineProperty_1606( obj, prop, {
		'configurable': false,
		'enumerable': true,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setReadOnly_1609 = setReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
*
* setReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setReadOnly_1609 = require( './main.js' ); */;


// EXPORTS //

var _$setReadOnly_1608 = _$setReadOnly_1609;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	_$defineProperty_1606( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

var _$setNonEnumerableReadOnly_1604 = setNonEnumerableReadOnly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1604 = require( './main.js' ); */;


// EXPORTS //

var _$setNonEnumerableReadOnly_1603 = _$setNonEnumerableReadOnly_1604;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

var _$isnan_131 = isnan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isnan_131 = require( './is_nan.js' ); */;


// EXPORTS //

var _$isnan_130 = _$isnan_131;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the principal square root.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/
var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$sqrt_438 = sqrt;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the principal square root.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sqrt_438 = require( './main.js' ); */;


// EXPORTS //

var _$sqrt_437 = _$sqrt_438;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One fourth times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-fourth-pi
* @type {number}
*
* @example
* var FOURTH_PI = require( '@stdlib/constants/math/float64-fourth-pi' );
* // returns 7.85398163397448309616e-1
*/


// MAIN //

/**
* One fourth times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 7.85398163397448309616e-1
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var FOURTH_PI = 7.85398163397448309616e-1;


// EXPORTS //

var _$FOURTH_PI_90 = FOURTH_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function evalrational( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666713;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len
		s2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_152 = evalrational;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_153( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.08333333333333809;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len
		s2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_153 = __evalrational_153;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_90 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$evalrational_152 = require( './rational_pq.js' ); */;
/* removed: var _$evalrational_153 = require( './rational_rs.js' ); */;


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


// MAIN //

/**
* Computes the arcsine of a number.
*
* ## Method
*
* -   A rational function of the form
*
*     ```tex
*     x + x^3 \frac{P(x^2)}{Q(x^2)}
*     ```
*
*     is used for \\(\|x\|\\) in the interval \\(\[0, 0.5\]\\). If \\(\|x\| > 0.5\\), it is transformed by the identity
*
*     ```tex
*     \operatorname{asin}(x) = \frac{\pi}{2} - 2 \operatorname{asin}( \sqrt{ (1-x)/2 } )
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:-------|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |
*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |
*
* @param {number} x - input value
* @returns {number} arcsine (in radians)
*
* @example
* var v = asin( 0.0 );
* // returns ~0.0
*
* @example
* var v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* @example
* var v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* @example
* var v = asin( NaN );
* // returns NaN
*/
function asin( x ) {
	var sgn;
	var zz;
	var a;
	var p;
	var z;

	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( x > 0.0 ) {
		a = x;
	} else {
		sgn = true;
		a = -x;
	}
	if ( a > 1.0 ) {
		return NaN;
	}
	if ( a > 0.625 ) {
		// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
		zz = 1.0 - a;
		p = zz * _$evalrational_153( zz );
		zz = _$sqrt_437( zz + zz );
		z = _$FOURTH_PI_90 - zz;
		zz = ( zz*p ) - MOREBITS;
		z -= zz;
		z += _$FOURTH_PI_90;
	} else {
		if ( a < 1.0e-8 ) {
			return x;
		}
		zz = a * a;
		z = zz * _$evalrational_152( zz );
		z = ( a*z ) + a;
	}
	return ( sgn ) ? -z : z;
}


// EXPORTS //

var _$asin_150 = asin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arcsine of a number.
*
* @module @stdlib/math/base/special/asin
*
* @example
* var asin = require( '@stdlib/math/base/special/asin' );
*
* var v = asin( 0.0 );
* // returns 0.0
*
* v = asin( 3.141592653589793/4.0 );
* // returns ~0.903
*
* v = asin( -3.141592653589793/6.0 );
* // returns ~-0.551
*
* v = asin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$asin_150 = require( './asin.js' ); */;


// EXPORTS //

var _$asin_151 = _$asin_150;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

var _$PI_109 = PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var TWO_OVER_PI = 2.0 / _$PI_109; // TODO: consider moving to pkg


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns ~0.795
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns ~0.333
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function cdf( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return TWO_OVER_PI * _$asin_151( _$sqrt_437( ( x-a ) / ( b-a ) ) );
}


// EXPORTS //

var _$cdf_484 = cdf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Creates a function which always returns the same value.
*
* @param {*} [value] - value to always return
* @returns {Function} constant function
*
* @example
* var fcn = wrap( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/
function wrap( value ) {
	return constantFunction;

	/**
	* Constant function.
	*
	* @private
	* @returns {*} constant value
	*/
	function constantFunction() {
		return value;
	}
}


// EXPORTS //

var _$wrap_1599 = wrap;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a constant function.
*
* @module @stdlib/utils/constant-function
*
* @example
* var constantFunction = require( '@stdlib/utils/constant-function' );
*
* var fcn = constantFunction( 3.14 );
*
* var v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*
* v = fcn();
* // returns 3.14
*/

// MODULES //

/* removed: var _$wrap_1599 = require( './constant_function.js' ); */;


// EXPORTS //

var _$constantFunction_1600 = _$wrap_1599;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var __TWO_OVER_PI_482 = 2.0 / _$PI_109;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns ~0.144
*
* y = cdf( 8.0 );
* // returns ~0.705
*/
function factory( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return __TWO_OVER_PI_482 * _$asin_151( _$sqrt_437( ( x-a ) / ( b-a ) ) );
	}
}


// EXPORTS //

var _$factory_482 = factory;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/arcsine/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/arcsine/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns ~0.144
*
* y = mycdf( 8.0 );
* // returns ~0.705
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_484 = require( './main.js' ); */;
/* removed: var _$factory_482 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_484, 'factory', _$factory_482 );


// EXPORTS //

var _$cdf_483 = _$cdf_484;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;


// MAIN //

/**
* Defines a non-enumerable read-only accessor.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Function} getter - accessor
*
* @example
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnlyAccessor( obj, prop, getter ) { // eslint-disable-line id-length
	_$defineProperty_1606( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'get': getter
	});
}


// EXPORTS //

var _$setNonEnumerableReadOnlyAccessor_1602 = setNonEnumerableReadOnlyAccessor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only accessor.
*
* @module @stdlib/utils/define-nonenumerable-read-only-accessor
*
* @example
* var setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );
*
* function getter() {
*     return 'bar';
* }
*
* var obj = {};
*
* setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnlyAccessor_1602 = require( './main.js' ); */; // eslint-disable-line id-length


// EXPORTS //

var _$setNonEnumerableReadOnlyAccessor_1601 = _$setNonEnumerableReadOnlyAccessor_1602;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );
}


// EXPORTS //

var _$isNumber_61 = isNumber;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

var _$Number_453 = Number; // eslint-disable-line stdlib/require-globals

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

/* removed: var _$Number_453 = require( './number.js' ); */;


// EXPORTS //

var _$Number_452 = _$Number_453;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$Number_452 = require( '@stdlib/number/ctor' ); */;


// MAIN //

// eslint-disable-next-line stdlib/no-redeclare
var toString = _$Number_452.prototype.toString; // non-generic


// EXPORTS //

var _$toString_62 = toString;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toString_62 = require( './tostring.js' ); */; // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		_$toString_62.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

var _$test_63 = test;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$hasToStringTagSupport_27 = require( '@stdlib/assert/has-tostringtag-support' ); */;
/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;
/* removed: var _$Number_452 = require( '@stdlib/number/ctor' ); */;
/* removed: var _$test_63 = require( './try2serialize.js' ); */;


// VARIABLES //

var __FLG_60 = _$hasToStringTagSupport_27();


// MAIN //

/**
* Tests if a value is a number object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object
*
* @example
* var bool = isNumber( 3.14 );
* // returns false
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*/
function __isNumber_60( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof _$Number_452 ) {
			return true;
		}
		if ( __FLG_60 ) {
			return _$test_63( value );
		}
		return ( _$nativeClass_1611( value ) === '[object Number]' );
	}
	return false;
}


// EXPORTS //

var _$isNumber_60 = __isNumber_60;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNumber_61 = require( './primitive.js' ); */;
/* removed: var _$isNumber_60 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a number
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( null );
* // returns false
*/
function __isNumber_59( value ) {
	return ( _$isNumber_61( value ) || _$isNumber_60( value ) );
}


// EXPORTS //

var _$isNumber_59 = __isNumber_59;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a number.
*
* @module @stdlib/assert/is-number
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' );
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( null );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
*
* var bool = isNumber( 3.14 );
* // returns true
*
* bool = isNumber( NaN );
* // returns true
*
* bool = isNumber( new Number( 3.14 ) );
* // returns false
*
* @example
* var isNumber = require( '@stdlib/assert/is-number' ).isObject;
*
* var bool = isNumber( 3.14 );
* // returns false
*
* bool = isNumber( new Number( 3.14 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isNumber_59 = require( './main.js' ); */;
/* removed: var _$isNumber_61 = require( './primitive.js' ); */;
/* removed: var _$isNumber_60 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isNumber_59, 'isPrimitive', _$isNumber_61 );
_$setNonEnumerableReadOnly_1603( _$isNumber_59, 'isObject', _$isNumber_60 );


// EXPORTS //

var _$isNumber_58 = _$isNumber_59;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1611( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

var _$isUint32Array_81 = isUint32Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint32Array_81 = require( './main.js' ); */;


// EXPORTS //

var _$isUint32Array_80 = _$isUint32Array_81;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/math/uint32-max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

var _$UINT32_MAX_122 = UINT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_34 = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_34 = __main_34;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint32Array_80 = require( '@stdlib/assert/is-uint32array' ); */;
/* removed: var _$UINT32_MAX_122 = require( '@stdlib/constants/math/uint32-max' ); */;
/* removed: var _$main_34 = require( './uint32array.js' ); */;


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_34 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT32_MAX_122+1, _$UINT32_MAX_122+2 ];
		arr = new _$main_34( arr );
		bool = (
			_$isUint32Array_80( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT32_MAX_122-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint32ArraySupport_33 = hasUint32ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_33 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint32ArraySupport_32 = _$hasUint32ArraySupport_33;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_9 = ctor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_8() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_8 = __polyfill_8;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

/* removed: var _$hasUint32ArraySupport_32 = require( '@stdlib/assert/has-uint32array-support' ); */;
/* removed: var _$ctor_9 = require( './uint32array.js' ); */;
/* removed: var _$polyfill_8 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_7;
if ( _$hasUint32ArraySupport_32() ) {
	__ctor_7 = _$ctor_9;
} else {
	__ctor_7 = _$polyfill_8;
}


// EXPORTS //

var _$ctor_7 = __ctor_7;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1611( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

var _$isFloat64Array_41 = isFloat64Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isFloat64Array_41 = require( './main.js' ); */;


// EXPORTS //

var _$isFloat64Array_40 = _$isFloat64Array_41;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_16 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_16 = __main_16;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isFloat64Array_40 = require( '@stdlib/assert/is-float64array' ); */;
/* removed: var _$main_16 = require( './float64array.js' ); */;


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_16 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new _$main_16( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			_$isFloat64Array_40( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasFloat64ArraySupport_18 = hasFloat64ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_18 = require( './main.js' ); */;


// EXPORTS //

var _$hasFloat64ArraySupport_17 = _$hasFloat64ArraySupport_18;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_1 = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_1 = __ctor_1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_3() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_3 = __polyfill_3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

/* removed: var _$hasFloat64ArraySupport_17 = require( '@stdlib/assert/has-float64array-support' ); */;
/* removed: var _$ctor_1 = require( './float64array.js' ); */;
/* removed: var _$polyfill_3 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_2;
if ( _$hasFloat64ArraySupport_17() ) {
	__ctor_2 = _$ctor_1;
} else {
	__ctor_2 = _$polyfill_3;
}


// EXPORTS //

var _$ctor_2 = __ctor_2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1611( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

var _$isUint8Array_83 = isUint8Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint8Array_83 = require( './main.js' ); */;


// EXPORTS //

var _$isUint8Array_82 = _$isUint8Array_83;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/math/uint8-max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/math/uint8-max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

var _$UINT8_MAX_123 = UINT8_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_37 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_37 = __main_37;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint8Array_82 = require( '@stdlib/assert/is-uint8array' ); */;
/* removed: var _$UINT8_MAX_123 = require( '@stdlib/constants/math/uint8-max' ); */;
/* removed: var _$main_37 = require( './uint8array.js' ); */;


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_37 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT8_MAX_123+1, _$UINT8_MAX_123+2 ];
		arr = new _$main_37( arr );
		bool = (
			_$isUint8Array_82( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === _$UINT8_MAX_123-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint8ArraySupport_36 = hasUint8ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_36 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint8ArraySupport_35 = _$hasUint8ArraySupport_36;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_12 = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_12 = __ctor_12;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_11() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_11 = __polyfill_11;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

/* removed: var _$hasUint8ArraySupport_35 = require( '@stdlib/assert/has-uint8array-support' ); */;
/* removed: var _$ctor_12 = require( './uint8array.js' ); */;
/* removed: var _$polyfill_11 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_10;
if ( _$hasUint8ArraySupport_35() ) {
	__ctor_10 = _$ctor_12;
} else {
	__ctor_10 = _$polyfill_11;
}


// EXPORTS //

var _$ctor_10 = __ctor_10;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$nativeClass_1611 = require( '@stdlib/utils/native-class' ); */;


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		_$nativeClass_1611( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

var _$isUint16Array_79 = isUint16Array;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

/* removed: var _$isUint16Array_79 = require( './main.js' ); */;


// EXPORTS //

var _$isUint16Array_78 = _$isUint16Array_79;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/math/uint16-max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/math/uint16-max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

var _$UINT16_MAX_121 = UINT16_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __main_31 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$main_31 = __main_31;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isUint16Array_78 = require( '@stdlib/assert/is-uint16array' ); */;
/* removed: var _$UINT16_MAX_121 = require( '@stdlib/constants/math/uint16-max' ); */;
/* removed: var _$main_31 = require( './uint16array.js' ); */;


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof _$main_31 !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, _$UINT16_MAX_121+1, _$UINT16_MAX_121+2 ];
		arr = new _$main_31( arr );
		bool = (
			_$isUint16Array_78( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === _$UINT16_MAX_121-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasUint16ArraySupport_30 = hasUint16ArraySupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_30 = require( './main.js' ); */;


// EXPORTS //

var _$hasUint16ArraySupport_29 = _$hasUint16ArraySupport_30;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var __ctor_6 = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$ctor_6 = __ctor_6;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function __polyfill_5() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

var _$polyfill_5 = __polyfill_5;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

/* removed: var _$hasUint16ArraySupport_29 = require( '@stdlib/assert/has-uint16array-support' ); */;
/* removed: var _$ctor_6 = require( './uint16array.js' ); */;
/* removed: var _$polyfill_5 = require( './polyfill.js' ); */;


// MAIN //

var __ctor_4;
if ( _$hasUint16ArraySupport_29() ) {
	__ctor_4 = _$ctor_6;
} else {
	__ctor_4 = _$polyfill_5;
}


// EXPORTS //

var _$ctor_4 = __ctor_4;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_10 = require( '@stdlib/array/uint8' ); */;
/* removed: var _$ctor_4 = require( '@stdlib/array/uint16' ); */;


// MAIN //

var ctors = {
	'uint16': _$ctor_4,
	'uint8': _$ctor_10
};


// EXPORTS //

var _$ctors_47 = ctors;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctors_47 = require( './ctors.js' ); */;


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new _$ctors_47[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new _$ctors_47[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

var _$bool_49 = bool;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

/* removed: var _$bool_49 = require( './main.js' ); */;


// EXPORTS //

var _$IS_LITTLE_ENDIAN_48 = _$bool_49;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var HIGH;
if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

var _$HIGH_459 = HIGH;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_459 = require( './high.js' ); */;


// VARIABLES //

var FLOAT64_VIEW = new _$ctor_2( 1 );
var UINT32_VIEW = new _$ctor_7( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ _$HIGH_459 ];
}


// EXPORTS //

var _$getHighWord_461 = getHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

/* removed: var _$getHighWord_461 = require( './main.js' ); */;


// EXPORTS //

var _$getHighWord_460 = _$getHighWord_461;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __HIGH_468;
if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	__HIGH_468 = 1; // second index
} else {
	__HIGH_468 = 0; // first index
}


// EXPORTS //

var _$HIGH_468 = __HIGH_468;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$HIGH_468 = require( './high.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_470 = new _$ctor_2( 1 );
var __UINT32_VIEW_470 = new _$ctor_7( __FLOAT64_VIEW_470.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	__FLOAT64_VIEW_470[ 0 ] = x;
	__UINT32_VIEW_470[ _$HIGH_468 ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_470[ 0 ];
}


// EXPORTS //

var _$setHighWord_470 = setHighWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

/* removed: var _$setHighWord_470 = require( './main.js' ); */;


// EXPORTS //

var _$setHighWord_469 = _$setHighWord_470;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/math/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/math/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_EXPONENT_BIAS_89 = FLOAT64_EXPONENT_BIAS;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/math/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/math/float64-ninf' );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$Number_452 = require( '@stdlib/number/ctor' ); */;


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = _$Number_452.NEGATIVE_INFINITY;


// EXPORTS //

var _$FLOAT64_NINF_107 = FLOAT64_NINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_378 = evalpoly;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_379( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_379 = __evalpoly_379;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_378 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_379 = require( './polyval_q.js' ); */;


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
var LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
var ONE_THIRD = 0.33333333333333333;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var hfsq;
	var hx;
	var t2;
	var t1;
	var k;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( _$isnan_130( x ) || x < 0.0 ) {
		return NaN;
	}
	hx = _$getHighWord_460( x );
	k = 0|0; // asm type annotation
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: 0 < x < 2**-1022
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up `x`:
		x *= TWO54;
		hx = _$getHighWord_460( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( ( hx>>20 ) - _$FLOAT64_EXPONENT_BIAS_89 )|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = _$setHighWord_469( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += ( i>>20 )|0; // asm type annotation
	f = x - 1.0;
	if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0 ) {
				return 0.0;
			}
			return (k * LN2_HI) + (k * LN2_LO);
		}
		R = f * f * ( 0.5 - (ONE_THIRD*f) );
		if ( k === 0 ) {
			return f - R;
		}
		return (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * _$evalpoly_378( w );
	t2 = z * _$evalpoly_379( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );
	}
	if ( k === 0 ) {
		return f - (s*(f-R));
	}
	return (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );
}


// EXPORTS //

var _$ln_377 = ln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$ln_377 = require( './ln.js' ); */;


// EXPORTS //

var _$ln_376 = _$ln_377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FOURTH_PI_90 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;


// VARIABLES //

var LN_FOURTH_PI = _$ln_376( _$FOURTH_PI_90 );


// MAIN //

/**
* Returns the differential entropy of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~1.838
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function entropy( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return LN_FOURTH_PI + _$ln_376( b - a );
}


// EXPORTS //

var _$entropy_488 = entropy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution differential entropy.
*
* @module @stdlib/stats/base/dists/arcsine/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/arcsine/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns ~-0.242
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.838
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.55
*/

// MODULES //

/* removed: var _$entropy_488 = require( './main.js' ); */;


// EXPORTS //

var _$entropy_487 = _$entropy_488;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.5
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function kurtosis( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.5;
}


// EXPORTS //

var _$kurtosis_490 = kurtosis;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/arcsine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/arcsine/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.5
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.5
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.5
*/

// MODULES //

/* removed: var _$kurtosis_490 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_489 = _$kurtosis_490;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function mean( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

var _$mean_498 = mean;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution expected value.
*
* @module @stdlib/stats/base/dists/arcsine/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/arcsine/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

/* removed: var _$mean_498 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_497 = _$mean_498;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the median of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function median( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

var _$median_500 = median;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution median.
*
* @module @stdlib/stats/base/dists/arcsine/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/arcsine/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

/* removed: var _$median_500 = require( './median.js' ); */;


// EXPORTS //

var _$median_499 = _$median_500;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns 4.0
*
* @example
* var v = mode( -4.0, 4.0 );
* // returns -4.0
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function mode( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return a;
}


// EXPORTS //

var _$mode_502 = mode;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution mode.
*
* @module @stdlib/stats/base/dists/arcsine/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/arcsine/mode' );
*
* var v = mode( 0.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 4.0
*
* v = mode( 2.0, 8.0 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$mode_502 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_501 = _$mode_502;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function skewness( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_510 = skewness;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution skewness.
*
* @module @stdlib/stats/base/dists/arcsine/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/arcsine/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_510 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_509 = _$skewness_510;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var SQRT1OVER8 = 0.35355339059327373; // sqrt( 1.0/8.0 )


// MAIN //

/**
* Returns the standard deviation of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.828
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function stdev( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return SQRT1OVER8 * ( b-a );
}


// EXPORTS //

var _$stdev_512 = stdev;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution standard deviation.
*
* @module @stdlib/stats/base/dists/arcsine/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/arcsine/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.354
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 2.0, 8.0 );
* // returns ~2.121
*/

// MODULES //

/* removed: var _$stdev_512 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_511 = _$stdev_512;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$floor_235 = floor;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$floor_235 = require( './floor.js' ); */;


// EXPORTS //

var _$floor_236 = _$floor_235;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is an integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an integer
*
* @example
* var bool = isInteger( 1.0 );
* // returns true
*
* @example
* var bool = isInteger( 3.14 );
* // returns false
*/
function isInteger( x ) {
	return (_$floor_236(x) === x);
}


// EXPORTS //

var _$isInteger_129 = isInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is an integer.
*
* @module @stdlib/math/base/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/math/base/assert/is-integer' );
*
* var bool = isInteger( 1.0 );
* // returns true
*
* bool = isInteger( 3.14 );
* // returns false
*/

// MODULES //

/* removed: var _$isInteger_129 = require( './is_integer.js' ); */;


// EXPORTS //

var _$isInteger_128 = _$isInteger_129;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an even number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an even number
*
* @example
* var bool = isEven( 5.0 );
* // returns false
*
* @example
* var bool = isEven( -2.0 );
* // returns true
*
* @example
* var bool = isEven( 0.0 );
* // returns true
*
* @example
* var bool = isEven( NaN );
* // returns false
*/
function isEven( x ) {
	return _$isInteger_128( x/2.0 );
}


// EXPORTS //

var _$isEven_125 = isEven;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an even number.
*
* @module @stdlib/math/base/assert/is-even
*
* @example
* var isEven = require( '@stdlib/math/base/assert/is-even' );
*
* var bool = isEven( 5.0 );
* // returns false
*
* bool = isEven( -2.0 );
* // returns true
*
* bool = isEven( 0.0 );
* // returns true
*
* bool = isEven( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isEven_125 = require( './is_even.js' ); */;


// EXPORTS //

var _$isEven_124 = _$isEven_125;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isEven_124 = require( '@stdlib/math/base/assert/is-even' ); */;


// MAIN //

/**
* Tests if a finite numeric value is an odd number.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is an odd number
*
* @example
* var bool = isOdd( 5.0 );
* // returns true
*
* @example
* var bool = isOdd( -2.0 );
* // returns false
*
* @example
* var bool = isOdd( 0.0 );
* // returns false
*
* @example
* var bool = isOdd( NaN );
* // returns false
*/
function isOdd( x ) {
	// Check sign to prevent overflow...
	if ( x > 0.0 ) {
		return _$isEven_124( x-1.0 );
	}
	return _$isEven_124( x+1.0 );
}


// EXPORTS //

var _$isOdd_139 = isOdd;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite numeric value is an odd number.
*
* @module @stdlib/math/base/assert/is-odd
*
* @example
* var isOdd = require( '@stdlib/math/base/assert/is-odd' );
*
* var bool = isOdd( 5.0 );
* // returns true
*
* bool = isOdd( -2.0 );
* // returns false
*
* bool = isOdd( 0.0 );
* // returns false
*
* bool = isOdd( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isOdd_139 = require( './is_odd.js' ); */;


// EXPORTS //

var _$isOdd_138 = _$isOdd_139;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/math/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/math/float64-pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

var _$FLOAT64_PINF_110 = FLOAT64_PINF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === _$FLOAT64_PINF_110 || x === _$FLOAT64_NINF_107);
}


// EXPORTS //

var _$isInfinite_127 = isInfinite;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isInfinite_127 = require( './is_infinite.js' ); */;


// EXPORTS //

var _$isInfinite_126 = _$isInfinite_127;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
}


// EXPORTS //

var _$abs_146 = abs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$abs_146 = require( './abs.js' ); */;


// EXPORTS //

var _$abs_147 = _$abs_146;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var indices;
var __HIGH_457;
var LOW;

if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	__HIGH_457 = 1; // second index
	LOW = 0; // first index
} else {
	__HIGH_457 = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': __HIGH_457,
	'LOW': LOW
};


// EXPORTS //

var _$indices_457 = indices;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __indices_477;
var __HIGH_477;
var __LOW_477;

if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	__HIGH_477 = 1; // second index
	__LOW_477 = 0; // first index
} else {
	__HIGH_477 = 0; // first index
	__LOW_477 = 1; // second index
}
__indices_477 = {
	'HIGH': __HIGH_477,
	'LOW': __LOW_477
};


// EXPORTS //

var _$indices_477 = __indices_477;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_477 = require( './indices.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_479 = new _$ctor_2( 1 );
var __UINT32_VIEW_479 = new _$ctor_7( __FLOAT64_VIEW_479.buffer );

var __HIGH_479 = _$indices_477.HIGH;
var __LOW_479 = _$indices_477.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	__FLOAT64_VIEW_479[ 0 ] = x;
	out[ 0 ] = __UINT32_VIEW_479[ __HIGH_479 ];
	out[ 1 ] = __UINT32_VIEW_479[ __LOW_479 ];
	return out;
}


// EXPORTS //

var _$toWords_479 = toWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_479 = require( './to_words.js' ); */;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function __toWords_478( out, x ) {
	if ( arguments.length === 1 ) {
		return _$toWords_479( [ 0, 0 ], out );
	}
	return _$toWords_479( out, x );
}


// EXPORTS //

var _$toWords_478 = __toWords_478;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

/* removed: var _$toWords_478 = require( './main.js' ); */;


// EXPORTS //

var _$toWords_476 = _$toWords_478;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_463;
if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	__LOW_463 = 0; // first index
} else {
	__LOW_463 = 1; // second index
}


// EXPORTS //

var _$LOW_463 = __LOW_463;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$IS_LITTLE_ENDIAN_48 = require( '@stdlib/assert/is-little-endian' ); */;


// MAIN //

var __LOW_472;
if ( _$IS_LITTLE_ENDIAN_48 === true ) {
	__LOW_472 = 0; // first index
} else {
	__LOW_472 = 1; // second index
}


// EXPORTS //

var _$LOW_472 = __LOW_472;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_472 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_473 = new _$ctor_2( 1 );
var __UINT32_VIEW_473 = new _$ctor_7( __FLOAT64_VIEW_473.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	__FLOAT64_VIEW_473[ 0 ] = x;
	__UINT32_VIEW_473[ _$LOW_472 ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return __FLOAT64_VIEW_473[ 0 ];
}


// EXPORTS //

var _$setLowWord_473 = setLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/math/float64-pinf' );
* var NINF = require( '@stdlib/constants/math/float64-ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

/* removed: var _$setLowWord_473 = require( './main.js' ); */;


// EXPORTS //

var _$setLowWord_471 = _$setLowWord_473;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Converts an unsigned 32-bit integer to a signed 32-bit integer.
*
* @param {uinteger32} x - unsigned 32-bit integer
* @returns {integer32} signed 32-bit integer
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/
function uint32ToInt32( x ) {
	// NOTE: we could also use typed-arrays to achieve the same end.
	return x|0; // asm type annotation
}


// EXPORTS //

var _$uint32ToInt32_481 = uint32ToInt32;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert an unsigned 32-bit integer to a signed 32-bit integer.
*
* @module @stdlib/number/uint32/base/to-int32
*
* @example
* var float64ToUint32 = require( '@stdlib/number/float64/base/to-uint32' );
* var uint32ToInt32 = require( '@stdlib/number/uint32/base/to-int32' );
*
* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
* // returns -1
*
* y = uint32ToInt32( float64ToUint32( 3 ) );
* // returns 3
*/

// MODULES //

/* removed: var _$uint32ToInt32_481 = require( './main.js' ); */;


// EXPORTS //

var _$uint32ToInt32_480 = _$uint32ToInt32_481;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$indices_457 = require( './indices.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_458 = new _$ctor_2( 1 );
var __UINT32_VIEW_458 = new _$ctor_7( __FLOAT64_VIEW_458.buffer );

var __HIGH_458 = _$indices_457.HIGH;
var __LOW_458 = _$indices_457.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	__UINT32_VIEW_458[ __HIGH_458 ] = high;
	__UINT32_VIEW_458[ __LOW_458 ] = low;
	return __FLOAT64_VIEW_458[ 0 ];
}


// EXPORTS //

var _$fromWords_458 = fromWords;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$fromWords_458 = require( './main.js' ); */;


// EXPORTS //

var _$fromWords_456 = _$fromWords_458;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$toWords_476 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$fromWords_456 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	_$toWords_476( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = _$getHighWord_460( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return _$fromWords_456( hx, WORDS[ 1 ] );
}


// EXPORTS //

var _$copysign_177 = copysign;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$copysign_177 = require( './copysign.js' ); */;


// EXPORTS //

var _$copysign_178 = _$copysign_177;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isOdd_138 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$copysign_178 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\(|x| = 0\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 0.0, 2 );
* // returns 0.0
*
* @example
* var v = pow( -0.0, -9 );
* // returns -Infinity
*
* @example
* var v = pow( 0.0, -9 );
* // returns Infinity
*
* @example
* var v = pow( -0.0, 9 );
* // returns 0.0
*
* @example
* var v = pow( 0.0, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 0.0, Infinity );
* // returns 0.0
*/
function pow( x, y ) {
	if ( y === _$FLOAT64_NINF_107 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( y === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	if ( y > 0.0 ) {
		if ( _$isOdd_138( y ) ) {
			return x; // handles +-0
		}
		return 0.0;
	}
	// y < 0.0
	if ( _$isOdd_138( y ) ) {
		return _$copysign_178( _$FLOAT64_PINF_110, x ); // handles +-0
	}
	return _$FLOAT64_PINF_110;
}


// EXPORTS //

var _$pow_404 = pow;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

var HUGE = 1.0e300;
var TINY = 1.0e-300;


// MAIN //

/**
* Evaluates the exponential function when \\(|y| > 2^64\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} overflow or underflow result
*
* @example
* var v = pow( 9.0, 3.6893488147419103e19 );
* // returns Infinity
*
* @example
* var v = pow( -3.14, -3.6893488147419103e19 );
* // returns 0.0
*/
function __pow_405( x, y ) {
	var ahx;
	var hx;

	hx = _$getHighWord_460( x );
	ahx = (hx & ABS_MASK);

	if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
		if ( y < 0 ) {
			// signal overflow...
			return HUGE * HUGE;
		}
		// signal underflow...
		return TINY * TINY;
	}
	// `x` has a biased exponent greater than or equal to `0`...

	if ( y > 0 ) {
		// signal overflow...
		return HUGE * HUGE;
	}
	// signal underflow...
	return TINY * TINY;
}


// EXPORTS //

var _$pow_405 = __pow_405;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the exponential function when \\( y = \pm \infty\\).
*
* @private
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( -1.0, Infinity );
* // returns NaN
*
* @example
* var v = pow( -1.0, -Infinity  );
* // returns NaN
*
* @example
* var v = pow( 1.0, Infinity );
* // returns 1.0
*
* @example
* var v = pow( 1.0, -Infinity  );
* // returns 1.0
*
* @example
* var v = pow( 0.5, Infinity );
* // returns 0.0
*
* @example
* var v = pow( 0.5, -Infinity  );
* // returns Infinity
*
* @example
* var v = pow( 1.5, -Infinity  );
* // returns 0.0
*
* @example
* var v = pow( 1.5, Infinity );
* // returns Infinity
*/
function __pow_406( x, y ) {
	if ( x === -1.0 ) {
		// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
		return (x-x)/(x-x); // signal NaN
	}
	if ( x === 1.0 ) {
		return 1.0;
	}
	// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
	if ( (_$abs_147(x) < 1.0) === (y === _$FLOAT64_PINF_110) ) {
		return 0.0;
	}
	// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
	return _$FLOAT64_PINF_110;
}


// EXPORTS //

var _$pow_406 = __pow_406;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_399( x ) {
	if ( x === 0.0 ) {
		return 0.5999999999999946;
	}
	return 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_399 = __evalpoly_399;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_399 = require( './polyval_l.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_397 = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_397 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_397 = 0x3ff00000|0; // asm type annotation

// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
var HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation

// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
var HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation

// TODO: consider making an external constant
var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

var TWO53 = 9007199254740992.0;	// 0x43400000, 0x00000000

// 2/(3*LN2)
var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

// (float)CP
var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

// Low: CP_HI
var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

var BP = [
	1.0,
	1.5
];
var DP_HI = [
	0.0,
	5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
];
var DP_LO = [
	0.0,
	1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
];


// MAIN //

/**
* Computes \\(\operatorname{log2}(ax)\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @param {number} ahx - high word of `ax`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
*/
function log2ax( out, ax, ahx ) {
	var tmp;
	var ss; // `hs + ls`
	var s2; // `ss` squared
	var hs;
	var ls;
	var ht;
	var lt;
	var bp; // `BP` constant
	var dp; // `DP` constant
	var hp;
	var lp;
	var hz;
	var lz;
	var t1;
	var t2;
	var t;
	var r;
	var u;
	var v;
	var n;
	var j;
	var k;

	n = 0|0; // asm type annotation

	// Check if `x` is subnormal...
	if ( ahx < __HIGH_MIN_NORMAL_EXP_397 ) {
		ax *= TWO53;
		n -= 53|0; // asm type annotation
		ahx = _$getHighWord_460( ax );
	}
	// Extract the unbiased exponent of `x`:
	n += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - _$FLOAT64_EXPONENT_BIAS_89)|0; // asm type annotation

	// Isolate the significand bits of `x`:
	j = (ahx & __HIGH_SIGNIFICAND_MASK_397)|0; // asm type annotation

	// Normalize `ahx` by setting the (biased) exponent to `1023`:
	ahx = (j | __HIGH_BIASED_EXP_0_397)|0; // asm type annotation

	// Determine the interval of `|x|` by comparing significand bits...

	// |x| < sqrt(3/2)
	if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
		k = 0;
	}
	// |x| < sqrt(3)
	else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
		k = 1;
	}
	// |x| >= sqrt(3)
	else {
		k = 0;
		n += 1|0; // asm type annotation
		ahx -= __HIGH_MIN_NORMAL_EXP_397;
	}
	// Load the normalized high word into `|x|`:
	ax = _$setHighWord_469( ax, ahx );

	// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
	bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
	u = ax - bp; // (x-1) || (x-1.5)
	v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
	ss = u * v;
	hs = _$setLowWord_471( ss, 0 ); // set all low word (less significant significand) bits to 0s

	// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
	tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
	tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
	ht = _$setHighWord_469( 0.0, tmp );
	lt = ax - (ht - bp);
	ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

	// Compute `log(ax)`...

	s2 = ss * ss;
	r = s2 * s2 * _$evalpoly_399( s2 );
	r += ls * (hs + ss);
	s2 = hs * hs;
	ht = 3.0 + s2 + r;
	ht = _$setLowWord_471( ht, 0 );
	lt = r - ((ht-3.0) - s2);

	// u+v = ss*(1+...):
	u = hs * ht;
	v = ( ls*ht ) + ( lt*ss );

	// 2/(3LN2) * (ss+...):
	hp = u + v;
	hp = _$setLowWord_471( hp, 0 );
	lp = v - (hp - u);
	hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
	lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

	// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
	dp = DP_HI[ k ];
	t = n;
	t1 = ((hz+lz) + dp) + t; // log2(ax)
	t1 = _$setLowWord_471( t1, 0 );
	t2 = lz - (((t1-t) - dp) - hz);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$log2ax_397 = log2ax;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_401( x ) {
	if ( x === 0.0 ) {
		return 0.5;
	}
	return 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));
}


// EXPORTS //

var _$evalpoly_401 = __evalpoly_401;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_401 = require( './polyval_w.js' ); */;


// VARIABLES //

// 1/LN2
var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

// High (24 bits): 1/LN2
var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

// Low: 1/LN2
var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44


// MAIN //

/**
* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
*
* @private
* @param {Array} out - output array
* @param {number} ax - absolute value of `x`
* @returns {Array} output array containing a tuple comprised of high and low parts
*
* @example
* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
* // returns [ -1265.7236328125, -0.0008163940840404393 ]
*/
function logx( out, ax ) {
	var t2;
	var t1;
	var t;
	var w;
	var u;
	var v;

	t = ax - 1.0; // `t` has `20` trailing zeros
	w = t * t * _$evalpoly_401( t );
	u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
	v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
	t1 = u + v;
	t1 = _$setLowWord_471( t1, 0 );
	t2 = v - (t1 - u);

	out[ 0 ] = t1;
	out[ 1 ] = t2;
	return out;
}


// EXPORTS //

var _$logx_398 = logx;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/math/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_101 = FLOAT64_MAX_BASE2_EXPONENT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_100 = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_105 = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/math/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/math/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

var _$FLOAT64_SMALLEST_NORMAL_111 = FLOAT64_SMALLEST_NORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( _$isnan_130( x ) || _$isInfinite_126( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && _$abs_147( x ) < _$FLOAT64_SMALLEST_NORMAL_111 ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

var _$normalize_467 = normalize;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$normalize_467 = require( './normalize.js' ); */;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( new Array( 2 ), 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( new Array( 2 ), 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( new Array( 2 ), NaN );
* // returns [ NaN, 0 ]
*/
function __normalize_466( out, x ) {
	if ( arguments.length === 1 ) {
		return _$normalize_467( [ 0.0, 0 ], out );
	}
	return _$normalize_467( out, x );
}


// EXPORTS //

var _$normalize_466 = __normalize_466;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

/* removed: var _$normalize_466 = require( './main.js' ); */;


// EXPORTS //

var _$normalize_465 = _$normalize_466;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/math/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_94 = FLOAT64_HIGH_WORD_EXPONENT_MASK;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$FLOAT64_HIGH_WORD_EXPONENT_MASK_94 = require( '@stdlib/constants/math/float64-high-word-exponent-mask' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = _$getHighWord_460( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & _$FLOAT64_HIGH_WORD_EXPONENT_MASK_94 ) >>> 20;

	// Remove the bias and return:
	return (high - _$FLOAT64_EXPONENT_BIAS_89)|0; // asm type annotation
}


// EXPORTS //

var _$exponent_455 = exponent;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

/* removed: var _$exponent_455 = require( './main.js' ); */;


// EXPORTS //

var _$exponent_454 = _$exponent_455;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_101 = require( '@stdlib/constants/math/float64-max-base2-exponent' ); */;
/* removed: var _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_100 = require( '@stdlib/constants/math/float64-max-base2-exponent-subnormal' ); */;
/* removed: var _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_105 = require( '@stdlib/constants/math/float64-min-base2-exponent-subnormal' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_178 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$normalize_465 = require( '@stdlib/number/float64/base/normalize' ); */;
/* removed: var _$exponent_454 = require( '@stdlib/number/float64/base/exponent' ); */;
/* removed: var _$toWords_476 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$fromWords_456 = require( '@stdlib/number/float64/base/from-words' ); */;


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var __WORDS_375 = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		_$isnan_130( frac ) ||
		_$isInfinite_126( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	_$normalize_465( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += _$exponent_454( frac );

	// Check for underflow/overflow...
	if ( exp < _$FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL_105 ) {
		return _$copysign_178( 0.0, frac );
	}
	if ( exp > _$FLOAT64_MAX_BASE2_EXPONENT_101 ) {
		if ( frac < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$FLOAT64_PINF_110;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= _$FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL_100 ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	_$toWords_476( __WORDS_375, frac );
	high = __WORDS_375[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+_$FLOAT64_EXPONENT_BIAS_89) << 20);

	// Create a new floating-point number:
	return m * _$fromWords_456( high, __WORDS_375[ 1 ] );
}


// EXPORTS //

var _$ldexp_375 = ldexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$ldexp_375 = require( './ldexp.js' ); */;


// EXPORTS //

var _$ldexp_374 = _$ldexp_375;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of `2`.
*
* @module @stdlib/constants/math/float64-ln-two
* @type {number}
*
* @example
* var LN2 = require( '@stdlib/constants/math/float64-ln-two' );
* // returns 0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `2`.
*
* ```tex
* \ln 2
* ```
*
* @constant
* @type {number}
* @default 0.6931471805599453
*/
var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN2_99 = LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_226( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_226 = __evalpoly_226;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_400( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666602;
	}
	return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_400 = __evalpoly_400;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_480 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_400 = require( './polyval_p.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_403 = 0x7fffffff|0; // asm type annotation

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_403 = 0x000fffff|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_403 = 0x00100000|0; // asm type annotation

// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation

// TODO: consider making into an external constant
var __HIGH_NUM_SIGNIFICAND_BITS_403 = 20|0; // asm type annotation

// High: LN2
var __LN2_HI_403 = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

// Low: LN2
var __LN2_LO_403 = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39


// MAIN //

/**
* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
*
* @private
* @param {number} j - high word of `hp + lp`
* @param {number} hp - first power summand
* @param {number} lp - second power summand
* @returns {number} function value
*
* @example
* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
* // returns ~0.79
*/
function pow2( j, hp, lp ) {
	var tmp;
	var t1;
	var t;
	var r;
	var u;
	var v;
	var w;
	var z;
	var n;
	var i;
	var k;

	i = (j & __ABS_MASK_403)|0; // asm type annotation
	k = ((i>>__HIGH_NUM_SIGNIFICAND_BITS_403) - _$FLOAT64_EXPONENT_BIAS_89)|0; // asm type annotation
	n = 0;

	// `|z| > 0.5`, set `n = z+0.5`
	if ( i > HIGH_BIASED_EXP_NEG_1 ) {
		n = (j + (__HIGH_MIN_NORMAL_EXP_403>>(k+1)))>>>0; // asm type annotation
		k = (((n & __ABS_MASK_403)>>__HIGH_NUM_SIGNIFICAND_BITS_403) - _$FLOAT64_EXPONENT_BIAS_89)|0; // new k for n
		tmp = ((n & ~(__HIGH_SIGNIFICAND_MASK_403 >> k)))>>>0; // asm type annotation
		t = _$setHighWord_469( 0.0, tmp );
		n = (((n & __HIGH_SIGNIFICAND_MASK_403)|__HIGH_MIN_NORMAL_EXP_403) >> (__HIGH_NUM_SIGNIFICAND_BITS_403-k))>>>0; // eslint-disable-line max-len
		if ( j < 0 ) {
			n = -n;
		}
		hp -= t;
	}
	t = lp + hp;
	t = _$setLowWord_471( t, 0 );
	u = t * __LN2_HI_403;
	v = ( (lp - (t-hp))*_$LN2_99 ) + ( t*__LN2_LO_403 );
	z = u + v;
	w = v - (z - u);
	t = z * z;
	t1 = z - ( t*_$evalpoly_400( t ) );
	r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
	z = 1.0 - (r - z);
	j = _$getHighWord_460( z );
	j = _$uint32ToInt32_480( j );
	j += (n << __HIGH_NUM_SIGNIFICAND_BITS_403)>>>0; // asm type annotation

	// Check for subnormal output...
	if ( (j>>__HIGH_NUM_SIGNIFICAND_BITS_403) <= 0 ) {
		z = _$ldexp_374( z, n );
	} else {
		z = _$setHighWord_469( z, j );
	}
	return z;
}


// EXPORTS //

var _$pow2_403 = pow2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_138 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$toWords_476 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$uint32ToInt32_480 = require( '@stdlib/number/uint32/base/to-int32' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$pow_404 = require( './x_is_zero.js' ); */;
/* removed: var _$pow_405 = require( './y_is_huge.js' ); */;
/* removed: var _$pow_406 = require( './y_is_infinite.js' ); */;
/* removed: var _$log2ax_397 = require( './log2ax.js' ); */;
/* removed: var _$logx_398 = require( './logx.js' ); */;
/* removed: var _$pow2_403 = require( './pow2.js' ); */;


// VARIABLES //

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_402 = 0x7fffffff|0; // asm type annotation

// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
var __HIGH_MAX_NEAR_UNITY_402 = 0x3fefffff|0; // asm type annotation

// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
var HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation

// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
var HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation

// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
var HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_402 = 0x3ff00000|0; // asm type annotation

// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
var HIGH_1075 = 0x4090cc00|0; // asm type annotation

// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
var HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation

var HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation

var __HUGE_402 = 1.0e300;
var __TINY_402 = 1.0e-300;

// -(1024-log2(ovfl+.5ulp))
var OVT = 8.0085662595372944372e-17;

// High/low words workspace:
var __WORDS_402 = [ 0|0, 0|0 ]; // WARNING: not thread safe

// Log workspace:
var LOG_WORKSPACE = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the exponential function.
*
* ## Method
*
* 1.  Let \\(x = 2^n (1+f)\\).
*
* 2.  Compute \\(\operatorname{log2}(x)\\) as
*
*     ```tex
*     \operatorname{log2}(x) = w_1 + w_2
*     ```
*
*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
*
* 3.  Compute
*
*     ```tex
*     y \cdot \operatorname{log2}(x) = n + y^\prime
*     ```
*
*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
*
* 4.  Return
*
*     ```tex
*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
* 1^y &= 1 & \\
* x^0 &= 1 & \\
* x^1 &= x & \\
* (\pm 0)^\infty &= +0 & \\
* (\pm 0)^{-\infty} &= +\infty & \\
* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
* x^{\infty} &= +\infty & |x| > 1 \\
* x^{\infty} &= +0 & |x| < 1 \\
* x^{-\infty} &= +0 & |x| > 1 \\
* x^{-\infty} &= +\infty & |x| < 1 \\
* (-\infty)^y &= (-0)^y & \\
* \infty^y &= +0 & y < 0 \\
* \infty^y &= +\infty & y > 0 \\
* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
* \end{align*}
* ```
*
* ## Notes
*
* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
*
*
* @param {number} x - base
* @param {number} y - exponent
* @returns {number} function value
*
* @example
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* @example
* var v = pow( 4.0, 0.5 );
* // returns 2.0
*
* @example
* var v = pow( 100.0, 0.0 );
* // returns 1.0
*
* @example
* var v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* @example
* var v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* @example
* var v = pow( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = pow( 5.0, NaN );
* // returns NaN
*
* @example
* var v = pow( NaN, NaN );
* // returns NaN
*/
function __pow_402( x, y ) {
	var ahx; // absolute value high word `x`
	var ahy; // absolute value high word `y`
	var ax;  // absolute value `x`
	var hx;  // high word `x`
	var lx;  // low word `x`
	var hy;  // high word `y`
	var ly;  // low word `y`
	var sx;  // sign `x`
	var sy;  // sign `y`
	var y1;
	var hp;
	var lp;
	var t;
	var z;   // y prime
	var j;
	var i;
	if ( _$isnan_130( x ) || _$isnan_130( y ) ) {
		return NaN;
	}
	// Split `y` into high and low words:
	_$toWords_476( __WORDS_402, y );
	hy = __WORDS_402[ 0 ];
	ly = __WORDS_402[ 1 ];

	// Special cases `y`...
	if ( ly === 0 ) {
		if ( y === 0.0 ) {
			return 1.0;
		}
		if ( y === 1.0 ) {
			return x;
		}
		if ( y === -1.0 ) {
			return 1.0 / x;
		}
		if ( y === 0.5 ) {
			return _$sqrt_437( x );
		}
		if ( y === -0.5 ) {
			return 1.0 / _$sqrt_437( x );
		}
		if ( y === 2.0 ) {
			return x * x;
		}
		if ( y === 3.0 ) {
			return x * x * x;
		}
		if ( y === 4.0 ) {
			x *= x;
			return x * x;
		}
		if ( _$isInfinite_126( y ) ) {
			return _$pow_406( x, y );
		}
	}
	// Split `x` into high and low words:
	_$toWords_476( __WORDS_402, x );
	hx = __WORDS_402[ 0 ];
	lx = __WORDS_402[ 1 ];

	// Special cases `x`...
	if ( lx === 0 ) {
		if ( hx === 0 ) {
			return _$pow_404( x, y );
		}
		if ( x === 1.0 ) {
			return 1.0;
		}
		if (
			x === -1.0 &&
			_$isOdd_138( y )
		) {
			return -1.0;
		}
		if ( _$isInfinite_126( x ) ) {
			if ( x === _$FLOAT64_NINF_107 ) {
				// `pow( 1/x, -y )`
				return __pow_402( -0.0, -y );
			}
			if ( y < 0.0 ) {
				return 0.0;
			}
			return _$FLOAT64_PINF_110;
		}
	}
	if (
		x < 0.0 &&
		_$isInteger_128( y ) === false
	) {
		// Signal NaN...
		return (x-x)/(x-x);
	}
	ax = _$abs_147( x );

	// Remove the sign bits (i.e., get absolute values):
	ahx = (hx & __ABS_MASK_402)|0; // asm type annotation
	ahy = (hy & __ABS_MASK_402)|0; // asm type annotation

	// Extract the sign bits:
	sx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation
	sy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation

	// Determine the sign of the result...
	if ( sx && _$isOdd_138( y ) ) {
		sx = -1.0;
	} else {
		sx = 1.0;
	}
	// Case 1: `|y|` is huge...

	// |y| > 2^31
	if ( ahy > HIGH_BIASED_EXP_31 ) {
		// `|y| > 2^64`, then must over- or underflow...
		if ( ahy > HIGH_BIASED_EXP_64 ) {
			return _$pow_405( x, y );
		}
		// Over- or underflow if `x` is not close to unity...

		if ( ahx < __HIGH_MAX_NEAR_UNITY_402 ) {
			// y < 0
			if ( sy === 1 ) {
				// Signal overflow...
				return sx * __HUGE_402 * __HUGE_402;
			}
			// Signal underflow...
			return sx * __TINY_402 * __TINY_402;
		}
		if ( ahx > __HIGH_BIASED_EXP_0_402 ) {
			// y > 0
			if ( sy === 0 ) {
				// Signal overflow...
				return sx * __HUGE_402 * __HUGE_402;
			}
			// Signal underflow...
			return sx * __TINY_402 * __TINY_402;
		}
		// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
		t = _$logx_398( LOG_WORKSPACE, ax );
	}
	// Case 2: `|y|` is not huge...
	else {
		t = _$log2ax_397( LOG_WORKSPACE, ax, ahx );
	}
	// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
	y1 = _$setLowWord_471( y, 0 );
	lp = ( (y-y1)*t[0] ) + ( y*t[1] );
	hp = y1 * t[0];
	z = lp + hp;

	// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
	_$toWords_476( __WORDS_402, z );
	j = _$uint32ToInt32_480( __WORDS_402[0] );
	i = _$uint32ToInt32_480( __WORDS_402[1] );

	// z >= 1024
	if ( j >= HIGH_BIASED_EXP_10 ) {
		// z > 1024
		if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
			// Signal overflow...
			return sx * __HUGE_402 * __HUGE_402;
		}
		if ( (lp+OVT) > (z-hp) ) {
			// Signal overflow...
			return sx * __HUGE_402 * __HUGE_402;
		}
	}
	// z <= -1075
	else if ( (j&__ABS_MASK_402) >= HIGH_1075 ) {
		// z < -1075
		if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
			// signal underflow...
			return sx * __TINY_402 * __TINY_402;
		}
		if ( lp <= (z-hp) ) {
			// signal underflow...
			return sx * __TINY_402 * __TINY_402;
		}
	}
	// Compute `2^(hp+lp)`...
	z = _$pow2_403( j, hp, lp );

	return sx * z;
}


// EXPORTS //

var _$pow_402 = __pow_402;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the exponential function.
*
* @module @stdlib/math/base/special/pow
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var v = pow( 2.0, 3.0 );
* // returns 8.0
*
* v = pow( 4.0, 0.5 );
* // returns 2.0
*
* v = pow( 100.0, 0.0 );
* // returns 1.0
*
* v = pow( 3.141592653589793, 5.0 );
* // returns ~306.0197
*
* v = pow( 3.141592653589793, -0.2 );
* // returns ~0.7954
*
* v = pow( NaN, 3.0 );
* // returns NaN
*
* v = pow( 5.0, NaN );
* // returns NaN
*
* v = pow( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$pow_402 = require( './pow.js' ); */;


// EXPORTS //

var _$pow_396 = _$pow_402;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the variance of an arcsine distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = variance( -4.0, 4.0 );
* // returns 8.0
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function variance( a, b ) {
	if ( a >= b ) {
		return NaN;
	}
	return 0.125 * _$pow_396( b-a, 2.0 );
}


// EXPORTS //

var _$variance_514 = variance;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution variance.
*
* @module @stdlib/stats/base/dists/arcsine/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/arcsine/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.125
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 2.0, 8.0 );
* // returns ~4.5
*/

// MODULES //

/* removed: var _$variance_514 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_513 = _$variance_514;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-ln-pi
* @type {number}
*
* @example
* var LN_PI = require( '@stdlib/constants/math/float64-ln-pi' );
* // returns 1.1447298858494002
*/


// MAIN //

/**
* Natural logarithm of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.1447298858494002
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var LN_PI = 1.1447298858494002;


// EXPORTS //

var _$LN_PI_96 = LN_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0.0, 10.0 );
* // returns ~-0.23
*
* @example
* var y = logcdf( 0.5, 0.0, 2.0 );
* // returns ~-1.1
*
* @example
* var y = logcdf( +Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function logcdf( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return _$LN2_99 - _$LN_PI_96 + _$ln_376( _$asin_151( _$sqrt_437( ( x-a ) / ( b-a ) ) ) );
}


// EXPORTS //

var _$logcdf_493 = logcdf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0 );
* var y = logcdf( 0.5 );
* // returns ~-1.941
*
* y = logcdf( 8.0 );
* // returns ~-0.35
*/
function __factory_491( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return _$LN2_99 - _$LN_PI_96 + _$ln_376( _$asin_151( _$sqrt_437( ( x-a ) / ( b-a ) ) ) );
	}
}


// EXPORTS //

var _$factory_491 = __factory_491;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/arcsine/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/arcsine/logcdf' );
*
* var y = logcdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 0.0, 10.0 );
* y = mylogcdf( 0.5 );
* // returns ~-1.938
*
* y = mylogcdf( 8.0 );
* // returns ~-0.35
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_493 = require( './logcdf.js' ); */;
/* removed: var _$factory_491 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_493, 'factory', _$factory_491 );


// EXPORTS //

var _$logcdf_492 = _$logcdf_493;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.838
*
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns ~-0.308
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function logpdf( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return _$FLOAT64_NINF_107;
	}
	return -( _$LN_PI_96 + ( _$ln_376( ( x-a ) * ( b-x ) ) / 2.0 ) );
}


// EXPORTS //

var _$logpdf_496 = logpdf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.531
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function __factory_494( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return _$FLOAT64_NINF_107;
		}
		return -( _$LN_PI_96 + ( _$ln_376( ( x-a ) * ( b-x ) ) / 2.0 ) );
	}
}


// EXPORTS //

var _$factory_494 = __factory_494;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/arcsine/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/arcsine/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.694
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns Infinity
*
* y = mylogPDF( 5.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_496 = require( './logpdf.js' ); */;
/* removed: var _$factory_494 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_496, 'factory', _$factory_494 );


// EXPORTS //

var _$logpdf_495 = _$logpdf_496;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns ~0.159
*
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns ~0.735
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function pdf( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( _$PI_109 * _$sqrt_437( ( x-a ) * ( b-x ) ) );
}


// EXPORTS //

var _$pdf_505 = pdf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an arcsine distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns ~0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function __factory_503( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an arcsine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( _$PI_109 * _$sqrt_437( ( x-a ) * ( b-x ) ) );
	}
}


// EXPORTS //

var _$factory_503 = __factory_503;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/arcsine/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/arcsine/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns ~0.184
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns Infinity
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_505 = require( './pdf.js' ); */;
/* removed: var _$factory_503 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_505, 'factory', _$factory_503 );


// EXPORTS //

var _$pdf_504 = _$pdf_505;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_366( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_366 = __evalpoly_366;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_367( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_367 = __evalpoly_367;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_366 = require( './polyval_c13.js' ); */;
/* removed: var _$evalpoly_367 = require( './polyval_c46.js' ); */;


// MAIN //

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * _$evalpoly_366( z );
	r += w * w * _$evalpoly_367( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

var _$kernelCos_365 = kernelCos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelCos_365 = require( './kernel_cos.js' ); */;


// EXPORTS //

var _$kernelCos_364 = _$kernelCos_365;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
}


// EXPORTS //

var _$kernelSin_369 = kernelSin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$kernelSin_369 = require( './kernel_sin.js' ); */;


// EXPORTS //

var _$kernelSin_368 = _$kernelSin_369;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ctor_7 = require( '@stdlib/array/uint32' ); */;
/* removed: var _$ctor_2 = require( '@stdlib/array/float64' ); */;
/* removed: var _$LOW_463 = require( './low.js' ); */;


// VARIABLES //

var __FLOAT64_VIEW_464 = new _$ctor_2( 1 );
var __UINT32_VIEW_464 = new _$ctor_7( __FLOAT64_VIEW_464.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	__FLOAT64_VIEW_464[ 0 ] = x;
	return __UINT32_VIEW_464[ _$LOW_463 ];
}


// EXPORTS //

var _$getLowWord_464 = getLowWord;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

/* removed: var _$getLowWord_464 = require( './main.js' ); */;


// EXPORTS //

var _$getLowWord_462 = _$getLowWord_464;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = _$ldexp_374( z, q0 );
	z -= 8.0 * _$floor_236( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= _$ldexp_374( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = _$ldexp_374( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = _$ldexp_374( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

var _$kernelRempio2_410 = kernelRempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$round_425 = round;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$round_425 = require( './round.js' ); */;


// EXPORTS //

var _$round_424 = _$round_425;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = _$round_424( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = _$getHighWord_460( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = _$getHighWord_460( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

var _$rempio2Medium_412 = rempio2Medium;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$getLowWord_462 = require( '@stdlib/number/float64/base/get-low-word' ); */;
/* removed: var _$fromWords_456 = require( '@stdlib/number/float64/base/from-words' ); */;
/* removed: var _$kernelRempio2_410 = require( './kernel_rempio2.js' ); */;
/* removed: var _$rempio2Medium_412 = require( './rempio2_medium.js' ); */;


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var __TWO24_411 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var __PIO2_1_411 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var __PIO2_1T_411 = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * __PIO2_1T_411;
var THREE_PIO2_1T = 3.0 * __PIO2_1T_411;
var FOUR_PIO2_1T = 4.0 * __PIO2_1T_411;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_411 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_411 = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = new Array( 3 ); // WARNING: not thread safe
var TY = new Array( 2 ); // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = _$getHighWord_460( x );
	ix = (hx & __ABS_MASK_411)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return _$rempio2Medium_412( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - __PIO2_1_411;
				y[ 0 ] = z - __PIO2_1T_411;
				y[ 1 ] = (z - y[0]) - __PIO2_1T_411;
				return 1;
			}
			z = x + __PIO2_1_411;
			y[ 0 ] = z + __PIO2_1T_411;
			y[ 1 ] = (z - y[0]) + __PIO2_1T_411;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*__PIO2_1_411 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*__PIO2_1_411 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return _$rempio2Medium_412( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*__PIO2_1_411 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*__PIO2_1_411 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return _$rempio2Medium_412( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*__PIO2_1_411 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*__PIO2_1_411 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return _$rempio2Medium_412( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_411 ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = _$getLowWord_462( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = _$fromWords_456( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * __TWO24_411;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = _$kernelRempio2_410( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

var _$rempio2_411 = rempio2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

/* removed: var _$rempio2_411 = require( './rempio2.js' ); */;


// EXPORTS //

var _$rempio2_409 = _$rempio2_411;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_364 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_368 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_409 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var __ABS_MASK_429 = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var __EXPONENT_MASK_429 = 0x7ff00000|0; // asm type annotation

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var __PIO4_HIGH_WORD_429 = 0x3fe921fb|0; // asm type annotation

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |   S    |   C    |    T   |
*     | 1 |   C    |  -S    |  -1/T  |
*     | 2 |  -S    |  -C    |    T   |
*     | 3 |  -C    |   S    |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = _$getHighWord_460( x );
	ix &= __ABS_MASK_429;

	// Case: |x| ~< π/4
	if ( ix <= __PIO4_HIGH_WORD_429 ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return _$kernelSin_368( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= __EXPONENT_MASK_429 ) {
		return NaN;
	}
	// Argument reduction...
	n = _$rempio2_409( x, Y );
	switch ( n & 3 ) {
	case 0:
		return _$kernelSin_368( Y[ 0 ], Y[ 1 ] );
	case 1:
		return _$kernelCos_364( Y[ 0 ], Y[ 1 ] );
	case 2:
		return -_$kernelSin_368( Y[ 0 ], Y[ 1 ] );
	default:
		return -_$kernelCos_364( Y[ 0 ], Y[ 1 ] );
	}
}


// EXPORTS //

var _$sin_429 = sin;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( 3.141592653589793/2.0 );
* // returns ~1.0
*
* v = sin( -3.141592653589793/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sin_429 = require( './sin.js' ); */;


// EXPORTS //

var _$sin_428 = _$sin_429;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/math/float64-half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

var _$HALF_PI_93 = HALF_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;


// MAIN //

/**
* Evaluates the quantile function for an arcsine distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.905
*
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function quantile( p, a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( _$pow_396( _$sin_428( _$HALF_PI_93*p ), 2.0 ) * ( b-a ) );
}


// EXPORTS //

var _$quantile_508 = quantile;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for an arcsine distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns ~2.691
*
* y = quantile( 0.8 );
* // returns ~3.809
*/
function __factory_506( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an arcsine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( _$pow_396( _$sin_428( _$HALF_PI_93*p ), 2.0 ) * ( b-a ) );
	}
}


// EXPORTS //

var _$factory_506 = __factory_506;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution quantile function.
*
* @module @stdlib/stats/base/dists/arcsine/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/arcsine/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns ~5.0
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns ~3.618
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_508 = require( './quantile.js' ); */;
/* removed: var _$factory_506 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_508, 'factory', _$factory_506 );


// EXPORTS //

var _$quantile_507 = _$quantile_508;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isNumber_486 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$entropy_487 = require( '@stdlib/stats/base/dists/arcsine/entropy' ); */;
/* removed: var _$kurtosis_489 = require( '@stdlib/stats/base/dists/arcsine/kurtosis' ); */;
/* removed: var _$mean_497 = require( '@stdlib/stats/base/dists/arcsine/mean' ); */;
/* removed: var _$median_499 = require( '@stdlib/stats/base/dists/arcsine/median' ); */;
/* removed: var _$mode_501 = require( '@stdlib/stats/base/dists/arcsine/mode' ); */;
/* removed: var _$skewness_509 = require( '@stdlib/stats/base/dists/arcsine/skewness' ); */;
/* removed: var _$stdev_511 = require( '@stdlib/stats/base/dists/arcsine/stdev' ); */;
/* removed: var _$variance_513 = require( '@stdlib/stats/base/dists/arcsine/variance' ); */;
/* removed: var _$cdf_483 = require( '@stdlib/stats/base/dists/arcsine/cdf' ); */;
/* removed: var _$logcdf_492 = require( '@stdlib/stats/base/dists/arcsine/logcdf' ); */;
/* removed: var _$logpdf_495 = require( '@stdlib/stats/base/dists/arcsine/logpdf' ); */;
/* removed: var _$pdf_504 = require( '@stdlib/stats/base/dists/arcsine/pdf' ); */;
/* removed: var _$quantile_507 = require( '@stdlib/stats/base/dists/arcsine/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function arcsineCDF( x ) {
	return _$cdf_483( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function arcsineLogCDF( x ) {
	return _$logcdf_492( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function arcsineLogPDF( x ) {
	return _$logpdf_495( x, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function arcsinePDF( x ) {
	return _$pdf_504( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function arcsineQuantile( p ) {
	return _$quantile_507( p, this.a, this.b );
}


// MAIN //

/**
* Arcsine distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be less than `b`
* @returns {Arcsine} distribution instance
*
* @example
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/
function Arcsine() {
	var a;
	var b;
	if ( !(this instanceof Arcsine) ) {
		if ( arguments.length === 0 ) {
			return new Arcsine();
		}
		return new Arcsine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !__isNumber_486( a ) || _$isnan_130( a ) ) {
			throw new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !__isNumber_486( b ) || _$isnan_130( b ) ) {
			throw new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	_$defineProperty_1606( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !__isNumber_486( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be less than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isNumber_486( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value <= a ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Arcsine distribution differential entropy.
*
* @name entropy
* @memberof Arcsine.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.entropy;
* // returns ~1.838
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'entropy', function get() {
	return _$entropy_487( this.a, this.b );
});

/**
* Arcsine distribution excess kurtosis.
*
* @name kurtosis
* @memberof Arcsine.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.kurtosis;
* // returns -1.5
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'kurtosis', function get() {
	return _$kurtosis_489( this.a, this.b );
});

/**
* Arcsine distribution expected value.
*
* @name mean
* @memberof Arcsine.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mean;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'mean', function get() {
	return _$mean_497( this.a, this.b );
});

/**
* Arcsine distribution median.
*
* @name median
* @memberof Arcsine.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.median;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'median', function get() {
	return _$median_499( this.a, this.b );
});

/**
* Arcsine distribution mode.
*
* @name mode
* @memberof Arcsine.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'mode', function get() {
	return _$mode_501( this.a, this.b );
});

/**
* Arcsine distribution skewness.
*
* @name skewness
* @memberof Arcsine.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'skewness', function get() {
	return _$skewness_509( this.a, this.b );
});

/**
* Arcsine distribution standard deviation.
*
* @name stdev
* @memberof Arcsine.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.stdev;
* // returns ~2.828
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'stdev', function get() {
	return _$stdev_511( this.a, this.b );
});

/**
* Arcsine distribution variance.
*
* @name variance
* @memberof Arcsine.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var arcsine = new Arcsine( 4.0, 12.0 );
*
* var v = arcsine.variance;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Arcsine.prototype, 'variance', function get() {
	return _$variance_513( this.a, this.b );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.cdf( 3.0 );
* // returns ~0.5
*/
_$setNonEnumerableReadOnly_1603( Arcsine.prototype, 'cdf', arcsineCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.logcdf( 3.0 );
* // returns ~-0.693
*/
_$setNonEnumerableReadOnly_1603( Arcsine.prototype, 'logcdf', arcsineLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.logpdf( 2.5 );
* // returns ~-1.0
*/
_$setNonEnumerableReadOnly_1603( Arcsine.prototype, 'logpdf', arcsineLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Arcsine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.pdf( 2.4 );
* // returns ~0.398
*/
_$setNonEnumerableReadOnly_1603( Arcsine.prototype, 'pdf', arcsinePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Arcsine.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var arcsine = new Arcsine( 2.0, 4.0 );
*
* var v = arcsine.quantile( 0.5 );
* // returns 3.0
*/
_$setNonEnumerableReadOnly_1603( Arcsine.prototype, 'quantile', arcsineQuantile );


// EXPORTS //

var _$Arcsine_486 = Arcsine;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arcsine distribution constructor.
*
* @module @stdlib/stats/base/dists/arcsine/ctor
*
* @example
* var Arcsine = require( '@stdlib/stats/base/dists/arcsine/ctor' );
*
* var arcsine = new Arcsine( 0.0, 1.0 );
*
* var y = arcsine.cdf( 0.8 );
* // returns ~0.705
*
* var mu = arcsine.mean;
* // returns 0.5
*/

// MODULES //

/* removed: var _$Arcsine_486 = require( './main.js' ); */;


// EXPORTS //

var _$ctor_485 = _$Arcsine_486;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Bernoulli distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 0.5 );
* // returns 0.5
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns 1.0
*
* @example
* var y = cdf( -1.0, 0.3 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Invalid probability
* var y = cdf( 0.5, 1.4 );
* // returns NaN
*/
function __cdf_515( x, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return 1.0 - p;
}


// EXPORTS //

var _$cdf_515 = __cdf_515;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Bernoulli distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns 1.0
*
* y = cdf( 0.7 );
* // returns 0.5
*/
function __factory_516( p ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Bernoulli distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return 1.0 - p;
	}
}


// EXPORTS //

var _$factory_516 = __factory_516;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/bernoulli/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/bernoulli/cdf' );
*
* var y = cdf( 1.0, 0.5 );
* // returns 1.0
*
* y = cdf( 0.5, 0.1 );
* // returns 0.9
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns 1.0
*
* y = mycdf( -1.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_515 = require( './cdf.js' ); */;
/* removed: var _$factory_516 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_515, 'factory', _$factory_516 );


// EXPORTS //

var _$cdf_517 = _$cdf_515;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_77 = _$isNumber_58.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a value which is a probability
*
* @example
* var bool = isProbability( 0.66 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.66 ) );
* // returns false
*/
function isProbability( value ) {
	return (
		__isNumber_77( value ) &&
		value >= 0.0 &&
		value <= 1.0
	);
}


// EXPORTS //

var _$isProbability_77 = isProbability;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_76 = _$isNumber_58.isObject;


// MAIN //

/**
* Tests if a value is a number object having a value which is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value which is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns false
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*/
function __isProbability_76( value ) {
	return (
		__isNumber_76( value ) &&
		value.valueOf() >= 0.0 &&
		value.valueOf() <= 1.0
	);
}


// EXPORTS //

var _$isProbability_76 = __isProbability_76;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isProbability_77 = require( './primitive.js' ); */;
/* removed: var _$isProbability_76 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a probability.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( -5.0 );
* // returns false
*
* @example
* var bool = isProbability( null );
* // returns false
*/
function __isProbability_75( value ) {
	return ( _$isProbability_77( value ) || _$isProbability_76( value ) );
}


// EXPORTS //

var _$isProbability_75 = __isProbability_75;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a probability.
*
* @module @stdlib/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( new Number( 0.5 ) );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( -5.0 );
* // returns false
*
* bool = isProbability( null );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;
*
* var bool = isProbability( 0.3 );
* // returns true
*
* bool = isProbability( new Number( 0.3 ) );
* // returns false
*
* @example
* var isProbability = require( '@stdlib/assert/is-probability' ).isObject;
*
* var bool = isProbability( 0.77 );
* // returns false
*
* bool = isProbability( new Number( 0.77 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isProbability_75 = require( './main.js' ); */;
/* removed: var _$isProbability_77 = require( './primitive.js' ); */;
/* removed: var _$isProbability_76 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isProbability_75, 'isPrimitive', _$isProbability_77 );
_$setNonEnumerableReadOnly_1603( _$isProbability_75, 'isObject', _$isProbability_76 );


// EXPORTS //

var _$isProbability_74 = _$isProbability_75;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the entropy of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 0.1 );
* // returns ~0.325
*
* @example
* var v = entropy( 0.5 );
* // returns ~0.693
*
* @example
* var v = entropy( 0.9 );
* // returns ~0.325
*
* @example
* var v = entropy( 1.1 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_520( p ) {
	var q;
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( p === 0.0 || p === 1.0 ) {
		return 0.0;
	}
	q = 1.0 - p;
	return ( -q * _$ln_376( q ) ) - ( p * _$ln_376( p ) );
}


// EXPORTS //

var _$entropy_520 = __entropy_520;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution entropy.
*
* @module @stdlib/stats/base/dists/bernoulli/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/bernoulli/entropy' );
*
* var v = entropy( 0.1 );
* // returns ~0.325
*
* v = entropy( 0.5 );
* // returns ~0.693
*/

// MODULES //

/* removed: var _$entropy_520 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_521 = _$entropy_520;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 0.1 );
* // returns ~5.111
*
* @example
* var v = kurtosis( 0.5 );
* // returns -2.0
*
* @example
* var v = kurtosis( 1.1 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_523( p ) {
	var pq;
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	pq = p * ( 1.0 - p );
	return ( 1.0/pq ) - 6.0;
}


// EXPORTS //

var _$kurtosis_523 = __kurtosis_523;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/bernoulli/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/bernoulli/kurtosis' );
*
* var v = kurtosis( 0.1 );
* // returns ~5.111
*
* v = kurtosis( 0.5 );
* // returns -2.0
*/

// MODULES //

/* removed: var _$kurtosis_523 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_522 = _$kurtosis_523;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 0.1 );
* // returns 0.1
*
* @example
* var v = mean( 0.5 );
* // returns 0.5
*
* @example
* var v = mean( 1.1 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_525( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return p;
}


// EXPORTS //

var _$mean_525 = __mean_525;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution expected value.
*
* @module @stdlib/stats/base/dists/bernoulli/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/bernoulli/mean' );
*
* var v = mean( 0.1 );
* // returns 0.1
*
* v = mean( 0.5 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$mean_525 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_524 = _$mean_525;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a Bernoulli distribution.
*
* ## Notes
*
* -   For `p = 0.5`, the mode is either `0` or `1`. This implementation returns `0` for `p = 0.5`.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 0.1 );
* // returns 0
*
* @example
* var v = mode( 0.8 );
* // returns 1
*
* @example
* var v = mode( 0.5 );
* // returns 0
*
* @example
* var v = mode( 1.1 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_532( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( p <= 0.5 ) ? 0 : 1;
}


// EXPORTS //

var _$mode_532 = __mode_532;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution mode.
*
* @module @stdlib/stats/base/dists/bernoulli/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/bernoulli/mode' );
*
* var v = mode( 0.1 );
* // returns 0
*
* v = mode( 0.8 );
* // returns 1
*/

// MODULES //

/* removed: var _$mode_532 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_531 = _$mode_532;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 0.1 );
* // returns 0
*
* @example
* var v = median( 0.8 );
* // returns 1
*
* @example
* var v = median( 1.1 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_527( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( p <= 0.5 ) ? 0 : 1;
}


// EXPORTS //

var _$median_527 = __median_527;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution median.
*
* @module @stdlib/stats/base/dists/bernoulli/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/bernoulli/median' );
*
* var v = median( 0.1 );
* // returns 0
*
* v = median( 0.8 );
* // returns 1
*/

// MODULES //

/* removed: var _$median_527 = require( './median.js' ); */;


// EXPORTS //

var _$median_526 = _$median_527;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns the skewness of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 0.1 );
* // returns ~2.667
*
* @example
* var v = skewness( 0.5 );
* // returns 0.0
*
* @example
* var v = skewness( 1.1 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_540( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( p === 1.0 ) {
		return _$FLOAT64_NINF_107;
	}
	return ( 1.0 - ( 2.0*p ) ) / _$sqrt_437( p * ( 1.0-p ) );
}


// EXPORTS //

var _$skewness_540 = __skewness_540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution skewness.
*
* @module @stdlib/stats/base/dists/bernoulli/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/bernoulli/skewness' );
*
* var v = skewness( 0.1 );
* // returns ~2.667
*
* v = skewness( 0.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_540 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_539 = _$skewness_540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 0.1 );
* // returns ~0.3
*
* @example
* var v = stdev( 0.5 );
* // returns 0.5
*
* @example
* var v = stdev( 1.1 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_542( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$sqrt_437( ( 1.0-p ) * p );
}


// EXPORTS //

var _$stdev_542 = __stdev_542;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution standard deviation.
*
* @module @stdlib/stats/base/dists/bernoulli/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/bernoulli/stdev' );
*
* var v = stdev( 0.1 );
* // returns ~0.3
*
* v = stdev( 0.5 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$stdev_542 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_541 = _$stdev_542;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a Bernoulli distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 0.1 );
* // returns ~0.09
*
* @example
* var v = variance( 0.5 );
* // returns 0.25
*
* @example
* var v = variance( 1.1 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_544( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return p * ( 1.0-p );
}


// EXPORTS //

var _$variance_544 = __variance_544;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution variance.
*
* @module @stdlib/stats/base/dists/bernoulli/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/bernoulli/variance' );
*
* var v = variance( 0.1 );
* // returns ~0.09
*
* v = variance( 0.5 );
* // returns 0.25
*/

// MODULES //

/* removed: var _$variance_544 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_543 = _$variance_544;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a numeric value is a probability.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a probability
*
* @example
* var bool = isProbability( 0.5 );
* // returns true
*
* @example
* var bool = isProbability( 3.14 );
* // returns false
*
* @example
* var bool = isProbability( NaN );
* // returns false
*/
function __isProbability_145( x ) {
	return ( x >= 0.0 && x <= 1.0 );
}


// EXPORTS //

var _$isProbability_145 = __isProbability_145;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is a probability.
*
* @module @stdlib/math/base/assert/is-probability
*
* @example
* var isProbability = require( '@stdlib/math/base/assert/is-probability' );
*
* var bool = isProbability( 0.5 );
* // returns true
*
* bool = isProbability( 3.14 );
* // returns false
*
* bool = isProbability( NaN );
* // returns false
*/

// MODULES //

/* removed: var _$isProbability_145 = require( './is_probability.js' ); */;


// EXPORTS //

var _$isProbability_144 = _$isProbability_145;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward positive infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = ceil( -4.2 );
* // returns -4.0
*
* @example
* var v = ceil( 9.99999 );
* // returns 10.0
*
* @example
* var v = ceil( 0.0 );
* // returns 0.0
*
* @example
* var v = ceil( NaN );
* // returns NaN
*/
var ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

var _$ceil_175 = ceil;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward positive infinity.
*
* @module @stdlib/math/base/special/ceil
*
* @example
* var ceil = require( '@stdlib/math/base/special/ceil' );
*
* var v = ceil( -4.2 );
* // returns -4.0
*
* v = ceil( 9.99999 );
* // returns 10.0
*
* v = ceil( 0.0 );
* // returns 0.0
*
* v = ceil( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$ceil_175 = require( './ceil.js' ); */;


// EXPORTS //

var _$ceil_176 = _$ceil_175;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ceil_176 = require( '@stdlib/math/base/special/ceil' ); */;


// MAIN //

/**
* Rounds a numeric value toward zero.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = trunc( -4.2 );
* // returns -4.0
*
* @example
* var v = trunc( 9.99999 );
* // returns 9.0
*
* @example
* var v = trunc( 0.0 );
* // returns 0.0
*
* @example
* var v = trunc( -0.0 );
* // returns -0.0
*
* @example
* var v = trunc( NaN );
* // returns NaN
*
* @example
* var v = trunc( Infinity );
* // returns Infinity
*
* @example
* var v = trunc( -Infinity );
* // returns -Infinity
*/
function trunc( x ) {
	if ( x < 0.0 ) {
		return _$ceil_176( x );
	}
	return _$floor_236( x );
}


// EXPORTS //

var _$trunc_442 = trunc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a numeric value toward zero.
*
* @module @stdlib/math/base/special/trunc
*
* @example
* var trunc = require( '@stdlib/math/base/special/trunc' );
*
* var v = trunc( -4.2 );
* // returns -4.0
*
* v = trunc( 9.99999 );
* // returns 9.0
*
* v = trunc( 0.0 );
* // returns 0.0
*
* v = trunc( -0.0 );
* // returns -0.0
*
* v = trunc( NaN );
* // returns NaN
*
* v = trunc( Infinity );
* // returns Infinity
*
* v = trunc( -Infinity );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$trunc_442 = require( './trunc.js' ); */;


// EXPORTS //

var _$trunc_441 = _$trunc_442;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$evalpoly_226 = require( './polyval_p.js' ); */;


// MAIN //

/**
* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
*
* @private
* @param {number} hi - upper bound
* @param {number} lo - lower bound
* @param {integer} k - power of 2
* @returns {number} function value
*/
function expmulti( hi, lo, k ) {
	var r;
	var t;
	var c;
	var y;

	r = hi - lo;
	t = r * r;
	c = r - ( t*_$evalpoly_226( t ) );
	y = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);

	return _$ldexp_374( y, k );
}


// EXPORTS //

var _$expmulti_224 = expmulti;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$trunc_441 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$expmulti_224 = require( './expmulti.js' ); */;


// VARIABLES //

var __LN2_HI_223 = 6.93147180369123816490e-01;
var __LN2_LO_223 = 1.90821492927058770002e-10;
var LOG2_E = 1.44269504088896338700e+00;
var OVERFLOW = 7.09782712893383973096e+02;
var UNDERFLOW = -7.45133219101941108420e+02;
var NEARZERO = 1.0 / (1 << 28); // 2^-28;
var NEG_NEARZERO = -NEARZERO;


// MAIN //

/**
* Evaluates the natural exponential function.
*
* ## Method
*
* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
*
*     ```tex
*     \begin{align*}
*     x &= k \cdot \ln(2) + r \\
*     |r| &\leq 0.5 \cdot \ln(2)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
*
*     <!-- </note> -->
*
* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\(\[0,0.34658]\\):
*
*     ```tex
*     \begin{align*}
*     R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
*     &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
*
*     ```tex
*     R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
*     ```
*
*     where \\( z = r^2 \\) and
*
*     ```tex
*     \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
*
*     <!-- </note> -->
*
*     The computation of \\( e^{r} \\) thus becomes
*
*     ```tex
*     \begin{align*}
*     e^{r} &= 1 + \frac{2r}{R-r} \\
*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
*     \end{align*}
*     ```
*
*     where
*
*     ```tex
*     R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
*     ```
*
* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
*
*     ```tex
*     e^{x} = 2^k e^{r}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* e^\infty &= \infty \\
* e^{-\infty} &= 0 \\
* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
* \end{align*}
* ```
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   For an IEEE double,
*
*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
*
* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp( 4.0 );
* // returns ~54.5982
*
* @example
* var v = exp( -9.0 );
* // returns ~1.234e-4
*
* @example
* var v = exp( 0.0 );
* // returns 1.0
*
* @example
* var v = exp( NaN );
* // returns NaN
*/
function exp( x ) {
	var hi;
	var lo;
	var k;

	if ( _$isnan_130( x ) || x === _$FLOAT64_PINF_110 ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return 0.0;
	}
	if ( x > OVERFLOW ) {
		return _$FLOAT64_PINF_110;
	}
	if ( x < UNDERFLOW ) {
		return 0.0;
	}
	if (
		x > NEG_NEARZERO &&
		x < NEARZERO
	) {
		return 1.0 + x;
	}
	// Reduce and compute `r = hi - lo` for extra precision.
	if ( x < 0.0 ) {
		k = _$trunc_441( (LOG2_E*x) - 0.5 );
	} else {
		k = _$trunc_441( (LOG2_E*x) + 0.5 );
	}
	hi = x - (k*__LN2_HI_223);
	lo = k * __LN2_LO_223;

	return _$expmulti_224( hi, lo, k );
}


// EXPORTS //

var _$exp_223 = exp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural exponential function.
*
* @module @stdlib/math/base/special/exp
*
* @example
* var exp = require( '@stdlib/math/base/special/exp' );
*
* var v = exp( 4.0 );
* // returns ~54.5982
*
* v = exp( -9.0 );
* // returns ~1.234e-4
*
* v = exp( 0.0 );
* // returns 1.0
*
* v = exp( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$exp_223 = require( './exp.js' ); */;


// EXPORTS //

var _$exp_225 = _$exp_223;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isProbability_144 = require( '@stdlib/math/base/assert/is-probability' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Bernoulli distribution with success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.2, 0.5 );
* // returns ~1.111
*
* @example
* var y = mgf( 0.4, 0.5 );
* // returns ~1.246
*
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 2.0 );
* // returns NaN
*/
function mgf( t, p ) {
	if ( _$isnan_130( t ) || !_$isProbability_144( p ) ) {
		return NaN;
	}
	return ( 1.0-p ) + ( p * _$exp_225( t ) );
}


// EXPORTS //

var _$mgf_530 = mgf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isProbability_144 = require( '@stdlib/math/base/assert/is-probability' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Bernoulli distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.8 );
* var y = mgf( -0.2 );
* // returns ~0.855
*/
function __factory_528( p ) {
	if ( !_$isProbability_144( p ) ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Bernoulli distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		return ( 1.0-p ) + ( p * _$exp_225( t ) );
	}
}


// EXPORTS //

var _$factory_528 = __factory_528;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Bernoulli distribution.
*
* @module @stdlib/stats/base/dists/bernoulli/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/bernoulli/mgf' );
*
* var y = mgf( 0.2, 0.5 );
* // returns ~1.111
*
* y = mgf( 0.4, 0.5 );
* // returns ~1.246
*
* var mymgf = mgf.factory( 0.8 );
* y = mymgf( -0.2 );
* // returns ~0.855
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_530 = require( './mgf.js' ); */;
/* removed: var _$factory_528 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_530, 'factory', _$factory_528 );


// EXPORTS //

var _$mgf_529 = _$mgf_530;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 0.3 );
* // returns 0.3
*
* @example
* var y = pmf( 0.0, 0.3 );
* // returns 0.7
*
* @example
* var y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.8, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = pmf( 1.0, 1.5 );
* // returns NaN
*/
function pmf( x, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 1.0 - p;
	}
	if ( x === 1.0 ) {
		return p;
	}
	return 0.0;
}


// EXPORTS //

var _$pmf_535 = pmf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0.8 );
* var y = pmf( 0.0 );
* // returns 0.2
*
* y = pmf( 1.0 );
* // returns 0.8
*/
function __factory_533( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a Bernoulli distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return 1.0 - p;
		}
		if ( x === 1.0 ) {
			return p;
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_533 = __factory_533;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/bernoulli/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/bernoulli/pmf' );
*
* var y = pmf( 0.0, 0.3 );
* // returns 0.7
*
* y = pmf( 1.0, 0.7 );
* // returns 0.7
*
* y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* var mypmf = pmf.factory( 0.5 );
* y = mypmf( 2.0 );
* // returns 0.0
*
* y = mypmf( 1.0 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_535 = require( './pmf.js' ); */;
/* removed: var _$factory_533 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_535, 'factory', _$factory_533 );


// EXPORTS //

var _$pmf_534 = _$pmf_535;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Bernoulli distribution with success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.4 );
* // returns 1
*
* @example
* var y = quantile( 0.5, 0.4 );
* // returns 0
*
* @example
* var y = quantile( 0.8, 0.1 );
* // returns 0
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.8 );
* // returns NaN
*
* @example
* var y = quantile( 0.4, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.5 );
* // returns NaN
*/
function __quantile_538( r, p ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( r ) ||
		p < 0.0 ||
		p > 1.0 ||
		r < 0.0 ||
		r > 1.0
	) {
		return NaN;
	}
	if ( r <= 1.0 - p ) {
		return 0;
	}
	return 1;
}


// EXPORTS //

var _$quantile_538 = __quantile_538;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Bernoulli distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns 0
*
* y = quantile( 0.8 );
* // returns 1
*
* y = quantile( 1.0 );
* // returns 1
*/
function __factory_536( p ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Bernoulli distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		if ( _$isnan_130( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r <= 1.0 - p ) {
			return 0;
		}
		return 1;
	}
}


// EXPORTS //

var _$factory_536 = __factory_536;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution quantile function.
*
* @module @stdlib/stats/base/dists/bernoulli/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/bernoulli/quantile' );
*
* var y = quantile( 0.8, 0.4 );
* // returns 1
*
* y = quantile( 0.5, 0.4 );
* // returns 0
*
* var myquantile = quantile.factory( 0.4 );
* y = myquantile( 0.4 );
* // returns 0
*
* y = myquantile( 0.8 );
* // returns 1
*
* y = myquantile( 1.0 );
* // returns 1
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_538 = require( './quantile.js' ); */;
/* removed: var _$factory_536 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_538, 'factory', _$factory_536 );


// EXPORTS //

var _$quantile_537 = _$quantile_538;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isProbability_518 = _$isProbability_74.isPrimitive;
/* removed: var _$entropy_521 = require( '@stdlib/stats/base/dists/bernoulli/entropy' ); */;
/* removed: var _$kurtosis_522 = require( '@stdlib/stats/base/dists/bernoulli/kurtosis' ); */;
/* removed: var _$mean_524 = require( '@stdlib/stats/base/dists/bernoulli/mean' ); */;
/* removed: var _$mode_531 = require( '@stdlib/stats/base/dists/bernoulli/mode' ); */;
/* removed: var _$median_526 = require( '@stdlib/stats/base/dists/bernoulli/median' ); */;
/* removed: var _$skewness_539 = require( '@stdlib/stats/base/dists/bernoulli/skewness' ); */;
/* removed: var _$stdev_541 = require( '@stdlib/stats/base/dists/bernoulli/stdev' ); */;
/* removed: var _$variance_543 = require( '@stdlib/stats/base/dists/bernoulli/variance' ); */;
/* removed: var _$cdf_517 = require( '@stdlib/stats/base/dists/bernoulli/cdf' ); */;
/* removed: var _$mgf_529 = require( '@stdlib/stats/base/dists/bernoulli/mgf' ); */;
/* removed: var _$pmf_534 = require( '@stdlib/stats/base/dists/bernoulli/pmf' ); */;
/* removed: var _$quantile_537 = require( '@stdlib/stats/base/dists/bernoulli/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function bernoulliCDF( x ) {
	return _$cdf_517( x, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function bernoulliMGF( t ) {
	return _$mgf_529( t, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function bernoulliPMF( x ) {
	return _$pmf_534( x, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function bernoulliQuantile( p ) {
	return _$quantile_537( p, this.p );
}


// MAIN //

/**
* Bernoulli distribution constructor.
*
* @constructor
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `p` must be a probability
* @returns {Bernoulli} distribution instance
*
* @example
* var bernoulli = new Bernoulli();
*
* var y = bernoulli.cdf( 1.8 );
* // returns 1.0
*
* var v = bernoulli.median;
* // returns 0.0
*/
function Bernoulli() {
	var p;
	if ( !(this instanceof Bernoulli) ) {
		if ( arguments.length === 0 ) {
			return new Bernoulli();
		}
		return new Bernoulli( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		p = arguments[ 0 ];
		if ( !__isProbability_518( p ) ) {
			throw new TypeError( 'invalid argument. Mean parameter `p` must be a probability. Value: `' + p + '`' );
		}
	} else {
		p = 0.5;
	}
	_$defineProperty_1606( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !__isProbability_518( value ) ) {
				throw new TypeError( 'invalid value. Must be a probability. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Bernoulli distribution differential entropy.
*
* @name entropy
* @memberof Bernoulli.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.entropy;
* // returns ~0.673
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'entropy', function get() {
	return _$entropy_521( this.p );
});

/**
* Bernoulli distribution excess kurtosis.
*
* @name kurtosis
* @memberof Bernoulli.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.kurtosis;
* // returns ~-1.833
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'kurtosis', function get() {
	return _$kurtosis_522( this.p );
});

/**
* Bernoulli distribution expected value.
*
* @name mean
* @memberof Bernoulli.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.mean;
* // returns 0.4
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'mean', function get() {
	return _$mean_524( this.p );
});

/**
* Bernoulli distribution median.
*
* @name median
* @memberof Bernoulli.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.median;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'median', function get() {
	return _$median_526( this.p );
});

/**
* Bernoulli distribution mode.
*
* @name mode
* @memberof Bernoulli.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.mode;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'mode', function get() {
	return _$mode_531( this.p );
});

/**
* Bernoulli distribution skewness.
*
* @name skewness
* @memberof Bernoulli.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.skewness;
* // returns ~0.408
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'skewness', function get() {
	return _$skewness_539( this.p );
});

/**
* Bernoulli distribution standard deviation.
*
* @name stdev
* @memberof Bernoulli.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.stdev;
* // returns ~0.49
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'stdev', function get() {
	return _$stdev_541( this.p );
});

/**
* Bernoulli distribution variance.
*
* @name variance
* @memberof Bernoulli.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var bernoulli = new Bernoulli( 0.4 );
*
* var v = bernoulli.variance;
* // returns 0.24
*/
_$setNonEnumerableReadOnlyAccessor_1601( Bernoulli.prototype, 'variance', function get() {
	return _$variance_543( this.p );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Bernoulli.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var bernoulli = new Bernoulli( 0.2 );
*
* var v = bernoulli.cdf( 1.5 );
* // returns 1.0
*/
_$setNonEnumerableReadOnly_1603( Bernoulli.prototype, 'cdf', bernoulliCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Bernoulli.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var bernoulli = new Bernoulli( 0.2 );
*
* var v = bernoulli.mgf( -3.0 );
* // returns ~0.81
*/
_$setNonEnumerableReadOnly_1603( Bernoulli.prototype, 'mgf', bernoulliMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Bernoulli.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var bernoulli = new Bernoulli( 0.2 );
*
* var v = bernoulli.pmf( 1.0 );
* // returns 0.2
*
* v = bernoulli.pmf( 0.0 );
* // returns 0.8
*/
_$setNonEnumerableReadOnly_1603( Bernoulli.prototype, 'pmf', bernoulliPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Bernoulli.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var bernoulli = new Bernoulli( 0.2 );
*
* var v = bernoulli.quantile( 0.9 );
* // returns 1
*/
_$setNonEnumerableReadOnly_1603( Bernoulli.prototype, 'quantile', bernoulliQuantile );


// EXPORTS //

var _$Bernoulli_518 = Bernoulli;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Bernoulli distribution constructor.
*
* @module @stdlib/stats/base/dists/bernoulli/ctor
*
* @example
* var Bernoulli = require( '@stdlib/stats/base/dists/bernoulli/ctor' );
*
* var bernoulli = new Bernoulli( 0.3 );
*
* var y = bernoulli.cdf( 0.7 );
* // returns 0.7
*
* var median = bernoulli.median;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Bernoulli_518 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_519 = _$Bernoulli_518;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the natural logarithm of 2.
*
* @module @stdlib/constants/math/float64-half-ln-two
* @type {number}
*
* @example
* var HALF_LN2 = require( '@stdlib/constants/math/float64-half-ln-two' );
* // returns 3.46573590279972654709e-01
*/

// MAIN //

/**
* One half times the natural logarithm of 2.
*
* ```tex
* \frac{\ln 2}{2}
* ```
*
* @constant
* @type {number}
* @default 3.46573590279972654709e-01
*/
var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


// EXPORTS //

var _$HALF_LN2_92 = HALF_LN2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_229( x ) {
	if ( x === 0.0 ) {
		return -0.03333333333333313;
	}
	return -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_229 = __evalpoly_229;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$HALF_LN2_92 = require( '@stdlib/constants/math/float64-half-ln-two' ); */;
/* removed: var _$evalpoly_229 = require( './polyval_q.js' ); */;


// VARIABLES //

var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

// High and low words of ln(2):
var __LN2_HI_227 = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
var __LN2_LO_227 = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

// 1 / ln(2):
var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

// ln(2) * 56:
var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

// ln(2) * 1.5:
var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73


// MAIN //

/**
* Computes `exp(x) - 1`.
*
* ## Method
*
* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
*
*     ```tex
*     x = k \cdot \ln(2) + r
*     ```
*
*     where
*
*     ```tex
*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
*     ```
*
*     <!-- <note> -->
*
*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
*
*     <!-- </note> -->
*
* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\(\[0,0.34658]\\). Since
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
*     ```
*
*     we define \\(\operatorname{R1}(r^2)\\) by
*
*     ```tex
*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
*     ```
*
*     That is,
*
*     ```tex
*     \begin{align*}
*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
*     \end{align*}
*     ```
*
*     We use a special Remes algorithm on \\(\[0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
*
*     ```tex
*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
*     ```
*
*     where
*
*     ```tex
*     \begin{align*}
*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
*     \end{align*}
*     ```
*
*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
*
*     ```tex
*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
*     ```
*
*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
*
*     ```tex
*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
*     ```
*
*     To compensate for the error in the argument reduction, we use
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
*     &\approx \operatorname{expm1}(r) + c + rc
*     \end{align*}
*     ```
*
*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
*
*     ```tex
*     \begin{align*}
*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
*     &= r - \mathrm{E}
*     \end{align*}
*     ```
*
* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
*
*     ```tex
*     \operatorname{expm1}(x) = \begin{cases}
*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{expm1}(\infty) &= \infty \\
* \operatorname{expm1}(-\infty) &= -1 \\
* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
*
* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
*
* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
*
*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
*
*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
*
*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
*
*     -   if \\(k = 1\\),
*
*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
*         -   else return \\(1+2(r-\mathrm{E})\\)
*
*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
*
*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
*
*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
*
* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
*
* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = expm1( 0.2 );
* // returns ~0.221
*
* @example
* var v = expm1( -9.0 );
* // returns ~-0.9999
*
* @example
* var v = expm1( 0.0 );
* // returns 0.0
*
* @example
* var v = expm1( NaN );
* // returns NaN
*/
function expm1( x ) {
	var halfX;
	var sign;
	var hi;
	var lo;
	var hx;
	var r1;
	var y;
	var z;
	var c;
	var t;
	var e;
	var k;

	if ( x === _$FLOAT64_PINF_110 || _$isnan_130( x ) ) {
		return x;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return -1.0;
	}
	if ( x === 0.0 ) {
		return x; // handles +-0 (IEEE 754-2008)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		sign = true;
		y = -x;
	} else {
		sign = false;
		y = x;
	}
	// Filter out huge and non-finite arguments...
	if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
		if ( sign ) { // if x <= -56*ln(2)
			return -1.0;
		}
		if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
			return _$FLOAT64_PINF_110;
		}
	}
	// Extract the more significant bits from |x|:
	hx = _$getHighWord_460( y )|0; // asm type annotation

	// Argument reduction...
	if ( y > _$HALF_LN2_92 ) { // if |x| > 0.5*ln(2)
		if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
			if ( sign ) {
				hi = x + __LN2_HI_227;
				lo = -__LN2_LO_227;
				k = -1;
			} else {
				hi = x - __LN2_HI_227;
				lo = __LN2_LO_227;
				k = 1;
			}
		} else {
			if ( sign ) {
				k = (LN2_INV*x) - 0.5;
			} else {
				k = (LN2_INV*x) + 0.5;
			}
			k |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
			t = k;
			hi = x - (t*__LN2_HI_227); // t*ln2_hi is exact here
			lo = t * __LN2_LO_227;
		}
		x = hi - lo;
		c = (hi-x) - lo;
	}
	// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
	else if ( hx < 1016070144 ) {
		return x;
	}
	else {
		k = 0;
	}
	// x is now in primary range...
	halfX = 0.5 * x;
	z = x * halfX;

	r1 = 1.0 + ( z * _$evalpoly_229( z ) );

	t = 3.0 - (r1*halfX);
	e = z * ( (r1-t) / (6.0 - (x*t)) );
	if ( k === 0 ) {
		return x - ( (x*e) - z );	// c is 0
	}
	e = ( x * (e-c) ) - c;
	e -= z;
	if ( k === -1 ) {
		return ( 0.5*(x-e) )- 0.5;
	}
	if ( k === 1 ) {
		if ( x < -0.25 ) {
			return -2.0 * ( e - (x+0.5) );
		}
		return 1 + ( 2.0 * (x-e) );
	}
	if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
		y = 1.0 - (e-x);

		// Add k to y's exponent:
		hi = (_$getHighWord_460( y ) + (k<<20))|0; // asm type annotation
		y = _$setHighWord_469( y, hi );

		return y - 1.0;
	}
	t = 1.0;
	if ( k < 20 ) {
		// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
		hi = (1072693248 - (0x200000>>k))|0; // asm type annotation
		t = _$setHighWord_469( t, hi ); // t=1-2^-k
		y = t - (e-x);
	} else {
		hi = ( (_$FLOAT64_EXPONENT_BIAS_89-k)<<20 )|0; // asm type annotation
		t = _$setHighWord_469( t, hi ); // t=2^-k
		y = x - (e+t);
		y += 1.0;
	}
	// Add k to y's exponent:
	hi = (_$getHighWord_460( y ) + (k<<20))|0; // asm type annotation
	return _$setHighWord_469( y, hi );
}


// EXPORTS //

var _$expm1_227 = expm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `exp(x) - 1`.
*
* @module @stdlib/math/base/special/expm1
*
* @example
* var expm1 = require( '@stdlib/math/base/special/expm1' );
*
* var v = expm1( 0.2 );
* // returns ~0.221
*
* v = expm1( -9.0 );
* // returns ~-0.999
*
* v = expm1( 0.0 );
* // returns 0.0
*
* v = expm1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$expm1_227 = require( './expm1.js' ); */;


// EXPORTS //

var _$expm1_228 = _$expm1_227;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_382( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_382 = __evalpoly_382;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$evalpoly_382 = require( './polyval_lp.js' ); */;


// VARIABLES //

// High and low words of ln(2):
var __LN2_HI_381 = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
var __LN2_LO_381 = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

// sqrt(2)-1:
var SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34

// sqrt(2)/2-1:
var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

// 2**-29:
var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

// 2**-54:
var __TINY_381 = 5.551115123125783e-17;

// Max integer (unsafe) => 2**53:
var __TWO53_381 = 9007199254740992;

// 2/3:
var TWO_THIRDS = 6.666666666666666666e-01;


// MAIN //

/**
* Evaluates the natural logarithm of \\(1+x\\).
*
* ## Method
*
* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
*
*     ```tex
*     1+x = 2^k (1+f)
*     ```
*
*     where
*
*     ```tex
*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
*     ```
*
*     <!-- <note> -->
*
*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
*
*     ```tex
*     u = \operatorname{round}(1+x)
*     ```
*
*     and
*
*     ```tex
*     c = (1+x) - u
*     ```
*
*     then
*
*     ```tex
*     \ln (1+x) - \ln u \approx \frac{c}{u}
*     ```
*
*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
*
*     <!-- </note> -->
*
* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
*
*     ```tex
*     s = \frac{f}{2+f}
*     ```
*
*     based on
*
*     ```tex
*     \begin{align*}
*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
*             &= 2s + sR \\
*     \end{align*}
*     ```
*
*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
*
*     ```tex
*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
*     ```
*
*     and
*
*     ```tex
*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
*     ```
*
*     <!-- <note> -->
*
*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
*
*     <!-- </note> -->
*
*     Note that
*
*     ```tex
*     \begin{align*}
*     2s &= f - sf \\
*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
*     \end{align*}
*     ```
*
*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
*
*     ```tex
*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
*     ```
*
* 3.  Finally,
*
*     ```tex
*     \begin{align*}
*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
*     \end{align*}
*     ```
*
*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
*
*     ```tex
*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
*     ```
*
*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
*
*
* ## Special Cases
*
* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
*
*
* ## Notes
*
* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
*
* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
*
* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
*
*     ```javascript
*     var u = 1.0 + x;
*     if ( u === 1.0 ) {
*         return x;
*     } else {
*         return ln(u) * (x/(u-1.0));
*     }
*     ```
*
*     See HP-15C Advanced Functions Handbook, p.193.
*
*
* @param {number} x - input value
* @returns {number} the natural logarithm of `1+x`
*
* @example
* var v = log1p( 4.0 );
* // returns ~1.609
*
* @example
* var v = log1p( -1.0 );
* // returns -Infinity
*
* @example
* var v = log1p( 0.0 );
* // returns 0.0
*
* @example
* var v = log1p( -0.0 );
* // returns -0.0
*
* @example
* var v = log1p( -2.0 );
* // returns NaN
*
* @example
* var v = log1p( NaN );
* // returns NaN
*/
function log1p( x ) {
	var hfsq;
	var hu;
	var y;
	var f;
	var c;
	var s;
	var z;
	var R;
	var u;
	var k;

	if ( x < -1.0 || _$isnan_130( x ) ) {
		return NaN;
	}
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return x;
	}
	if ( x === 0.0 ) {
		return x; // handle +-0 (IEEE 754-2008 spec)
	}
	// Set y = |x|:
	if ( x < 0.0 ) {
		y = -x;
	} else {
		y = x;
	}
	// Argument reduction...
	k = 1;

	// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
	if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
		if ( y < SMALL ) { // if |x| < 2**-29
			if ( y < __TINY_381 ) { // if |x| < 2**-54
				return x;
			}
			// Use a simple two-term Taylor series...
			return x - ( x*x*0.5 );
		}
		// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
		if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
			// -0.2929 < x < 0.41422
			k = 0;
			f = x; // exact
			hu = 1;
		}
	}
	// Address case where `f` cannot be represented exactly...
	if ( k !== 0 ) {
		if ( y < __TWO53_381 ) {
			u = 1.0 + x;
			hu = _$getHighWord_460( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_89;

			// Correction term...
			if ( k > 0 ) { // positive unbiased exponent
				c = 1.0 - (u-x);
			} else { // nonpositive unbiased exponent
				c = x - (u-1.0);
			}
			c /= u;
		} else {
			u = x;
			hu = _$getHighWord_460( u );

			// Bit shift to isolate the exponent and then subtract the bias:
			k = (hu>>20) - _$FLOAT64_EXPONENT_BIAS_89;

			// Correction term is zero:
			c = 0;
		}
		// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
		hu &= 0x000fffff; // max value => 1048575

		// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
		if ( hu < 434334 ) {
			// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
			u = _$setHighWord_469( u, hu|0x3ff00000 );
		} else {
			k += 1;

			// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
			u = _$setHighWord_469( u, hu|0x3fe00000 );

			// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
			hu = (1048576-hu)>>2;
		}
		f = u - 1.0;
	}
	// Approximation of log1p(f)...
	hfsq = 0.5 * f * f;
	if ( hu === 0 ) { // if |f| < 2**-20
		if ( f === 0.0 ) {
			c += k * __LN2_LO_381;
			return ( k * __LN2_HI_381 ) + c;
		}
		R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
		return ( k*__LN2_HI_381 ) - ( (R - ( (k*__LN2_LO_381) + c)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;

	R = z * _$evalpoly_382( z );

	if ( k === 0 ) {
		return f - ( hfsq - ( s*(hfsq+R) ) );
	}
	return ( k*__LN2_HI_381 ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*__LN2_LO_381) + c))) - f );
}


// EXPORTS //

var _$log1p_381 = log1p;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of \\(1+x\\).
*
* @module @stdlib/math/base/special/log1p
*
* @example
* var log1p = require( '@stdlib/math/base/special/log1p' );
*
* var v = log1p( 4.0 );
* // returns ~1.609
*
* v = log1p( -1.0 );
* // returns -Infinity
*
* v = log1p( 0.0 );
* // returns 0.0
*
* v = log1p( -0.0 );
* // returns -0.0
*
* v = log1p( -2.0 );
* // returns NaN
*
* v = log1p( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$log1p_381 = require( './log1p.js' ); */;


// EXPORTS //

var _$log1p_380 = _$log1p_381;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Euler's number.
*
* @module @stdlib/constants/math/float64-e
* @type {number}
*
* @example
* var E = require( '@stdlib/constants/math/float64-e' );
* // returns 2.718281828459045
*/


// MAIN //

/**
* Euler's number.
*
* @constant
* @type {number}
* @default 2.718281828459045
* @see [OEIS]{@link https://oeis.org/A001113}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
*/
var E = 2.718281828459045235360287471352662497757247093699959574966;


// EXPORTS //

var _$E_86 = E;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/math/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

var _$FLOAT64_EPSILON_87 = FLOAT64_EPSILON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_162( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_162 = __evalrational_162;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$evalrational_162 = require( './lanczos_sum_expg_scaled.js' ); */; // Lanczos approximation scaled by exp(G)


// VARIABLES //

var G = 10.90051099999999983936049829935654997826;


// MAIN //

/**
* Evaluate the beta function.
*
* @param {NonNegativeNumber} a - input value
* @param {NonNegativeNumber} b - input value
* @returns {number} evaluated beta function
*
* @example
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* @example
* var v = beta( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = beta( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* @example
* var v = beta( 4.0, 1.0 );
* // returns 0.25
*
* @example
* var v = beta( NaN, 2.0 );
* // returns NaN
*/
function beta( a, b ) {
	var ambh;
	var agh;
	var bgh;
	var cgh;
	var res;
	var tmp;
	var c;

	if ( _$isnan_130( a ) || _$isnan_130( b ) ) {
		return NaN;
	}
	if ( a < 0.0 || b < 0.0 ) {
		return NaN;
	}
	if ( b === 1.0 ) {
		return 1.0 / a;
	}
	if ( a === 1.0 ) {
		return 1.0 / b;
	}
	c = a + b;
	if ( c < _$FLOAT64_EPSILON_87 ) {
		res = c / a;
		res /= b;
		return res;
	}

	// Special cases:
	if ( c === a && b < _$FLOAT64_EPSILON_87 ) {
		return 1.0 / b;
	}
	if ( c === b && a < _$FLOAT64_EPSILON_87 ) {
		return 1.0 / a;
	}

	if ( a < b ) {
		// Swap `a` and `b`:
		tmp = b;
		b = a;
		a = tmp;
	}

	// Lanczos calculation:
	agh = a + G - 0.5;
	bgh = b + G - 0.5;
	cgh = c + G - 0.5;
	res = _$evalrational_162( a ) * ( _$evalrational_162( b )/_$evalrational_162( c ) ); // eslint-disable-line max-len
	ambh = a - 0.5 - b;
	if ( ( _$abs_147( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {
		// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:
		res *= _$exp_225( ambh * _$log1p_380( -b/cgh ) );
	} else {
		res *= _$pow_396( agh/cgh, ambh );
	}
	if ( cgh > 1.0e10 ) {
		// This avoids possible overflow, but appears to be marginally less accurate:
		res *= _$pow_396( (agh/cgh)*(bgh/cgh), b );
	} else {
		res *= _$pow_396( (agh*bgh)/(cgh*cgh), b );
	}
	res *= _$sqrt_437( _$E_86/bgh);
	return res;
}


// EXPORTS //

var _$beta_160 = beta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the beta function.
*
* @module @stdlib/math/base/special/beta
*
* @example
* var beta = require( '@stdlib/math/base/special/beta' );
*
* var v = beta( 0.0, 0.5 );
* // returns Infinity
*
* v = beta( 1.0, 1.0 );
* // returns 1.0
*
* v = beta( -1.0, 2.0 );
* // returns NaN
*
* v = beta( 5.0, 0.2 );
* // returns ~3.382
*
* v = beta( 4.0, 1.0 );
* // returns 0.25
*
* v = beta( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$beta_160 = require( './beta.js' ); */;


// EXPORTS //

var _$beta_161 = _$beta_160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Tests if a numeric value is positive zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is positive zero
*
* @example
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* @example
* var bool = isPositiveZero( -0.0 );
* // returns false
*/
function isPositiveZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_PINF_110);
}


// EXPORTS //

var _$isPositiveZero_143 = isPositiveZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is positive zero.
*
* @module @stdlib/math/base/assert/is-positive-zero
*
* @example
* var isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );
*
* var bool = isPositiveZero( 0.0 );
* // returns true
*
* bool = isPositiveZero( -0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isPositiveZero_143 = require( './is_positive_zero.js' ); */;


// EXPORTS //

var _$isPositiveZero_142 = _$isPositiveZero_143;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveZero_142 = require( '@stdlib/math/base/assert/is-positive-zero' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the maximum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum value
*
* @example
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* @example
* var v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = max( 3.14, NaN );
* // returns NaN
*
* @example
* var v = max( +0.0, -0.0 );
* // returns +0.0
*/
function max( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_130( x ) || _$isnan_130( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_PINF_110 || y === _$FLOAT64_PINF_110 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isPositiveZero_142( x ) ) {
				return x;
			}
			return y;
		}
		if ( x > y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_NINF_107;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_130( v ) || v === _$FLOAT64_PINF_110 ) {
			return v;
		}
		if ( v > m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isPositiveZero_142( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$max_389 = max;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the maximum value.
*
* @module @stdlib/math/base/special/max
*
* @example
* var max = require( '@stdlib/math/base/special/max' );
*
* var v = max( 3.14, 4.2 );
* // returns 4.2
*
* v = max( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = max( 3.14, NaN );
* // returns NaN
*
* v = max( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$max_389 = require( './max.js' ); */;


// EXPORTS //

var _$max_388 = _$max_389;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Tests if a numeric value is negative zero.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is negative zero
*
* @example
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* @example
* var bool = isNegativeZero( 0.0 );
* // returns false
*/
function isNegativeZero( x ) {
	return (x === 0.0 && 1.0/x === _$FLOAT64_NINF_107);
}


// EXPORTS //

var _$isNegativeZero_135 = isNegativeZero;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a numeric value is negative zero.
*
* @module @stdlib/math/base/assert/is-negative-zero
*
* @example
* var isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );
*
* var bool = isNegativeZero( -0.0 );
* // returns true
*
* bool = isNegativeZero( 0.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeZero_135 = require( './is_negative_zero.js' ); */;


// EXPORTS //

var _$isNegativeZero_134 = _$isNegativeZero_135;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeZero_134 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum value
*
* @example
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = min( 3.14, NaN );
* // returns NaN
*
* @example
* var v = min( +0.0, -0.0 );
* // returns -0.0
*/
function min( x, y ) {
	var len;
	var m;
	var v;
	var i;

	len = arguments.length;
	if ( len === 2 ) {
		if ( _$isnan_130( x ) || _$isnan_130( y ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_107 || y === _$FLOAT64_NINF_107 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x === y && x === 0.0 ) {
			if ( _$isNegativeZero_134( x ) ) {
				return x;
			}
			return y;
		}
		if ( x < y ) {
			return x;
		}
		return y;
	}
	m = _$FLOAT64_PINF_110;
	for ( i = 0; i < len; i++ ) {
		v = arguments[ i ];
		if ( _$isnan_130( v ) || v === _$FLOAT64_NINF_107 ) {
			return v;
		}
		if ( v < m ) {
			m = v;
		} else if (
			v === m &&
			v === 0.0 &&
			_$isNegativeZero_134( v )
		) {
			m = v;
		}
	}
	return m;
}


// EXPORTS //

var _$min_393 = min;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum value.
*
* @module @stdlib/math/base/special/min
*
* @example
* var min = require( '@stdlib/math/base/special/min' );
*
* var v = min( 3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns -0.0
*/

// MODULES //

/* removed: var _$min_393 = require( './min.js' ); */;


// EXPORTS //

var _$min_392 = _$min_393;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max
* @type {number}
*
* @example
* var FLOAT64_MAX = require( '@stdlib/constants/math/float64-max' );
* // returns 1.7976931348623157e+308
*/


// MAIN //

/**
* Maximum double-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{1023} (2 - 2^{-52})
* ```
*
* @constant
* @type {number}
* @default 1.7976931348623157e+308
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX = 1.7976931348623157e+308;


// EXPORTS //

var _$FLOAT64_MAX_104 = FLOAT64_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum signed 32-bit integer.
*
* @module @stdlib/constants/math/int32-max
* @type {integer32}
*
* @example
* var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
* // returns 2147483647
*/


// MAIN //

/**
* Maximum signed 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{31} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 01111111111111111111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 2147483647
*/
var INT32_MAX = 2147483647|0; // asm type annotation


// EXPORTS //

var _$INT32_MAX_120 = INT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two-pi
* @type {number}
*
* @example
* var SQRT_TWO_PI = require( '@stdlib/constants/math/float64-sqrt-two-pi' );
* // returns 2.5066282746310007
*/


// MAIN //

/**
* Square root of the mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 2.5066282746310007
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


// EXPORTS //

var _$SQRT_TWO_PI_117 = SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_248( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333334822;
	}
	return 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_248 = __evalpoly_248;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$SQRT_TWO_PI_117 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$evalpoly_248 = require( './polyval_s.js' ); */;


// VARIABLES //

var MAX_STIRLING = 143.01608;


// MAIN //

/**
* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamma( x ) {
	var w;
	var y;
	var v;

	w = 1.0 / x;
	w = 1.0 + ( w * _$evalpoly_248( w ) );
	y = _$exp_225( x );

	// Check `x` to avoid `pow()` overflow...
	if ( x > MAX_STIRLING ) {
		v = _$pow_396( x, ( 0.5*x ) - 0.25 );
		y = v * (v/y);
	} else {
		y = _$pow_396( x, x-0.5 ) / y;
	}
	return _$SQRT_TWO_PI_117 * y * w;
}


// EXPORTS //

var _$gamma_251 = gamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The Euler-Mascheroni constant.
*
* @module @stdlib/constants/math/float64-eulergamma
* @type {number}
*
* @example
* var GAMMA = require( '@stdlib/constants/math/float64-eulergamma' );
* // returns 0.5772156649015329
*/


// MAIN //

/**
* The Euler-Mascheroni constant.
*
* @constant
* @type {number}
* @default 0.5772156649015329
* @see [OEIS]{@link http://oeis.org/A001620}
* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
*/
var GAMMA = 0.577215664901532860606512090082402431042;


// EXPORTS //

var _$GAMMA_88 = GAMMA;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Evaluates the gamma function using a small-value approximation.
*
* @private
* @param {number} x - input value
* @param {number} z - scale factor
* @returns {number} function value
*/
function __gamma_250( x, z ) {
	return z / ( (1.0+( _$GAMMA_88*x )) * x );
}


// EXPORTS //

var _$gamma_250 = __gamma_250;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_249( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len
		s2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_249 = __evalrational_249;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isNegativeZero_134 = require( '@stdlib/math/base/assert/is-negative-zero' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$gamma_251 = require( './stirling_approximation.js' ); */;
/* removed: var _$gamma_250 = require( './small_approximation.js' ); */;
/* removed: var _$evalrational_249 = require( './rational_pq.js' ); */;


// MAIN //

/**
* Evaluates the gamma function.
*
* ## Method
*
* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
* 2.  Large negative arguments are made positive using a reflection formula.
* 3.  Large arguments are handled by Stirling's formula.
*
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain    | # trials | peak    | rms     |
*     |:----------:|:---------:|:--------:|:-------:|:-------:|
*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
*
* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gamma( 4.0 );
* // returns 6.0
*
* @example
* var v = gamma( -1.5 );
* // returns ~2.363
*
* @example
* var v = gamma( -0.5 );
* // returns ~-3.545
*
* @example
* var v = gamma( 0.5 );
* // returns ~1.772
*
* @example
* var v = gamma( 0.0 );
* // returns Infinity
*
* @example
* var v = gamma( -0.0 );
* // returns -Infinity
*
* @example
* var v = gamma( NaN );
* // returns NaN
*/
function __gamma_246( x ) {
	var sign;
	var q;
	var p;
	var z;
	if (
		(_$isInteger_128( x ) && x < 0) ||
		x === _$FLOAT64_NINF_107 ||
		_$isnan_130( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( _$isNegativeZero_134( x ) ) {
			return _$FLOAT64_NINF_107;
		}
		return _$FLOAT64_PINF_110;
	}
	if ( x > 171.61447887182298 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( x < -170.5674972726612 ) {
		return 0.0;
	}
	q = _$abs_147( x );
	if ( q > 33.0 ) {
		if ( x >= 0.0 ) {
			return _$gamma_251( x );
		}
		p = _$floor_236( q );

		// Check whether `x` is even...
		if ( (p&1) === 0 ) {
			sign = -1.0;
		} else {
			sign = 1.0;
		}
		z = q - p;
		if ( z > 0.5 ) {
			p += 1.0;
			z = q - p;
		}
		z = q * _$sin_428( _$PI_109 * z );
		return sign * _$PI_109 / ( _$abs_147(z)*_$gamma_251(q) );
	}
	// Reduce `x`...
	z = 1.0;
	while ( x >= 3.0 ) {
		x -= 1.0;
		z *= x;
	}
	while ( x < 0.0 ) {
		if ( x > -1.0e-9 ) {
			return _$gamma_250( x, z );
		}
		z /= x;
		x += 1.0;
	}
	while ( x < 2.0 ) {
		if ( x < 1.0e-9 ) {
			return _$gamma_250( x, z );
		}
		z /= x;
		x += 1.0;
	}
	if ( x === 2.0 ) {
		return z;
	}
	x -= 2.0;
	return z * _$evalrational_249( x );
}


// EXPORTS //

var _$gamma_246 = __gamma_246;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the gamma function.
*
* @module @stdlib/math/base/special/gamma
*
* @example
* var gamma = require( '@stdlib/math/base/special/gamma' );
*
* var v = gamma( 4.0 );
* // returns 6.0
*
* v = gamma( -1.5 );
* // returns ~2.363
*
* v = gamma( -0.5 );
* // returns ~-3.545
*
* v = gamma( 0.5 );
* // returns ~1.772
*
* v = gamma( 0.0 );
* // returns Infinity
*
* v = gamma( -0.0 );
* // returns -Infinity
*
* v = gamma( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gamma_246 = require( './gamma.js' ); */;


// EXPORTS //

var _$gamma_247 = _$gamma_246;

var _$factorials_231=[
	1,
	1,
	2,
	6,
	24,
	120,
	720,
	5040,
	40320,
	362880.0,
	3628800.0,
	39916800.0,
	479001600.0,
	6227020800.0,
	87178291200.0,
	1307674368000.0,
	20922789888000.0,
	355687428096000.0,
	6402373705728000.0,
	121645100408832000.0,
	0.243290200817664e19,
	0.5109094217170944e20,
	0.112400072777760768e22,
	0.2585201673888497664e23,
	0.62044840173323943936e24,
	0.15511210043330985984e26,
	0.403291461126605635584e27,
	0.10888869450418352160768e29,
	0.304888344611713860501504e30,
	0.8841761993739701954543616e31,
	0.26525285981219105863630848e33,
	0.822283865417792281772556288e34,
	0.26313083693369353016721801216e36,
	0.868331761881188649551819440128e37,
	0.29523279903960414084761860964352e39,
	0.103331479663861449296666513375232e41,
	0.3719933267899012174679994481508352e42,
	0.137637530912263450463159795815809024e44,
	0.5230226174666011117600072241000742912e45,
	0.203978820811974433586402817399028973568e47,
	0.815915283247897734345611269596115894272e48,
	0.3345252661316380710817006205344075166515e50,
	0.1405006117752879898543142606244511569936e52,
	0.6041526306337383563735513206851399750726e53,
	0.265827157478844876804362581101461589032e55,
	0.1196222208654801945619631614956577150644e57,
	0.5502622159812088949850305428800254892962e58,
	0.2586232415111681806429643551536119799692e60,
	0.1241391559253607267086228904737337503852e62,
	0.6082818640342675608722521633212953768876e63,
	0.3041409320171337804361260816606476884438e65,
	0.1551118753287382280224243016469303211063e67,
	0.8065817517094387857166063685640376697529e68,
	0.427488328406002556429801375338939964969e70,
	0.2308436973392413804720927426830275810833e72,
	0.1269640335365827592596510084756651695958e74,
	0.7109985878048634518540456474637249497365e75,
	0.4052691950487721675568060190543232213498e77,
	0.2350561331282878571829474910515074683829e79,
	0.1386831185456898357379390197203894063459e81,
	0.8320987112741390144276341183223364380754e82,
	0.507580213877224798800856812176625227226e84,
	0.3146997326038793752565312235495076408801e86,
	0.1982608315404440064116146708361898137545e88,
	0.1268869321858841641034333893351614808029e90,
	0.8247650592082470666723170306785496252186e91,
	0.5443449390774430640037292402478427526443e93,
	0.3647111091818868528824985909660546442717e95,
	0.2480035542436830599600990418569171581047e97,
	0.1711224524281413113724683388812728390923e99,
	0.1197857166996989179607278372168909873646e101,
	0.8504785885678623175211676442399260102886e102,
	0.6123445837688608686152407038527467274078e104,
	0.4470115461512684340891257138125051110077e106,
	0.3307885441519386412259530282212537821457e108,
	0.2480914081139539809194647711659403366093e110,
	0.188549470166605025498793226086114655823e112,
	0.1451830920282858696340707840863082849837e114,
	0.1132428117820629783145752115873204622873e116,
	0.8946182130782975286851441715398316520698e117,
	0.7156945704626380229481153372318653216558e119,
	0.5797126020747367985879734231578109105412e121,
	0.4753643337012841748421382069894049466438e123,
	0.3945523969720658651189747118012061057144e125,
	0.3314240134565353266999387579130131288001e127,
	0.2817104114380550276949479442260611594801e129,
	0.2422709538367273238176552320344125971528e131,
	0.210775729837952771721360051869938959523e133,
	0.1854826422573984391147968456455462843802e135,
	0.1650795516090846108121691926245361930984e137,
	0.1485715964481761497309522733620825737886e139,
	0.1352001527678402962551665687594951421476e141,
	0.1243841405464130725547532432587355307758e143,
	0.1156772507081641574759205162306240436215e145,
	0.1087366156656743080273652852567866010042e147,
	0.103299784882390592625997020993947270954e149,
	0.9916779348709496892095714015418938011582e150,
	0.9619275968248211985332842594956369871234e152,
	0.942689044888324774562618574305724247381e154,
	0.9332621544394415268169923885626670049072e156,
	0.9332621544394415268169923885626670049072e158,
	0.9425947759838359420851623124482936749562e160,
	0.9614466715035126609268655586972595484554e162,
	0.990290071648618040754671525458177334909e164,
	0.1029901674514562762384858386476504428305e167,
	0.1081396758240290900504101305800329649721e169,
	0.1146280563734708354534347384148349428704e171,
	0.1226520203196137939351751701038733888713e173,
	0.132464181945182897449989183712183259981e175,
	0.1443859583202493582204882102462797533793e177,
	0.1588245541522742940425370312709077287172e179,
	0.1762952551090244663872161047107075788761e181,
	0.1974506857221074023536820372759924883413e183,
	0.2231192748659813646596607021218715118256e185,
	0.2543559733472187557120132004189335234812e187,
	0.2925093693493015690688151804817735520034e189,
	0.339310868445189820119825609358857320324e191,
	0.396993716080872089540195962949863064779e193,
	0.4684525849754290656574312362808384164393e195,
	0.5574585761207605881323431711741977155627e197,
	0.6689502913449127057588118054090372586753e199,
	0.8094298525273443739681622845449350829971e201,
	0.9875044200833601362411579871448208012564e203,
	0.1214630436702532967576624324188129585545e206,
	0.1506141741511140879795014161993280686076e208,
	0.1882677176888926099743767702491600857595e210,
	0.237217324288004688567714730513941708057e212,
	0.3012660018457659544809977077527059692324e214,
	0.3856204823625804217356770659234636406175e216,
	0.4974504222477287440390234150412680963966e218,
	0.6466855489220473672507304395536485253155e220,
	0.8471580690878820510984568758152795681634e222,
	0.1118248651196004307449963076076169029976e225,
	0.1487270706090685728908450891181304809868e227,
	0.1992942746161518876737324194182948445223e229,
	0.269047270731805048359538766214698040105e231,
	0.3659042881952548657689727220519893345429e233,
	0.5012888748274991661034926292112253883237e235,
	0.6917786472619488492228198283114910358867e237,
	0.9615723196941089004197195613529725398826e239,
	0.1346201247571752460587607385894161555836e242,
	0.1898143759076170969428526414110767793728e244,
	0.2695364137888162776588507508037290267094e246,
	0.3854370717180072770521565736493325081944e248,
	0.5550293832739304789551054660550388118e250,
	0.80479260574719919448490292577980627711e252,
	0.1174997204390910823947958271638517164581e255,
	0.1727245890454638911203498659308620231933e257,
	0.2556323917872865588581178015776757943262e259,
	0.380892263763056972698595524350736933546e261,
	0.571338395644585459047893286526105400319e263,
	0.8627209774233240431623188626544191544816e265,
	0.1311335885683452545606724671234717114812e268,
	0.2006343905095682394778288746989117185662e270,
	0.308976961384735088795856467036324046592e272,
	0.4789142901463393876335775239063022722176e274,
	0.7471062926282894447083809372938315446595e276,
	0.1172956879426414428192158071551315525115e279,
	0.1853271869493734796543609753051078529682e281,
	0.2946702272495038326504339507351214862195e283,
	0.4714723635992061322406943211761943779512e285,
	0.7590705053947218729075178570936729485014e287,
	0.1229694218739449434110178928491750176572e290,
	0.2004401576545302577599591653441552787813e292,
	0.3287218585534296227263330311644146572013e294,
	0.5423910666131588774984495014212841843822e296,
	0.9003691705778437366474261723593317460744e298,
	0.1503616514864999040201201707840084015944e301,
	0.2526075744973198387538018869171341146786e303,
	0.4269068009004705274939251888899566538069e305,
	0.7257415615307998967396728211129263114717e307
]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$factorials_231 = require( './factorials.json' ); */;


// VARIABLES //

var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Evaluates the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} factorial
*
* @example
* var v = factorial( 3.0 );
* // returns 6.0
*
* @example
* var v = factorial( -1.5 );
* // returns ~-3.545
*
* @example
* var v = factorial( -0.5 );
* // returns ~1.772
*
* @example
* var v = factorial( 0.5 );
* // returns ~0.886
*
* @example
* var v = factorial( -10.0 );
* // returns NaN
*
* @example
* var v = factorial( 171.0 );
* // returns Infinity
*
* @example
* var v = factorial( NaN );
* // returns NaN
*/
function factorial( x ) {
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( _$isInteger_128( x ) ) {
		if ( x < 0 ) {
			return NaN;
		}
		if ( x <= MAX_FACTORIAL ) {
			return _$factorials_231[ x ];
		}
		return _$FLOAT64_PINF_110;
	}
	return _$gamma_247( x + 1.0 );
}


// EXPORTS //

var _$factorial_230 = factorial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the factorial function.
*
* @module @stdlib/math/base/special/factorial
*
* @example
* var factorial = require( '@stdlib/math/base/special/factorial' );
*
* var v = factorial( 3.0 );
* // returns 6.0
*
* v = factorial( -1.5 );
* // returns ~-3.545
*
* v = factorial( -0.5 );
* // returns ~1.772
*
* v = factorial( 0.5 );
* // returns ~0.886
*
* v = factorial( -10.0 );
* // returns NaN
*
* v = factorial( 171.0 );
* // returns Infinity
*
* v = factorial( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorial_230 = require( './factorial.js' ); */;


// EXPORTS //

var _$factorial_232 = _$factorial_230;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_245( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_245 = __evalrational_245;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Calculates the Lanczos sum approximation.
*
* @name gammaLanczosSum
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* @example
* var v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* @example
* var v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* @example
* var v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* @example
* var v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSum( NaN );
* // returns NaN
*/
/* removed: var _$evalrational_245 = require( './rational_pq.js' ); */;


// EXPORTS //

var _$gammaLanczosSum_243 = _$evalrational_245;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum
*
* @example
* var gammaLanczosSum = require( '@stdlib/math/base/special/gamma-lanczos-sum' );
*
* var v = gammaLanczosSum( 4.0 );
* // returns ~950.366
*
* v = gammaLanczosSum( -1.5 );
* // returns ~1373366.245
*
* v = gammaLanczosSum( -0.5 );
* // returns ~-699841.735
*
* v = gammaLanczosSum( 0.5 );
* // returns ~96074.186
*
* v = gammaLanczosSum( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSum( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaLanczosSum_243 = require( './gamma_lanczos_sum.js' ); */;


// EXPORTS //

var _$gammaLanczosSum_244 = _$gammaLanczosSum_243;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @module @stdlib/constants/math/float64-gamma-lanczos-g
* @type {number}
*
* @example
* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants/math/float64-gamma-lanczos-g' );
* // returns 10.900511
*/


// MAIN //

/**
* Arbitrary constant `g` to be used in Lanczos approximation functions.
*
* @constant
* @type {number}
* @default 10.900511
* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}
*/
var FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;


// EXPORTS //

var _$FLOAT64_GAMMA_LANCZOS_G_91 = FLOAT64_GAMMA_LANCZOS_G;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSum_244 = require( '@stdlib/math/base/special/gamma-lanczos-sum' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;


// VARIABLES //

var __MAX_FACTORIAL_238 = 170; // TODO: consider moving to pkg
var FACTORIAL_169 = 4.269068009004705e+304;


// MAIN //

/**
* Calculates the ratio of two gamma functions via Lanczos approximation.
*
* ## Notes
*
* -   When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:
*
*     ```tex
*     \begin{align*}
*     G(z) / G(L) &= 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
*     z * G(L) &= z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
*     \end{align*}
*     ```
*
* @private
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*/
function gammaDeltaRatioLanczos( z, delta ) {
	var result;
	var ratio;
	var zgh;

	if ( z < _$FLOAT64_EPSILON_87 ) {
		if ( delta > __MAX_FACTORIAL_238 ) {
			ratio = gammaDeltaRatioLanczos( delta, __MAX_FACTORIAL_238-delta );
			ratio *= z;
			ratio *= FACTORIAL_169;
			return 1.0 / ratio;
		}
		return 1.0 / ( z * _$gamma_247( z+delta ) );
	}
	zgh = z + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	if ( z + delta === z ) {
		if ( _$abs_147(delta) < 10.0 ) {
			result = _$exp_225( ( 0.5-z ) * _$log1p_380( delta/zgh ) );
		} else {
			result = 1.0;
		}
	} else {
		if ( _$abs_147(delta) < 10.0 ) {
			result = _$exp_225( ( 0.5-z ) * _$log1p_380( delta/zgh ));
		} else {
			result = _$pow_396( zgh / (zgh+delta), z-0.5 );
		}
		// Split up the calculation to avoid spurious overflow:
		result *= _$gammaLanczosSum_244( z ) / _$gammaLanczosSum_244( z + delta );
	}
	result *= _$pow_396( _$E_86 / ( zgh+delta ), delta );
	return result;
}


// EXPORTS //

var _$gammaDeltaRatioLanczos_238 = gammaDeltaRatioLanczos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$factorial_232 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammaDeltaRatioLanczos_238 = require( './gamma_delta_ratio_lanczos.js' ); */;


// VARIABLES //

var __MAX_FACTORIAL_237 = 170; // TODO: consider moving to pkg


// MAIN //

/**
* Computes the ratio of two gamma functions.
*
* ## Notes
*
* -   Specifically, the function evaluates
*
*     ```tex
*     \frac{ \Gamma( z ) }{ \Gamma( z + \delta ) }
*     ```
*
* @param {number} z - first gamma parameter
* @param {number} delta - difference
* @returns {number} gamma ratio
*
* @example
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* @example
* var y = gammaDeltaRatio( 4.0, 0.5 );
* // returns ~0.516
*
* @example
* var y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/
function gammaDeltaRatio( z, delta ) {
	var result;
	var idelta;
	var iz;

	if ( z <= 0.0 || z + delta <= 0.0 ) {
		// This isn't very sophisticated, or accurate, but it does work:
		return _$gamma_247( z ) / _$gamma_247( z + delta );
	}
	idelta = _$floor_236( delta );
	if ( idelta === delta ) {
		iz = _$floor_236( z );
		if ( iz === z ) {
			// As both `z` and `delta` are integers, see if we can use a table lookup:
			if ( z <= __MAX_FACTORIAL_237 && ( z + delta <= __MAX_FACTORIAL_237 ) ) {
				return _$factorial_232( iz - 1.0 ) / _$factorial_232( idelta + iz - 1.0 );
			}
		}
		if ( _$abs_147(delta) < 20.0 ) {
			// As `delta` is a small integer, we can use a finite product:
			if ( delta === 0.0 ) {
				return 1.0;
			}
			if ( delta < 0.0 ) {
				z -= 1.0;
				result = z;
				delta += 1.0;
				while ( delta !== 0.0 ) {
					z -= 1.0;
					result *= z;
					delta += 1.0;
				}
				return result;
			}
			result = 1.0 / z;
			delta -= 1.0;
			while ( delta !== 0.0 ) {
				z += 1.0;
				result /= z;
				delta -= 1.0;
			}
			return result;
		}
	}
	return _$gammaDeltaRatioLanczos_238( z, delta );
}


// EXPORTS //

var _$gammaDeltaRatio_237 = gammaDeltaRatio;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the ratio of two gamma functions.
*
* @module @stdlib/math/base/special/gamma-delta-ratio
*
* @example
* var gammaDeltaRatio = require( '@stdlib/math/base/special/gamma-delta-ratio' );
*
* var y = gammaDeltaRatio( 2.0, 3.0 );
* // returns ~0.042
*
* y = gammaDeltaRatio( 4.0, 0.5 );
* // returns 2.0
*
* y = gammaDeltaRatio( 100.0, 0.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$gammaDeltaRatio_237 = require( './gamma_delta_ratio.js' ); */;


// EXPORTS //

var _$gammaDeltaRatio_239 = _$gammaDeltaRatio_237;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelCos_364 = require( '@stdlib/math/base/special/kernel-cos' ); */;
/* removed: var _$kernelSin_368 = require( '@stdlib/math/base/special/kernel-sin' ); */;
/* removed: var _$rempio2_409 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch array for storing temporary values:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = _$getHighWord_460( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return _$kernelCos_364( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = _$rempio2_409( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return _$kernelCos_364( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -_$kernelSin_368( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -_$kernelCos_364( buffer[ 0 ], buffer[ 1 ] );
	default:
		return _$kernelSin_368( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

var _$cos_179 = cos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

// MODULES //

/* removed: var _$cos_179 = require( './cos.js' ); */;


// EXPORTS //

var _$cos_180 = _$cos_179;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> sin(-x) = -sin(x)
*	=> sin(+n) = +0, where `n` is a positive integer
*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
*	=> cos(-x) = cos(x)
*/


// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$cos_180 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$copysign_178 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the value of `sin(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = sinpi( 0.0 );
* // returns 0.0
*
* @example
* var y = sinpi( 0.5 );
* // returns 1.0
*
* @example
* var y = sinpi( 0.9 );
* // returns ~0.309
*
* @example
* var y = sinpi( NaN );
* // returns NaN
*/
function sinpi( x ) {
	var ar;
	var r;
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_126( x ) ) {
		return NaN;
	}
	// Argument reduction (reduce to [0,2))...
	r = x % 2.0; // sign preserving
	ar = _$abs_147( r );

	// If `x` is an integer, the mod is an integer...
	if ( ar === 0.0 || ar === 1.0 ) {
		return _$copysign_178( 0.0, r );
	}
	if ( ar < 0.25 ) {
		return _$sin_428( _$PI_109*r );
	}
	// In each of the following, we further reduce to [-π/4,π/4)...
	if ( ar < 0.75 ) {
		ar = 0.5 - ar;
		return _$copysign_178( _$cos_180( _$PI_109*ar ), r );
	}
	if ( ar < 1.25 ) {
		r = _$copysign_178( 1.0, r ) - r;
		return _$sin_428( _$PI_109*r );
	}
	if ( ar < 1.75 ) {
		ar -= 1.5;
		return -_$copysign_178( _$cos_180( _$PI_109*ar ), r );
	}
	r -= _$copysign_178( 2.0, r );
	return _$sin_428( _$PI_109*r );
}


// EXPORTS //

var _$sinpi_436 = sinpi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the value of `sin(πx)`.
*
* @module @stdlib/math/base/special/sinpi
*
* @example
* var sinpi = require( '@stdlib/math/base/special/sinpi' );
*
* var y = sinpi( 0.0 );
* // returns 0.0
*
* y = sinpi( 0.5 );
* // returns 1.0
*
* y = sinpi( 0.9 );
* // returns ~0.309
*
* y = sinpi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinpi_436 = require( './sinpi.js' ); */;


// EXPORTS //

var _$sinpi_435 = _$sinpi_436;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_306( x ) {
	if ( x === 0.0 ) {
		return 0.06735230105312927;
	}
	return 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_306 = __evalpoly_306;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_307( x ) {
	if ( x === 0.0 ) {
		return 0.020580808432516733;
	}
	return 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_307 = __evalpoly_307;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_308( x ) {
	if ( x === 0.0 ) {
		return 1.3920053346762105;
	}
	return 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_308 = __evalpoly_308;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_309( x ) {
	if ( x === 0.0 ) {
		return 0.21498241596060885;
	}
	return 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_309 = __evalpoly_309;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_310( x ) {
	if ( x === 0.0 ) {
		return -0.032788541075985965;
	}
	return -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_310 = __evalpoly_310;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_311( x ) {
	if ( x === 0.0 ) {
		return 0.01797067508118204;
	}
	return 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_311 = __evalpoly_311;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_312( x ) {
	if ( x === 0.0 ) {
		return -0.010314224129834144;
	}
	return -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_312 = __evalpoly_312;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_313( x ) {
	if ( x === 0.0 ) {
		return 0.6328270640250934;
	}
	return 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_313 = __evalpoly_313;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_314( x ) {
	if ( x === 0.0 ) {
		return 2.4559779371304113;
	}
	return 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_314 = __evalpoly_314;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_315( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333297;
	}
	return 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_315 = __evalpoly_315;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$trunc_441 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$evalpoly_306 = require( './polyval_a1.js' ); */;
/* removed: var _$evalpoly_307 = require( './polyval_a2.js' ); */;
/* removed: var _$evalpoly_308 = require( './polyval_r.js' ); */;
/* removed: var _$evalpoly_309 = require( './polyval_s.js' ); */;
/* removed: var _$evalpoly_310 = require( './polyval_t1.js' ); */;
/* removed: var _$evalpoly_311 = require( './polyval_t2.js' ); */;
/* removed: var _$evalpoly_312 = require( './polyval_t3.js' ); */;
/* removed: var _$evalpoly_313 = require( './polyval_u.js' ); */;
/* removed: var _$evalpoly_314 = require( './polyval_v.js' ); */;
/* removed: var _$evalpoly_315 = require( './polyval_w.js' ); */;


// VARIABLES //

var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
var RC = 1.0;
var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
var VC = 1.0;
var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
var YMIN = 1.461632144968362245;
var TWO52 = 4503599627370496; // 2**52
var TWO58 = 288230376151711744; // 2**58
var __TINY_304 = 8.470329472543003e-22;
var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function.
*
* ## Method
*
* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in \[0,8]\\), we may reduce \\(x\\) to a number in \\(\[1.5,2.5]\\) by
*
*     ```tex
*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
*     ```
*
*     For example,
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
*     \end{align*}
*     ```
*
* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\(\[\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\(\[1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
*
*     ```tex
*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
*     ```
*
*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
*
* 3.  Compute a rational approximation in the primary interval \\(\[2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
*
*     ```tex
*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
*     ```
*
*     with accuracy
*
*     ```tex
*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
*     ```
*
*     The algorithms are based on the observation
*
*     ```tex
*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
*     ```
*
*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
*
* 4.  For \\(x \geq 8\\),
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
*     ```
*
*     which can be expressed
*
*     ```tex
*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
*     ```
*
*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
*
*     ```tex
*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
*     ```
*
*     by
*
*     ```tex
*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
*     ```
*
*     where
*
*     ```tex
*     |w - f(z)| < 2^{-58.74}
*     ```
*
* 5.  For negative \\(x\\), since
*
*     ```tex
*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
*     ```
*
*     where \\(\Gamma\\) is the gamma function, we have
*
*     ```tex
*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
*     ```
*
*     Since \\(\Gamma(-x)\\) is positive,
*
*     ```tex
*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     for \\(x < 0\\). Hence, for \\(x < 0\\),
*
*     ```tex
*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
*     ```
*
*     and
*
*     ```tex
*     \begin{align*}
*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
*     \end{align*}
*     ```
*
*     <!-- <note> -->
*
*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
*
*     <!-- </note> -->
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
* \operatorname{lgamma}(1) &= 0 & \\
* \operatorname{lgamma}(2) &= 0 & \\
* \operatorname{lgamma}(0) &= \infty & \\
* \operatorname{lgamma}(\infty) &= \infty & \\
* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammaln( 1.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 2.0 );
* // returns 0.0
*
* @example
* var v = gammaln( 4.0 );
* // returns ~1.792
*
* @example
* var v = gammaln( -0.5 );
* // returns ~1.266
*
* @example
* var v = gammaln( 0.5 );
* // returns ~0.572
*
* @example
* var v = gammaln( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaln( NaN );
* // returns NaN
*/
function gammaln( x ) {
	var isNegative;
	var nadj;
	var flg;
	var p3;
	var p2;
	var p1;
	var p;
	var q;
	var t;
	var w;
	var y;
	var z;
	var r;

	// Special cases: NaN, +-infinity
	if ( _$isnan_130( x ) || _$isInfinite_126( x ) ) {
		return x;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( x < 0.0 ) {
		isNegative = true;
		x = -x;
	} else {
		isNegative = false;
	}
	// If |x| < 2**-70, return -ln(|x|)
	if ( x < __TINY_304 ) {
		return -_$ln_376( x );
	}
	if ( isNegative ) {
		// If |x| >= 2**52, must be -integer
		if ( x >= TWO52 ) {
			return _$FLOAT64_PINF_110;
		}
		t = _$sinpi_435( x );
		if ( t === 0.0 ) {
			return _$FLOAT64_PINF_110;
		}
		nadj = _$ln_376( _$PI_109 / _$abs_147( t*x ) );
	}
	// If x equals 1 or 2, return 0
	if ( x === 1.0 || x === 2.0 ) {
		return 0.0;
	}
	// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
	if ( x < 2.0 ) {
		if ( x <= 0.9 ) {
			r = -_$ln_376( x );

			// 0.7316 <= x <=  0.9
			if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
				y = 1.0 - x;
				flg = 0;
			}
			// 0.2316 <= x < 0.7316
			else if ( x >= (YMIN - 1.0 - 0.27) ) {
				y = x - (TC - 1.0);
				flg = 1;
			}
			// 0 < x < 0.2316
			else {
				y = x;
				flg = 2;
			}
		} else {
			r = 0.0;

			// 1.7316 <= x < 2
			if ( x >= (YMIN + 0.27) ) {
				y = 2.0 - x;
				flg = 0;
			}
			// 1.2316 <= x < 1.7316
			else if ( x >= (YMIN - 0.27) ) {
				y = x - TC;
				flg = 1;
			}
			// 0.9 < x < 1.2316
			else {
				y = x - 1.0;
				flg = 2;
			}
		}
		switch ( flg ) { // eslint-disable-line default-case
		case 0:
			z = y * y;
			p1 = A1C + (z*_$evalpoly_306( z ));
			p2 = z * (A2C + (z*_$evalpoly_307( z )));
			p = (y*p1) + p2;
			r += ( p - (0.5*y) );
			break;
		case 1:
			z = y * y;
			w = z * y;
			p1 = T1C + (w*_$evalpoly_310( w ));
			p2 = T2C + (w*_$evalpoly_311( w ));
			p3 = T3C + (w*_$evalpoly_312( w ));
			p = (z*p1) - (TT - (w*(p2+(y*p3))));
			r += ( TF + p );
			break;
		case 2:
			p1 = y * (UC + (y*_$evalpoly_313( y )));
			p2 = VC + (y*_$evalpoly_314( y ));
			r += (-0.5*y) + (p1/p2);
			break;
		}
	}
	// 2 <= x < 8
	else if ( x < 8.0 ) {
		flg = _$trunc_441( x );
		y = x - flg;
		p = y * (SC + (y*_$evalpoly_309( y )));
		q = RC + (y*_$evalpoly_308( y ));
		r = (0.5*y) + (p/q);
		z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
		switch ( flg ) { // eslint-disable-line default-case
		case 7:
			z *= y + 6.0;

			/* falls through */
		case 6:
			z *= y + 5.0;

			/* falls through */
		case 5:
			z *= y + 4.0;

			/* falls through */
		case 4:
			z *= y + 3.0;

			/* falls through */
		case 3:
			z *= y + 2.0;
			r += _$ln_376( z );
		}
	}
	// 8 <= x < 2**58
	else if ( x < TWO58 ) {
		t = _$ln_376( x );
		z = 1.0 / x;
		y = z * z;
		w = WC + (z*_$evalpoly_315( y ));
		r = ((x-0.5)*(t-1.0)) + w;
	}
	// 2**58 <= x <= Inf
	else {
		r = x * ( _$ln_376(x)-1.0 );
	}
	if ( isNegative ) {
		r = nadj - r;
	}
	return r;
}


// EXPORTS //

var _$gammaln_304 = gammaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the gamma function.
*
* @module @stdlib/math/base/special/gammaln
*
* @example
* var gammaln = require( '@stdlib/math/base/special/gammaln' );
*
* var v = gammaln( 1.0 );
* // returns 0.0
*
* v = gammaln( 2.0 );
* // returns 0.0
*
* v = gammaln( 4.0 );
* // returns ~1.792
*
* v = gammaln( -0.5 );
* // returns ~1.266
*
* v = gammaln( 0.5 );
* // returns ~0.572
*
* v = gammaln( 0.0 );
* // returns Infinity
*
* v = gammaln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaln_304 = require( './gammaln.js' ); */;


// EXPORTS //

var _$gammaln_305 = _$gammaln_304;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of double-precision floating-point epsilon.
*
* @module @stdlib/constants/math/float64-sqrt-eps
* @type {number}
*
* @example
* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/math/float64-sqrt-eps' );
* // returns 0.14901161193847656e-7
*/


// MAIN //

/**
* Square root of double-precision floating-point epsilon.
*
* ```tex
* \sqrt{\frac{1}{2^{52}}}
* ```
*
* @constant
* @type {number}
* @default 0.14901161193847656e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


// EXPORTS //

var _$FLOAT64_SQRT_EPSILON_113 = FLOAT64_SQRT_EPSILON;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-max-ln
* @type {number}
*
* @example
* var FLOAT64_MAX_LN = require( '@stdlib/constants/math/float64-max-ln' );
* // returns 709.782712893384
*/


// MAIN //

/**
* Natural logarithm of the maximum double-precision floating-point number.
*
* ## Notes
*
* The natural logarithm of the maximum is given by
*
* ```tex
* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
* ```
*
* @constant
* @type {number}
* @default 709.782712893384
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_LN = 709.782712893384;


// EXPORTS //

var _$FLOAT64_MAX_LN_102 = FLOAT64_MAX_LN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Calculates normalized Q when a is an integer.
*
* @private
* @param {integer} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteGammaQ( a, x ) {
	var term;
	var sum;
	var e;
	var n;

	e = _$exp_225( -x );
	sum = e;
	if ( sum !== 0.0 ) {
		term = sum;
		for ( n = 1; n < a; ++n ) {
			term /= n;
			term *= x;
			sum += term;
		}
	}
	return sum;
}


// EXPORTS //

var _$finiteGammaQ_258 = finiteGammaQ;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_192( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_192 = __evalpoly_192;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_202( x ) {
	if ( x === 0.0 ) {
		return -0.3250421072470015;
	}
	return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_202 = __evalpoly_202;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_194( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_194 = __evalpoly_194;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_204( x ) {
	if ( x === 0.0 ) {
		return 0.39791722395915535;
	}
	return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_204 = __evalpoly_204;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_191( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_191 = __evalpoly_191;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_201( x ) {
	if ( x === 0.0 ) {
		return 0.41485611868374833;
	}
	return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_201 = __evalpoly_201;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_193( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_193 = __evalpoly_193;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_203( x ) {
	if ( x === 0.0 ) {
		return 0.10642088040084423;
	}
	return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_203 = __evalpoly_203;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_195( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_195 = __evalpoly_195;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_205( x ) {
	if ( x === 0.0 ) {
		return -0.6938585727071818;
	}
	return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_205 = __evalpoly_205;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_197( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_197 = __evalpoly_197;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_207( x ) {
	if ( x === 0.0 ) {
		return 19.651271667439257;
	}
	return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_207 = __evalpoly_207;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_196( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_196 = __evalpoly_196;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_206( x ) {
	if ( x === 0.0 ) {
		return -0.799283237680523;
	}
	return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_206 = __evalpoly_206;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_198( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_198 = __evalpoly_198;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_208( x ) {
	if ( x === 0.0 ) {
		return 30.33806074348246;
	}
	return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_208 = __evalpoly_208;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_202 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_204 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_201 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_203 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_205 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_207 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_206 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_208 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_199 = 1.0e-300;

// 2**-56 = 1/(2**56) = 1/72057594037927940
var __SMALL_199 = 1.3877787807814457e-17;

var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var QQC = 1.0;

var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var QAC = 1.0;

var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var SAC = 1.0;

var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var SBC = 1.0;


// MAIN //

/**
* Evaluates the complementary error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* @example
* var y = erfc( -1.0 );
* // returns ~1.8427
*
* @example
* var y = erfc( 0.0 );
* // returns 1.0
*
* @example
* var y = erfc( Infinity );
* // returns 0.0
*
* @example
* var y = erfc( -Infinity );
* // returns 2.0
*
* @example
* var y = erfc( NaN );
* // returns NaN
*/
function erfc( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_107 ) {
		return 2.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return 1.0;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_199 ) {
			return 1.0 - x; // raise inexact
		}
		z = x * x;
		r = PPC + ( z*_$evalpoly_202( z ) );
		s = QQC + ( z*_$evalpoly_204( z ) );
		y = r / s;

		// x < 1/4
		if ( x < 0.25 ) {
			return 1.0 - ( x + (x*y) );
		}
		r = x * y;
		r += x - 0.5;
		return 0.5 - r;
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = PAC + ( s*_$evalpoly_201( s ) );
		q = QAC + ( s*_$evalpoly_203( s ) );
		if ( sign ) {
			return 1.0 + ERX + (p/q);
		}
		return 1.0 - ERX - (p/q);
	}
	// |x| < 28
	if ( ax < 28.0 ) {
		s = 1.0 / (ax*ax);

		// |x| < 1/0.35 ~ 2.857143
		if ( ax < 2.857142857142857 ) {
			r = RAC + ( s*_$evalpoly_205( s ) );
			s = SAC + ( s*_$evalpoly_207( s ) );
		}
		// |x| >= 1/0.35 ~ 2.857143
		else {
			// x < -6
			if ( x < -6.0 ) {
				return 2.0 - __TINY_199; // raise inexact
			}
			r = RBC + ( s*_$evalpoly_206( s ) );
			s = SBC + ( s*_$evalpoly_208( s ) );
		}
		z = _$setLowWord_471( ax, 0 ); // pseudo-single (20-bit) precision x
		r = _$exp_225( -(z*z) - 0.5625 ) * _$exp_225( ((z-ax)*(z+ax)) + (r/s) );
		if ( sign ) {
			return 2.0 - (r/ax);
		}
		return r/ax;
	}
	if ( sign ) {
		return 2.0 - __TINY_199; // raise inexact; ~2
	}
	return __TINY_199 * __TINY_199; // raise inexact; ~0
}


// EXPORTS //

var _$erfc_199 = erfc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the complementary error function.
*
* @module @stdlib/math/base/special/erfc
*
* @example
* var erfc = require( '@stdlib/math/base/special/erfc' );
*
* var y = erfc( 2.0 );
* // returns ~0.0047
*
* y = erfc( -1.0 );
* // returns ~1.8427
*
* y = erfc( 0.0 );
* // returns 1.0
*
* y = erfc( Infinity );
* // returns 0.0
*
* y = erfc( -Infinity );
* // returns 2.0
*
* y = erfc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfc_199 = require( './erfc.js' ); */;


// EXPORTS //

var _$erfc_200 = _$erfc_199;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Calculates normalized Q when a is a half-integer.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} upper gamma fraction
*/
function finiteHalfGammaQ( a, x ) {
	var half;
	var term;
	var sum;
	var e;
	var n;

	e = _$erfc_200( _$sqrt_437(x) );
	if ( e !== 0 && a > 1.0 ) {
		term = _$exp_225( -x ) / _$sqrt_437( _$PI_109 * x );
		term *= x;
		half = 0.5;
		term /= half;
		sum = term;
		for ( n = 2; n < a; ++n ) {
			term /= n - half;
			term *= x;
			sum += term;
		}
		e += sum;
	}
	return e;
}


// EXPORTS //

var _$finiteHalfGammaQ_259 = finiteHalfGammaQ;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* @module @stdlib/constants/math/float64-min-ln
* @type {number}
*
* @example
* var FLOAT64_MIN_LN = require( '@stdlib/constants/math/float64-min-ln' );
* // returns -708.3964185322641
*/


// MAIN //

/**
* Natural logarithm of the smallest normalized double-precision floating-point number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* -\ln \left( 2^{1023-1} \right)
* ```
*
* @constant
* @type {number}
* @default -708.3964185322641
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_LN = -708.3964185322641;


// EXPORTS //

var _$FLOAT64_MIN_LN_106 = FLOAT64_MIN_LN;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function fullIGammaPrefix( a, z ) {
	var prefix;
	var alz;

	alz = a * _$ln_376( z );
	if ( z >= 1.0 ) {
		if ( ( alz < _$FLOAT64_MAX_LN_102 ) && ( -z > _$FLOAT64_MIN_LN_106 ) ) {
			prefix = _$pow_396( z, a ) * _$exp_225( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = _$pow_396( z / _$exp_225(z/a), a );
		}
		else {
			prefix = _$exp_225( alz - z );
		}
	}
	else {
		/* eslint-disable no-lonely-if */
		if ( alz > _$FLOAT64_MIN_LN_106 ) {
			prefix = _$pow_396( z, a ) * _$exp_225( -z );
		}
		else if ( z/a < _$FLOAT64_MAX_LN_102 ) {
			prefix = _$pow_396( z / _$exp_225(z/a), a );
		} else {
			prefix = _$exp_225( alz - z );
		}
	}
	return prefix;
}


// EXPORTS //

var _$fullIGammaPrefix_260 = fullIGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function __evalpoly_446( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
}


// EXPORTS //

var _$evalpoly_446 = __evalpoly_446;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_446 = require( './evalpoly.js' ); */;


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* ## Notes
*
* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function __factory_447( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return _$evalpoly_446( c, x );
	}
}


// EXPORTS //

var _$factory_447 = __factory_447;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$evalpoly_446 = require( './evalpoly.js' ); */;
/* removed: var _$factory_447 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$evalpoly_446, 'factory', _$factory_447 );


// EXPORTS //

var _$evalpoly_448 = _$evalpoly_446;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π` times `2`.
*
* @module @stdlib/constants/math/float64-two-pi
* @type {number}
*
* @example
* var TWO_PI = require( '@stdlib/constants/math/float64-two-pi' );
* // returns 6.283185307179586
*/


// MAIN //

/**
* The mathematical constant `π` times `2`.
*
* @constant
* @type {number}
* @default 6.283185307179586
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


// EXPORTS //

var _$TWO_PI_119 = TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_266( x ) {
	if ( x === 0.0 ) {
		return -0.3333333333333333;
	}
	return -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_266 = __evalpoly_266;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_267( x ) {
	if ( x === 0.0 ) {
		return -0.001851851851851852;
	}
	return -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_267 = __evalpoly_267;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_268( x ) {
	if ( x === 0.0 ) {
		return 0.004133597883597883;
	}
	return 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_268 = __evalpoly_268;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_269( x ) {
	if ( x === 0.0 ) {
		return 0.0006494341563786008;
	}
	return 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_269 = __evalpoly_269;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_270( x ) {
	if ( x === 0.0 ) {
		return -0.0008618882909167117;
	}
	return -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_270 = __evalpoly_270;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_271( x ) {
	if ( x === 0.0 ) {
		return -0.00033679855336635813;
	}
	return -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_271 = __evalpoly_271;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_272( x ) {
	if ( x === 0.0 ) {
		return 0.0005313079364639922;
	}
	return 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_272 = __evalpoly_272;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_273( x ) {
	if ( x === 0.0 ) {
		return 0.00034436760689237765;
	}
	return 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_273 = __evalpoly_273;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_274( x ) {
	if ( x === 0.0 ) {
		return -0.0006526239185953094;
	}
	return -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_274 = __evalpoly_274;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$evalpoly_266 = require( './polyval_c0.js' ); */;
/* removed: var _$evalpoly_267 = require( './polyval_c1.js' ); */;
/* removed: var _$evalpoly_268 = require( './polyval_c2.js' ); */;
/* removed: var _$evalpoly_269 = require( './polyval_c3.js' ); */;
/* removed: var _$evalpoly_270 = require( './polyval_c4.js' ); */;
/* removed: var _$evalpoly_271 = require( './polyval_c5.js' ); */;
/* removed: var _$evalpoly_272 = require( './polyval_c6.js' ); */;
/* removed: var _$evalpoly_273 = require( './polyval_c7.js' ); */;
/* removed: var _$evalpoly_274 = require( './polyval_c8.js' ); */;


// VARIABLES //

// Pre-allocate workspace array:
var workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {number} value of asymptotic expansion
*/
function igammaTemmeLarge( a, x ) {
	var result;
	var sigma;
	var phi;
	var y;
	var z;

	sigma = ( x-a ) / a;
	phi = -_$ln_376( 1.0 + sigma ) + sigma;
	y = a * phi;
	z = _$sqrt_437( 2.0 * phi );
	if ( x < a ) {
		z = -z;
	}
	workspace[ 0 ] = _$evalpoly_266( z );
	workspace[ 1 ] = _$evalpoly_267( z );
	workspace[ 2 ] = _$evalpoly_268( z );
	workspace[ 3 ] = _$evalpoly_269( z );
	workspace[ 4 ] = _$evalpoly_270( z );
	workspace[ 5 ] = _$evalpoly_271( z );
	workspace[ 6 ] = _$evalpoly_272( z );
	workspace[ 7 ] = _$evalpoly_273( z );
	workspace[ 8 ] = _$evalpoly_274( z );
	workspace[ 9 ] = -0.00059676129019274625;
	result = _$evalpoly_448( workspace, 1.0/a );
	result *= _$exp_225( -y ) / _$sqrt_437( _$TWO_PI_119 * a );
	if ( x < a ) {
		result = -result;
	}
	result += _$erfc_200( _$sqrt_437(y) ) / 2.0;
	return result;
}


// EXPORTS //

var _$igammaTemmeLarge_262 = igammaTemmeLarge;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Alias for `eval` global.
*
* @module @stdlib/utils/eval
*
* @example
* var evil = require( '@stdlib/utils/eval' );
*
* var v = evil( '5*4*3*2*1' );
* // returns 120
*/

// MODULES //

var evil = eval; // eslint-disable-line no-eval


// EXPORTS //

var _$evil_1610 = evil;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evil_1610 = require( '@stdlib/utils/eval' ); */;


// MAIN //

/**
* Tests for native `function*()` support.
*
* @returns {boolean} boolean indicating if an environment has native `function*()` support
*
* @example
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/
function hasGeneratorSupport() {
	var bool;
	try {
		_$evil_1610( '"use strict"; (function* () {})' );
		bool = true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

var _$hasGeneratorSupport_20 = hasGeneratorSupport;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `function*()` support.
*
* @module @stdlib/assert/has-generator-support
*
* @example
* var hasGeneratorSupport = require( '@stdlib/assert/has-generator-support' );
*
* var bool = hasGeneratorSupport();
* // returns <boolean>
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_20 = require( './main.js' ); */;


// EXPORTS //

var _$hasGeneratorSupport_19 = _$hasGeneratorSupport_20;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var MAX_TERMS = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesGenerator( 0.9 );
* var out = sumSeries( gen );
* // returns 10.0
*
* function* geometricSeriesGenerator( x ) {
*     var exponent = 0;
*     while ( true ) {
*         yield Math.pow( x, exponent );
*         exponent += 1;
*     }
* }
*/
function sumSeries( generator, options ) {
	var isgenerator;
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || _$FLOAT64_EPSILON_87;
	counter = opts.maxTerms || MAX_TERMS;
	result = opts.initialValue || 0;

	isgenerator = typeof generator.next === 'function';
	if ( isgenerator === true ) {
		// Case A: Iterate over generator object created by a generator function...
		for ( nextTerm of generator ) {
			result += nextTerm;
			if (
				_$abs_147(tolerance * result) >= _$abs_147(nextTerm) ||
				--counter === 0 // eslint-disable-line no-plusplus
			) {
				break;
			}
		}
	} else {
		// Case B: Repeatedly call function...
		do {
			nextTerm = generator();
			result += nextTerm;
		}
		while ( ( _$abs_147(tolerance * result) < _$abs_147(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus
	}
	return result;
}


// EXPORTS //

var _$sumSeries_450 = sumSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var __MAX_TERMS_449 = 1000000;


// MAIN //

/**
* Sum the elements of the series given by the supplied function.
*
* @param {Function} generator - series function
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {number} [options.initialValue=0] - initial value of the resulting sum
* @returns {number} sum of all series terms
*
* @example
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10.0
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/
function __sumSeries_449( generator, options ) {
	var tolerance;
	var nextTerm;
	var counter;
	var result;
	var opts;

	opts = {};

	if ( arguments.length > 1 ) {
		opts = options;
	}
	tolerance = opts.tolerance || _$FLOAT64_EPSILON_87;
	counter = opts.maxTerms || __MAX_TERMS_449;
	result = opts.initialValue || 0;

	// Repeatedly call function...
	do {
		nextTerm = generator();
		result += nextTerm;
	}
	while ( ( _$abs_147(tolerance * result) < _$abs_147(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus

	return result;
}


// EXPORTS //

var _$sumSeries_449 = __sumSeries_449;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Sum the elements of the series given by the supplied function.
*
* @module @stdlib/math/base/tools/sum-series
*
* @example
* var sumSeries = require( '@stdlib/math/base/tools/sum-series' );
*
* var gen = geometricSeriesClosure( 0.9 )
* var out = sumSeries( gen );
* // returns 10
*
* function geometricSeriesClosure( x ) {
*     var exponent = -1;
*     return function() {
*         exponent += 1;
*         return Math.pow( x, exponent );
*     };
* }
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_19 = require( '@stdlib/assert/has-generator-support' ); */;
/* removed: var _$sumSeries_450 = require( './generators.js' ); */;
/* removed: var _$sumSeries_449 = require( './basic.js' ); */;


// MAIN //

var __sumSeries_451;
if ( _$hasGeneratorSupport_19() ) {
	__sumSeries_451 = _$sumSeries_450;
} else {
	__sumSeries_451 = _$sumSeries_449;
}


// EXPORTS //

var _$sumSeries_451 = __sumSeries_451;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Creates a function to evaluate a series expansion of the incomplete gamma function.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function lowerIncompleteGammaSeries( a1, z1 ) {
	var result = 1.0;
	var a = a1;
	var z = z1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result;
		a += 1.0;
		result *= z/a;
		return r;
	}
}


// EXPORTS //

var _$lowerIncompleteGammaSeries_265 = lowerIncompleteGammaSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$sumSeries_451 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$lowerIncompleteGammaSeries_265 = require( './lower_incomplete_gamma_series' ); */;


// MAIN //

/**
* Sums elements of the series expansion of the lower incomplete gamma function.
*
* ## Method
*
* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.
* -   Divide by `tgamma(a)` to get the normalized value.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @param {number} initialValue - initial value of the resulting sum
* @returns {number} sum of terms of lower gamma series
*/
function lowerGammaSeries( a, z, initialValue ) {
	var result;
	var s;

	initialValue = initialValue || 0.0;
	s = _$lowerIncompleteGammaSeries_265( a, z );
	result = _$sumSeries_451( s, {
		'initialValue': initialValue
	});
	return result;
}


// EXPORTS //

var _$lowerGammaSeries_264 = lowerGammaSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_242( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return Infinity;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_242 = __evalrational_242;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @name gammaLanczosSumExpGScaled
* @type {Function}
* @param {number} x - input value
* @returns {number} Lanczos sum approximation
*
* @example
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* @example
* var v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* @example
* var v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* @example
* var v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* @example
* var v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/
/* removed: var _$evalrational_242 = require( './rational_pq.js' ); */;


// EXPORTS //

var _$gammaLanczosSumExpGScaled_240 = _$evalrational_242;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
*
* @module @stdlib/math/base/special/gamma-lanczos-sum-expg-scaled
*
* @example
* var gammaLanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );
*
* var v = gammaLanczosSumExpGScaled( 4.0 );
* // returns ~0.018
*
* v = gammaLanczosSumExpGScaled( -1.5 );
* // returns ~25.337
*
* v = gammaLanczosSumExpGScaled( -0.5 );
* // returns ~-12.911
*
* v = gammaLanczosSumExpGScaled( 0.5 );
* // returns ~1.772
*
* v = gammaLanczosSumExpGScaled( 0.0 );
* // returns Infinity
*
* v = gammaLanczosSumExpGScaled( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_240 = require( './gamma_lanczos_sum_expg_scaled.js' ); */;


// EXPORTS //

var _$gammaLanczosSumExpGScaled_241 = _$gammaLanczosSumExpGScaled_240;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularisedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_91 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_106 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_225( ( a * _$ln_376(z) ) - z - _$gammaln_305( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_396( z, a ) * _$exp_225( -z ) / _$gamma_247( a );
	}
	if ( _$abs_147(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_380( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_91 ) / agh );
		prefix = _$exp_225( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_376(z / agh);
		amz = a - z;
		if (
			_$min_392(alz, amz) <= _$FLOAT64_MIN_LN_106 ||
			_$max_388(alz, amz) >= _$FLOAT64_MAX_LN_102
		) {
			amza = amz / a;
			if (
				_$min_392(alz, amz)/2.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/2.0 < _$FLOAT64_MAX_LN_102
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_396( z / agh, a / 2.0 ) * _$exp_225( amz / 2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_392(alz, amz)/4.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/4.0 < _$FLOAT64_MAX_LN_102 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_396( z / agh, a / 4.0 ) * _$exp_225( amz / 4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_106 &&
				amza < _$FLOAT64_MAX_LN_102
			) {
				prefix = _$pow_396( (z * _$exp_225(amza)) / agh, a );
			}
			else {
				prefix = _$exp_225( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_396( z / agh, a ) * _$exp_225( amz );
		}
	}
	prefix *= _$sqrt_437( agh / _$E_86 ) / _$gammaLanczosSumExpGScaled_241( a );
	return prefix;
}


// EXPORTS //

var _$regularisedGammaPrefix_275 = regularisedGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$trunc_441 = require( '@stdlib/math/base/special/trunc' ); */;


// MAIN //

/**
* Evaluates `bˣ - 1`.
*
* @param {number} b - base
* @param {number} x - exponent
* @returns {number} function value
*
* @example
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* @example
* var y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* @example
* var y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* @example
* var y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* @example
* var y = powm1( NaN, 3.0 );
* // returns NaN
*
* @example
* var y = powm1( 5.0, NaN );
* // returns NaN
*/
function powm1( b, x ) {
	var y;
	if (
		_$isnan_130( b ) ||
		_$isnan_130( x )
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
		return 0.0;
	}
	if ( b === 0.0 ) {
		// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
		return -1.0;
	}
	if ( b < 0.0 && x%2.0 === 0 ) {
		// If `x` is even, recognize that `(-b)**x == (b)**x`...
		b = -b;
	}
	if ( b > 0.0 ) {
		if (
			_$abs_147( x*(b-1.0) ) < 0.5 ||
			_$abs_147( x ) < 0.2
		) {
			// No good/quick approximation for ln(b)*x, so we have to evaluate...
			y = _$ln_376( b ) * x;
			if ( y < 0.5 ) {
				return _$expm1_228( y );
			}
		}
	} else if ( _$trunc_441( x ) !== x ) {
		// Exponentiation would yield a complex result...
		return NaN;
	}
	return _$pow_396( b, x ) - 1.0;
}


// EXPORTS //

var _$powm1_408 = powm1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate `bˣ - 1`.
*
* @module @stdlib/math/base/special/powm1
*
* @example
* var powm1 = require( '@stdlib/math/base/special/powm1' );
*
* var y = powm1( 2.0, 3.0 );
* // returns 7.0
*
* y = powm1( 4.0, 0.5 );
* // returns 1.0
*
* y = powm1( 0.0, 100.0 );
* // returns -1.0
*
* y = powm1( 100.0, 0.0 );
* // returns 0.0
*
* y = powm1( 0.0, 0.0 );
* // returns 0.0
*
* y = powm1( 3.141592653589793, 5.0 );
* // returns ~305.0197
*
* y = powm1( NaN, 3.0 );
* // returns NaN
*
* y = powm1( 5.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$powm1_408 = require( './powm1.js' ); */;


// EXPORTS //

var _$powm1_407 = _$powm1_408;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_255( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.01803556856784494;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len
		s2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_255 = __evalrational_255;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_256( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.04906224540690395;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len
		s2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_256 = __evalrational_256;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_257( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.029232972183027003;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len
		s2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_257 = __evalrational_257;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$evalrational_255 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_256 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_257 = require( './rational_p3q3.js' ); */;


// VARIABLES //

var Y1 = 0.158963680267333984375;
var Y2 = 0.52815341949462890625;
var Y3 = 0.452017307281494140625;


// MAIN //

/**
* Evaluates the natural logarithm of the gamma function for small arguments.
*
* ## Method
*
* 1.  For \\( z > 2 \\), begin by performing argument reduction until \\( z \\) is in \\(\[2,3)\\). Use the following form:
*
*     ```tex
*     \operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))
*     ```
*
*     where \\( R(z-2) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
* 2.  If \\( z < 1 \\), use recurrence to shift to \\( z \\) in the interval \\(\[1,2\]\\). Then, use one of two approximations: one for \\( z \\) in \\(\[1,1.5\]\\) and one for \\( z \\) in \\(\[1.5,2\]\\):
*
*     -   For \(( z \\) in \\(\[1,1.5\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))
*         ```
*
*         where \\( R(z-1) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*     -   For \\( z \\) in \\(\[1.5,2\]\\), use
*
*         ```tex
*         \operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))
*         ```
*
*         where \\( R(2-z) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
*
*
* ## Notes
*
* -   Relative error:
*
*     | function | peak         | maximum deviation |
*     |:--------:|:------------:|:-----------------:|
*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |
*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |
*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |
*
*
* @private
* @param {number} z - input value
* @param {number} zm1 - `z` minus one
* @param {number} zm2 - `z` minus two
* @returns {number} function value
*/
function lgammaSmallImp( z, zm1, zm2 ) {
	var prefix;
	var result;
	var r;
	var R;

	if ( z < _$FLOAT64_EPSILON_87 ) {
		return -_$ln_376( z );
	}
	if ( zm1 === 0.0 || zm2 === 0.0 ) {
		return 0.0;
	}
	result = 0.0;
	if ( z > 2.0 ) {
		if ( z >= 3.0 ) {
			do {
				z -= 1.0;
				zm2 -= 1.0;
				result += _$ln_376(z);
			} while ( z >= 3.0 );
			zm2 = z - 2.0;
		}
		r = zm2 * ( z+1.0 );
		R = _$evalrational_255( zm2 );
		result += ( r*Y1 ) + ( r*R );
		return result;
	}
	if ( z < 1.0 ) {
		result += -_$ln_376(z);
		zm2 = zm1;
		zm1 = z;
		z += 1.0;
	}
	if ( z <= 1.5 ) {
		r = _$evalrational_256( zm1 );
		prefix = zm1 * zm2;
		result += ( prefix*Y2 ) + ( prefix*r );
		return result;
	}
	// Case: 1.5 < z <= 2
	r = zm2 * zm1;
	R = _$evalrational_257( -zm2 );
	result += ( r*Y3 ) + ( r*R );
	return result;
}


// EXPORTS //

var _$lgammaSmallImp_254 = lgammaSmallImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$lgammaSmallImp_254 = require( './lgamma_small_imp.js' ); */;


// MAIN //

/**
* Computes `gamma(x+1) - 1`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = gammap1m1( 0.2 );
* // returns ~-0.082
*
* @example
* var v = gammap1m1( -9.2 );
* // returns ~-1.0
*
* @example
* var v = gammap1m1( 0.0 );
* // returns 0.0
*
* @example
* var v = gammap1m1( -3.0 );
* // returns NaN
*
* @example
* var v = gammap1m1( NaN );
* // returns NaN
*/
function gammap1m1( x ) {
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		if ( x < -0.5 ) {
			// Best method is simply to subtract 1 from gamma:
			return _$gamma_247( 1.0+x ) - 1.0;
		}
		// Use expm1 on the logarithm of gamma:
		return _$expm1_228( -_$log1p_380( x ) + _$lgammaSmallImp_254( x+2.0, x+1.0, x ) );
	}
	if ( x < 2.0 ) {
		// Use expm1 on the logarithm of gamma:
		return _$expm1_228( _$lgammaSmallImp_254( x+1.0, x, x-1.0 ) );
	}
	// Best method is simply to subtract 1 from gamma:
	return _$gamma_247( 1.0+x ) - 1.0;
}


// EXPORTS //

var _$gammap1m1_252 = gammap1m1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `gamma(x+1) - 1` without cancellation errors.
*
* @module @stdlib/math/base/special/gamma1pm1
*
* @example
* var gamma1pm1 = require( '@stdlib/math/base/special/gamma1pm1' );
*
* var v = gamma1pm1( 0.2 );
* // returns ~-0.082
*
* v = gamma1pm1( -5.3 );
* // returns ~-1.102
*
* v = gamma1pm1( 0.0 );
* // returns 0.0
*
* v = gamma1pm1( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammap1m1_252 = require( './gamma1pm1.js' ); */;


// EXPORTS //

var _$gamma1pm1_253 = _$gammap1m1_252;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

/**
* Series representation for upper fraction when `z` is small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @returns {Function} series function
*/
function smallGamma2Series( a, x ) {
	var result;
	var apn;
	var n;
	var r;

	result = -x;
	x = -x;
	apn = a + 1.0;
	n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		r = result / apn;
		result *= x;
		n += 1;
		result /= n;
		apn += 1.0;
		return r;
	}
}


// EXPORTS //

var _$smallGamma2Series_276 = smallGamma2Series;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$powm1_407 = require( '@stdlib/math/base/special/powm1' ); */;
/* removed: var _$sumSeries_451 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$gamma1pm1_253 = require( '@stdlib/math/base/special/gamma1pm1' ); */;
/* removed: var _$smallGamma2Series_276 = require( './small_gamma2_series.js' ); */;


// MAIN //

/**
* Compute the full upper fraction (Q) when `a` is very small.
*
* @private
* @param {number} a - function parameter
* @param {number} x - function parameter
* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
* @returns {Array} full upper fraction (Q) and pgam
*/
function tgammaSmallUpperPart( a, x, invert ) {
	var initialValue;
	var result;
	var pgam;
	var p;
	var s;

	result = _$gamma1pm1_253( a );
	pgam = ( result + 1.0 ) / a;
	p = _$powm1_407( x, a );
	result -= p;
	result /= a;
	s = _$smallGamma2Series_276( a, x );
	p += 1.0;
	initialValue = ( invert ) ? pgam : 0.0;
	result = -p * _$sumSeries_451( s, {
		'initialValue': (initialValue - result) / p
	});
	if ( invert ) {
		result = -result;
	}
	return [ result, pgam ];
}


// EXPORTS //

var _$tgammaSmallUpperPart_277 = tgammaSmallUpperPart;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive single-precision floating-point normal number.
*
* @module @stdlib/constants/math/float32-smallest-normal
* @type {number}
*
* @example
* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/math/float32-smallest-normal' );
* // returns 1.1754943508222875e-38
*/


// MAIN //

/**
* The smallest positive single-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{127-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000001 00000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 1.1754943508222875e-38
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;


// EXPORTS //

var _$FLOAT32_SMALLEST_NORMAL_85 = FLOAT32_SMALLEST_NORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_85 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// VARIABLES //

var MAX_ITER = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionA( gen, factor, maxIter ) {
	var isgenerator;
	var delta;
	var a0;
	var f;
	var C;
	var D;
	var v;

	isgenerator = typeof gen.next === 'function';
	v = ( isgenerator ) ? gen.next().value : gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_85;
	}
	C = f;
	D = 0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +    a1
*      ---------------
*      b1 +     a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function continuedFractionB( gen, factor, maxIter ) {
	var isgenerator;
	var delta;
	var f;
	var C;
	var D;
	var v;

	isgenerator = typeof gen.next === 'function';
	v = ( isgenerator ) ? gen.next().value : gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_85;
	}
	C = f;
	D = 0.0;
	if ( isgenerator === true ) {
		do {
			v = gen.next().value;
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	} else {
		do {
			v = gen();
			if ( v ) {
				D = v[ 1 ] + ( v[ 0 ] * D );
				if ( D === 0.0 ) {
					D = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				C = v[ 1 ] + ( v[ 0 ] / C );
				if ( C === 0.0 ) {
					C = _$FLOAT32_SMALLEST_NORMAL_85;
				}
				D = 1.0 / D;
				delta = C * D;
				f *= delta;
			}
		} while ( v && ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	}
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator();
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function* generator() {
*    var i = 0;
*    while ( true ) {
*        i++;
*        yield [ i, i ];
*    }
* }
*/
function continuedFraction( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	maxIter = opts.maxIter || MAX_ITER;
	eps = opts.tolerance || _$FLOAT64_EPSILON_87;

	if ( opts.keep ) {
		return continuedFractionB( generator, eps, maxIter );
	}
	return continuedFractionA( generator, eps, maxIter );
}


// EXPORTS //

var _$continuedFraction_444 = continuedFraction;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_85 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;


// VARIABLES //

var __MAX_ITER_443 = 1000000;


// FUNCTIONS //

/**
* Evaluates a continued fraction expansion.
*
* ```text
*           a1
*      ---------------
*      b1 +     a2
*           ----------
*            b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function __continuedFractionA_443( gen, factor, maxIter ) {
	var delta;
	var a0;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	a0 = v[ 0 ];
	if ( f === 0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_85;
	}
	C = f;
	D = 0.0;

	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = _$FLOAT32_SMALLEST_NORMAL_85;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = _$FLOAT32_SMALLEST_NORMAL_85;
			}
			D = 1.0 / D;
			delta = C * D;
			f *= delta;
		}
	} while ( v && ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus

	return a0 / f;
}

/**
* Evaluates a continued fraction expansion.
*
* ```text
*      b0 +   a1
*      ---------------
*      b1 +   a2
*           ----------
*           b2 +   a3
*                -----
*                b3 + ...
* ```
*
* @private
* @param {Function} gen - function giving terms of continued fraction expansion
* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} evaluated expansion
*/
function __continuedFractionB_443( gen, factor, maxIter ) {
	var delta;
	var C;
	var D;
	var f;
	var v;

	v = gen();
	f = v[ 1 ];
	if ( f === 0.0 ) {
		f = _$FLOAT32_SMALLEST_NORMAL_85;
	}
	C = f;
	D = 0.0;
	do {
		v = gen();
		if ( v ) {
			D = v[ 1 ] + ( v[ 0 ] * D );
			if ( D === 0.0 ) {
				D = _$FLOAT32_SMALLEST_NORMAL_85;
			}
			C = v[ 1 ] + ( v[ 0 ] / C );
			if ( C === 0.0 ) {
				C = _$FLOAT32_SMALLEST_NORMAL_85;
			}
			D = 1.0 / D;
			delta = C * D;
			f *= delta;
		}
	} while ( v && ( _$abs_147( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
	return f;
}


// MAIN //

/**
* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
*
* ## References
*
* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
*
* @param {Function} generator - function returning terms of continued fraction expansion
* @param {Object} [options] - function options
* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
* @param {boolean} [options.keep=false] - whether to keep the leading b term
* @returns {number} value of continued fraction
*
* @example
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/
function __continuedFraction_443( generator, options ) {
	var maxIter;
	var opts;
	var eps;

	opts = {};
	if ( arguments.length > 1 ) {
		opts = options;
	}
	eps = opts.tolerance || _$FLOAT64_EPSILON_87;
	maxIter = opts.maxIter || __MAX_ITER_443;

	if ( opts.keep ) {
		return __continuedFractionB_443( generator, eps, maxIter );
	}
	return __continuedFractionA_443( generator, eps, maxIter );
}


// EXPORTS //

var _$continuedFraction_443 = __continuedFraction_443;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Calculate a continued fraction approximation.
*
* @module @stdlib/math/base/tools/continued-fraction
*
* @example
* var continuedFraction = require( '@stdlib/math/base/tools/continued-fraction' );
*
* // Continued fraction for (e-1)^(-1):
* var gen = generator()
* var out = continuedFraction( gen );
* // returns ~0.582
*
* function generator() {
*    var i = 0;
*    return function() {
*        i++;
*        return [ i, i ];
*    };
* }
*/

// MODULES //

/* removed: var _$hasGeneratorSupport_19 = require( '@stdlib/assert/has-generator-support' ); */;
/* removed: var _$continuedFraction_444 = require( './generators.js' ); */;
/* removed: var _$continuedFraction_443 = require( './basic.js' ); */;


// MAIN //

var __continuedFraction_445;
if ( _$hasGeneratorSupport_19() ) {
	__continuedFraction_445 = _$continuedFraction_444;
} else {
	__continuedFraction_445 = _$continuedFraction_443;
}


// EXPORTS //

var _$continuedFraction_445 = __continuedFraction_445;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
*
* @private
* @param {number} a1 - function parameter
* @param {number} z1 - function parameter
* @returns {Function} series function
*/
function upperIncompleteGammaFract( a1, z1 ) {
	var z = z1 - a1 + 1.0;
	var a = a1;
	var k = 0;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		k += 1;
		z += 2.0;
		return [
			k * (a - k),
			z
		];
	}
}


// EXPORTS //

var _$upperIncompleteGammaFract_279 = upperIncompleteGammaFract;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$continuedFraction_445 = require( '@stdlib/math/base/tools/continued-fraction' ); */;
/* removed: var _$upperIncompleteGammaFract_279 = require( './upper_incomplete_gamma_fract' ); */;


// MAIN //

/**
* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} function value
*/
function upperGammaFraction( a, z ) {
	var f = _$upperIncompleteGammaFract_279( a, z );
	return 1.0 / ( z - a + 1.0 + _$continuedFraction_445( f ) );
}


// EXPORTS //

var _$upperGammaFraction_278 = upperGammaFraction;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006-7, 2013-14.
* (C) Copyright Paul A. Bristow 2007, 2013-14.
* (C) Copyright Nikhar Agrawal 2013-14.
* (C) Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SQRT_EPSILON_113 = require( '@stdlib/constants/math/float64-sqrt-eps' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$SQRT_TWO_PI_117 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$finiteGammaQ_258 = require( './finite_gamma_q.js' ); */;
/* removed: var _$finiteHalfGammaQ_259 = require( './finite_half_gamma_q.js' ); */;
/* removed: var _$fullIGammaPrefix_260 = require( './full_igamma_prefix.js' ); */;
/* removed: var _$igammaTemmeLarge_262 = require( './igamma_temme_large.js' ); */;
/* removed: var _$lowerGammaSeries_264 = require( './lower_gamma_series.js' ); */;
/* removed: var _$regularisedGammaPrefix_275 = require( './regularised_gamma_prefix.js' ); */;
/* removed: var _$tgammaSmallUpperPart_277 = require( './tgamma_small_upper_part.js' ); */;
/* removed: var _$upperGammaFraction_278 = require( './upper_gamma_fraction.js' ); */;


// VARIABLES //

var __MAX_FACTORIAL_261 = 170; // TODO: consider extracting as a constant


// MAIN //

/**
* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
*
*
* ## Notes
*
* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.
*
* @param {NonNegativeNumber} x - function parameter
* @param {PositiveNumber} a - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
* @returns {number} function value
*/
function gammainc( x, a, regularized, upper ) {
	var optimisedInvert;
	var normalized;
	var evalMethod;
	var initValue;
	var isHalfInt;
	var useTemme;
	var isSmallA;
	var invert;
	var result;
	var isInt;
	var sigma;
	var gam;
	var res;
	var fa;
	var g;

	if ( x < 0.0 || a <= 0.0 ) {
		return NaN;
	}
	normalized = ( regularized === void 0 ) ? true : regularized;
	invert = upper;
	result = 0.0;
	if ( a >= __MAX_FACTORIAL_261 && !normalized ) {
		if ( invert && ( a * 4.0 < x ) ) {
			// This is method 4 below, done in logs:
			result = ( a * _$ln_376(x) ) - x;
			result += _$ln_376( _$upperGammaFraction_278( a, x ) );
		}
		else if ( !invert && ( a > 4.0 * x ) ) {
			// This is method 2 below, done in logs:
			result = ( a * _$ln_376(x) ) - x;
			initValue = 0;
			result += _$ln_376( _$lowerGammaSeries_264( a, x, initValue ) / a );
		}
		else {
			result = gammainc( a, x, true, invert );
			if ( result === 0.0 ) {
				if ( invert ) {
					// Try http://functions.wolfram.com/06.06.06.0039.01
					result = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );
					result = _$ln_376( result ) - a + ( ( a-0.5 ) * _$ln_376(a) );
					result += _$ln_376( _$SQRT_TWO_PI_117 );
				} else {
					// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:
					result = ( a * _$ln_376( x ) ) - x;
					initValue = 0.0;
					result += _$ln_376( _$lowerGammaSeries_264( a, x, initValue ) / a);
				}
			}
			else {
				result = _$ln_376( result ) + _$gammaln_305( a );
			}
		}
		if ( result > _$FLOAT64_MAX_LN_102 ) {
			return _$FLOAT64_PINF_110;
		}
		return _$exp_225( result );
	}
	isSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < _$FLOAT64_MAX_LN_102 );
	if ( isSmallA ) {
		fa = _$floor_236( a );
		isInt = ( fa === a );
		isHalfInt = ( isInt ) ? false : ( _$abs_147( fa - a ) === 0.5 );
	} else {
		isInt = isHalfInt = false;
	}
	if ( isInt && x > 0.6 ) {
		// Calculate Q via finite sum:
		invert = !invert;
		evalMethod = 0;
	}
	else if ( isHalfInt && x > 0.2 ) {
		// Calculate Q via finite sum for half integer a:
		invert = !invert;
		evalMethod = 1;
	}
	else if ( x < _$FLOAT64_SQRT_EPSILON_113 && a > 1.0 ) {
		evalMethod = 6;
	}
	else if ( x < 0.5 ) {
		// Changeover criterion chosen to give a changeover at Q ~ 0.33:
		if ( -0.4 / _$ln_376( x ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else if ( x < 1.1 ) {
		// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:
		if ( x * 0.75 < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 3;
		}
	}
	else {
		// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:
		useTemme = false;
		if ( normalized && a > 20 ) {
			sigma = _$abs_147( (x-a)/a );
			if ( a > 200 ) {
				// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.
				if ( 20 / a > sigma * sigma ) {
					useTemme = true;
				}
			} else if ( sigma < 0.4 ) {
				useTemme = true;
			}
		}
		if ( useTemme ) {
			evalMethod = 5;
		}
		// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.
		else if ( x - ( 1.0 / (3.0 * x) ) < a ) {
			evalMethod = 2;
		} else {
			evalMethod = 4;
			invert = !invert;
		}
	}

	/* eslint-disable default-case */
	switch ( evalMethod ) {
	case 0:
		result = _$finiteGammaQ_258( a, x );
		if (normalized === false ) {
			result *= _$gamma_247( a );
		}
		break;
	case 1:
		result = _$finiteHalfGammaQ_259( a, x );
		if ( normalized === false ) {
			result *= _$gamma_247( a );
		}
		break;
	case 2:
		// Compute P:
		result = ( normalized ) ?
			_$regularisedGammaPrefix_275( a, x ) :
			_$fullIGammaPrefix_260( a, x );
		if ( result !== 0.0 ) {
			initValue = 0.0;
			optimisedInvert = false;
			if ( invert ) {
				initValue = ( normalized ) ? 1.0 : _$gamma_247(a);
				if (
					normalized ||
					result >= 1.0 ||
					_$FLOAT64_MAX_104 * result > initValue
				) {
					initValue /= result;
					if (
						normalized ||
						a < 1.0 ||
						( _$FLOAT64_MAX_104 / a > initValue )
					) {
						initValue *= -a;
						optimisedInvert = true;
					}
					else {
						initValue = 0.0;
					}
				}
				else {
					initValue = 0.0;
				}
			}
		}
		result *= _$lowerGammaSeries_264( a, x, initValue ) / a;
		if ( optimisedInvert ) {
			invert = false;
			result = -result;
		}
		break;
	case 3:
		// Compute Q:
		invert = !invert;
		res = _$tgammaSmallUpperPart_277( a, x, invert );
		result = res[ 0 ];
		g = res[ 1 ];
		invert = false;
		if ( normalized ) {
			result /= g;
		}
		break;
	case 4:
		// Compute Q:
		result = ( normalized ) ?
			_$regularisedGammaPrefix_275( a, x ) :
			_$fullIGammaPrefix_260( a, x );
		if ( result !== 0 ) {
			result *= _$upperGammaFraction_278( a, x );
		}
		break;
	case 5:
		result = _$igammaTemmeLarge_262( a, x );
		if ( x >= a ) {
			invert = !invert;
		}
		break;
	case 6:
		// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/
		result = ( normalized ) ?
			_$pow_396(x, a) / _$gamma_247( a + 1.0 ) :
			_$pow_396( x, a ) / a;
		result *= 1.0 - ( a * x / ( a + 1.0 ) );
		break;
	}
	if ( normalized && result > 1.0 ) {
		result = 1.0;
	}
	if ( invert ) {
		gam = ( normalized ) ? 1.0 : _$gamma_247( a );
		result = gam - result;
	}
	return result;
}


// EXPORTS //

var _$gammainc_261 = gammainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete gamma function.
*
* @module @stdlib/math/base/special/gammainc
*
* @example
* var gammainc = require( '@stdlib/math/base/special/gammainc' );
*
* var v = gammainc( 6.0, 2.0 );
* // returns ~0.9826
*
* v = gammainc( 1.0, 2.0, true, true );
* // returns ~0.7358
*
* v = gammainc( 7.0, 5.0 );
* // returns ~0.8270
*
* v = gammainc( 7.0, 5.0, false );
* // returns ~19.8482
*
* v = gammainc( NaN, 2.0 );
* // returns NaN
*
* v = gammainc( 6.0, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammainc_261 = require( './gammainc.js' ); */;


// EXPORTS //

var _$gammainc_263 = _$gammainc_261;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;


// MAIN //

/**
* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
*
* @private
* @param {number} a - function parameter
* @param {number} z - function parameter
* @returns {number} power term prefix
*/
function __fullIGammaPrefix_318( a, z ) {
	var prefix;
	var alz;

	alz = a * _$ln_376( z );
	if ( z >= 1.0 ) {
		if ( ( alz < _$FLOAT64_MAX_LN_102 ) && ( -z > _$FLOAT64_MIN_LN_106 ) ) {
			prefix = _$pow_396( z, a ) * _$exp_225( -z );
		}
		else if ( a >= 1.0 ) {
			prefix = _$pow_396( z / _$exp_225(z/a), a );
		}
		else {
			prefix = _$exp_225( alz - z );
		}
	}
	else if ( alz > _$FLOAT64_MIN_LN_106 ) {
		prefix = _$pow_396( z, a ) * _$exp_225( -z );
	}
	else if ( z/a < _$FLOAT64_MAX_LN_102 ) {
		prefix = _$pow_396( z / _$exp_225(z/a), a );
	}
	else {
		prefix = _$exp_225( alz - z );
	}
	return prefix;
}


// EXPORTS //

var _$fullIGammaPrefix_318 = __fullIGammaPrefix_318;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function regularizedGammaPrefix( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_91 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_106 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_225( ( a * _$ln_376(z) ) - z - _$gammaln_305( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_396( z, a ) * _$exp_225( -z ) / _$gamma_247( a );
	}
	if ( _$abs_147(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_380( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_91 ) / agh );
		prefix = _$exp_225( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_376(z / agh);
		amz = a - z;
		if (
			_$min_392(alz, amz) <= _$FLOAT64_MIN_LN_106 ||
			_$max_388(alz, amz) >= _$FLOAT64_MAX_LN_102
		) {
			amza = amz / a;
			if (
				_$min_392(alz, amz)/2.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/2.0 < _$FLOAT64_MAX_LN_102
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_396( z/agh, a/2.0 ) * _$exp_225( amz/2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_392(alz, amz)/4.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/4.0 < _$FLOAT64_MAX_LN_102 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_396( z/agh, a/4.0 ) * _$exp_225( amz/4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_106 &&
				amza < _$FLOAT64_MAX_LN_102
			) {
				prefix = _$pow_396( (z * _$exp_225(amza)) / agh, a );
			}
			else {
				prefix = _$exp_225( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_396( z/agh, a ) * _$exp_225( amz );
		}
	}
	prefix *= _$sqrt_437( agh/_$E_86 ) / _$gammaLanczosSumExpGScaled_241( a );
	return prefix;
}


// EXPORTS //

var _$regularizedGammaPrefix_326 = regularizedGammaPrefix;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_239 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$factorial_232 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$fullIGammaPrefix_318 = require( './full_igamma_prefix.js' ); */;
/* removed: var _$regularizedGammaPrefix_326 = require( './regularized_gamma_prefix.js' ); */;


// VARIABLES //

var p = new Array( 30 );


// MAIN //

/**
* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} s0 - initial value
* @param {number} mult - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
* @returns {number} function value
*/
function betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {
	var prefix;
	var tmp1;
	var tnp1;
	var sum;
	var b2n;
	var bm1;
	var lx2;
	var lxp;
	var mbn;
	var lx;
	var t4;
	var h;
	var j;
	var m;
	var n;
	var r;
	var t;
	var u;

	// Some values we'll need later, these are Eq 9.1:
	bm1 = b - 1.0;
	t = a + ( bm1 / 2.0 );
	if ( y < 0.35 ) {
		lx = _$log1p_380( -y );
	} else {
		lx = _$ln_376( x );
	}
	u = -t * lx;

	// And from from 9.2:
	h = _$regularizedGammaPrefix_326( b, u );
	if ( h <= _$FLOAT64_SMALLEST_NORMAL_111 ) {
		return s0;
	}
	if ( normalized ) {
		prefix = h / _$gammaDeltaRatio_239( a, b );
		prefix /= _$pow_396( t, b );
	} else {
		prefix = _$fullIGammaPrefix_318( b, u ) / _$pow_396( t, b );
	}
	prefix *= mult;

	// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...
	p[ 0 ] = 1;  // see 9.3.

	// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )
	j = _$gammainc_263( u, b, true, true );
	j /= h;

	// Now we can start to pull things together and evaluate the sum in Eq 9:
	sum = s0 + ( prefix * j ); // Value at N = 0

	// Some variables we'll need...
	tnp1 = 1.0; // 2*N+1
	lx2 = lx / 2.0;
	lx2 *= lx2;
	lxp = 1.0;
	t4 = 4.0 * t * t;
	b2n = b;
	for ( n = 1; n < p.length; ++n ) {
		// Begin by evaluating the next Pn from Eq 9.4:
		tnp1 += 2.0;
		p[ n ] = 0.0;
		mbn = b - n;
		tmp1 = 3;
		for ( m = 1; m < n; ++m ) {
			mbn = ( m * b ) - n;
			p[ n ] += mbn * p[ n-m ] / _$factorial_232( tmp1 );
			tmp1 += 2;
		}
		p[ n ] /= n;
		p[ n ] += bm1 / _$factorial_232( tnp1 );

		// Now we want Jn from Jn-1 using Eq 9.6:
		j = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;
		lxp *= lx2;
		b2n += 2.0;

		// Pull it together with Eq 9:
		r = prefix * p[ n ] * j;
		sum += r;
		if ( r > 1.0 ) {
			if ( _$abs_147( r ) < _$abs_147( _$FLOAT64_EPSILON_87 * sum ) ) {
				break;
			}
		} else if ( _$abs_147( r / _$FLOAT64_EPSILON_87 ) < _$abs_147( sum ) ) {
			break;
		}
	}
	return sum;
}


// EXPORTS //

var _$betaSmallBLargeASeries_316 = betaSmallBLargeASeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MAIN //

/**
* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.
*
* ## Notes
*
* Specifically, the function calculates
*
* ```tex
* \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
* ```
*
* The function should only called with small `k`; for large `k`, it is grossly inefficient.
*
* @private
* @param {number} a - input value
* @param {number} b - input value
* @param {NonNegativeInteger} k - input value
* @returns {number} ratio value
*/
function risingFactorialRatio( a, b, k ) {
	var result;
	var i;
	if ( k === 0 ) {
		return 1.0;
	}
	result = 1.0;
	for ( i = 0; i < k; i++ ) {
		result *= ( a + i ) / ( b + i );
	}
	return result;
}


// EXPORTS //

var _$risingFactorialRatio_327 = risingFactorialRatio;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the maximum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} maximum absolute value
*
* @example
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* @example
* var v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* @example
* var v = maxabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/
function maxabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( nargs === 2 ) {
		return _$max_388( _$abs_147( x ), _$abs_147( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = _$abs_147( arguments[ i ] );
	}
	return _$max_388.apply( null, args );
}


// EXPORTS //

var _$maxabs_391 = maxabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the maximum absolute value.
*
* @module @stdlib/math/base/special/maxabs
*
* @example
* var maxabs = require( '@stdlib/math/base/special/maxabs' );
*
* var v = maxabs( 3.14, -4.2 );
* // returns 4.2
*
* v = maxabs( 5.9, 3.14, 4.2 );
* // returns 5.9
*
* v = maxabs( 3.14, NaN );
* // returns NaN
*
* v = maxabs( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$maxabs_391 = require( './maxabs.js' ); */;


// EXPORTS //

var _$maxabs_390 = _$maxabs_391;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the minimum absolute value.
*
* @param {number} [x] - first number
* @param {number} [y] - second number
* @param {...number} [args] - numbers
* @returns {number} minimum absolute value
*
* @example
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* @example
* var v = minabs( 3.14, NaN );
* // returns NaN
*
* @example
* var v = minabs( +0.0, -0.0 );
* // returns +0.0
*/
function minabs( x, y ) {
	var nargs;
	var args;
	var i;

	nargs = arguments.length;
	if ( nargs === 0 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( nargs === 2 ) {
		return _$min_392( _$abs_147( x ), _$abs_147( y ) );
	}
	args = new Array( nargs );
	for ( i = 0; i < nargs; i++ ) {
		args[ i ] = _$abs_147( arguments[ i ] );
	}
	return _$min_392.apply( null, args );
}


// EXPORTS //

var _$minabs_395 = minabs;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the minimum absolute value.
*
* @module @stdlib/math/base/special/minabs
*
* @example
* var minabs = require( '@stdlib/math/base/special/minabs' );
*
* var v = minabs( -3.14, 4.2 );
* // returns 3.14
*
* v = min( 5.9, 3.14, 4.2 );
* // returns 3.14
*
* v = min( 3.14, NaN );
* // returns NaN
*
* v = min( +0.0, -0.0 );
* // returns +0.0
*/

// MODULES //

/* removed: var _$minabs_395 = require( './minabs.js' ); */;


// EXPORTS //

var _$minabs_394 = _$minabs_395;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$maxabs_390 = require( '@stdlib/math/base/special/maxabs' ); */;
/* removed: var _$minabs_394 = require( '@stdlib/math/base/special/minabs' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function ibetaPowerTerms( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return _$pow_396( x, a ) * _$pow_396( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	result = _$gammaLanczosSumExpGScaled_241( c );
	result /= _$gammaLanczosSumExpGScaled_241( a ) * _$gammaLanczosSumExpGScaled_241( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= _$sqrt_437( bgh / _$E_86 );
	result *= _$sqrt_437( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( _$minabs_394( l1, l2 ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || _$min_392( a, b ) < 1 ) {
			if ( _$abs_147(l1) < 0.1 ) {
				result *= _$exp_225( a * _$log1p_380( l1 ) );
			} else {
				result *= _$pow_396( ( x*cgh ) / agh, a );
			}
			if ( _$abs_147(l2) < 0.1 ) {
				result *= _$exp_225( b * _$log1p_380( l2 ) );
			} else {
				result *= _$pow_396((y * cgh) / bgh, b);
			}
		}
		else if ( _$maxabs_390( l1, l2 ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = _$expm1_228( ratio * _$log1p_380( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
			else {
				l3 = _$expm1_228( _$log1p_380( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
		}
		else if ( _$abs_147(l1) < _$abs_147(l2) ) {
			// First base near 1 only:
			l = ( a * _$log1p_380( l1 ) ) + ( b * _$ln_376( ( y*cgh ) / bgh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * _$log1p_380( l2 ) ) + ( a * _$ln_376( (x*cgh) / agh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * _$ln_376(b1);
		l2 = b * _$ln_376(b2);
		if (
			l1 >= _$FLOAT64_MAX_LN_102 ||
			l1 <= _$FLOAT64_MIN_LN_106 ||
			l2 >= _$FLOAT64_MAX_LN_102 ||
			l2 <= _$FLOAT64_MIN_LN_106
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = _$pow_396( b2, b / a );
				l3 = a * ( _$ln_376(b1) + _$ln_376(p1) );
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b1, a );
				} else {
					l2 += l1 + _$ln_376(result);
					if ( l2 >= _$FLOAT64_MAX_LN_102 ) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
			else {
				p1 = _$pow_396( b1, a / b );
				l3 = ( _$ln_376(p1) + _$ln_376(b2) ) * b;
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b2, b );
				} else {
					l2 += l1 + _$ln_376( result );
					if (l2 >= _$FLOAT64_MAX_LN_102) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= _$pow_396( b1, a ) * _$pow_396( b2, b );
		}
	}
	return result;
}


// EXPORTS //

var _$ibetaPowerTerms_321 = ibetaPowerTerms;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$continuedFraction_445 = require( '@stdlib/math/base/tools/continued-fraction' ); */;
/* removed: var _$ibetaPowerTerms_321 = require( './ibeta_power_terms.js' ); */;


// VARIABLES //

var OPTS = {
	'keep': true,
	'maxIter': 1000
};


// FUNCTIONS //

/**
* Continued fraction for the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @returns {Function} series function
*/
function ibetaFraction2t( a, b, x, y ) {
	var m = 0;
	return next;

	/**
	* Calculate the numerator and denominator of the next term of the series.
	*
	* @private
	* @returns {Array} series expansion terms
	*/
	function next() {
		var denom;
		var aN;
		var bN;

		aN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;
		denom = a + ( 2.0*m ) - 1.0;
		aN /= denom * denom;
		bN = m;
		bN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );
		bN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len
		m += 1;
		return [ aN, bN ];
	}
}


// MAIN //

/**
* Evaluates the incomplete beta via the continued fraction representation.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} incomplete beta value
*/
function ibetaFraction2( a, b, x, y, normalized, out ) {
	var result;
	var fract;
	var f;

	result = _$ibetaPowerTerms_321( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = result;
	}
	if ( result === 0.0 ) {
		return result;
	}
	f = ibetaFraction2t( a, b, x, y );
	fract = _$continuedFraction_445( f, OPTS );
	return result / fract;
}


// EXPORTS //

var _$ibetaFraction2_320 = ibetaFraction2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isOdd_138 = require( '@stdlib/math/base/assert/is-odd' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;


// MAIN //

/**
* Computes the binomial coefficient of two integers.
*
* ## Method
*
* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
*
*     ```tex
*     \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
*     ```
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {integer} function value
*
* @example
* var v = binomcoef( 8, 2 );
* // returns 28
*
* @example
* var v = binomcoef( 0, 0 );
* // returns 1
*
* @example
* var v = binomcoef( -4, 2 );
* // returns 10
*
* @example
* var v = binomcoef( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoef( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoef( NaN, NaN );
* // returns NaN
*/
function binomcoef( n, k ) {
	var res;
	var j;
	if ( _$isnan_130( n ) || _$isnan_130( k ) ) {
		return NaN;
	}
	if ( !_$isInteger_128( n ) || !_$isInteger_128( k ) ) {
		return NaN;
	}
	if ( k < 0 ) {
		return 0;
	}
	if ( n < 0 ) {
		res = binomcoef( -n + k - 1, k );
		if ( _$isOdd_138( k ) ) {
			res = -res;
		}
		return res;
	}
	if ( k > n ) {
		return 0;
	}
	if ( k === 0 || k === n ) {
		return 1;
	}
	if ( k === 1 || k === n - 1 ) {
		return n;
	}
	if ( n - k < k ) {
		k = n - k;
	}
	// Use recursive definition...
	res = n;
	for ( j = 2; j <= k; j++ ) {
		res *= ( n - j + 1 ) / j;
	}
	// Correct for rounding errors...
	return ( _$isInteger_128( res ) ) ? res : _$round_424( res );
}


// EXPORTS //

var _$binomcoef_171 = binomcoef;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoef
*
* @example
* var binomcoef = require( '@stdlib/math/base/special/binomcoef' );
*
* var v = binomcoef( 8, 2 );
* // returns 28
*
* v = binomcoef( 0, 0 );
* // returns 1
*
* v = binomcoef( -4, 2 );
* // returns 10
*
* v = binomcoef( 5, 3 );
* // returns 10
*
* v = binomcoef( NaN, 3 );
* // returns NaN
*
* v = binomcoef( 5, NaN );
* // returns NaN
*
* v = binomcoef( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$binomcoef_171 = require( './binomcoef.js' ); */;


// EXPORTS //

var _$binomcoef_172 = _$binomcoef_171;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$binomcoef_172 = require( '@stdlib/math/base/special/binomcoef' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;


// MAIN //

/**
* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.
*
* @private
* @param {NonNegativeInteger} n - number of trials
* @param {NonNegativeInteger} k - function input
* @param {Probability} x - function input
* @param {Probability} y - probability equal to `1-x`
* @returns {number} sum
*/
function binomialCCDF( n, k, x, y ) {
	var startTerm;
	var result;
	var start;
	var term;
	var i;

	result = _$pow_396( x, n );
	if ( result > _$FLOAT64_SMALLEST_NORMAL_111 ) {
		term = result;
		for ( i = _$floor_236( n - 1 ); i > k; i-- ) {
			term *= ((i + 1) * y) / ((n - i) * x);
			result += term;
		}
	} else {
		// First term underflows so we need to start at the mode of the distribution and work outwards:
		start = _$floor_236( n * x );
		if ( start <= k + 1 ) {
			start = _$floor_236( k + 2 );
		}
		result = _$pow_396( x, start ) * _$pow_396( y, n - start );
		result *= _$binomcoef_172( _$floor_236(n), _$floor_236(start) );
		if ( result === 0.0 ) {
			// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:
			for ( i = start - 1; i > k; i-- ) {
				result += _$pow_396( x, i ) * _$pow_396( y, n - i );
				result *= _$binomcoef_172( _$floor_236(n), _$floor_236(i) );
			}
		} else {
			term = result;
			startTerm = result;
			for ( i = start - 1; i > k; i-- ) {
				term *= ((i + 1) * y) / ((n - i) * x);
				result += term;
			}
			term = startTerm;
			for ( i = start + 1; i <= n; i++ ) {
				term *= (n - i + 1) * x / (i * y);
				result += term;
			}
		}
	}
	return result;
}


// EXPORTS //

var _$binomialCCDF_317 = binomialCCDF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ibetaPowerTerms_321 = require( './ibeta_power_terms.js' ); */;


// MAIN //

/**
* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {NonNegativeInteger} k - function input
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
*/
function ibetaAStep( a, b, x, y, k, normalized, out ) {
	var prefix;
	var term;
	var sum;
	var i;

	prefix = _$ibetaPowerTerms_321( a, b, x, y, normalized );
	if ( out ) {
		out[ 1 ] = prefix;
	}
	prefix /= a;
	if ( prefix === 0.0 ) {
		return prefix;
	}
	sum = 1.0;
	term = 1.0;

	// Series summation from 0 to k-1:
	for ( i = 0; i < k-1; ++i ) {
		term *= (a+b+i) * x / (a+i+1.0);
		sum += term;
	}
	prefix *= sum;
	return prefix;
}


// EXPORTS //

var _$ibetaAStep_319 = ibetaAStep;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$sumSeries_451 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// VARIABLES //

var opts = {
	'maxTerms': 100
};


// FUNCTIONS //

/**
* Series approximation to the incomplete beta.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {number} result - initial result value
* @returns {Function} series function
*/
function ibetaSeriesT( a, b, x, result ) {
	var poch = 1.0 - b;
	var n = 1;
	return next;

	/**
	* Calculate the next term of the series.
	*
	* @private
	* @returns {number} series expansion term
	*/
	function next() {
		var r = result / a;
		a += 1.0;
		result *= poch * x / n;
		n += 1;
		poch += 1.0;
		return r;
	}
}


// MAIN //

/**
* Incomplete beta series.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {NonNegativeInteger} s0 - initial value
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
* @param {Probability} y - probability equal to `1-x`
* @returns {number} function value
*/
function ibetaSeries( a, b, x, s0, normalized, out, y ) {
	var result;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var c;
	var s;

	if ( normalized ) {
		c = a + b;

		// Incomplete beta power term, combined with the Lanczos approximation:
		agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
		bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
		cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
		result = _$gammaLanczosSumExpGScaled_241( c ) / ( _$gammaLanczosSumExpGScaled_241( a ) * _$gammaLanczosSumExpGScaled_241( b ) ); // eslint-disable-line max-len

		l1 = _$ln_376( cgh / bgh ) * ( b - 0.5 );
		l2 = _$ln_376( x * cgh / agh ) * a;

		// Check for over/underflow in the power terms:
		if (
			l1 > _$FLOAT64_MIN_LN_106 &&
			l1 < _$FLOAT64_MAX_LN_102 &&
			l2 > _$FLOAT64_MIN_LN_106 &&
			l2 < _$FLOAT64_MAX_LN_102
		) {
			if ( a * b < bgh * 10.0 ) {
				result *= _$exp_225( ( b-0.5 ) * _$log1p_380( a / bgh ) );
			} else {
				result *= _$pow_396( cgh / bgh, b - 0.5 );
			}
			result *= _$pow_396( x * cgh / agh, a );
			result *= _$sqrt_437( agh / _$E_86 );

			if ( out ) {
				out[ 1 ] = result * _$pow_396( y, b );
			}
		}
		else {
			// We need logs, and this *will* cancel:
			result = _$ln_376( result ) + l1 + l2 + ( ( _$ln_376( agh ) - 1.0 ) / 2.0 );
			if ( out ) {
				out[ 1 ] = _$exp_225( result + ( b * _$ln_376( y ) ) );
			}
			result = _$exp_225( result );
		}
	}
	else {
		// Non-normalized, just compute the power:
		result = _$pow_396( x, a );
	}
	if ( result < _$FLOAT64_SMALLEST_NORMAL_111 ) {
		return s0; // Safeguard: series can't cope with denorms.
	}
	s = ibetaSeriesT( a, b, x, result );
	opts.initialValue = s0;
	return _$sumSeries_451( s, opts );
}


// EXPORTS //

var _$ibetaSeries_322 = ibetaSeries;

/* eslint-disable max-statements, max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
* (C) Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$INT32_MAX_120 = require( '@stdlib/constants/math/int32-max' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$betaSmallBLargeASeries_316 = require( './beta_small_b_large_a_series.js' ); */;
/* removed: var _$risingFactorialRatio_327 = require( './rising_factorial_ratio.js' ); */;
/* removed: var _$ibetaPowerTerms_321 = require( './ibeta_power_terms.js' ); */;
/* removed: var _$ibetaFraction2_320 = require( './ibeta_fraction2.js'); */;
/* removed: var _$binomialCCDF_317 = require( './binomial_ccdf.js' ); */;
/* removed: var _$ibetaAStep_319 = require( './ibeta_a_step.js' ); */;
/* removed: var _$ibetaSeries_322 = require( './ibeta_series.js' ); */;


// VARIABLES //

var ONE_OVER_PI = 1.0 / _$PI_109;


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative. This function divides up the input range and selects the right implementation method for each domain.
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var out = ibetaImp( new Array( 2 ), 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*/
function ibetaImp( out, x, a, b, invert, normalized ) {
	var lambda;
	var prefix;
	var fract;
	var bbar;
	var div;
	var tmp;
	var k;
	var n;
	var p;
	var y;
	y = 1.0 - x;

	// Derivative not set...
	out[ 1 ] = -1;
	if ( _$isnan_130( x ) || x < 0.0 || x > 1.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( normalized ) {
		if ( a < 0.0 || b < 0.0 ) {
			out[ 0 ] = NaN;
			out[ 1 ] = NaN;
			return out;
		}
		// Extend to a few very special cases...
		if ( a === 0.0 ) {
			if ( b === 0.0 ) {
				out[ 0 ] = NaN;
				out[ 1 ] = NaN;
				return out;
			}
			if ( b > 0.0 ) {
				out[ 0 ] = ( invert ) ? 0.0 : 1.0;
				return out;
			}
		} else if ( b === 0.0 ) {
			if ( a > 0.0 ) {
				out[ 0 ] = ( invert ) ? 1.0 : 0.0;
				return out;
			}
		}
	} else if ( a <= 0.0 || b <= 0.0 ) {
		out[ 0 ] = NaN;
		out[ 1 ] = NaN;
		return out;
	}
	if ( x === 0.0 ) {
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = ( a < 1.0 ) ? _$FLOAT64_MAX_104 / 2.0 : _$FLOAT64_SMALLEST_NORMAL_111 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = ( normalized ) ? 1.0 : _$beta_161( a, b );
			return out;
		}
		out[ 0 ] = 0.0;
		return out;
	}
	if ( x === 1.0 ) {
		if ( b === 1.0 ) {
			out[ 1 ] = 1.0;
		} else {
			out[ 1 ] = ( b < 1.0 ) ? _$FLOAT64_MAX_104 / 2.0 : _$FLOAT64_SMALLEST_NORMAL_111 * 2.0;
		}
		if ( invert ) {
			out[ 0 ] = 0.0;
		} else {
			out[ 0 ] = ( normalized ) ? 1.0 : _$beta_161( a, b );
		}
		return out;
	}
	if ( a === 0.5 && b === 0.5 ) {
		out[ 1 ] = ONE_OVER_PI * _$sqrt_437( y * x );

		// We have an arcsine distribution:
		p = ( invert ) ? _$asin_151( _$sqrt_437(y) ) : _$asin_151( _$sqrt_437(x) );
		p /= _$HALF_PI_93;
		if ( !normalized ) {
			p *= _$PI_109;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( a === 1.0 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
	}
	if ( b === 1.0 ) {
		// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/
		if ( a === 1.0 ) {
			out[ 1 ] = 1.0;
			out[ 0 ] = ( invert ) ? y : x;
			return out;
		}
		out[ 1 ] = a * _$pow_396( x, a - 1.0 );
		if ( y < 0.5 ) {
			p = ( invert ) ? -_$expm1_228( a * _$log1p_380(-y) ) : _$exp_225( a * _$log1p_380(-y) );
		} else {
			p = ( invert ) ? -( _$pow_396( x, a ) - 1.0 ) : _$pow_396( x, a );
		}
		if ( !normalized ) {
			p /= a;
		}
		out[ 0 ] = p;
		return out;
	}
	if ( _$min_392( a, b ) <= 1.0 ) {
		if ( x > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;

			invert = !invert;
		}
		if ( _$max_388( a, b ) <= 1.0 ) {
			// Both a,b < 1:
			if ( (a >= _$min_392( 0.2, b ) ) || ( _$pow_396(x, a) <= 0.9 ) ) {
				if ( invert ) {
					fract = -( ( normalized ) ? 1.0 : _$beta_161( a, b ) );
					invert = false;
					fract = -_$ibetaSeries_322( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_322( a, b, x, 0, normalized, out, y );
				}
			} else {
				tmp = b;
				b = a;
				a = tmp;

				tmp = y;
				y = x;
				x = tmp;

				invert = !invert;
				if ( y >= 0.3 ) {
					if ( invert ) {
						fract = -( ( normalized ) ? 1.0 : _$beta_161( a, b ) );
						invert = false;
						fract = -_$ibetaSeries_322( a, b, x, fract, normalized, out, y ); // eslint-disable-line max-len
					} else {
						fract = _$ibetaSeries_322( a, b, x, 0, normalized, out, y );
					}
				} else {
					// Sidestep on a, and then use the series representation:
					if ( normalized ) {
						prefix = 1;
					} else {
						prefix = _$risingFactorialRatio_327( a + b, a, 20 );
					}
					fract = _$ibetaAStep_319( a, b, x, y, 20, normalized, out );
					if ( invert ) {
						fract -= ( ( normalized ) ? 1 : _$beta_161( a, b ) );
						invert = false;
						fract = -_$betaSmallBLargeASeries_316( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
					} else {
						fract = _$betaSmallBLargeASeries_316( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
					}
				}
			}
		} else if ( b <= 1.0 || ( x < 0.1 && ( _$pow_396( b * x, a ) <= 0.7 ) ) ) {
			if ( invert ) {
				fract = -( ( normalized ) ? 1 : _$beta_161( a, b ) );
				invert = false;
				fract = -_$ibetaSeries_322( a, b, x, fract, normalized, out, y );
			} else {
				fract = _$ibetaSeries_322( a, b, x, 0.0, normalized, out, y );
			}
		} else {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;

			if ( y >= 0.3 ) {
				if (invert) {
					fract = -(( normalized ) ? 1.0 : _$beta_161( a, b ));
					invert = false;
					fract = -_$ibetaSeries_322( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_322( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a >= 15.0 ) {
				if ( invert ) {
					fract = -(( normalized ) ? 1.0 : _$beta_161( a, b ));
					invert = false;
					fract = -_$betaSmallBLargeASeries_316( a, b, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				} else {
					fract = _$betaSmallBLargeASeries_316( a, b, x, y, 0.0, 1.0, normalized ); // eslint-disable-line max-len
				}
			}
			else {
				if ( normalized ) {
					prefix = 1;
				} else {
					// Sidestep to improve errors:
					prefix = _$risingFactorialRatio_327( a + b, a, 20.0 );
				}
				fract = _$ibetaAStep_319( a, b, x, y, 20.0, normalized, out );
				if ( invert ) {
					fract -= ( ( normalized ) ? 1.0 : _$beta_161( a, b ) );
					invert = false;
					fract = -_$betaSmallBLargeASeries_316( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				} else {
					fract = _$betaSmallBLargeASeries_316( a + 20.0, b, x, y, fract, prefix, normalized ); // eslint-disable-line max-len
				}
			}
		}
	} else {
		// Both a,b >= 1:
		if ( a < b ) {
			lambda = a - ( (a + b) * x );
		} else {
			lambda = ( (a + b) * y ) - b;
		}
		if ( lambda < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = y;
			y = x;
			x = tmp;
			invert = !invert;
		}
		if ( b < 40.0 ) {
			if (
				_$floor_236(a) === a &&
				_$floor_236(b) === b &&
				a < _$INT32_MAX_120 - 100
			) {
				// Relate to the binomial distribution and use a finite sum:
				k = a - 1.0;
				n = b + k;
				fract = _$binomialCCDF_317( n, k, x, y );
				if ( !normalized ) {
					fract *= _$beta_161( a, b );
				}
			}
			else if ( b * x <= 0.7 ) {
				if ( invert ) {
					fract = -( ( normalized ) ? 1.0 : _$beta_161( a, b ) );
					invert = false;
					fract = -_$ibetaSeries_322( a, b, x, fract, normalized, out, y );
				} else {
					fract = _$ibetaSeries_322( a, b, x, 0.0, normalized, out, y );
				}
			}
			else if ( a > 15.0 ) {
				// Sidestep so we can use the series representation:
				n = _$floor_236( b );
				if ( n === b ) {
					n -= 1;
				}
				bbar = b - n;
				if ( normalized ) {
					prefix = 1;
				} else {
					prefix = _$risingFactorialRatio_327( a + bbar, bbar, n );
				}
				fract = _$ibetaAStep_319( bbar, a, y, x, n, normalized );
				fract = _$betaSmallBLargeASeries_316( a, bbar, x, y, fract, 1.0, normalized ); // eslint-disable-line max-len
				fract /= prefix;
			}
			else if ( normalized ) {
				n = _$floor_236( b );
				bbar = b - n;
				if ( bbar <= 0 ) {
					n -= 1;
					bbar += 1;
				}
				fract = _$ibetaAStep_319( bbar, a, y, x, n, normalized );
				fract += _$ibetaAStep_319( a, bbar, x, y, 20.0, normalized );
				if ( invert ) {
					fract -= 1;
				}
				fract = _$betaSmallBLargeASeries_316( a + 20.0, bbar, x, y, fract, 1, normalized ); // eslint-disable-line max-len
				if ( invert ) {
					fract = -fract;
					invert = false;
				}
			}
			else {
				fract = _$ibetaFraction2_320( a, b, x, y, normalized, out );
			}
		} else {
			fract = _$ibetaFraction2_320( a, b, x, y, normalized, out );
		}
	}
	if ( out[ 1 ] < 0.0 ) {
		out[ 1 ] = _$ibetaPowerTerms_321( a, b, x, y, true );
	}
	div = y * x;
	if ( out[ 1 ] !== 0.0 ) {
		if ( ( _$FLOAT64_MAX_104 * div < out[ 1 ] ) ) {
			// Overflow, return an arbitrarily large value:
			out[ 1 ] = _$FLOAT64_MAX_104 / 2.0;
		} else {
			out[ 1 ] /= div;
		}
	}
	out[ 0 ] = ( invert ) ? ( ( normalized ) ? 1.0 : _$beta_161( a, b ) ) - fract : fract; // eslint-disable-line max-len
	return out;
}


// EXPORTS //

var _$ibetaImp_324 = ibetaImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ibetaImp_324 = require( './kernel_betainc.js' ); */;


// MAIN //

/**
* Evaluates the incomplete beta function and its first derivative.
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {Probability} x - function input
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} invert - boolean indicating if the function should return the upper tail of the incomplete beta function instead
* @param {boolean} normalized - boolean indicating if the function should evaluate the regularized boolean beta function
* @returns {(Array|TypedArray|Object)} function value and first derivative
*
* @example
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* @example
* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* @example
* var arr = new Array( 2 );
* var out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/
function kernelBetainc( out, x, a, b, invert, normalized ) {
	if ( arguments.length === 5 ) {
		return _$ibetaImp_324( new Array( 2 ), out, x, a, b, invert );
	}
	return _$ibetaImp_324( out, x, a, b, invert, normalized );
}


// EXPORTS //

var _$kernelBetainc_325 = kernelBetainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete beta function and its first derivative.
*
* @module @stdlib/math/base/special/kernel-betainc
*
* @example
* var kernelBetainc = require( '@stdlib/math/base/special/kernel-betainc' );
*
* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
* // returns [ ~0.083, ~1.5 ]
*
* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
* // returns [ 0.32, 1.6 ]
*
* var arr = new Array( 2 );
* out = kernelBetainc( arr, 0.2, 1.0, 2.0, true, true );
* // returns [ 0.64, 1.6 ]
*
* var bool = ( arr === out );
* // returns true
*/

// MODULES //

/* removed: var _$kernelBetainc_325 = require( './main.js' ); */;


// EXPORTS //

var _$kernelBetainc_323 = _$kernelBetainc_325;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetainc_323 = require( '@stdlib/math/base/special/kernel-betainc' ); */;


// VARIABLES //

var out = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the incomplete beta function.
*
* @param {Probability} x - function parameter
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* @example
* var y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* @example
* var y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*/
function betainc( x, a, b, regularized, upper ) {
	/* eslint-disable no-unneeded-ternary */
	regularized = ( regularized === false ) ? false : true;
	upper = ( upper === true ) ? true : false;
	out = _$kernelBetainc_323( out, x, a, b, upper, regularized );
	return out[ 0 ];
}


// EXPORTS //

var _$betainc_163 = betainc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the incomplete beta function.
*
* @module @stdlib/math/base/special/betainc
*
* @example
* var betainc = require( '@stdlib/math/base/special/betainc' );
*
* var y = betainc( 0.5, 2.0, 2.0 );
* // returns 0.5
*
* y = betainc( 0.5, 2.0, 2.0, false );
* // returns ~0.083
*
* y = betainc( 0.2, 1.0, 2.0 );
* // returns 0.36
*
* y = betainc( 0.2, 1.0, 2.0, true, true );
* // returns 0.64
*/

// MODULES //

/* removed: var _$betainc_163 = require( './betainc.js' ); */;


// EXPORTS //

var _$betainc_164 = _$betainc_163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.104
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.967
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __cdf_545( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return _$betainc_164( x, alpha, beta );
}


// EXPORTS //

var _$cdf_545 = __cdf_545;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/
function __factory_546( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return _$betainc_164( x, alpha, beta );
	}
}


// EXPORTS //

var _$factory_546 = __factory_546;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/beta/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.813
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.705
*
* y = cdf( 0.3 );
* // returns ~0.369
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_545 = require( './cdf.js' ); */;
/* removed: var _$factory_546 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_545, 'factory', _$factory_546 );


// EXPORTS //

var _$cdf_547 = _$cdf_545;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_73 = _$isNumber_58.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*/
function isPositiveNumber( value ) {
	return (
		__isNumber_73( value ) &&
		value > 0.0
	);
}


// EXPORTS //

var _$isPositiveNumber_73 = isPositiveNumber;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_72 = _$isNumber_58.isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive value
*
* @example
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/
function __isPositiveNumber_72( value ) {
	return (
		__isNumber_72( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

var _$isPositiveNumber_72 = __isPositiveNumber_72;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveNumber_73 = require( './primitive.js' ); */;
/* removed: var _$isPositiveNumber_72 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a positive number.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive number
*
* @example
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveNumber( 3.14 );
* // returns true
*
* @example
* var bool = isPositiveNumber( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveNumber( null );
* // returns false
*/
function __isPositiveNumber_71( value ) {
	return ( _$isPositiveNumber_73( value ) || _$isPositiveNumber_72( value ) );
}


// EXPORTS //

var _$isPositiveNumber_71 = __isPositiveNumber_71;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a positive number.
*
* @module @stdlib/assert/is-positive-number
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' );
*
* var bool = isPositiveNumber( 5.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveNumber( 3.14 );
* // returns true
*
* bool = isPositiveNumber( -5.0 );
* // returns false
*
* bool = isPositiveNumber( null );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;
*
* var bool = isPositiveNumber( 3.0 );
* // returns true
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isObject;
*
* var bool = isPositiveNumber( 3.0 );
* // returns false
*
* bool = isPositiveNumber( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isPositiveNumber_71 = require( './main.js' ); */;
/* removed: var _$isPositiveNumber_73 = require( './primitive.js' ); */;
/* removed: var _$isPositiveNumber_72 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isPositiveNumber_71, 'isPrimitive', _$isPositiveNumber_73 );
_$setNonEnumerableReadOnly_1603( _$isPositiveNumber_71, 'isObject', _$isPositiveNumber_72 );


// EXPORTS //

var _$isPositiveNumber_70 = _$isPositiveNumber_71;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_373( x ) {
	if ( x === 0.0 ) {
		return 0.13333333333320124;
	}
	return 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_373 = __evalpoly_373;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_372( x ) {
	if ( x === 0.0 ) {
		return 0.05396825397622605;
	}
	return 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_372 = __evalpoly_372;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$evalpoly_373 = require( './polyval_t_odd.js' ); */;
/* removed: var _$evalpoly_372 = require( './polyval_t_even.js' ); */;


// VARIABLES //

var __PIO4_371 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563

// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_371 = 0x7fffffff|0; // asm type annotation


// MAIN //

/**
* Computes the tangent on \\( \approx\[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( \[0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( \[0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/
function kernelTan( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = _$getHighWord_460( x );

	// High word of |x|:
	ix = (hx & __HIGH_WORD_ABS_MASK_371)|0; // asm type annotation

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = __PIO4_371 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;

	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...
	r = _$evalpoly_373( w );
	v = z * _$evalpoly_372( w );
	s = z * x;
	r = y + (z * ((s * (r + v)) + y));
	r += T0 * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len
	}
	if ( k === 1 ) {
		return w;
	}
	// Compute -1/(x+r) accurately...
	z = w;
	_$setLowWord_471( z, 0 );
	v = r - (z - x); // z + v = r + x
	a = -1.0 / w; // a = -1/w
	t = a;
	_$setLowWord_471( t, 0 );
	s = 1.0 + (t * z);
	return t + (a * (s + (t * v)));
}


// EXPORTS //

var _$kernelTan_371 = kernelTan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

// MODULES //

/* removed: var _$kernelTan_371 = require( './kernel_tan.js' ); */;


// EXPORTS //

var _$kernelTan_370 = _$kernelTan_371;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$kernelTan_370 = require( '@stdlib/math/base/special/kernel-tan' ); */;
/* removed: var _$rempio2_409 = require( '@stdlib/math/base/special/rempio2' ); */;


// VARIABLES //

// Scratch buffer:
var __buffer_440 = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var __HIGH_WORD_ABS_MASK_440 = 0x7fffffff|0; // asm type annotation

// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011
var __HIGH_WORD_PIO4_440 = 0x3fe921fb|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var __HIGH_WORD_EXPONENT_MASK_440 = 0x7ff00000|0; // asm type annotation

// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000
var __HIGH_WORD_TWO_NEG_27_440 = 0x3e400000|0; // asm type annotation


// MAIN //

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var ix;
	var n;

	ix = _$getHighWord_460( x );
	ix &= __HIGH_WORD_ABS_MASK_440;

	// Case: |x| ~< π/4
	if ( ix <= __HIGH_WORD_PIO4_440 ) {
		// Case: |x| < 2**-27
		if ( ix < __HIGH_WORD_TWO_NEG_27_440 ) {
			return x;
		}
		return _$kernelTan_370( x, 0.0, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	if ( ix >= __HIGH_WORD_EXPONENT_MASK_440 ) {
		return NaN;
	}
	// Argument reduction needed...
	n = _$rempio2_409( x, __buffer_440 );
	return _$kernelTan_370( __buffer_440[ 0 ], __buffer_440[ 1 ], 1-((n&1)<<1) );
}


// EXPORTS //

var _$tan_440 = tan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var tan = require( '@stdlib/math/base/special/tan' );
*
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$tan_440 = require( './tan.js' ); */;


// EXPORTS //

var _$tan_439 = _$tan_440;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_186( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.008333333333333333 + (x * (0.003968253968253968 + (x * (-0.004166666666666667 + (x * (0.007575757575757576 + (x * (-0.021092796092796094 + (x * (0.08333333333333333 + (x * -0.4432598039215686))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_186 = __evalpoly_186;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalpoly_186 = require( './polyval_p.js' ); */;


// MAIN //

/**
* Evaluates the digamma function via asymptotic expansion.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function digamma( x ) {
	var y;
	var z;
	x -= 1.0;
	y = _$ln_376(x) + ( 1.0 / (2.0*x) );
	z = 1.0 / (x*x);
	return y - ( z*_$evalpoly_186( z ) );
}


// EXPORTS //

var _$digamma_183 = digamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_188( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.25479851061131553;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.25479851061131553 + (x * (-0.3255503118680449 + (x * (-0.6503185377089651 + (x * (-0.28919126444774784 + (x * (-0.04525132144873906 + (x * (-0.002071332116774595 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (2.076711702373047 + (x * (1.4606242909763516 + (x * (0.43593529692665967 + (x * (0.054151797245674226 + (x * (0.0021284987017821146 + (x * -5.578984132167551e-7))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (-0.002071332116774595 + (x * (-0.04525132144873906 + (x * (-0.28919126444774784 + (x * (-0.6503185377089651 + (x * (-0.3255503118680449 + (x * 0.25479851061131553))))))))))); // eslint-disable-line max-len
		s2 = -5.578984132167551e-7 + (x * (0.0021284987017821146 + (x * (0.054151797245674226 + (x * (0.43593529692665967 + (x * (1.4606242909763516 + (x * (2.076711702373047 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_188 = __evalrational_188;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$evalrational_188 = require( './rational_pq.js' ); */;


// VARIABLES //

var root1 = 1569415565.0 / 1073741824.0;
var root2 = ( 381566830.0 / 1073741824.0 ) / 1073741824.0;
var root3 = 0.9016312093258695918615325266959189453125e-19;
var __Y_187 = 0.99558162689208984;


// MAIN //

/**
* Evaluates the digamma function over interval `[1,2]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function __digamma_187( x ) {
	var g;
	var r;
	g = x - root1;
	g -= root2;
	g -= root3;
	r = _$evalrational_188( x-1.0 );
	return (g*__Y_187) + (g*r);
}


// EXPORTS //

var _$digamma_187 = __digamma_187;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_53_0/libs/math/doc/sf_and_dist/html/math_toolkit/special/sf_gamma/digamma.html}. The implementation follows the original but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$tan_439 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$digamma_183 = require( './asymptotic_expansion.js' ); */;
/* removed: var _$digamma_187 = require( './rational_approximation.js' ); */;


// VARIABLES //

var MIN_SAFE_ASYMPTOTIC = 10.0; // BIG!


// MAIN //

/**
* Evaluates the digamma function.
*
* ## Method
*
* 1.  For \\(x < 0\\), we use the reflection formula
*
*     ```tex
*     \psi(1-x) = \psi(x) + \frac{\pi}{\tan(\pi x)}
*     ```
*
*     to make \\(x\\) positive.
*
* 2.  For \\(x \in \[0,1]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x) = \psi(x+1) - \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\(\[1,2]\\).
*
* 3.  For \\(x \in \[1,2]\\), we use a rational approximation of the form
*
*     ```tex
*     \psi(x) = (x - \mathrm{root})(Y + \operatorname{R}(x-1))
*     ```
*
*     where \\(\mathrm{root}\\) is the location of the positive root of \\(\psi\\), \\(Y\\) is a constant, and \\(R\\) is optimized for low absolute error compared to \\(Y\\).
*
*     <!-- <note>-->
*
*     Note that, since \\(\mathrm{root}\\) is irrational, we need twice as many digits in \\(\mathrm{root}\\) as in \\(x\\) in order to avoid cancellation error during subtraction, assuming \\(x\\) has an exact value. This means that, even if \\(x\\) is rounded to the next representable value, the result of \\(\psi(x)\\) will not be zero.
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision.
*
*     <!-- </note> -->
*
* 4.  For \\(x \in \[2,\mathrm{BIG}]\\), we use the recurrence relation
*
*     ```tex
*     \psi(x+1) = \psi(x) + \frac{1}{x}
*     ```
*
*     to shift the evaluation range to \\(\[1,2]\\).
*
* 5.  For \\(x > \mathrm{BIG}\\), we use the asymptotic expression
*
*     ```tex
*     \psi(x) = \ln(x) + \frac{1}{2x} - \biggl( \frac{B_{21}}{2x^2} + \frac{B_{22}}{4x^4} + \frac{B_{23}}{6x^6} + \ldots \biggr)
*     ```
*
*     This expansion, however, is divergent after a few terms. The number of terms depends on \\(x\\). Accordingly, we must choose a value of \\(\mathrm{BIG}\\) which allows us to truncate the series at a term that is too small to have an effect on the result. Setting \\(\mathrm{BIG} = 10\\), allows us to truncate the series early and evaluate as \\(1/x^2\\).
*
*     <!-- <note> -->
*
*     This approach gives 17-digit precision for \\(x \geq 10\\).
*
*     <!-- </note> -->
*
* ## Notes
*
* -   Maximum deviation found: \\(1.466\\mbox{e-}18\\)
* -   Max error found: \\(2.452\mbox{e-}17\\) (double precision)
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = digamma( -2.5 );
* // returns ~1.103
*
* @example
* var v = digamma( 1.0 );
* // returns ~-0.577
*
* @example
* var v = digamma( 10.0 );
* // returns ~2.252
*
* @example
* var v = digamma( NaN );
* // returns NaN
*
* @example
* var v = digamma( -1.0 );
* // returns NaN
*/
function __digamma_184( x ) {
	var rem;
	var tmp;
	if ( _$isnan_130( x ) || x === 0.0 ) {
		return NaN;
	}
	// If `x` is negative, use reflection...
	if ( x <= -1.0 ) {
		// Reflect:
		x = 1.0 - x;

		// Argument reduction for tan:
		rem = x - _$floor_236(x);

		// Shift to negative if > 0.5:
		if ( rem > 0.5 ) {
			rem -= 1.0;
		}
		// Check for evaluation at a negative pole:
		if ( rem === 0.0 ) {
			return NaN;
		}
		tmp = _$PI_109 / _$tan_439( _$PI_109 * rem );
	} else {
		tmp = 0.0;
	}
	// If we're above the lower-limit for the asymptotic expansion, then use it...
	if ( x >= MIN_SAFE_ASYMPTOTIC ) {
		tmp += _$digamma_183( x );
		return tmp;
	}
	// If x > 2, reduce to the interval [1,2]...
	while ( x > 2.0 ) {
		x -= 1.0;
		tmp += 1.0/x;
	}
	// If x < 1, use recurrence to shift to > 1..
	while ( x < 1.0 ) {
		tmp -= 1.0/x;
		x += 1.0;
	}
	tmp += _$digamma_187( x );
	return tmp;
}


// EXPORTS //

var _$digamma_184 = __digamma_184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the digamma function.
*
* @module @stdlib/math/base/special/digamma
*
* @example
* var digamma = require( '@stdlib/math/base/special/digamma' );
*
* var v = digamma( -2.5 );
* // returns ~1.103
*
* v = digamma( 1.0 );
* // returns ~-0.577
*
* v = digamma( 10.0 );
* // returns ~2.252
*
* v = digamma( NaN );
* // returns NaN
*
* v = digamma( -1.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$digamma_184 = require( './digamma.js' ); */;


// EXPORTS //

var _$digamma_185 = _$digamma_184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the square root of `2π`.
*
* @module @stdlib/constants/math/float64-ln-sqrt-two-pi
* @type {number}
*
* @example
* var LN_SQRT_TWO_PI = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' );
* // returns 0.9189385332046728
*/


// MAIN //

/**
* Natural logarithm of the square root of `2π`.
*
* ```tex
* \ln \sqrt{2\pi}
* ```
*
* @constant
* @type {number}
* @default 0.9189385332046728
*/
var LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len


// EXPORTS //

var _$LN_SQRT_TWO_PI_97 = LN_SQRT_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// VARIABLES //

var ALGMCS = [
	+0.1276642195630062933333333333333e-30,
	-0.3401102254316748799999999999999e-29,
	+0.1025680058010470912000000000000e-27,
	-0.3547598158101070547199999999999e-26,
	+0.1429227355942498147573333333333e-24,
	-0.6831888753985766870111999999999e-23,
	+0.3962837061046434803679306666666e-21,
	-0.2868042435334643284144622399999e-19,
	+0.2683181998482698748957538846666e-17,
	-0.3399615005417721944303330599666e-15,
	+0.6221098041892605227126015543416e-13,
	-0.1809129475572494194263306266719e-10,
	+0.9810825646924729426157171547487e-8,
	-0.1384948176067563840732986059135e-4,
	+0.1666389480451863247205729650822e+0
];
var LEN = ALGMCS.length;


// MAIN //

/**
* Evaluate the n-term Chebyshev series at `x`.
*
* ## References
*
* -   Broucke, Roger. 1973. "Algorithm: Ten Subroutines for the Manipulation of Chebyshev Series." _Communications of the ACM_ 16 (4). New York, NY, USA: ACM: 254–56. doi:[10.1145/362003.362037](https://doi.org/10.1145/362003.362037).
* -   Fox, Leslie, and Ian Bax Parker. 1968. _Chebyshev polynomials in numerical analysis_. Oxford Mathematical Handbooks. London, United Kingdom: Oxford University Press. <https://books.google.com/books?id=F8NzsEtJCD0C>.
*
* @private
* @param {number} x - value at which the series is to be evaluated
* @returns {number} series value
*/
function dcseval( x ) {
	var twox;
	var b2;
	var b1;
	var b0;
	var i;

	if ( x < -1.1 || x > 1.1 ) {
		return NaN;
	}
	b1 = 0.0;
	b0 = 0.0;
	twox = 2.0 * x;
	for ( i = 0; i < LEN; i++ ) {
		b2 = b1;
		b1 = b0;
		b0 = (twox*b1) - b2 + ALGMCS[ i ];
	}
	return ( b0-b2 ) * 0.5;
}


// EXPORTS //

var _$dcseval_168 = dcseval;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/fn/d9lgmc.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$dcseval_168 = require( './dceval.js' ); */;


// VARIABLES //

var XBIG = 94906265.62425156;
var XMAX = 3.745194030963158e306;


// MAIN //

/**
* Compute the log gamma correction factor for `x >= 10`.
*
* ```tex
* \log(\gamma(x)) = \log(\sqrt{2*\Pi}) + (x-0.5) \cdot \log(x) - x \operatorname{R9LGMC}(x).
* ```
*
* @private
* @param {number} x - input value
* @returns {number} correction value
*/
function gammaCorrection( x ) {
	if ( x < 10.0 ) {
		return NaN;
	}
	// Check for underflow...
	if ( x >= XMAX ) {
		return 0.0;
	}
	if ( x < XBIG ) {
		return _$dcseval_168( (2.0*_$pow_396( 10.0/x, 2.0 )) - 1.0 ) / x;
	}
	return 1.0 / (x * 12.0);
}


// EXPORTS //

var _$gammaCorrection_169 = gammaCorrection;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The code is adapted from the Fortran routine from the FNLIB library of the [SLATEC Common Mathematical Library]{@link http://www.netlib.no/netlib/slatec/fnlib/albeta.f}.
*
* The original code was developed by W. Fullerton of Los Alamos Scientific Laboratory, a governmental institution, and is therefore public domain.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_97 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaCorrection_169 = require( './gamma_correction.js' ); */;


// MAIN //

/**
* Evaluate the natural logarithm of the beta function.
*
* @param {NonNegativeNumber} a - first input value
* @param {NonNegativeNumber} b - second input value
* @returns {number} natural logarithm of beta function
*
* @example
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* @example
* var v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = betaln( -1.0, 2.0 );
* // returns NaN
*
* @example
* var v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* @example
* var v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* @example
* var v = betaln( NaN, 2.0 );
* // returns NaN
*/
function betaln( a, b ) {
	var corr;
	var p;
	var q;

	p = _$min_392( a, b );
	q = _$max_388( a, b );

	if ( p < 0.0 ) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$FLOAT64_PINF_110;
	}
	if ( q === _$FLOAT64_PINF_110 ) {
		return _$FLOAT64_NINF_107;
	}
	// Case: p and q are big
	if ( p >= 10.0 ) {
		corr = _$gammaCorrection_169( p ) + _$gammaCorrection_169( q ) - _$gammaCorrection_169( p+q );
		return ( -0.5*_$ln_376( q ) ) + _$LN_SQRT_TWO_PI_97 + corr + ( (p-0.5) * _$ln_376( p/(p+q) ) ) + ( q*_$log1p_380( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p is small, but q is big
	if ( q >= 10.0 ) {
		corr = _$gammaCorrection_169( q ) - _$gammaCorrection_169( p+q );
		return _$gammaln_305( p ) + corr + p - (p*_$ln_376( p+q )) + ( (q-0.5)*_$log1p_380( -p/(p+q) ) ); // eslint-disable-line max-len
	}
	// Case: p and q are small
	return _$ln_376( _$gamma_247( p ) * ( _$gamma_247( q ) / _$gamma_247( p+q ) ) );
}


// EXPORTS //

var _$betaln_167 = betaln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the beta function.
*
* @module @stdlib/math/base/special/betaln
*
* @example
* var betaln = require( '@stdlib/math/base/special/betaln' );
*
* var v = betaln( 0.0, 0.0 );
* // returns Infinity
*
* v = betaln( 1.0, 1.0 );
* // returns 0.0
*
* v = betaln( -1.0, 2.0 );
* // returns NaN
*
* v = betaln( 5.0, 0.2 );
* // returns ~1.218
*
* v = betaln( 4.0, 1.0 );
* // returns ~-1.386
*
* v = betaln( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$betaln_167 = require( './betaln.js' ); */;


// EXPORTS //

var _$betaln_170 = _$betaln_167;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;


// MAIN //

/**
* Returns the differential entropy of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {NonPositiveNumber} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.869
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.795
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_550( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = _$betaln_170( alpha, beta );
	out -= ( alpha-1.0 ) * _$digamma_185( alpha );
	out -= ( beta-1.0 ) * _$digamma_185( beta );
	out += ( alpha+beta-2.0 ) * _$digamma_185( alpha+beta );
	return out;
}


// EXPORTS //

var _$entropy_550 = __entropy_550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution differential entropy.
*
* @module @stdlib/stats/base/dists/beta/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/beta/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.869
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.795
*/

// MODULES //

/* removed: var _$entropy_550 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_551 = _$entropy_550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the excess kurtosis of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns -1.2
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~0.082
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~0.49
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_553( alpha, beta ) {
	var axb;
	var amb;
	var apb;
	var out;

	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	axb = alpha * beta;
	amb = alpha - beta;
	apb = alpha + beta;
	out = amb * amb * ( apb+1.0 );
	out -= axb * ( apb+2.0 );
	out *= 6.0;
	out /= axb * ( apb+2.0 ) * ( apb+3.0 );
	return out;
}


// EXPORTS //

var _$kurtosis_553 = __kurtosis_553;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/beta/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/beta/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~0.082
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.490
*/

// MODULES //

/* removed: var _$kurtosis_553 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_552 = _$kurtosis_553;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 0.25
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns 0.8
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_561( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( alpha + beta );
}


// EXPORTS //

var _$mean_561 = __mean_561;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution expected value.
*
* @module @stdlib/stats/base/dists/beta/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/beta/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 0.25
*
* v = mean( 8.0, 2.0 );
* // returns 0.8
*/

// MODULES //

/* removed: var _$mean_561 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_560 = _$mean_561;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_211( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_211 = __evalrational_211;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_212( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_212 = __evalrational_212;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_213( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_213 = __evalrational_213;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_214( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_214 = __evalrational_214;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_215( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_215 = __evalrational_215;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_211 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_212 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_213 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_214 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_215 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_209 = 8.91314744949340820313e-2;
var __Y2_209 = 2.249481201171875;
var __Y3_209 = 8.07220458984375e-1;
var Y4 = 9.3995571136474609375e-1;
var Y5 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse complementary error function.
*
* Note that
*
* ```tex
* \operatorname{erfc^{-1}}(1-z) = \operatorname{erf^{-1}}(z)
* ```
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfcinv( 0.8 );
* // returns ~0.1791
*
* @example
* var y = erfcinv( 0.0 );
* // returns Infinity
*
* @example
* var y = erfcinv( 2.0 );
* // returns -Infinity
*
* @example
* var y = erfcinv( NaN );
* // returns NaN
*/
function erfcinv( x ) {
	var sign;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	// Special case: 0
	if ( x === 0.0 ) {
		return _$FLOAT64_PINF_110;
	}
	// Special case: 2
	if ( x === 2.0 ) {
		return _$FLOAT64_NINF_107;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x > 2.0 || x < 0.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is outside [0,1], we can take advantage of the complementary error function reflection formula: `erfc(-z) = 2 - erfc(z)`, by negating the result once finished.
	if ( x > 1.0 ) {
		sign = -1.0;
		q = 2.0 - x;
	} else {
		sign = 1.0;
		q = x;
	}
	x = 1.0 - q;

	// x = 1-q <= 0.5
	if ( x <= 0.5 ) {
		g = x * ( x + 10.0 );
		r = _$evalrational_211( x );
		return sign * ( (g*__Y1_209) + (g*r) );
	}
	// q >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_437( -2.0 * _$ln_376(q) );
		q -= 0.25;
		r = _$evalrational_212( q );
		return sign * ( g / (__Y2_209+r) );
	}
	q = _$sqrt_437( -_$ln_376( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_213( qs );
		return sign * ( (__Y3_209*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_214( qs );
		return sign * ( (Y4*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_215( qs );
	return sign * ( (Y5*q) + (r*q) );
}


// EXPORTS //

var _$erfcinv_209 = erfcinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse complementary error function.
*
* @module @stdlib/math/base/special/erfcinv
*
* @example
* var erfcinv = require( '@stdlib/math/base/special/erfcinv' );
*
* var y = erfcinv( 0.5 );
* // returns ~0.4769
*
* y = erfcinv( 0.8 );
* // returns ~-0.1791
*
* y = erfcinv( 0.0 );
* // returns Infinity
*
* y = erfcinv( 2.0 );
* // returns -Infinity
*
* y = erfcinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfcinv_209 = require( './erfcinv.js' ); */;


// EXPORTS //

var _$erfcinv_210 = _$erfcinv_209;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FOURTH_PI_90 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;


// VARIABLES //

var __MOREBITS_148 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.


// MAIN //

/**
* Computes the arccosine of a number.
*
* ## Method
*
* -   Analytically,
*
*     ```tex
*     \operatorname{acos}(x) = \frac{\pi}{2} - \operatorname{asin}(x)
*     ```
*
*     However, if \\(\|x\|\\) is near \\(1\\), there is cancellation error in subtracting \\(\opertorname{asin}(x)\\) from \\(\pi/2\\). Hence, if \\(x < -0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = \pi - 2.0 \cdot \operatorname{asin}(\sqrt{(1+x)/2})
*     ```
*
*     or, if \\(x > +0.5\\),
*
*     ```tex
*     \operatorname{acos}(x) = 2.0 \cdot \operatorname{asin}( \sqrt{(1-x)/2} )}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:------:|:---------|:--------|:--------|
*     | DEC        | -1, 1  | 50000    | 3.3e-17 | 8.2e-18 |
*     | IEEE       | -1, 1  | 10^6     | 2.2e-16 | 6.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acos( 1.0 );
* // returns 0.0
*
* @example
* var v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* @example
* var v = acos( NaN );
* // returns NaN
*/
function acos( x ) {
	var z;
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x > 0.5 ) {
		return 2.0 * _$asin_151( _$sqrt_437( 0.5 - (0.5*x) ) );
	}
	z = _$FOURTH_PI_90 - _$asin_151( x );
	z += __MOREBITS_148;
	z += _$FOURTH_PI_90;
	return z;
}


// EXPORTS //

var _$acos_148 = acos;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arccosine of a number.
*
* @module @stdlib/math/base/special/acos
*
* @example
* var acos = require( '@stdlib/math/base/special/acos' );
*
* var v = acos( 1.0 );
* // returns 0.0
*
* v = acos( 0.707 ); // ~pi/4
* // returns ~0.7855
*
* v = acos( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$acos_148 = require( './acos.js' ); */;


// EXPORTS //

var _$acos_149 = _$acos_148;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of `2`.
*
* @module @stdlib/constants/math/float64-sqrt-two
* @type {number}
*
* @example
* var SQRT2 = require( '@stdlib/constants/math/float64-sqrt-two' );
* // returns 1.4142135623730951
*/


// MAIN //

/**
* Square root of `2`.
*
* ```tex
* \sqrt{2}
* ```
*
* @constant
* @type {number}
* @default 1.4142135623730951
*/
var SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len


// EXPORTS //

var _$SQRT2_118 = SQRT2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_343( x ) {
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	return 0.16666666666666666 + (x * 0.16666666666666666);
}


// EXPORTS //

var _$evalpoly_343 = __evalpoly_343;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_344( x ) {
	if ( x === 0.0 ) {
		return 0.058333333333333334;
	}
	return 0.058333333333333334 + (x * (0.06666666666666667 + (x * 0.008333333333333333))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_344 = __evalpoly_344;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_345( x ) {
	if ( x === 0.0 ) {
		return 0.0251984126984127;
	}
	return 0.0251984126984127 + (x * (0.026785714285714284 + (x * (0.0017857142857142857 + (x * 0.0001984126984126984))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_345 = __evalpoly_345;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_346( x ) {
	if ( x === 0.0 ) {
		return 0.012039792768959435;
	}
	return 0.012039792768959435 + (x * (0.010559964726631394 + (x * (-0.0011078042328042327 + (x * (0.0003747795414462081 + (x * 0.0000027557319223985893))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_346 = __evalpoly_346;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_347( x ) {
	if ( x === 0.0 ) {
		return 0.003837005972422639;
	}
	return 0.003837005972422639 + (x * (0.00610392115600449 + (x * (-0.0016095979637646305 + (x * (0.0005945867404200738 + (x * (-0.00006270542728876062 + (x * 2.505210838544172e-8))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_347 = __evalpoly_347;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_348( x ) {
	if ( x === 0.0 ) {
		return 0.0032177478835464946;
	}
	return 0.0032177478835464946 + (x * (0.0010898206731540065 + (x * (-0.0012579159844784845 + (x * (0.0006908420797309686 + (x * (-0.00016376804137220805 + (x * (0.0000154012654012654 + (x * 1.6059043836821613e-10))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_348 = __evalpoly_348;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_350( x ) {
	if ( x === 0.0 ) {
		return 0.001743826229834001;
	}
	return 0.001743826229834001 + (x * (0.00003353097688001788 + (x * (-0.0007624513544032393 + (x * (0.0006451304695145635 + (x * (-0.000249472580470431 + (x * (0.000049255746366361444 + (x * (-0.0000039851014346715405 + (x * 7.647163731819816e-13))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_350 = __evalpoly_350;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_351( x ) {
	if ( x === 0.0 ) {
		return 0.0009647274732138864;
	}
	return 0.0009647274732138864 + (x * (-0.0003110108632631878 + (x * (-0.00036307660358786886 + (x * (0.0005140660578834113 + (x * (-0.00029133414466938067 + (x * (0.00009086710793521991 + (x * (-0.000015303004486655377 + (x * (0.0000010914179173496788 + (x * 2.8114572543455206e-15))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_351 = __evalpoly_351;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_352( x ) {
	if ( x === 0.0 ) {
		return 0.0005422926281312969;
	}
	return 0.0005422926281312969 + (x * (-0.0003694266780000966 + (x * (-0.00010230378073700413 + (x * (0.00035764655430568635 + (x * (-0.00028690924218514614 + (x * (0.00012645437628698076 + (x * (-0.000033202652391372056 + (x * (0.000004890304529197534 + (x * (-3.123956959982987e-7 + (x * 8.22063524662433e-18))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_352 = __evalpoly_352;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_239 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$evalpoly_343 = require( './polyval_co14.js' ); */;
/* removed: var _$evalpoly_344 = require( './polyval_co15.js' ); */;
/* removed: var _$evalpoly_345 = require( './polyval_co16.js' ); */;
/* removed: var _$evalpoly_346 = require( './polyval_co17.js' ); */;
/* removed: var _$evalpoly_347 = require( './polyval_co18.js' ); */;
/* removed: var _$evalpoly_348 = require( './polyval_co19.js' ); */;
/* removed: var _$evalpoly_350 = require( './polyval_co20.js' ); */;
/* removed: var _$evalpoly_351 = require( './polyval_co21.js' ); */;
/* removed: var _$evalpoly_352 = require( './polyval_co22.js' ); */;


// VARIABLES //

var c0 = 0.0;

// Workspace for the polynomial coefficients:
var c = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a body series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTBodySeries( df, u ) {
	var idf;
	var v;

	// Body series for small N, start with Eq 56 of Shaw:
	v = _$gammaDeltaRatio_239( df/2, 0.5 ) * _$sqrt_437( df*_$PI_109 ) * ( u-0.5 );

	// Figure out what the coefficients are. They depend only on the degrees of freedom (Eq 57 of Shaw):
	idf = 1.0 / df;
	c[ 1 ] = _$evalpoly_343( idf );
	c[ 2 ] = _$evalpoly_344( idf );
	c[ 3 ] = _$evalpoly_345( idf );
	c[ 4 ] = _$evalpoly_346( idf );
	c[ 5 ] = _$evalpoly_347( idf );
	c[ 6 ] = _$evalpoly_348( idf );
	c[ 7 ] = _$evalpoly_350( idf );
	c[ 8 ] = _$evalpoly_351( idf );
	c[ 9 ] = _$evalpoly_352( idf );

	// Result is then an odd polynomial in v (see Eq 56 of Shaw)...
	return c0 + ( v*_$evalpoly_448( c, v*v ) );
}


// EXPORTS //

var _$inverseStudentsTBodySeries_333 = inverseStudentsTBodySeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaDeltaRatio_239 = require( '@stdlib/math/base/special/gamma-delta-ratio' ); */;
/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

// Array for the coefficients d(k), these depend only on the number of degrees of freedom df, so at least in theory we could tabulate these for fixed df, see p15 of Shaw:
var d = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates Student's t quantiles via a tail series expansion. Tail and body series are due to Shaw.
*
* ## References
*
* -   Shaw, William T. 2006. "Sampling Student's T distribution – use of the inverse cumulative distribution function." _Journal of Computational Finance_ 9 (4): 37–73. [www.mth.kcl.ac.uk/~shaww/web\_page/papers/Tdistribution06.pdf](www.mth.kcl.ac.uk/~shaww/web_page/papers/Tdistribution06.pdf).
*
* @private
* @param {number} df - degrees of freedom
* @param {number} v - function value
* @returns {number} tail value
*/
function inverseStudentsTTailSeries( df, v ) { // eslint-disable-line id-length
	var result;
	var power;
	var div;
	var np2;
	var np4;
	var np6;
	var rn;
	var w;

	// Tail series expansion, see section 6 of Shaw's paper. `w` is calculated using Eq 60:
	w = _$gammaDeltaRatio_239( df/2.0, 0.5 ) * _$sqrt_437( df*_$PI_109 ) * v;

	// Define some variables:
	np2 = df + 2.0;
	np4 = df + 4.0;
	np6 = df + 6.0;

	d[ 0 ] = 1.0;
	d[ 1 ] = -(df+1.0) / (2.0*np2);
	np2 *= (df + 2.0);
	d[ 2 ] = -df * (df+1.0) * (df+3.0) / (8.0*np2*np4);
	np2 *= df + 2.0;
	d[ 3 ] = -df * (df+1.0) * (df+5.0) * (((3.0*df) + 7.0) * df - 2.0) / (48.0*np2*np4*np6); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	d[ 4 ] = -df * (df+1.0) * (df+7.0) * ( (((((15.0*df) + 154.0) * df + 465.0) * df + 286.0) * df - 336.0) * df + 64.0) / (384.0*np2*np4*np6*(df+8.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	d[ 5 ] = -df * (df+1.0) * (df+3.0) * (df+9.0) * (((((((35.0 * df + 452.0) * df+1573.0) * df + 600.0) * df - 2020.0) * df) + 928.0) * df - 128.0) / (1280.0*np2*np4*np6*(df+8.0) * (df+10.0)); // eslint-disable-line max-len, no-mixed-operators
	np2 *= (df + 2.0);
	np4 *= (df + 4.0);
	np6 *= (df + 6.0);
	d[ 6 ] = -df * (df+1.0) * (df+11.0) * ((((((((((((945.0*df) + 31506.0) * df + 425858.0) * df + 2980236.0) * df + 11266745.0) * df + 20675018.0) * df + 7747124.0) * df - 22574632.0) * df - 8565600.0) * df + 18108416.0) * df - 7099392.0) * df + 884736.0) / (46080.0*np2*np4*np6*(df+8.0) * (df+10.0) * (df+12.0)); // eslint-disable-line max-len, no-mixed-operators

	// Now bring everything together to provide the result this is Eq 62 of Shaw:
	rn = _$sqrt_437( df );
	div = _$pow_396( rn*w, 1.0/df );
	power = div * div;
	result = _$evalpoly_448( d, power );
	result *= rn;
	result /= div;
	return -result;
}


// EXPORTS //

var _$inverseStudentsTTailSeries_335 = inverseStudentsTTailSeries;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/* eslint-disable no-mixed-operators */

'use strict';

// MODULES //

/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Evaluates Student's t quantiles via a method due to Hill.
*
* ## References
*
* -   Hill, G. W. 1970. "Algorithm 396: Student's T-Quantiles." _Communications of the ACM_ 13 (10). New York, NY, USA: ACM: 619–20. doi:[10.1145/355598.355600](https://doi.org/10.1145/355598.355600).
*
* @private
* @param {PositiveNumber} ndf - degrees of freedom
* @param {Probability} u - input probability
* @returns {number} function value
*/
function inverseStudentsTHill( ndf, u ) {
	var a;
	var b;
	var c;
	var d;
	var q;
	var x;
	var y;

	if ( ndf > 1e20 ) {
		return -_$erfcinv_210( 2 * u ) * _$SQRT2_118;
	}
	a = 1.0 / ( ndf - 0.5 );
	b = 48.0 / (a * a);
	c = ( ( ( ( (20700.0*a/b) - 98.0 ) * a ) - 16.0 ) * a ) + 96.36;
	d = ( ( ( (94.5/(b+c)) - 3.0 ) / b ) + 1.0 ) * _$sqrt_437( a * _$HALF_PI_93 ) * ndf;
	y = _$pow_396( d * 2.0 * u, 2.0 / ndf );

	if ( y > ( 0.05 + a ) ) {
		// Asymptotic inverse expansion about normal:
		x = -_$erfcinv_210( 2.0 * u ) * _$SQRT2_118;
		y = x * x;

		if ( ndf < 5.0 ) {
			c += 0.3 * ( ndf-4.5 ) * ( x + 0.6 );
		}
		c += ( ( ( ( ( ( (0.05*d*x)-5.0 ) * x ) - 7.0 ) * x )- 2.0 ) * x ) + b;
		y = ((((((0.4*y+6.3)*y)+36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;
		y = _$expm1_228( a * y * y );
	} else {
		y = ((1.0 / ( ( (ndf+6.0) / (ndf*y) - 0.089 * d - 0.822 ) *
		(ndf+2.0) * 3.0 ) + 0.5 / (ndf+4.0)) * y - 1.0) *
		(ndf+1.0) / (ndf+2.0) + 1.0 / y;
	}
	q = _$sqrt_437( ndf * y );
	return -q;
}


// EXPORTS //

var _$inverseStudentsTHill_334 = inverseStudentsTHill;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$acos_149 = require( '@stdlib/math/base/special/acos' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cos_180 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$inverseStudentsTBodySeries_333 = require( './inverse_students_t_body_series.js' ); */;
/* removed: var _$inverseStudentsTTailSeries_335 = require( './inverse_students_t_tail_series.js' ); */;
/* removed: var _$inverseStudentsTHill_334 = require( './inverse_students_t_hill.js' ); */;


// VARIABLES //

var DF_THRESHOLD = 0x10000000; // 2^28
var __ONE_THIRD_332 = 1.0 / 3.0;
var EXP = ( 2.0 * 53.0 ) / 3.0;
var C = 0.85498797333834849467655443627193;


// MAIN //

/**
* Evaluates Student's t quantiles.
*
* @private
* @param {PositiveNumber} df - degrees of freedom
* @param {Probability} u - input probability
* @param {Probability} v - probability equal to `1-u`
* @returns {number} function value
*/
function inverseStudentsT( df, u, v ) {
	var crossover;
	var tolerance;
	var rootAlpha;
	var invert;
	var result;
	var alpha;
	var tmp;
	var p0;
	var p2;
	var p4;
	var p5;
	var p;
	var r;
	var x;
	var a;
	var b;

	result = 0;
	if ( u > v ) {
		// Function is symmetric, so invert it:
		tmp = v;
		v = u;
		u = tmp;
		invert = true;
	} else {
		invert = false;
	}
	if ( _$floor_236(df) === df && df < 20 ) {
		// We have integer degrees of freedom, try for the special cases first:
		tolerance = _$ldexp_374( 1.0, EXP );

		switch ( _$floor_236( df ) ) {
		case 1:
			// `df = 1` is the same as the Cauchy distribution, see Shaw Eq 35:
			if ( u === 0.5 ) {
				result = 0.0;
			} else {
				result = -_$cos_180( _$PI_109 * u ) / _$sin_428( _$PI_109 * u );
			}
			break;
		case 2:
			// `df = 2` has an exact result, see Shaw Eq 36:
			result = ( (2.0*u) - 1.0 ) / _$sqrt_437( 2.0 * u * v );
			break;
		case 4:
			// `df = 4` has an exact result, see Shaw Eq 38 & 39:
			alpha = 4.0 * u * v;
			rootAlpha = _$sqrt_437( alpha );
			r = 4 * _$cos_180( _$acos_149( rootAlpha ) / 3.0 ) / rootAlpha;
			x = _$sqrt_437( r - 4.0 );
			result = ( u - 0.5 < 0.0 ) ? -x : x;
			break;
		case 6:
			// We get numeric overflow in this area:
			if ( u < 1.0e-150 ) {
				return ( ( invert ) ? -1 : 1 ) * _$inverseStudentsTHill_334( df, u );
			}
			// Newton-Raphson iteration of a polynomial case, choice of seed value is taken from Shaw's online supplement:
			a = 4.0 * ( u - (u*u) );// 1 - 4 * (u - 0.5f) * (u - 0.5f);
			b = _$pow_396( a, __ONE_THIRD_332 );
			p = 6.0 * ( 1.0 + ( C * ( (1.0/b) - 1.0 ) ) );
			do {
				p2 = p * p;
				p4 = p2 * p2;
				p5 = p * p4;
				p0 = p;

				// Next term is given by Eq 41:
				p = 2.0 * ( (8.0*a*p5) - (270.0*p2) + 2187 ) /
					( 5.0 * ( (4.0*a*p4) - (216.0*p) - 243.0 ) );
			} while ( _$abs_147( (p - p0) / p ) > tolerance );

			// Use Eq 45 to extract the result:
			p = _$sqrt_437( p - df );
			result = ( u - 0.5 < 0.0 ) ? -p : p;
			break;
		default:
			if ( df > DF_THRESHOLD ) { // 2^28
				result = _$erfcinv_210( 2.0 * u ) * _$SQRT2_118;
			} else if ( df < 3 ) {
				// Use a roughly linear scheme to choose between Shaw's tail series and body series:
				crossover = 0.2742 - ( df * 0.0242143 );
				if ( u > crossover ) {
					result = _$inverseStudentsTBodySeries_333( df, u );
				} else {
					result = _$inverseStudentsTTailSeries_335( df, u );
				}
			} else {
				// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
				crossover = _$ldexp_374( 1.0, _$round_424( df / -0.654 ) );
				if ( u > crossover ) {
					result = _$inverseStudentsTHill_334( df, u );
				} else {
					result = _$inverseStudentsTTailSeries_335( df, u );
				}
			}
		}
	} else if ( df > DF_THRESHOLD ) {
		result = -_$erfcinv_210( 2.0 * u ) * _$SQRT2_118;
	} else if ( df < 3 ) {
		// Use a roughly linear scheme to choose between Shaw's tail series and body series:
		crossover = 0.2742 - ( df * 0.0242143 );
		if ( u > crossover ) {
			result = _$inverseStudentsTBodySeries_333( df, u );
		} else {
			result = _$inverseStudentsTTailSeries_335( df, u );
		}
	} else {
		// Use Hill's method except in the extreme tails where we use Shaw's tail series. The crossover point is roughly exponential in -df:
		crossover = _$ldexp_374( 1.0, _$round_424( df / -0.654 ) );
		if ( u > crossover ) {
			result = _$inverseStudentsTHill_334( df, u );
		} else {
			result = _$inverseStudentsTTailSeries_335( df, u );
		}
	}
	return ( invert ) ? -result : result;
}


// EXPORTS //

var _$inverseStudentsT_332 = inverseStudentsT;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/t_distribution_inv.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$inverseStudentsT_332 = require( './inverse_students_t.js' ); */;


// MAIN //

/**
* Returns the inverse of the incomplete beta function via the Student t distribution.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {Probability} p - probability value
* @param {Object} py - placeholder object holding one minus the returned value
* @returns {number} function value
*/
function findIBetaInvFromTDist( a, p, py ) {
	var df;
	var u;
	var v;
	var t;

	u = p / 2.0;
	v = 1.0 - u;
	df = a * 2.0;
	t = _$inverseStudentsT_332( df, u, v );
	if ( py ) {
		py.value = t * t / ( df + ( t*t ) );
	}
	return df / ( df + ( t*t ) );
}


// EXPORTS //

var _$findIBetaInvFromTDist_328 = findIBetaInvFromTDist;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// VARIABLES //

// Workspaces for the polynomial coefficients:
var __workspace_361 = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var terms = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the first method by Temme (described in section 2).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} z - function parameter
* @returns {number} function value
*/
function temme1( a, b, z ) {
	var eta0;
	var eta2;
	var eta;
	var B2;
	var B3;
	var B;
	var c;

	// Get the first approximation for eta from the inverse error function (Eq: 2.9 and 2.10):
	eta0 = _$erfcinv_210( 2.0 * z );
	eta0 /= -_$sqrt_437( a / 2.0 );

	terms[ 0 ] = eta0;

	// Calculate powers:
	B = b - a;
	B2 = B * B;
	B3 = B2 * B;

	// Calculate correction terms:

	// See eq following 2.15:
	__workspace_361[ 0 ] = -B * _$SQRT2_118 / 2;
	__workspace_361[ 1 ] = ( 1 - (2.0*B) ) / 8.0;
	__workspace_361[ 2 ] = -(B * _$SQRT2_118 / 48.0);
	__workspace_361[ 3 ] = -1.0 / 192.0;
	__workspace_361[ 4 ] = -B * _$SQRT2_118 / 3840.0;
	__workspace_361[ 5 ] = 0.0;
	__workspace_361[ 6 ] = 0.0;
	terms[ 1 ] = _$evalpoly_448( __workspace_361, eta0 );

	// Eq Following 2.17:
	__workspace_361[ 0 ] = B * _$SQRT2_118 * ( (3.0*B) - 2.0) / 12.0;
	__workspace_361[ 1 ] = ( (20.0*B2) - (12.0*B) + 1.0 ) / 128.0;
	__workspace_361[ 2 ] = B * _$SQRT2_118 * ( (20.0*B) - 1.0) / 960.0;
	__workspace_361[ 3 ] = ( (16.0*B2) + (30.0*B) - 15.0) / 4608.0;
	__workspace_361[ 4 ] = B * _$SQRT2_118 * ( (21.0*B) + 32) / 53760.0;
	__workspace_361[ 5 ] = (-(32.0*B2) + 63.0) / 368640.0;
	__workspace_361[ 6 ] = -B * _$SQRT2_118 * ( (120.0*B) + 17.0) / 25804480.0;
	terms[ 2 ] = _$evalpoly_448( __workspace_361, eta0 );

	// Eq Following 2.17:
	__workspace_361[ 0 ] = B * _$SQRT2_118 * ( (-75*B2) + (80.0*B) - 16.0) / 480.0;
	__workspace_361[ 1 ] = ( (-1080.0*B3) + (868.0*B2) - (90.0*B) - 45.0) / 9216.0;
	__workspace_361[ 2 ] = B * _$SQRT2_118 * ( (-1190.0*B2) + (84.0*B) + 373.0) / 53760.0;
	__workspace_361[ 3 ] = ( (-2240.0*B3)-(2508.0*B2)+(2100.0*B)-165.0 ) / 368640.0;
	__workspace_361[ 4 ] = 0.0;
	__workspace_361[ 5 ] = 0.0;
	__workspace_361[ 6 ] = 0.0;
	terms[ 3 ] = _$evalpoly_448( __workspace_361, eta0 );

	// Bring them together to get a final estimate for eta:
	eta = _$evalpoly_448( terms, 1.0/a );

	// Now we need to convert eta to the return value `x`, by solving the appropriate quadratic equation:
	eta2 = eta * eta;
	c = -_$exp_225( -eta2 / 2.0 );
	if ( eta2 === 0.0 ) {
		return 0.5;
	}
	return ( 1.0 + ( eta * _$sqrt_437( ( 1.0+c ) / eta2 ) ) ) / 2.0;
}


// EXPORTS //

var _$temme1_361 = temme1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;


// VARIABLES //

var BIG = _$FLOAT64_MAX_104 / 4.0;


// MAIN //

/**
* Helper function used by root finding code to convert `eta` to `x`.
*
* @private
* @param {number} t - first parameter
* @param {number} a - second parameter
* @returns {Function} root function
*/
function temmeRootFinder( t, a ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - function value
	* @returns {Array} function roots
	*/
	function roots( x ) {
		var f1;
		var f;
		var y;

		y = 1.0 - x;
		if ( y === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		if ( x === 0.0 ) {
			return [ -BIG, -BIG ];
		}
		f = _$ln_376( x ) + ( a * _$ln_376( y ) ) + t;
		f1 = ( 1.0 / x ) - ( a / y );
		return [ f, f1 ];
	}
}


// EXPORTS //

var _$temmeRootFinder_360 = temmeRootFinder;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the signum function.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var sign = signum( -5.0 );
* // returns -1.0
*
* @example
* var sign = signum( 5.0 );
* // returns 1.0
*
* @example
* var sign = signum( -0.0 );
* // returns -0.0
*
* @example
* var sign = signum( 0.0 );
* // returns 0.0
*
* @example
* var sign = signum( NaN );
* // returns NaN
*/
function signum( x ) {
	if ( x === 0.0 || _$isnan_130( x ) ) {
		return x; // addresses both +-0
	}
	return ( x < 0.0 ) ? -1.0 : 1.0;
}


// EXPORTS //

var _$signum_427 = signum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the signum function.
*
* @module @stdlib/math/base/special/signum
*
* @example
* var signum = require( '@stdlib/math/base/special/signum' );
*
* var sign = signum( -5.0 );
* // returns -1.0
*
* sign = signum( 5.0 );
* // returns 1.0
*
* sign = signum( -0.0 );
* // returns -0.0
*
* sign = signum( 0.0 );
* // returns 0.0
*
* sign = signum( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$signum_427 = require( './signum.js' ); */;


// EXPORTS //

var _$signum_426 = _$signum_427;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;


// MAIN //

/**
* Performs root finding via second order Newton-Raphson iteration.
*
* @private
* @param {Array} fun - two-element array of the function and its first derivative
* @param {number} guess - initial starting value.
* @param {number} min - minimum possible value for the result,used as initial lower bracket.
* @param {number} max - maximum possible value for the result, used as initial upper bracket.
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function newtonRaphsonIterate( fun, guess, min, max, digits, maxIter ) {
	var f0last;
	var delta1;
	var delta2;
	var factor;
	var result;
	var count;
	var delta;
	var res;
	var f0;
	var f1;

	f0 = 0.0;
	f0last = 0.0;
	result = guess;

	factor = _$ldexp_374( 1.0, 1.0 - digits );
	delta = _$FLOAT64_MAX_104;
	delta1 = _$FLOAT64_MAX_104;
	delta2 = _$FLOAT64_MAX_104;

	count = maxIter;
	do {
		f0last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun(result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		count -= 1;
		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === min ) {
					guess = max;
				} else {
					guess = min;
				}
				f0last = fun( guess );
				delta = guess - result;
			}
			if ( _$signum_426(f0last) * _$signum_426(f0) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = (result - min) / 2.0;
				} else {
					delta = (result - max) / 2.0;
				}
			} else if ( delta < 0 ) {
				delta = (result - max) / 2.0;
			} else {
				delta = (result - min) / 2.0;
			}
		} else {
			delta = f0 / f1;
		}
		if ( _$abs_147(delta * 2.0) > _$abs_147(delta2) ) {
			// Last two steps haven't converged, try bisection:
			delta = ( delta > 0.0 ) ? (result-min) / 2.0 : (result-max) / 2.0;
		}
		guess = result;
		result -= delta;
		if ( result <= min ) {
			delta = 0.5 * (guess - min);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		} else if ( result >= max ) {
			delta = 0.5 * (guess - max);
			result = guess - delta;
			if ( result === min || result === max ) {
				break;
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			max = guess;
		} else {
			min = guess;
		}
	}
	while ( count && ( _$abs_147(result * factor) < _$abs_147(delta) ) );

	return result;
}


// EXPORTS //

var _$newtonRaphsonIterate_337 = newtonRaphsonIterate;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_338( x ) {
	if ( x === 0.0 ) {
		return -1.0;
	}
	return -1.0 + (x * (-5.0 + (x * 5.0)));
}


// EXPORTS //

var _$evalpoly_338 = __evalpoly_338;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_342( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));
}


// EXPORTS //

var _$evalpoly_342 = __evalpoly_342;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_349( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (21.0 + (x * (-69.0 + (x * 46.0)))));
}


// EXPORTS //

var _$evalpoly_349 = __evalpoly_349;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_353( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (-2.0 + (x * (33.0 + (x * (-62.0 + (x * 31.0)))))));
}


// EXPORTS //

var _$evalpoly_353 = __evalpoly_353;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_354( x ) {
	if ( x === 0.0 ) {
		return 25.0;
	}
	return 25.0 + (x * (-52.0 + (x * (-17.0 + (x * (88.0 + (x * (-115.0 + (x * 46.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_354 = __evalpoly_354;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_355( x ) {
	if ( x === 0.0 ) {
		return 7.0;
	}
	return 7.0 + (x * (12.0 + (x * (-78.0 + (x * 52.0)))));
}


// EXPORTS //

var _$evalpoly_355 = __evalpoly_355;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_356( x ) {
	if ( x === 0.0 ) {
		return -7.0;
	}
	return -7.0 + (x * (2.0 + (x * (183.0 + (x * (-370.0 + (x * 185.0)))))));
}


// EXPORTS //

var _$evalpoly_356 = __evalpoly_356;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_357( x ) {
	if ( x === 0.0 ) {
		return -533.0;
	}
	return -533.0 + (x * (776.0 + (x * (-1835.0 + (x * (10240.0 + (x * (-13525.0 + (x * 5410.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_357 = __evalpoly_357;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_358( x ) {
	if ( x === 0.0 ) {
		return -1579.0;
	}
	return -1579.0 + (x * (3747.0 + (x * (-3372.0 + (x * (-15821.0 + (x * (45588.0 + (x * (-45213.0 + (x * 15071.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_358 = __evalpoly_358;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_359( x ) {
	if ( x === 0.0 ) {
		return 449.0;
	}
	return 449.0 + (x * (-1259.0 + (x * (-769.0 + (x * (6686.0 + (x * (-9260.0 + (x * 3704.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_359 = __evalpoly_359;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_339( x ) {
	if ( x === 0.0 ) {
		return 63149.0;
	}
	return 63149.0 + (x * (-151557.0 + (x * (140052.0 + (x * (-727469.0 + (x * (2239932.0 + (x * (-2251437.0 + (x * 750479.0))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_339 = __evalpoly_339;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_340( x ) {
	if ( x === 0.0 ) {
		return 29233.0;
	}
	return 29233.0 + (x * (-78755.0 + (x * (105222.0 + (x * (146879.0 + (x * (-1602610.0 + (x * (3195183.0 + (x * (-2554139.0 + (x * 729754.0))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_340 = __evalpoly_340;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_341( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (-13.0 + (x * 13.0)));
}


// EXPORTS //

var _$evalpoly_341 = __evalpoly_341;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$cos_180 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$temmeRootFinder_360 = require( './root_finder.js'); */;
/* removed: var _$newtonRaphsonIterate_337 = require( './newton_raphson.js' ); */;
/* removed: var _$evalpoly_338 = require( './polyval_co1.js' ); */;
/* removed: var _$evalpoly_349 = require( './polyval_co2.js' ); */;
/* removed: var _$evalpoly_353 = require( './polyval_co3.js' ); */;
/* removed: var _$evalpoly_354 = require( './polyval_co4.js' ); */;
/* removed: var _$evalpoly_355 = require( './polyval_co5.js' ); */;
/* removed: var _$evalpoly_356 = require( './polyval_co6.js' ); */;
/* removed: var _$evalpoly_357 = require( './polyval_co7.js' ); */;
/* removed: var _$evalpoly_358 = require( './polyval_co8.js' ); */;
/* removed: var _$evalpoly_359 = require( './polyval_co9.js' ); */;
/* removed: var _$evalpoly_339 = require( './polyval_co10.js' ); */;
/* removed: var _$evalpoly_340 = require( './polyval_co11.js' ); */;
/* removed: var _$evalpoly_341 = require( './polyval_co12.js' ); */;
/* removed: var _$evalpoly_342 = require( './polyval_co13.js' ); */;


// VARIABLES //

// Workspaces for polynomial coefficients:
var __workspace_362 = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
var __terms_362 = [ 0.0, 0.0, 0.0, 0.0 ];


// MAIN //

/**
* Carries out the second method by Temme (described in section 3).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {number} z - function parameter
* @param {number} r - function parameter
* @param {number} theta - function parameter
* @returns {number} function value
*/
function temme2( z, r, theta ) {
	var upper;
	var lower;
	var alpha;
	var roots;
	var eta0;
	var eta;
	var sc7;
	var sc6;
	var sc5;
	var sc4;
	var sc3;
	var sc2;
	var sc;
	var lu;
	var s2;
	var c2;
	var c;
	var s;
	var u;
	var x;

	// Get first estimate for eta, see Eq 3.9 and 3.10, but note there is a typo in Eq 3.10:
	eta0 = _$erfcinv_210( 2.0*z ) / (-_$sqrt_437( r/2.0 ));

	s = _$sin_428( theta );
	c = _$cos_180( theta );

	// Now we need to perturb eta0 to get eta, which we do by evaluating the polynomial in 1/r at the bottom of page 151, to do this we first need the error terms e1, e2 e3 which we'll fill into the array "terms".  Since these terms are themselves polynomials, we'll need another array "workspace" to calculate those...
	__terms_362[ 0 ] = eta0;

	// Some powers of sin(theta) cos(theta) that we'll need later:
	s2 = s * s;
	c2 = c * c;
	sc = s * c;
	sc2 = sc * sc;
	sc3 = sc2 * sc;
	sc4 = sc2 * sc2;
	sc5 = sc2 * sc3;
	sc6 = sc3 * sc3;
	sc7 = sc4 * sc3;

	// Calculate e1 and put it in terms[1], see the middle of page 151:
	__workspace_362[ 0 ] = ((2.0*s2) - 1.0) / ( 3.0*sc );
	__workspace_362[ 1 ] = -_$evalpoly_338( s2 ) / (36.0*sc2);
	__workspace_362[ 2 ] = _$evalpoly_349( s2 ) / (1620.0*sc3);
	__workspace_362[ 3 ] = _$evalpoly_353( s2 ) / (6480.0*sc4);
	__workspace_362[ 4 ] = _$evalpoly_354( s2 ) / (90720.0*sc5);
	__workspace_362[ 5 ] = 0.0;
	__terms_362[ 1 ] = _$evalpoly_448( __workspace_362, eta0 );

	// Now evaluate e2 and put it in terms[2]:
	__workspace_362[ 0 ] = -_$evalpoly_355( s2 ) / (405.0*sc3);
	__workspace_362[ 1 ] = _$evalpoly_356( s2 ) / (2592.0*sc4);
	__workspace_362[ 2 ] = -_$evalpoly_357( s2 ) / (204120.0*sc5);
	__workspace_362[ 3 ] = -_$evalpoly_358( s2 ) / (2099520.0*sc6);
	__workspace_362[ 4 ] = 0.0;
	__workspace_362[ 5 ] = 0.0;
	__terms_362[ 2 ] = _$evalpoly_448( __workspace_362, eta0 );

	// And e3, and put it in terms[3]:
	__workspace_362[ 0 ] = _$evalpoly_359( s2 ) / (102060.0*sc5);
	__workspace_362[ 1 ] = -_$evalpoly_339( s2 ) / (20995200.0*sc6);
	__workspace_362[ 2 ] = _$evalpoly_340( s2 ) / (36741600.0*sc7);
	__workspace_362[ 3 ] = 0.0;
	__workspace_362[ 4 ] = 0.0;
	__workspace_362[ 5 ] = 0.0;
	__terms_362[ 3 ] = _$evalpoly_448( __workspace_362, eta0 );

	// Bring the correction terms together to evaluate eta; this is the last equation on page 151:
	eta = _$evalpoly_448( __terms_362, 1.0/r );

	// Now that we have eta we need to back solve for x, we seek the value of x that gives eta in Eq 3.2. The two methods used are described in section 5. Begin by defining a few variables we'll need later:
	alpha = c / s;
	alpha *= alpha;
	lu = ( -( eta*eta )/( 2.0*s2 ) ) + _$ln_376(s2) + ( c2*_$ln_376(c2)/s2 );

	// Temme doesn't specify what value to switch on here, but this seems to work pretty well:
	if ( _$abs_147(eta) < 0.7 ) {
		// Small eta use the expansion Temme gives in the second equation of section 5, it's a polynomial in eta:
		__workspace_362[ 0 ] = s2;
		__workspace_362[ 1 ] = sc;
		__workspace_362[ 2 ] = (1.0-(2.0*s2)) / 3.0;
		__workspace_362[ 3 ] = _$evalpoly_341( s2 ) / ( 36.0*sc );
		__workspace_362[ 4 ] = _$evalpoly_342( s2 ) / ( 270.0*sc2 );
		__workspace_362[ 5 ] = 0.0;
		x = _$evalpoly_448( __workspace_362, eta );
	} else {
		// If eta is large we need to solve Eq 3.2 more directly, begin by getting an initial approximation for x from the last equation on page 155, this is a polynomial in u:
		u = _$exp_225( lu );
		__workspace_362[ 0 ] = u;
		__workspace_362[ 1 ] = alpha;
		__workspace_362[ 2 ] = 0.0;
		__workspace_362[ 3 ] = 3.0 * alpha * ((3.0*alpha)+1.0) / 6.0;
		__workspace_362[ 4 ] = 4.0 * alpha * ((4.0*alpha)+1.0) * ((4.0*alpha)+2.0) / 24.0; // eslint-disable-line max-len
		__workspace_362[ 5 ] = 5.0 * alpha * ((5.0*alpha)+1.0) * ((5.0*alpha)+2.0) * ((5.0*alpha)+3.0) / 120.0; // eslint-disable-line max-len
		x = _$evalpoly_448( __workspace_362, u );

		// At this point we may or may not have the right answer, Eq-3.2 has two solutions for x for any given eta, however the mapping in 3.2 is 1:1 with the sign of eta and x-sin^2(theta) being the same. So we can check if we have the right root of 3.2, and if not switch x for 1-x.  This transformation is motivated by the fact that the distribution is *almost* symmetric so 1-x will be in the right ball park for the solution:
		if ( (x-s2)*eta < 0.0 ) {
			x = 1.0 - x;
		}
	}
	// The final step is a few Newton-Raphson iterations to clean up our approximation for x, this is pretty cheap in general, and very cheap compared to an incomplete beta evaluation. The limits set on x come from the observation that the sign of eta and x-sin^2(theta) are the same.
	if ( eta < 0.0 ) {
		lower = 0.0;
		upper = s2;
	} else {
		lower = s2;
		upper = 1.0;
	}
	// If our initial approximation is out of bounds then bisect:
	if ( x < lower || x > upper ) {
		x = (lower+upper) / 2.0;
	}
	roots = _$temmeRootFinder_360( -lu, alpha );

	// And iterate:
	x = _$newtonRaphsonIterate_337( roots, x, lower, upper, 32, 100 );
	return x;
}


// EXPORTS //

var _$temme2_362 = temme2;

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var __d_1618 = h * 24;
var y = __d_1618 * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var _$ms_1618 = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * __d_1618;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= __d_1618) {
    return Math.round(ms / __d_1618) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, __d_1618, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var _$debug_1617 = {};

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

_$debug_1617 = _$debug_1617 = createDebug.debug = createDebug['default'] = createDebug;
_$debug_1617.coerce = coerce;
_$debug_1617.disable = disable;
_$debug_1617.enable = enable;
_$debug_1617.enabled = enabled;
_$debug_1617.humanize = _$ms_1618;

/**
 * The currently active debug mode names, and names to skip.
 */

_$debug_1617.names = [];
_$debug_1617.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

_$debug_1617.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return _$debug_1617.colors[Math.abs(hash) % _$debug_1617.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = _$debug_1617.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = _$debug_1617.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    _$debug_1617.formatArgs.call(self, args);

    var logFn = debug.log || _$debug_1617.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = _$debug_1617.enabled(namespace);
  debug.useColors = _$debug_1617.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof _$debug_1617.init) {
    _$debug_1617.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  _$debug_1617.save(namespaces);

  _$debug_1617.names = [];
  _$debug_1617.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      _$debug_1617.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      _$debug_1617.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  _$debug_1617.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = _$debug_1617.skips.length; i < len; i++) {
    if (_$debug_1617.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = _$debug_1617.names.length; i < len; i++) {
    if (_$debug_1617.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

var _$browser_1619 = {};
// shim for using process in browser
var process = _$browser_1619 = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

var _$browser_1616 = {};
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

_$browser_1616 = _$browser_1616 = _$debug_1617;
_$browser_1616.log = log;
_$browser_1616.formatArgs = formatArgs;
_$browser_1616.save = save;
_$browser_1616.load = load;
_$browser_1616.useColors = useColors;
_$browser_1616.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

_$browser_1616.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

_$browser_1616.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + _$browser_1616.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      _$browser_1616.storage.removeItem('debug');
    } else {
      _$browser_1616.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = _$browser_1616.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

_$browser_1616.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,_$browser_1619)
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum single-precision floating-point number.
*
* @module @stdlib/constants/math/float32-max
* @type {number}
*
* @example
* var FLOAT32_MAX = require( '@stdlib/constants/math/float32-max' );
* // returns 3.4028234663852886e+38
*/


// MAIN //

/**
* Maximum single-precision floating-point number.
*
* ## Notes
*
* The maximum is given by
*
* ```tex
* 2^{127} (2 - 2^{-23})
* ```
*
* @constant
* @type {number}
* @default 3.4028234663852886e+38
* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_MAX = 3.4028234663852886e+38;


// EXPORTS //

var _$FLOAT32_MAX_84 = FLOAT32_MAX;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$browser_1616 = require( 'debug' ); */;
/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT32_MAX_84 = require( '@stdlib/constants/math/float32-max' ); */;


// VARIABLES //

var debug = _$browser_1616( 'gammaincinv:higher_newton' );


// MAIN //

/**
* Implementation of the high order Newton-like method.
*
* @private
* @param {number} x0 - initial value
* @param {number} a - scale parameter
* @param {number} m - indicator
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @param {number} lgama - logarithm of scale parameter
* @param {number} invfp - one over `fp`
* @param {boolean} pcase - boolean indicating whether p < 0.5
* @returns {number} function value of the inverse
*/
function higherNewton( x0, a, m, p, q, lgama, invfp, pcase ) {
	var dlnr;
	var xini;
	var ck0;
	var ck1;
	var ck2;
	var a2;
	var x2;
	var px;
	var qx;
	var xr;
	var t;
	var n;
	var r;
	var x;

	x = x0;
	t = 1;
	n = 1;
	a2 = a * a;
	xini = x0;
	do {
		x = x0;
		x2 = x * x;
		if ( m === 0 ) {
			dlnr = ( ( 1.0-a ) * _$ln_376( x ) ) + x + lgama;
			if ( dlnr > _$ln_376( _$FLOAT32_MAX_84 ) ) {
				debug( 'Warning: overflow problems in one or more steps of the computation. The initial approximation to the root is returned.' );
				return xini;
			}
			r = _$exp_225( dlnr );
		} else {
			r = -invfp * x;
		}
		if ( pcase ) {
			// Call: gammainc( x, s[, regularized = true ][, upper = false ] )
			px = _$gammainc_263( x, a, true, false );
			ck0 = -r * ( px - p );
		} else {
			// Call: gammainc( x, s[, regularized = true ][, upper = true ] )
			qx = _$gammainc_263( x, a, true, true );
			ck0 = r * ( qx - q );
		}
		r = ck0;
		if ( ( p > 1e-120 ) || ( n > 1 ) ) {
			ck1 = 0.5 * ( x - a + 1.0 ) / x;
			ck2 = ( (2*x2) - (4*x*a) + (4*x) + (2*a2) - (3*a) + 1 ) / x2;
			ck2 /= 6.0;
			x0 = x + ( r * ( 1.0 + ( r * ( ck1 + (r*ck2) ) ) ) );
		} else {
			x0 = x + r;
		}
		t = _$abs_147( ( x/x0 ) - 1.0 );
		n += 1;
		x = x0;
		if ( x < 0 ) {
			x = xini;
			n = 100;
		}
	} while ( ( ( t > 2e-14 ) && ( n < 35 ) ) );
	if ( ( t > 2e-14 ) || ( n > 99 ) ) {
		debug( 'Warning: the number of iterations in the Newton method reached the upper limit N=35. The last value obtained for the root is given as output.' );
	}
	xr = x || 0;
	return xr;
}


// EXPORTS //

var _$higherNewton_287 = higherNewton;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_290( x ) {
	if ( x === 0.0 ) {
		return 0.0;
	}
	return 0.0 + (x * (1.0 + (x * (1.0 + (x * (1.5 + (x * (2.6666666666666665 + (x * (5.208333333333333 + (x * 10.8))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_290 = __evalpoly_290;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_291( x ) {
	if ( x === 0.0 ) {
		return 1.0;
	}
	return 1.0 + (x * (1.0 + (x * (0.3333333333333333 + (x * (0.027777777777777776 + (x * (-0.003703703703703704 + (x * (0.0002314814814814815 + (x * 0.00005878894767783657))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_291 = __evalpoly_291;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$evalpoly_290 = require( './polyval_ak1.js' ); */;
/* removed: var _$evalpoly_291 = require( './polyval_ak2.js' ); */;


// VARIABLES //

var THRESHOLD = 1.0e-8;
var ONEO12 = 0.0833333333333333333333333333333;
var ONEO120 = 0.00833333333333333333333333333333;

// Polynomial coefficient workspace:
var AK = [ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns the positive number satisfying \\( \eta^2/2=\lambda-1-\ln(\lambda) \\) with \\( \operatorname{sign}(\lambda-1)=\operatorname{sign}(\eta) \\).
*
* @private
* @param {number} eta - eta value
* @returns {number} value satisfying equation
*/
function lambdaeta( eta ) {
	var L2;
	var L3;
	var L4;
	var L5;
	var la;
	var L;
	var q;
	var r;
	var s;

	s = eta * eta * 0.5;
	if ( eta === 0.0 ) {
		la = 0.0;
	}
	else if ( eta < -1.0 ) {
		r = _$exp_225( -1.0 - s );
		la = _$evalpoly_290( r );
	}
	else if ( eta < 1.0 ) {
		r = eta;
		la = _$evalpoly_291( r );
	}
	else {
		r = 11.0 + s;
		L = _$ln_376( r );
		la = r + L;
		r = 1.0 / r;
		L2 = L * L;
		L3 = L2 * L;
		L4 = L3 * L;
		L5 = L4 * L;
		AK[ 1 ] = ( 2.0-L ) * 0.5;
		AK[ 2 ] = ( ( -9.0*L ) + 6.0 + ( 2.0*L2 ) ) / 6.0;
		AK[ 3 ] = -( (3*L3)+ (36*L) - (22*L2) - 12 ) * ONEO12;
		AK[ 4 ] = ( 60.0 + (350.0*L2) - (300.0*L) - (125.0*L3) + (12.0*L4) ) / 60.0; // eslint-disable-line max-len
		AK[ 5 ] = -(-120 - (274*L4) + (900*L) - (1700*L2) + (1125*L3) + (20*L5)) * ONEO120; // eslint-disable-line max-len
		la += ( L * r * _$evalpoly_448( AK, r ) );
	}
	r = 1.0;
	if (
		( eta > -3.5 && eta < -0.03 ) ||
		( eta > 0.03 && eta < 40.0 )
	) {
		r = 1.0;
		q = la;
		do {
			la = q * ( s+_$ln_376(q) ) / ( q-1.0 );
			r = _$abs_147( ( q/la ) - 1.0 );
			q = la;
		} while ( r > THRESHOLD );
	}
	return la;
}


// EXPORTS //

var _$lambdaeta_289 = lambdaeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

// Chebyshev polynomial coefficients...
var A = [
	1.996379051590076518221,
	-0.17971032528832887213e-2,
	0.131292857963846713e-4,
	-0.2340875228178749e-6,
	0.72291210671127e-8,
	-0.3280997607821e-9,
	0.198750709010e-10,
	-0.15092141830e-11,
	0.1375340084e-12,
	-0.145728923e-13,
	0.17532367e-14,
	-0.2351465e-15,
	0.346551e-16,
	-0.55471e-17,
	0.9548e-18,
	-0.1748e-18,
	0.332e-19,
	-0.58e-20
];


// MAIN //

/**
* Computes the sum of a Chebyshev polynomial.
*
* @private
* @param {PositiveInteger} n - degree of polynomial
* @param {number} t - input value
* @returns {number} Chebyshev sum
*/
function chepolsum( n, t ) {
	var tt;
	var u0;
	var u1;
	var u2;
	var k;

	u0 = 0.0;
	u1 = 0.0;
	tt = t + t;
	k = n;
	do {
		u2 = u1;
		u1 = u0;
		u0 = ( tt*u1 ) - u2 + A[ k ];
		k -= 1;
	} while ( k >= 0 );
	return ( u0-u2 ) / 2.0;
}


// EXPORTS //

var _$chepolsum_280 = chepolsum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_292( x ) {
	if ( x === 0.0 ) {
		return 0.025721014990011306;
	}
	return 0.025721014990011306 + (x * (0.08247596616699963 + (x * (-0.0025328157302663564 + (x * (0.0006099292666946337 + (x * (-0.00033543297638406 + (x * 0.000250505279903))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_292 = __evalpoly_292;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_293( x ) {
	if ( x === 0.0 ) {
		return 0.08333333333333333;
	}
	return 0.08333333333333333 + (x * (-0.002777777777777778 + (x * (0.0007936507936507937 + (x * -0.0005952380952380953))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_293 = __evalpoly_293;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_SQRT_TWO_PI_97 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_85 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT32_MAX_84 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$chepolsum_280 = require( './chepolsum.js' ); */;
/* removed: var _$evalpoly_292 = require( './polyval_c.js' ); */;
/* removed: var _$evalpoly_293 = require( './polyval_d.js' ); */;


// VARIABLES //

var C6 = 0.30865217988013567769;


// MAIN //

/**
* Computes the Stirling series corresponding to asymptotic series for the logarithm of the gamma function.
*
* ```tex
* \frac{1}{12x}-\frac{1}{360x^3}\ldots; x \ge 3
* ```
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function stirling( x ) {
	var z;
	if ( x < _$FLOAT32_SMALLEST_NORMAL_85 ) {
		return _$FLOAT32_MAX_84;
	}
	if ( x < 1.0 ) {
		return _$gammaln_305( x+1.0 ) - ( (x+0.5) * _$ln_376(x) ) + x - _$LN_SQRT_TWO_PI_97;
	}
	if ( x < 2.0 ) {
		return _$gammaln_305( x ) - ( (x-0.5) * _$ln_376(x) ) + x - _$LN_SQRT_TWO_PI_97;
	}
	if ( x < 3.0 ) {
		return _$gammaln_305( x-1.0 ) - ( (x-0.5) * _$ln_376(x) ) + x - _$LN_SQRT_TWO_PI_97 + _$ln_376( x-1.0 ); // eslint-disable-line max-len
	}
	if ( x < 12.0 ) {
		z = ( 18.0/( x*x ) ) - 1.0;
		return _$chepolsum_280( 17, z ) / ( 12.0*x );
	}
	z = 1.0 / ( x * x );
	if ( x < 1000.0 ) {
		return _$evalpoly_292( z ) / ( C6+z ) / x;
	}
	return _$evalpoly_293( z ) / x;
}


// EXPORTS //

var _$stirling_303 = stirling;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT32_MAX_84 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$SQRT_TWO_PI_117 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$stirling_303 = require( './stirling.js' ); */;


// MAIN //

/**
* Computes the regulated gamma function.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function gamstar( x ) {
	if ( x >= 3.0 ) {
		return _$exp_225( _$stirling_303(x) );
	}
	if ( x > 0.0 ) {
		return _$gamma_247(x) / ( _$exp_225( -x + ( ( x-0.5 ) * _$ln_376(x) ) ) * _$SQRT_TWO_PI_117 );
	}
	// Case: x <= 0.0
	return _$FLOAT32_MAX_84;
}


// EXPORTS //

var _$gamstar_286 = gamstar;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_294( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.3333333333438;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.3333333333438 + (x * (-0.2070740359969 + (x * (-0.05041806657154 + (x * (-0.004923635739372 + (x * -0.00004293658292782))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7045554412463 + (x * (0.2118190062224 + (x * (0.03048648397436 + (x * 0.001605037988091))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00004293658292782 + (x * (-0.004923635739372 + (x * (-0.05041806657154 + (x * (-0.2070740359969 + (x * -0.3333333333438))))))); // eslint-disable-line max-len
		s2 = 0.001605037988091 + (x * (0.03048648397436 + (x * (0.2118190062224 + (x * (0.7045554412463 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_294 = __evalrational_294;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$lambdaeta_289 = require( './lambdaeta.js' ); */;
/* removed: var _$evalrational_294 = require( './rational_ak0bk0.js' ); */;


// MAIN //

/**
* Evaluates the `eps1` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps1( eta ) {
	var la;
	if ( _$abs_147( eta ) < 1.0 ) {
		return _$evalrational_294( eta );
	}
	la = _$lambdaeta_289( eta );
	return _$ln_376( eta / ( la - 1.0 ) ) / eta;
}


// EXPORTS //

var _$eps1_282 = eps1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_295( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172847633523;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172847633523 + (x * (-0.0159372646475 + (x * (-0.00464910887221 + (x * (-0.00060683488776 + (x * -0.00000614830384279))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.764050615669 + (x * (0.297143406325 + (x * (0.0579490176079 + (x * 0.00574558524851))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000614830384279 + (x * (-0.00060683488776 + (x * (-0.00464910887221 + (x * (-0.0159372646475 + (x * -0.0172847633523))))))); // eslint-disable-line max-len
		s2 = 0.00574558524851 + (x * (0.0579490176079 + (x * (0.297143406325 + (x * (0.764050615669 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_295 = __evalrational_295;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_296( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0172839517431;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0172839517431 + (x * (-0.0146362417966 + (x * (-0.00357406772616 + (x * (-0.000391032032692 + (x * 0.00000249634036069))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.690560400696 + (x * (0.249962384741 + (x * (0.0443843438769 + (x * 0.00424073217211))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00000249634036069 + (x * (-0.000391032032692 + (x * (-0.00357406772616 + (x * (-0.0146362417966 + (x * -0.0172839517431))))))); // eslint-disable-line max-len
		s2 = 0.00424073217211 + (x * (0.0443843438769 + (x * (0.249962384741 + (x * (0.690560400696 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_296 = __evalrational_296;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_297( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.99994466948;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.99994466948 + (x * (104.649839762 + (x * (857.204033806 + (x * (731.901559577 + (x * 45.5174411671))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (104.526456943 + (x * (823.313447808 + (x * (3119.93802124 + (x * 3970.03311219))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 45.5174411671 + (x * (731.901559577 + (x * (857.204033806 + (x * (104.649839762 + (x * 0.99994466948))))))); // eslint-disable-line max-len
		s2 = 3970.03311219 + (x * (3119.93802124 + (x * (823.313447808 + (x * (104.526456943 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_297 = __evalrational_297;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalrational_295 = require( './rational_ak1bk1.js' ); */;
/* removed: var _$evalrational_296 = require( './rational_ak2bk2.js' ); */;
/* removed: var _$evalrational_297 = require( './rational_ak3bk3.js' ); */;


// MAIN //

/**
* Evaluates the `eps2` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps2( eta ) {
	var lnmeta;
	var x;
	if ( eta < -5.0 ) {
		x = eta * eta;
		lnmeta = _$ln_376( -eta );
		return ( 12.0 - x - ( 6.0*( lnmeta*lnmeta ) ) ) / ( 12.0*x*eta );
	}
	if ( eta < -2.0 ) {
		return _$evalrational_295( eta );
	}
	if ( eta < 2.0 ) {
		return _$evalrational_296( eta );
	}
	if ( eta < 1000.0 ) {
		x = 1.0 / eta;
		return _$evalrational_297( eta ) / ( -12.0*eta );
	}
	return -1.0 / ( 12.0 * eta );
}


// EXPORTS //

var _$eps2_283 = eps2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_298( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.0495346498136;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.0495346498136 + (x * (0.0299521337141 + (x * (0.00688296911516 + (x * (0.000512634846317 + (x * -0.0000201411722031))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.759803615283 + (x * (0.261547111595 + (x * (0.0464854522477 + (x * 0.00403751193496))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.0000201411722031 + (x * (0.000512634846317 + (x * (0.00688296911516 + (x * (0.0299521337141 + (x * 0.0495346498136))))))); // eslint-disable-line max-len
		s2 = 0.00403751193496 + (x * (0.0464854522477 + (x * (0.261547111595 + (x * (0.759803615283 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_298 = __evalrational_298;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_299( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00452313583942;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00452313583942 + (x * (0.00120744920113 + (x * (-0.0000789724156582 + (x * (-0.0000504476066942 + (x * -0.00000535770949796))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.912203410349 + (x * (0.405368773071 + (x * (0.0901638932349 + (x * 0.00948935714996))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.00000535770949796 + (x * (-0.0000504476066942 + (x * (-0.0000789724156582 + (x * (0.00120744920113 + (x * 0.00452313583942))))))); // eslint-disable-line max-len
		s2 = 0.00948935714996 + (x * (0.0901638932349 + (x * (0.405368773071 + (x * (0.912203410349 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_299 = __evalrational_299;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_300( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.00439937562904;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.00439937562904 + (x * (0.000487225670639 + (x * (-0.000128470657374 + (x * (0.00000529110969589 + (x * 1.5716677175e-7))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.794435257415 + (x * (0.333094721709 + (x * (0.0703527806143 + (x * 0.00806110846078))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 1.5716677175e-7 + (x * (0.00000529110969589 + (x * (-0.000128470657374 + (x * (0.000487225670639 + (x * 0.00439937562904))))))); // eslint-disable-line max-len
		s2 = 0.00806110846078 + (x * (0.0703527806143 + (x * (0.333094721709 + (x * (0.794435257415 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_300 = __evalrational_300;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_301( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0011481191232;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0011481191232 + (x * (-0.112850923276 + (x * (1.51623048511 + (x * (-0.218472031183 + (x * 0.0730002451555))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (14.2482206905 + (x * (69.7360396285 + (x * (218.938950816 + (x * 277.067027185))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0730002451555 + (x * (-0.218472031183 + (x * (1.51623048511 + (x * (-0.112850923276 + (x * -0.0011481191232))))))); // eslint-disable-line max-len
		s2 = 277.067027185 + (x * (218.938950816 + (x * (69.7360396285 + (x * (14.2482206905 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_301 = __evalrational_301;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_302( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.000145727889667;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.000145727889667 + (x * (-0.290806748131 + (x * (-13.308504545 + (x * (199.722374056 + (x * -11.4311378756))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (139.612587808 + (x * (2189.01116348 + (x * (7115.24019009 + (x * 45574.6081453))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -11.4311378756 + (x * (199.722374056 + (x * (-13.308504545 + (x * (-0.290806748131 + (x * -0.000145727889667))))))); // eslint-disable-line max-len
		s2 = 45574.6081453 + (x * (7115.24019009 + (x * (2189.01116348 + (x * (139.612587808 + (x * 1.0))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_302 = __evalrational_302;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$evalrational_298 = require( './rational_ak4bk4.js' ); */;
/* removed: var _$evalrational_299 = require( './rational_ak5bk5.js' ); */;
/* removed: var _$evalrational_300 = require( './rational_ak6bk6.js' ); */;
/* removed: var _$evalrational_301 = require( './rational_ak7bk7.js' ); */;
/* removed: var _$evalrational_302 = require( './rational_ak8bk8.js' ); */;


// MAIN //

/**
* Evaluates the `eps3` function.
*
* @private
* @param {number} eta - eta value
* @returns {number} function value
*/
function eps3( eta ) {
	var x;
	var y;

	if ( eta < -8.0 ) {
		x = eta * eta;
		y = _$ln_376( -eta ) / eta;
		return ( -30.0 + ( eta*y*( (6.0*x*y*y)-12.0+x ) ) ) / ( 12.0*eta*x*x );
	}
	if ( eta < -4.0 ) {
		return _$evalrational_298( eta ) / ( eta*eta );
	}
	if ( eta < -2.0 ) {
		return _$evalrational_299( eta );
	}
	if ( eta < 2.0 ) {
		return _$evalrational_300( eta );
	}
	if ( eta < 10.0 ) {
		x = 1.0 / eta;
		return _$evalrational_301( x ) / ( eta*eta );
	}
	if ( eta < 100.0 ) {
		x = 1.0 / eta;
		return _$evalrational_302( x ) / ( eta*eta );
	}
	return -_$ln_376( eta ) / ( 12.0*eta*eta*eta );
}


// EXPORTS //

var _$eps3_284 = eps3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-statements */

'use strict';

// MODULES //

/* removed: var _$browser_1616 = require( 'debug' ); */;
/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$SQRT_TWO_PI_117 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;
/* removed: var _$FLOAT32_MAX_84 = require( '@stdlib/constants/math/float32-max' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$higherNewton_287 = require( './higher_newton.js' ); */;
/* removed: var _$lambdaeta_289 = require( './lambdaeta.js' ); */;
/* removed: var _$gamstar_286 = require( './gamstar.js' ); */;
/* removed: var _$eps1_282 = require( './eps1.js' ); */;
/* removed: var _$eps2_283 = require( './eps2.js' ); */;
/* removed: var _$eps3_284 = require( './eps3.js' ); */;


// VARIABLES //

var __debug_281 = _$browser_1616( 'gammaincinv:compute' );
var HALF = 0.5;
var ONEO3 = 0.333333333333333333333333333333;
var ONEO4 = 0.25;
var ONEO5 = 0.2;
var ONEO6 = 0.166666666666666666666666666667;
var __ONEO12_281 = 0.0833333333333333333333333333333;
var ONEO24 = 0.0416666666666666666666666666667;

// Coefficient workspace:
var CK = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x` in the equations `P(a,xr) = p` and `Q(a,xr) = q`, where `a` is a positive parameter and `p` and `q` satisfy `p+q = 1`.
*
* ## Notes
*
* -   The equation is inverted with `min(p,q)`.
*
* @private
* @param {number} a - scale value of incomplete gamma function
* @param {Probability} p - probability value
* @param {Probability} q - probability value
* @returns {number} solution of the equations `P(a,xr) = p` and `Q(a,xr) = q` where `a` is a positive parameter
*/
function __compute_281( a, p, q ) {
	var ap1inv;
	var invfp;
	var lgama;
	var pcase;
	var porq;
	var ainv;
	var logr;
	var ap22;
	var ap14;
	var ap13;
	var ap12;
	var vgam;
	var vmin;
	var xini;
	var ap1;
	var ap2;
	var ap3;
	var eta;
	var p6;
	var p5;
	var x0;
	var a2;
	var L2;
	var L3;
	var L4;
	var b2;
	var b3;
	var p3;
	var a4;
	var fp;
	var p4;
	var p2;
	var a3;
	var xr;
	var ck;
	var b;
	var L;
	var i;
	var k;
	var m;
	var r;
	var s;
	var t;
	var y;

	if ( p < HALF ) {
		pcase = true;
		porq = p;
		s = -1.0;
	} else {
		pcase = false;
		porq = q;
		s = 1.0;
	}
	k = 0;
	if ( _$abs_147( a-1.0 ) < 1.0e-4 ) {
		m = 0;
		if ( pcase ) {
			if ( p < 1.0e-3 ) {
				p2 = p * p;
				p3 = p2 * p;
				p4 = p3 * p;
				p5 = p4 * p;
				p6 = p5 * p;
				x0 = p + ( p2*HALF ) + ( p3*(ONEO3) ) + ( p4*ONEO4 ) + ( p5*ONEO5 ) + ( p6*(ONEO6) ); // eslint-disable-line max-len
			} else {
				x0 = -_$ln_376( 1.0-p );
			}
		} else {
			x0 = -_$ln_376( q );
		}
		if ( a === 1.0 ) {
			k = 2;
			xr = x0;
		} else {
			lgama = _$gammaln_305( a );
			k = 1;
		}
	}
	if ( q < 1.0e-30 && a < HALF ) {
		m = 0;
		x0 = -_$ln_376( q*_$gamma_247(a) ) + ( ( a-1.0 ) * _$ln_376( -_$ln_376( q*_$gamma_247(a) ) ));
		k = 1;
		lgama = _$gammaln_305( a );
	}
	if ( a > 1.0 && a < 500.0 && p < 1.0e-80 ) {
		m = 0;
		ainv = 1.0 / a;
		ap1inv = 1.0 / ( a+1.0 );
		x0 = ( _$gammaln_305( a+1.0 ) + _$ln_376( p ) ) * ainv;
		x0 = _$exp_225( x0 );
		xini = x0;
		for ( i = 0; i < 10; i++ ) {
			x0 = xini * _$exp_225( x0*ainv ) * _$pow_396( 1.0-( x0*ap1inv ), ainv );
		}
		k = 1;
		lgama = _$gammaln_305( a );
	}

	logr = (1.0/a) * ( _$ln_376(p) + _$gammaln_305( a+1.0 ) );
	if ( ( logr < _$ln_376( ONEO5 * ( 1.0+a ) ) ) && ( k === 0 ) ) {
		r = _$exp_225( logr );
		m = 0;
		a2 = a * a;
		a3 = a2 * a;
		a4 = a3 * a;
		ap1 = a + 1.0;
		ap12 = ap1 * ap1;
		ap13 = ap1 * ap12;
		ap14 = ap12 * ap12;
		ap2 = a + 2.0;
		ap22 = ap2 * ap2;
		ap3 = a + 3.0;
		CK[ 0 ] = 1.0;
		CK[ 1 ] = 1.0 / ap1;
		CK[ 2 ] = HALF * ( ( 3.0*a ) + 5.0 ) / ( ap12*ap2 );
		CK[ 3 ] = ONEO3 * ( 31.0 + (8.0*a2) + (33.0*a) ) / ( ap13*ap2*ap3 );
		CK[ 4 ] = ONEO24 * ( 2888.0 + (1179.0*a3) + (125.0*a4) + (3971.0*a2) + (5661.0*a) ) / ( ap14*ap22*ap3*( a+4.0 ) ); // eslint-disable-line max-len
		x0 = r * _$evalpoly_448( CK, r );
		lgama = _$gammaln_305( a );
		k = 1;
	}
	if ( ( a < 10.0 ) && ( k === 0 ) ) {
		vgam = _$sqrt_437( a ) / ( _$gamstar_286(a)*_$SQRT_TWO_PI_117 );
		vmin = _$min_392( 0.02, vgam );
		if ( q < vmin ) {
			m = 0;
			b = 1.0 - a;
			b2 = b * b;
			b3 = b2 * b;
			eta = _$sqrt_437( -2.0/a * _$ln_376( q/vgam ) );
			x0 = a * _$lambdaeta_289( eta );
			L = _$ln_376( x0 );
			if ( x0 > 5.0 ) {
				L2 = L * L;
				L3 = L2 * L;
				L4 = L3 * L;
				r = 1.0 / x0;
				CK[ 0 ] = L - 1.0;
				CK[ 1 ] = ( (3.0*b) - (2.0*b*L) + L2 - ( 2.0*L ) + 2.0 ) * HALF;
				CK[ 2 ] =( (24.0*b*L) - (11.0*b2) - (24.0*b) - (6.0*L2) + (12.0*L) - 12.0 - (9.0*b*L2) + (6.0*b2*L) + (2.0*L3) ) * ONEO6; // eslint-disable-line max-len
				CK[ 3 ] = ( (-12.0*b3*L) + (8.04*b*L2) - (114.0*b2*L) + (72.0+(36.0*L2)) + (((3.0*L4)-(72.0*L)+162.0) * (b-(168.0*b*L))) - ((12.0*L3)+(25.0*b3)) - ( (22.0*b*L3)+(36.0*b2*L2)+(120.0*b2) ) ) * __ONEO12_281; // eslint-disable-line max-len
				CK[ 4 ] = 0.0;
				x0 = x0 - L + ( b*r*_$evalpoly_448( CK, r ) );
			} else {
				r = 1.0 / x0;
				L2 = L * L;
				ck = L - 1.0;
				t = L - (b*r*ck);
				if ( t < x0 ) {
					x0 -= t;
				}
			}
			lgama = _$gammaln_305( a );
			k = 1;
		}
	}
	if ( ( _$abs_147( porq-HALF ) < 1.0e-5 ) && ( k === 0 ) ) {
		m = 0;
		ainv = 1.0 / a;
		x0 = a - ONEO3 + ( ( 0.0197530864197530864197530864198 +
			( 0.00721144424848128551832255535959*ainv ) ) * ainv );
		lgama = _$gammaln_305( a );
		k = 1;
	}
	if ( ( a < 1.0 ) && ( k === 0 ) ) {
		m = 0;
		if (pcase) {
			x0 = _$exp_225( (1.0/a) * ( _$ln_376(porq) + _$gammaln_305(a+1.0) ) );
		} else {
			x0 = _$exp_225( (1.0/a) * ( _$ln_376(1.0-porq) + _$gammaln_305(a+1.0) ) );
		}
		lgama = _$gammaln_305( a );
		k = 1;
	}
	if ( k === 0 ) {
		m = 1;
		ainv = 1.0 / a;
		r = _$erfcinv_210( 2.0 * porq );
		eta = s * r / _$sqrt_437( a*HALF );
		if ( r < _$FLOAT32_MAX_84 ) {
			eta += ( _$eps1_282(eta) + ( (_$eps2_283(eta)+(_$eps3_284(eta)*ainv))*ainv ) ) * ainv;
			x0 = a * _$lambdaeta_289(eta);
			y = eta;
			fp = -_$sqrt_437( a/_$TWO_PI_119 ) * _$exp_225( -HALF*a*y*y ) / ( _$gamstar_286(a) );
			invfp = 1.0 / fp;
		} else {
			__debug_281( 'Warning: Overflow problems in one or more steps of the computation.' );
			return NaN;
		}
	}
	if ( k < 2 ) {
		xr = _$higherNewton_287( x0, a, m, p, q, lgama, invfp, pcase );
	}
	return xr;
}


// EXPORTS //

var _$compute_281 = __compute_281;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Translated from the Fortran module by
* ----------------------------------------------------------------------
* Authors:
*  Amparo Gil    (U. Cantabria, Santander, Spain)
*                 e-mail: amparo.gil@unican.es
*  Javier Segura (U. Cantabria, Santander, Spain)
*                 e-mail: javier.segura@unican.es
*  Nico M. Temme (CWI, Amsterdam, The Netherlands)
*                 e-mail: nico.temme@cwi.nl
* ---------------------------------------------------------------------
*/

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT32_SMALLEST_NORMAL_85 = require( '@stdlib/constants/math/float32-smallest-normal' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$compute_281 = require( './compute.js' ); */;


// MAIN //

/**
* Inverts the lower gamma function; i.e., computes `xr` such that `P(a,xr) = p`.
*
* ## Method
*
* The present code uses different methods of computation depending on the values of the input values: Taylor, asymptotic expansions and high-order Newton methods.
*
* ## Notes
*
* -   The claimed accuracy obtained using this inversion routine is near `1e-12`.
*
* ## References
*
* -   A. Gil, J. Segura and N.M. Temme, GammaCHI: a package for the inversion and computation of the gamma and chi-square distribution functions (central and noncentral). Computer Physics Commun
* -   A. Gil, J. Segura and N.M. Temme. Efficient and accurate algorithms for the computation and inversion of the incomplete gamma function ratios. SIAM J Sci Comput. (2012) 34(6), A2965-A2981
*
*
* @param {Probability} p - probability value
* @param {number} a - scale parameter
* @param {boolean} [upper=false] - boolean indicating if the function should invert the upper tail of the incomplete gamma function instead; i.e., compute `xr` such that `Q(a,xr) = p`.
* @returns {number} function value of the inverse
*/
function gammaincinv( p, a, upper ) {
	if ( _$isnan_130( p ) || _$isnan_130( a ) ) {
		return NaN;
	}
	if ( a < _$FLOAT32_SMALLEST_NORMAL_85 ) {
		return NaN;
	}
	if ( p > 1.0 || p < 0.0 ) {
		return NaN;
	}
	// Case: invert upper gamma function
	if ( upper === true ) {
		if ( p === 0.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( p === 1.0 ) {
			return 0.0;
		}
		return _$compute_281( a, 1.0-p, p );
	}
	// Default: invert lower gamma function
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return _$compute_281( a, p, 1.0-p );
}


// EXPORTS //

var _$gammaincinv_285 = gammaincinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the inverse of the lower incomplete gamma function.
*
* @module @stdlib/math/base/special/gammaincinv
*
* @example
* var gammaincinv = require( '@stdlib/math/base/special/gammaincinv' );
*
* var val = gammaincinv( 0.5, 2.0 );
* // returns ~1.678
*
* val = gammaincinv( 0.1, 10.0 );
* // returns ~6.221
*
* val = gammaincinv( 0.75, 3.0 );
* // returns ~3.92
*
* val = gammaincinv( 0.75, 3.0, true );
* // returns ~1.727
*
* val = gammaincinv( 0.75, NaN );
* // returns NaN
*
* val = gammaincinv( NaN, 3.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$gammaincinv_285 = require( './gammaincinv.js' ); */;


// EXPORTS //

var _$gammaincinv_288 = _$gammaincinv_285;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point subnormal number.
*
* @module @stdlib/constants/math/float64-smallest-subnormal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/math/float64-smallest-subnormal' );
* // returns 4.940656458412465e-324
*/


// MAIN //

/**
* The smallest positive double-precision floating-point subnormal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1} 2^{52}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000000 00000000000000000000 00000000000000000000000000000001
* ```
*
* @constant
* @type {number}
* @default 4.940656458412465e-324
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;


// EXPORTS //

var _$FLOAT64_SMALLEST_SUBNORMAL_112 = FLOAT64_SMALLEST_SUBNORMAL;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

/* eslint-disable no-mixed-operators, max-len */

'use strict';

// MODULES //

/* removed: var _$gammaincinv_288 = require( '@stdlib/math/base/special/gammaincinv' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_SMALLEST_SUBNORMAL_112 = require( '@stdlib/constants/math/float64-smallest-subnormal' ); */;
/* removed: var _$temmeRootFinder_360 = require( './root_finder.js' ); */;
/* removed: var _$newtonRaphsonIterate_337 = require( './newton_raphson.js' ); */;


// MAIN //

/**
* Carries out the third method by Temme (described in section 4).
*
* ## References
*
* -   Temme, N. M. 1992. "Incomplete Laplace Integrals: Uniform Asymptotic Expansion with Application to the Incomplete Beta Function." _Journal of Computational and Applied Mathematics_ 41 (1–2): 1638–63. doi:[10.1016/0377-0427(92)90244-R](https://doi.org/10.1016/0377-0427(92)90244-R).
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1-p`
* @returns {number} function value
*/
function temme3( a, b, p, q ) {
	var cross;
	var roots;
	var lower;
	var upper;
	var eta0;
	var eta;
	var w10;
	var w12;
	var w13;
	var w14;
	var e1;
	var e2;
	var e3;
	var mu;
	var d2;
	var d3;
	var d4;
	var w2;
	var w3;
	var w4;
	var w5;
	var w6;
	var w7;
	var w8;
	var w9;
	var w1;
	var d;
	var w;
	var u;
	var x;

	// Begin by getting an initial approximation for the quantity eta from the dominant part of the incomplete beta:
	if ( p < q ) {
		eta0 = _$gammaincinv_288( p, b, true );
	} else {
		eta0 = _$gammaincinv_288( q, b, false );
	}
	eta0 /= a;

	// Define the variables and powers we'll need later on:
	mu = b / a;
	w = _$sqrt_437( 1.0+mu );
	w2 = w * w;
	w3 = w2 * w;
	w4 = w2 * w2;
	w5 = w3 * w2;
	w6 = w3 * w3;
	w7 = w4 * w3;
	w8 = w4 * w4;
	w9 = w5 * w4;
	w10 = w5 * w5;
	d = eta0 - mu;
	d2 = d * d;
	d3 = d2 * d;
	d4 = d2 * d2;
	w1 = w + 1.0;
	w12 = w1 * w1;
	w13 = w1 * w12;
	w14 = w12 * w12;

	// Now we need to compute the perturbation error terms that convert eta0 to eta, these are all polynomials of polynomials. Probably these should be re-written to use tabulated data (see examples above), but it's less of a win in this case as we need to calculate the individual powers for the denominator terms anyway, so we might as well use them for the numerator-polynomials as well. Refer to p154-p155 for the details of these expansions:
	e1 = (w+2.0) * (w-1.0) / (3.0*w);
	e1 += (w3 + 9.0*w2 + 21.0*w + 5.0) * d / (36.0*w2*w1);
	e1 -= (w4 - 13.0*w3 + 69.0*w2 + 167.0*w + 46.0) * d2 / (1620.0*w12*w3);
	e1 -= (7.0*w5 + 21.0*w4 + 70.0*w3 + 26.0*w2 - 93.0*w - 31.0) * d3 / (6480.0*w13*w4);
	e1 -= (75.0*w6 + 202.0*w5 + 188.0*w4 - 888.0*w3 - 1345.0*w2 + 118.0*w + 138.0) * d4 / (272160.0*w14*w5);

	e2 = (28.0*w4 + 131.0*w3 + 402.0*w2 + 581.0*w + 208.0) * (w-1.0) / (1620.0*w1*w3);
	e2 -= (35.0*w6 - 154.0*w5 - 623.0*w4 - 1636.0*w3 - 3983.0*w2 - 3514.0*w - 925.0) * d / (12960.0*w12*w4);
	e2 -= (2132.0*w7 + 7915.0*w6 + 16821.0*w5 + 35066.0*w4 + 87490.0*w3 + 141183.0*w2 + 95993.0*w + 21640.0) * d2 / (816480.0*w5*w13);
	e2 -= (11053.0*w8 + 53308.0*w7 + 117010.0*w6 + 163924.0*w5 + 116188.0*w4 - 258428.0*w3 - 677042.0*w2 - 481940.0*w - 105497.0) * d3 / (14696640.0*w14*w6);

	e3 = -((3592.0*w7 + 8375.0*w6 - 1323.0*w5 - 29198.0*w4 - 89578.0*w3 - 154413.0*w2 - 116063.0*w - 29632.0) * (w-1.0)) / (816480.0*w5*w12);
	e3 -= (442043.0*w9 + 2054169.0*w8 + 3803094.0*w7 + 3470754.0*w6 + 2141568.0*w5 - 2393568.0*w4 - 19904934.0*w3 - 34714674.0*w2 - 23128299.0*w - 5253353.0) * d / (146966400.0*w6*w13);
	e3 -= (116932.0*w10 + 819281.0*w9 + 2378172.0*w8 + 4341330.0*w7 + 6806004.0*w6 + 10622748.0*w5 + 18739500.0*w4 + 30651894.0*w3 + 30869976.0*w2 + 15431867.0*w + 2919016.0) * d2 / (146966400.0*w14*w7);

	// Combine eta0 and the error terms to compute eta (Second equation p155):
	eta = eta0 + (e1/a) + (e2/(a*a)) + (e3/(a*a*a));

	/*
		Now we need to solve Eq 4.2 to obtain x.  For any given value of
		eta there are two solutions to this equation, and since the distribution
		may be very skewed, these are not related by x ~ 1-x we used when
		implementing section 3 above.  However we know that:

			cross < x <= 1       ; iff eta < mu
				x == cross   ; iff eta == mu
				0 <= x < cross    ; iff eta > mu

		Where cross == 1 / (1 + mu)
		Many thanks to Prof Temme for clarifying this point. Therefore we'll just jump straight into Newton iterations to solve Eq 4.2 using these bounds, and simple bisection as the first guess, in practice this converges pretty quickly and we only need a few digits correct anyway:
	*/
	if ( eta <= 0 ) {
		eta = _$FLOAT64_SMALLEST_SUBNORMAL_112;
	}
	u = eta - ( mu*_$ln_376(eta) ) + ( ( 1.0+mu ) * _$ln_376( 1.0+mu ) ) - mu;
	cross = 1.0 / ( 1.0+mu );
	lower = (eta < mu) ? cross : 0.0;
	upper = (eta < mu) ? 1.0 : cross;
	x = (lower+upper) / 2.0;
	roots = _$temmeRootFinder_360( u, mu );
	return _$newtonRaphsonIterate_337( roots, x, lower, upper, 32, 100 );
}


// EXPORTS //

var _$temme3_363 = temme3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/tools/roots.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ldexp_374 = require( '@stdlib/math/base/special/ldexp' ); */;
/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;


// MAIN //

/**
* Performs root finding via third order Halley iteration.
*
* @private
* @param {Array} fun - array of function and its first two derivatives
* @param {number} guess - initial starting value
* @param {number} minimum - minimum possible value for the result, used as initial lower bracket
* @param {number} maximum - maximum possible value for the result, used as initial upper bracket
* @param {PositiveInteger} digits - desired number of binary digits
* @param {PositiveInteger} maxIter - maximum number of iterations
* @returns {number} function value
*/
function halleyIterate( fun, guess, minimum, maximum, digits, maxIter ) {
	var convergence;
	var outOfBounds;
	var delta1;
	var delta2;
	var factor;
	var result;
	var f0Last;
	var count;
	var delta;
	var denom;
	var diff;
	var num;
	var res;
	var f0;
	var f1;
	var f2;

	f0 = 0.0;
	outOfBounds = false;
	result = guess;
	factor = _$ldexp_374( 1.0, 1.0-digits );
	delta = _$max_388( 10000000*guess, 10000000 );  // Arbitrarily large delta...
	f0Last = 0;
	delta1 = delta;
	delta2 = delta;

	count = maxIter;
	do {
		f0Last = f0;
		delta2 = delta1;
		delta1 = delta;
		res = fun( result);
		f0 = res[ 0 ];
		f1 = res[ 1 ];
		f2 = res[ 2 ];
		count -= 1;

		if ( f0 === 0.0 ) {
			break;
		}
		if ( f1 === 0.0 ) {
			// Oops zero derivative!!!
			if ( f0Last === 0.0 ) {
				// Must be the first iteration, pretend that we had a previous one at either min or max:
				if ( result === minimum ) {
					guess = maximum;
				} else {
					guess = minimum;
				}
				f0Last = fun( guess );
				delta = guess - result;
			}
			if ( _$signum_426( f0Last ) * _$signum_426( f0 ) < 0 ) {
				// We've crossed over so move in opposite direction to last step:
				if ( delta < 0 ) {
					delta = ( result-minimum ) / 2.0;
				} else {
					delta = ( result-maximum ) / 2.0;
				}
			// Move in same direction as last step:
			} else if ( delta < 0 ) {
				delta = (result-maximum) / 2.0;
			} else {
				delta = (result-minimum) / 2.0;
			}
		} else if ( f2 === 0.0 ) {
			delta = f0 / f1;
		} else {
			denom = 2.0 * f0;
			num = ( 2.0 * f1 ) - ( f0 * ( f2 / f1 ) );
			if ( _$abs_147(num) < 1.0 && ( _$abs_147(denom) >= _$abs_147(num) * _$FLOAT64_MAX_104 ) ) {
				// Possible overflow, use Newton step:
				delta = f0 / f1;
			} else {
				delta = denom / num;
			}
			if ( delta * f1 / f0 < 0.0 ) {
				// Probably cancellation error, try a Newton step instead:
				delta = f0 / f1;
				if ( _$abs_147(delta) > 2.0 * _$abs_147(guess) ) {
					delta = ( (delta < 0.0) ? -1.0 : 1.0 ) * 2.0 * _$abs_147( guess );
				}
			}
		}
		convergence = _$abs_147( delta / delta2 );
		if ( convergence > 0.8 && convergence < 2.0 ) {
			// Last two steps haven't converged, try bisection:
			delta = ( delta > 0.0 ) ? ( result-minimum )/2.0 : ( result-maximum )/2.0; // eslint-disable-line max-len
			if ( _$abs_147(delta) > result ) {
				delta = _$signum_426( delta ) * result; // Protect against huge jumps!
			}
			// Reset delta2 so that this branch will *not* be taken on the next iteration:
			delta2 = delta * 3.0;
		}
		guess = result;
		result -= delta;

		// Check for out of bounds step:
		if ( result < minimum ) {
			if (
				_$abs_147(minimum) < 1 &&
				_$abs_147(result) > 1 &&
				( _$FLOAT64_MAX_104 / _$abs_147(result) < _$abs_147(minimum) )
			) {
				diff = 1000.0;
			} else {
				diff = result / minimum;
			}
			if ( _$abs_147(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - minimum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = (guess - minimum) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		} else if ( result > maximum ) {
			if (
				_$abs_147(maximum) < 1.0 &&
				_$abs_147(result) > 1.0 &&
				_$FLOAT64_MAX_104 / _$abs_147(result) < _$abs_147(maximum)
			) {
				diff = 1000.0;
			} else {
				diff = result / maximum;
			}
			if ( _$abs_147(diff) < 1.0 ) {
				diff = 1.0 / diff;
			}
			if ( !outOfBounds && diff > 0.0 && diff < 3.0 ) {
				// Only a small out of bounds step, let's assume that the result is probably approximately at minimum:
				delta = 0.99 * (guess - maximum);
				result = guess - delta;
				outOfBounds = true; // Only take this branch once!
			} else {
				delta = ( guess - maximum ) / 2.0;
				result = guess - delta;
				if ( result === minimum || result === maximum ) {
					break;
				}
			}
		}
		// Update brackets:
		if ( delta > 0.0 ) {
			maximum = guess;
		} else {
			minimum = guess;
		}
	} while ( count && ( _$abs_147(result * factor) < _$abs_147(delta) ) );

	return result;
}


// EXPORTS //

var _$halleyIterate_329 = halleyIterate;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetainc_323 = require( '@stdlib/math/base/special/kernel-betainc' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;


// VARIABLES //

var __out_330 = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a root finding function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} target - probability value
* @param {boolean} invert - boolean indicating whether to find the roots of the upper or lower incomplete beta function
* @returns {Function} root finding function
*/
function ibetaRoots( a, b, target, invert ) {
	return roots;

	/**
	* Calculates roots.
	*
	* @private
	* @param {number} x - input value
	* @returns {Array} roots
	*/
	function roots( x ) {
		var f1;
		var f2;
		var f;
		var y;

		y = 1.0 - x;
		__out_330 = _$kernelBetainc_323( __out_330, x, a, b, invert, true );
		f = __out_330[ 0 ] - target;
		f1 = __out_330[ 1 ];
		if ( invert ) {
			f1 = -f1;
		}
		if ( y === 0.0 ) {
			y = _$FLOAT64_SMALLEST_NORMAL_111 * 64.0;
		}
		if ( x === 0.0 ) {
			x = _$FLOAT64_SMALLEST_NORMAL_111 * 64.0;
		}
		f2 = f1 * ( -(y*a) + ( ( b-2.0 ) * x ) + 1.0 );
		if ( _$abs_147( f2 ) < y * x * _$FLOAT64_MAX_104 ) {
			f2 /= (y * x);
		}
		if ( invert ) {
			f2 = -f2;
		}
		// Make sure we don't have a zero derivative:
		if ( f1 === 0.0 ) {
			f1 = ( ( invert ) ? -1.0 : 1.0 ) * _$FLOAT64_SMALLEST_NORMAL_111 * 64.0;
		}
		return [ f, f1, f2 ];
	}
}


// EXPORTS //

var _$ibetaRoots_330 = ibetaRoots;

/* eslint-disable max-statements, max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/detail/ibeta_inverse.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006.
* Copyright Paul A. Bristow 2007.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$evalpoly_448 = require( '@stdlib/math/base/tools/evalpoly' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$asin_151 = require( '@stdlib/math/base/special/asin' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_SMALLEST_NORMAL_111 = require( '@stdlib/constants/math/float64-smallest-normal' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;
/* removed: var _$findIBetaInvFromTDist_328 = require( './find_ibeta_inv_from_t_dist.js' ); */;
/* removed: var _$temme1_361 = require( './temme1.js' ); */;
/* removed: var _$temme2_362 = require( './temme2.js' ); */;
/* removed: var _$temme3_363 = require( './temme3.js' ); */;
/* removed: var _$halleyIterate_329 = require( './halley_iterate.js' ); */;
/* removed: var _$ibetaRoots_330 = require( './ibeta_roots.js' ); */;


// VARIABLES //

var DIGITS = 32;
var MAX_ITERATIONS = 1000;

// Workspace for the polynomial coefficients:
var __terms_336 = [ 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Calculates the inverse of the incomplete beta function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {Probability} p - function parameter
* @param {Probability} q - probability equal to `1 - p`
* @returns {Array} two-element array holding function value `y` and `1-y`
*/
function ibetaInvImp( a, b, p, q ) {
	var digits;
	var invert;
	var lambda;
	var lower;
	var theta;
	var upper;
	var roots;
	var maxv;
	var minv;
	var bet;
	var ppa;
	var tmp;
	var xs2;
	var ap1;
	var bm1;
	var fs;
	var lx;
	var ps;
	var xg;
	var xs;
	var yp;
	var a2;
	var a3;
	var b2;
	var r;
	var l;
	var u;
	var x;
	var y;

	// The flag invert is set to true if we swap a for b and p for q, in which case the result has to be subtracted from 1:
	invert = false;

	// Handle trivial cases first...
	if ( q === 0.0 ) {
		return [ 1.0, 0.0 ];
	}
	if ( p === 0.0 ) {
		return [ 0.0, 1.0 ];
	}
	if ( a === 1.0 ) {
		if ( b === 1.0 ) {
			return [ p, 1.0-p ];
		}
		// Change things around so we can handle as b == 1 special case below:
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		invert = true;
	}
	// Depending upon which approximation method we use, we may end up calculating either x or y initially (where y = 1-x):
	x = 0.0; // Set to a safe zero to avoid a

	// For some of the methods we can put tighter bounds on the result than simply [0,1]:
	lower = 0.0;
	upper = 1.0;

	// Student's T with b = 0.5 gets handled as a special case, swap around if the arguments are in the "wrong" order:
	if ( a === 0.5 ) {
		if ( b === 0.5 ) {
			x = _$sin_428( p*_$HALF_PI_93 );
			x *= x;
			y = _$sin_428( q*_$HALF_PI_93 );
			y *= y;
			return [ x, y ];
		}
		if ( b > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
	}
	// Select calculation method for the initial estimate:
	if ( b === 0.5 && a >= 0.5 && p !== 1.0 ) {
		// We have a Student's T distribution:
		yp = {};
		x = _$findIBetaInvFromTDist_328( a, p, yp );
		y = yp.value;
	}
	else if ( b === 1.0 ) {
		if ( p < q ) {
			if ( a > 1.0 ) {
				x = _$pow_396( p, 1.0/a );
				y = -_$expm1_228( _$ln_376(p) / a );
			} else {
				x = _$pow_396( p, 1.0/a );
				y = 1.0 - x;
			}
		} else {
			x = _$exp_225( _$log1p_380(-q) / a );
			y = -_$expm1_228( _$log1p_380(-q) / a );
		}
		if ( invert ) {
			tmp = y;
			y = x;
			x = tmp;
		}
		return [ x, y ];
	}
	else if ( a+b > 5.0 ) {
		// When a+b is large then we can use one of Prof Temme's asymptotic expansions, begin by swapping things around so that p < 0.5, we do this to avoid cancellations errors when p is large.
		if ( p > 0.5 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
		}
		minv = _$min_392( a, b );
		maxv = _$max_388( a, b );
		if ( ( _$sqrt_437(minv) > (maxv-minv) ) && minv > 5.0 ) {
			// When a and b differ by a small amount the curve is quite symmetrical and we can use an error function to approximate the inverse. This is the cheapest of the three Temme expansions, and the calculated value for x will never be much larger than p, so we don't have to worry about cancellation as long as p is small.
			x = _$temme1_361( a, b, p );
			y = 1.0 - x;
		} else {
			r = a + b;
			theta = _$asin_151( _$sqrt_437( a/r ) );
			lambda = minv / r;
			if (
				lambda >= 0.2 &&
				lambda <= 0.8 &&
				r >= 10
			) {
				// The second error function case is the next cheapest to use, it breaks down when the result is likely to be very small, if `a+b` is also small, but we can use a cheaper expansion there in any case. As before `x` won't be much larger than `p`, so as long as `p` is small we should be free of cancellation error.
				ppa = _$pow_396( p, 1.0/a );
				if ( ppa < 0.0025 && ( a+b ) < 200.0 ) {
					x = ppa * _$pow_396( a*_$beta_161( a, b ), 1.0/a );
				} else {
					x = _$temme2_362( p, r, theta );
				}
				y = 1.0 - x;
			} else {
				// If we get here then a and b are very different in magnitude and we need to use the third of Temme's methods which involves inverting the incomplete gamma.  This is much more expensive than the other methods.  We also can only use this method when a > b, which can lead to cancellation errors if we really want y (as we will when x is close to 1), so a different expansion is used in that case.
				if ( a < b ) {
					tmp = b;
					b = a;
					a = tmp;

					tmp = q;
					q = p;
					p = tmp;
					invert = !invert;
				}
				// Try and compute the easy way first:
				bet = 0.0;
				if ( b < 2.0 ) {
					bet = _$beta_161( a, b );
				}
				if ( bet === 0.0 ) {
					y = 1.0;
				} else {
					y = _$pow_396( b*q*bet, 1.0/b );
					x = 1.0 - y;
				}
			}
			if ( y > 1.0e-5 ) {
				x = _$temme3_363( a, b, p, q );
				y = 1.0 - x;
			}
		}
	}
	else if ( a < 1.0 && b < 1.0 ) {
		// Both a and b less than 1, there is a point of inflection at xs:
		xs = ( 1.0-a ) / ( 2.0-a-b );

		// Now we need to ensure that we start our iteration from the right side of the inflection point:
		fs = _$betainc_164( xs, a, b ) - p;
		if ( _$abs_147(fs)/p < _$FLOAT64_EPSILON_87*3.0 ) {
			// The result is at the point of inflection, best just return it:
			if ( invert ) {
				return [ 1.0-xs, xs ];
			}
			return [ xs, 1.0-xs ];
		}
		if ( fs < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			invert = !invert;
			xs = 1.0 - xs;
		}
		xg = _$pow_396( a*p*_$beta_161( a, b ), 1.0/a );
		x = xg / ( 1.0+xg );
		y = 1.0 / ( 1.0+xg );

		// And finally we know that our result is below the inflection point, so set an upper limit on our search:
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	}
	else if ( a > 1.0 && b > 1.0 ) {
		// Small a and b, both greater than 1, there is a point of inflection at xs, and it's complement is xs2, we must always start our iteration from the right side of the point of inflection.
		xs = ( a-1.0 ) / ( a+b-2.0 );
		xs2 = ( b-1.0 ) / ( a+b-2.0 );
		ps = _$betainc_164( xs, a, b ) - p;

		if ( ps < 0.0 ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;

			tmp = xs2;
			xs2 = xs;
			xs = tmp;

			invert = !invert;
		}
		// Estimate x and y, using expm1 to get a good estimate for y when it's very small:
		lx = _$ln_376( p*a*_$beta_161( a, b ) ) / a;
		x = _$exp_225( lx );
		y = ( x < 0.9 ) ? 1.0-x : -_$expm1_228(lx);

		if ( b < a && x < 0.2 ) {
			// Under a limited range of circumstances we can improve our estimate for x...
			ap1 = a - 1.0;
			bm1 = b - 1.0;
			a2 = a * a;
			a3 = a * a2;
			b2 = b * b;
			__terms_336[ 0 ] = 0.0;
			__terms_336[ 1 ] = 1.0;
			__terms_336[ 2 ] = bm1 / ap1;
			ap1 *= ap1;
			__terms_336[ 3 ] = bm1 * (3.0*a*b + 5.0*b + a2 - a - 4.0) / (2.0 * (a+2.0) * ap1); // eslint-disable-line max-len, no-mixed-operators
			ap1 *= (a + 1.0);
			__terms_336[ 4 ] = bm1 * (33.0*a*b2 + 31.0*b2 + 8.0*a2*b2 - 30.0*a*b - 47.0*b + 11.0*a2*b + 6.0*a3*b + 18.0 + 4.0*a - a3 + a2*a2 - 10.0*a2); // eslint-disable-line max-len, no-mixed-operators
			__terms_336[ 4 ] /= (3.0 * (a+3.0) * (a+2.0) * ap1);
			x = _$evalpoly_448( __terms_336, x );
		}
		// Know that result is below the inflection point, so set an upper limit on search...
		if ( x > xs ) {
			x = xs;
		}
		upper = xs;
	} else {
		// Case: ( a <= 1 ) != ( b <= 1 ). If all else fails we get here, only one of a and b is above 1, and a+b is small.  Start by swapping things around so that we have a concave curve with b > a and no points of inflection in [0,1].  As long as we expect x to be small then we can use the simple (and cheap) power term to estimate x, but when we expect x to be large then this greatly underestimates x and leaves us trying to iterate "round the corner" which may take almost forever. We could use Temme's inverse gamma function case in that case, this works really rather well (albeit expensively) even though strictly speaking we're outside it's defined range. However it's expensive to compute, and an alternative approach which models the curve as a distorted quarter circle is much cheaper to compute, and still keeps the number of iterations required down to a reasonable level. With thanks to Prof. Temme for this suggestion.
		if ( b < a ) {
			tmp = b;
			b = a;
			a = tmp;

			tmp = q;
			q = p;
			p = tmp;
			invert = !invert;
		}
		if ( _$pow_396( p, 1.0/a ) < 0.5 ) {
			x = _$pow_396( p*a*_$beta_161( a, b ), 1.0/a );
			if ( x === 0.0 ) {
				x = _$FLOAT64_SMALLEST_NORMAL_111;
			}
			y = 1.0 - x;
		}
		// Case: pow(q, 1/b) < 0.1
		else {
			// Model a distorted quarter circle:
			y = _$pow_396( 1.0-_$pow_396( p, b*_$beta_161( a, b ) ), 1.0/b );
			if ( y === 0 ) {
				y = _$FLOAT64_SMALLEST_NORMAL_111;
			}
			x = 1.0 - y;
		}
	}
	// Now we have a guess for x (and for y) we can set things up for iteration.  If x > 0.5 it pays to swap things round:
	if ( x > 0.5 ) {
		tmp = b;
		b = a;
		a = tmp;

		tmp = q;
		q = p;
		p = tmp;

		tmp = y;
		y = x;
		x = tmp;

		invert = !invert;
		l = 1.0 - upper;
		u = 1.0 - lower;
		lower = l;
		upper = u;
	}
	// Lower bound for our search:  We're not interested in denormalized answers as these tend to take up lots of iterations, given that we can't get accurate derivatives in this area (they tend to be infinite).
	if ( lower === 0 ) {
		if ( invert ) {
			// We're not interested in answers smaller than machine epsilon:
			lower = _$FLOAT64_EPSILON_87;
			if ( x < lower ) {
				x = lower;
			}
		} else {
			lower = _$FLOAT64_SMALLEST_NORMAL_111;
		}
		if ( x < lower ) {
			x = lower;
		}
	}
	// Figure out how many digits to iterate towards:
	digits = DIGITS;
	if ( x < 1.0e-50 && ( a < 1.0 || b < 1.0 ) ) {
		// If we're in a region where the first derivative is very large, then we have to take care that the root-finder doesn't terminate prematurely.  We'll bump the precision up to avoid this, but we have to take care not to set the precision too high or the last few iterations will just thrash around and convergence may be slow in this case. Try 3/4 of machine epsilon:
		digits *= 3;
		digits /= 2;
	}
	// Now iterate, we can use either p or q as the target here depending on which is smaller:
	roots = _$ibetaRoots_330( a, b, ( (p < q) ? p : q ), p >= q );
	x = _$halleyIterate_329( roots, x, lower, upper, digits, MAX_ITERATIONS );

	// Tidy up, if we "lower" was too high then zero is the best answer we have:
	if ( x === lower ) {
		x = 0.0;
	}
	if ( invert ) {
		return [ 1.0-x, x ];
	}
	return [ x, 1.0-x ];
}


// EXPORTS //

var _$ibetaInvImp_336= ibetaInvImp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/kernel-betaincinv
*
* @example
* var kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );
*
* var y = kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 );
* // returns [ ~0.327, ~0.673 ]
*
* y = kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 );
* // returns [ ~0.446, ~0.554 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 );
* // returns [ ~0.082, ~0.918 ]
*
* y = kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 );
* // returns [ ~0.235, ~0.765 ]
*/

// MODULES //

/* removed: var _$ibetaInvImp_336 = require( './kernel_betaincinv.js' ); */;


// EXPORTS //

var _$kernelBetaincinv_331 = _$ibetaInvImp_336;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$kernelBetaincinv_331 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;


// MAIN //

/**
* Returns a value `p` such that `p = betainc(a, b, x)`.
*
* @param {Probability} p - function parameter
* @param {PositiveNumber} a - function parameter
* @param {PositiveNumber} b - function parameter
* @param {boolean} [upper=false] - boolean indicating if the function should return the inverse of the upper tail of the incomplete beta function
* @returns {number} function value
*
* @example
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* @example
* var y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* @example
* var y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* @example
* var y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/
function betaincinv( p, a, b, upper ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b )
	) {
		return NaN;
	}
	if ( a <= 0.0 || b <= 0.0 ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( upper ) {
		return _$kernelBetaincinv_331( a, b, 1.0 - p, p )[ 0 ];
	}
	return _$kernelBetaincinv_331( a, b, p, 1.0 - p )[ 0 ];
}


// EXPORTS //

var _$betaincinv_165 = betaincinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse of the incomplete beta function.
*
* @module @stdlib/math/base/special/betaincinv
*
* @example
* var betaincinv = require( '@stdlib/math/base/special/betaincinv' );
*
* var y = betaincinv( 0.2, 3.0, 3.0 );
* // returns ~0.327
*
* y = betaincinv( 0.4, 3.0, 3.0 );
* // returns ~0.446
*
* y = betaincinv( 0.4, 3.0, 3.0, true );
* // returns ~0.554
*
* y = betaincinv( 0.4, 1.0, 6.0 );
* // returns ~0.082
*
* y = betaincinv( 0.8, 1.0, 6.0 );
* // returns ~0.235
*/

// MODULES //

/* removed: var _$betaincinv_165 = require( './betaincinv.js' ); */;


// EXPORTS //

var _$betaincinv_166 = _$betaincinv_165;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaincinv_166 = require( '@stdlib/math/base/special/betaincinv' ); */;


// MAIN //

/**
* Returns the median of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.239
*
* @example
* var v = median( 8.0, 2.0 );
* // returns ~0.820
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function __median_563( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return _$betaincinv_166( 0.5, alpha, beta );
}


// EXPORTS //

var _$median_563 = __median_563;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution median.
*
* @module @stdlib/stats/base/dists/beta/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/beta/median' );
*
* var v = median( 1.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns ~0.239
*
* v = median( 8.0, 2.0 );
* // returns ~0.820
*/

// MODULES //

/* removed: var _$median_563 = require( './median.js' ); */;


// EXPORTS //

var _$median_562 = _$median_563;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.875
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, 0.8 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_569( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 1.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / ( alpha+beta-2.0 );
}


// EXPORTS //

var _$mode_569 = __mode_569;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution mode.
*
* @module @stdlib/stats/base/dists/beta/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/beta/mode' );
*
* var v = mode( 4.0, 12.0 );
* // returns ~0.214
*
* v = mode( 8.0, 2.0 );
* // returns ~0.875
*/

// MODULES //

/* removed: var _$mode_569 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_568 = _$mode_569;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~0.529
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.829
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_577( alpha, beta ) {
	var out;
	var ab;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	ab = alpha + beta;
	out = 2.0 * ( beta-alpha ) * _$sqrt_437( ab + 1.0 );
	out /= ( ab + 2.0 ) * _$sqrt_437( alpha * beta );
	return out;
}


// EXPORTS //

var _$skewness_577 = __skewness_577;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution skewness.
*
* @module @stdlib/stats/base/dists/beta/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/beta/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~0.529
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.829
*/

// MODULES //

/* removed: var _$skewness_577 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_576 = _$skewness_577;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns ~0.289
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.105
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.121
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_579( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = _$sqrt_437( ( alpha * beta ) / ( apb + 1.0 ) );
	out /= apb;
	return out;
}


// EXPORTS //

var _$stdev_579 = __stdev_579;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution standard deviation.
*
* @module @stdlib/stats/base/dists/beta/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/beta/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns ~0.289
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.105
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.121
*/

// MODULES //

/* removed: var _$stdev_579 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_578 = _$stdev_579;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the variance of a beta distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns ~0.083
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.011
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.015
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_581( alpha, beta ) {
	var apb;
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	apb = alpha + beta;
	out = alpha * beta;
	out /= apb * apb * ( apb+1.0 );
	return out;
}


// EXPORTS //

var _$variance_581 = __variance_581;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution variance.
*
* @module @stdlib/stats/base/dists/beta/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/beta/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~0.011
*
* v = variance( 8.0, 2.0 );
* // returns ~0.015
*/

// MODULES //

/* removed: var _$variance_581 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_580 = _$variance_581;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.208
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.263
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.034
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __logcdf_556( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x >= 1.0 ) {
		return 0.0;
	}
	return _$ln_376( _$betainc_164( x, alpha, beta ) );
}


// EXPORTS //

var _$logcdf_556 = __logcdf_556;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.35
*
* y = logcdf( 0.3 );
* // returns ~-0.997
*/
function __factory_554( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x >= 1.0 ) {
			return 0.0;
		}
		return _$ln_376( _$betainc_164( x, alpha, beta ) );
	}
}


// EXPORTS //

var _$factory_554 = __factory_554;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/beta/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.208
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.35
*
* y = logcdf( 0.3 );
* // returns ~-0.997
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_556 = require( './logcdf.js' ); */;
/* removed: var _$factory_554 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_556, 'factory', _$factory_554 );


// EXPORTS //

var _$logcdf_555 = _$logcdf_556;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.041
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.556
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __logpdf_559( x, alpha, beta ) {
	var out;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return _$FLOAT64_NINF_107;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( alpha > 1.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$ln_376( beta );
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( beta > 1.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$ln_376( alpha );
	}
	out = ( alpha-1.0 ) * _$ln_376( x );
	out += ( beta-1.0 ) * _$log1p_380( -x );
	out -= _$betaln_170( alpha, beta );
	return out;
}


// EXPORTS //

var _$logpdf_559 = __logpdf_559;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/
function __factory_557( alpha, beta ) {
	var betalnAB;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	betalnAB = _$betaln_170( alpha, beta );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return _$FLOAT64_NINF_107;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return _$FLOAT64_PINF_110;
			}
			if ( alpha > 1.0 ) {
				return _$FLOAT64_NINF_107;
			}
			return _$ln_376( beta );
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return _$FLOAT64_PINF_110;
			}
			if ( beta > 1.0 ) {
				return _$FLOAT64_NINF_107;
			}
			return _$ln_376( alpha );
		}
		out = -betalnAB;
		out += ( ( alpha-1.0 )*_$ln_376(x) ) + ( ( beta-1.0 )*_$log1p_380(-x) );
		return out;
	}
}


// EXPORTS //

var _$factory_557 = __factory_557;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/beta/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.223
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/logpdf' ).factory;
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_559 = require( './logpdf.js' ); */;
/* removed: var _$factory_557 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_559, 'factory', _$factory_557 );


// EXPORTS //

var _$logpdf_558 = _$logpdf_559;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @private
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*/
function __mgf_564( t, alpha, beta ) {
	var summand;
	var denom;
	var sum;
	var c;
	var k;

	denom = _$beta_161( alpha, beta );
	sum = 1.0;
	c = 1.0;
	k = 1;
	do {
		c *= t / k;
		summand = ( _$beta_161( alpha+k, beta ) / denom ) * c;
		sum += summand;
		k += 1;
	} while ( _$abs_147( summand / sum ) >= _$FLOAT64_EPSILON_87 );
	return sum;
}


// EXPORTS //

var _$mgf_564 = __mgf_564;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$mgf_564 = require( './_mgf.js' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* @example
* var y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* @example
* var y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* @example
* var y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.5, 0.0 );
* // returns NaN
*/
function __mgf_567( t, alpha, beta ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return _$mgf_564( t, alpha, beta );
}


// EXPORTS //

var _$mgf_567 = __mgf_567;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$mgf_564 = require( './_mgf.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.552
*
* y = mgf( 0.3 );
* // returns ~1.168
*/
function __factory_565( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a beta distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		return _$mgf_564( t, alpha, beta );
	}
}


// EXPORTS //

var _$factory_565 = __factory_565;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Moment-generating function (MGF) for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/beta/mgf' );
*
* var y = mgf( 0.5, 1.0, 1.0 );
* // returns ~1.297
*
* y = mgf( 0.5, 2.0, 4.0 );
* // returns ~1.186
*
* y = mgf( 3.0, 2.0, 2.0 );
* // returns ~5.575
*
* y = mgf( -0.8, 4.0, 4.0 );
* // returns ~0.676
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/mgf' ).factory;
*
* var mgf = factory( 0.5, 0.5 );
*
* var y = mgf( 0.8 );
* // returns ~1.522
*
* y = mgf( 0.3 );
* // returns ~1.168
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_567 = require( './mgf.js' ); */;
/* removed: var _$factory_565 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_567, 'factory', _$factory_565 );


// EXPORTS //

var _$mgf_566 = _$mgf_567;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.96
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.573
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __pdf_572( x, alpha, beta ) {
	var out;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x > 1.0 ) {
		// Support of the Beta distribution: [0,1]
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( alpha < 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( alpha > 1.0 ) {
			return 0.0;
		}
		return beta;
	}
	if ( x === 1.0 ) {
		if ( beta < 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( beta > 1.0 ) {
			return 0.0;
		}
		return alpha;
	}
	out = ( alpha-1.0 ) * _$ln_376( x );
	out += ( beta-1.0 ) * _$log1p_380( -x );
	out -= _$betaln_170( alpha, beta );
	return _$exp_225( out );
}


// EXPORTS //

var _$pdf_572 = __pdf_572;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/
function __factory_570( alpha, beta ) {
	var betalnAB;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	betalnAB = _$betaln_170( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x > 1.0 ) {
			// Support of the Beta distribution: [0,1]
			return 0.0;
		}
		if ( x === 0.0 ) {
			if ( alpha < 1.0 ) {
				return _$FLOAT64_PINF_110;
			}
			if ( alpha > 1.0 ) {
				return 0.0;
			}
			return beta;
		}
		if ( x === 1.0 ) {
			if ( beta < 1.0 ) {
				return _$FLOAT64_PINF_110;
			}
			if ( beta > 1.0 ) {
				return 0.0;
			}
			return alpha;
		}
		out = -betalnAB;
		out += ( alpha-1.0 ) * _$ln_376( x );
		out += ( beta-1.0 ) * _$log1p_380( -x );
		return _$exp_225( out );
	}
}


// EXPORTS //

var _$factory_570 = __factory_570;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/beta/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns 1.25
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.796
*
* y = pdf( 0.3 );
* // returns ~0.695
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_572 = require( './pdf.js' ); */;
/* removed: var _$factory_570 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_572, 'factory', _$factory_570 );


// EXPORTS //

var _$pdf_571 = _$pdf_572;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaincinv_166 = require( '@stdlib/math/base/special/betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_575( p, alpha, beta ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$betaincinv_166( p, alpha, beta );
}


// EXPORTS //

var _$quantile_575 = __quantile_575;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betaincinv_166 = require( '@stdlib/math/base/special/betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.904
*
* y = quantile( 0.8 );
* // returns ~0.986
*/
function __factory_573( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if (
			_$isnan_130( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		return _$betaincinv_166( p, alpha, beta );
	}
}


// EXPORTS //

var _$factory_573 = __factory_573;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for a beta distribution.
*
* @module @stdlib/stats/base/dists/beta/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/beta/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~0.894
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.686
*
* @example
* var factory = require( '@stdlib/stats/base/dists/beta/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~0.713
*
* y = quantile( 0.4 );
* // returns ~0.5
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_575 = require( './quantile.js' ); */;
/* removed: var _$factory_573 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_575, 'factory', _$factory_573 );


// EXPORTS //

var _$quantile_574 = _$quantile_575;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var isPositive = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_551 = require( '@stdlib/stats/base/dists/beta/entropy' ); */;
/* removed: var _$kurtosis_552 = require( '@stdlib/stats/base/dists/beta/kurtosis' ); */;
/* removed: var _$mean_560 = require( '@stdlib/stats/base/dists/beta/mean' ); */;
/* removed: var _$median_562 = require( '@stdlib/stats/base/dists/beta/median' ); */;
/* removed: var _$mode_568 = require( '@stdlib/stats/base/dists/beta/mode' ); */;
/* removed: var _$skewness_576 = require( '@stdlib/stats/base/dists/beta/skewness' ); */;
/* removed: var _$stdev_578 = require( '@stdlib/stats/base/dists/beta/stdev' ); */;
/* removed: var _$variance_580 = require( '@stdlib/stats/base/dists/beta/variance' ); */;
/* removed: var _$cdf_547 = require( '@stdlib/stats/base/dists/beta/cdf' ); */;
/* removed: var _$logcdf_555 = require( '@stdlib/stats/base/dists/beta/logcdf' ); */;
/* removed: var _$logpdf_558 = require( '@stdlib/stats/base/dists/beta/logpdf' ); */;
/* removed: var _$mgf_566 = require( '@stdlib/stats/base/dists/beta/mgf' ); */;
/* removed: var _$pdf_571 = require( '@stdlib/stats/base/dists/beta/pdf' ); */;
/* removed: var _$quantile_574 = require( '@stdlib/stats/base/dists/beta/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function betaCDF( x ) {
	return _$cdf_547( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function betaLogCDF( x ) {
	return _$logcdf_555( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaLogPDF( x ) {
	return _$logpdf_558( x, this.alpha, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function betaMGF( t ) {
	return _$mgf_566( t, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPDF( x ) {
	return _$pdf_571( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaQuantile( p ) {
	return _$quantile_574( p, this.alpha, this.beta );
}


// MAIN //

/**
* Beta distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Beta} distribution instance
*
* @example
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/
function Beta() {
	var alpha;
	var beta;
	if ( !(this instanceof Beta) ) {
		if ( arguments.length === 0 ) {
			return new Beta();
		}
		return new Beta( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !isPositive( alpha ) ) {
			throw new TypeError( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !isPositive( beta ) ) {
			throw new TypeError( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !isPositive( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Beta distribution differential entropy.
*
* @name entropy
* @memberof Beta.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.entropy;
* // returns ~-0.869
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'entropy', function get() {
	return _$entropy_551( this.alpha, this.beta );
});

/**
* Beta distribution excess kurtosis.
*
* @name kurtosis
* @memberof Beta.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.kurtosis;
* // returns ~0.082
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'kurtosis', function get() {
	return _$kurtosis_552( this.alpha, this.beta );
});

/**
* Beta distribution expected value.
*
* @name mean
* @memberof Beta.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mean;
* // returns 0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'mean', function get() {
	return _$mean_560( this.alpha, this.beta );
});

/**
* Beta distribution median.
*
* @name median
* @memberof Beta.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.median;
* // returns ~0.239
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'median', function get() {
	return _$median_562( this.alpha, this.beta );
});

/**
* Beta distribution mode.
*
* @name mode
* @memberof Beta.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.mode;
* // returns ~0.214
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'mode', function get() {
	return _$mode_568( this.alpha, this.beta );
});

/**
* Beta distribution skewness.
*
* @name skewness
* @memberof Beta.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.skewness;
* // returns ~0.529
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'skewness', function get() {
	return _$skewness_576( this.alpha, this.beta );
});

/**
* Beta distribution standard deviation.
*
* @name stdev
* @memberof Beta.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.stdev;
* // returns ~0.105
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'stdev', function get() {
	return _$stdev_578( this.alpha, this.beta );
});

/**
* Beta distribution variance.
*
* @name variance
* @memberof Beta.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var beta = new Beta( 4.0, 12.0 );
*
* var v = beta.variance;
* // returns ~0.011
*/
_$setNonEnumerableReadOnlyAccessor_1601( Beta.prototype, 'variance', function get() {
	return _$variance_580( this.alpha, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.cdf( 0.5 );
* // returns ~0.813
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'cdf', betaCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.logcdf( 0.5 );
* // returns ~-0.208
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'logcdf', betaLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.logpdf( 0.8 );
* // returns ~-2.0557
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'logpdf', betaLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Beta.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.mgf( 0.5 );
* // returns ~1.186
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'mgf', betaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Beta.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.pdf( 0.8 );
* // returns ~0.13
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'pdf', betaPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Beta.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var beta = new Beta( 2.0, 4.0 );
*
* var v = beta.quantile( 0.5 );
* // returns ~0.314
*/
_$setNonEnumerableReadOnly_1603( Beta.prototype, 'quantile', betaQuantile );


// EXPORTS //

var _$Beta_548 = Beta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta distribution constructor.
*
* @module @stdlib/stats/base/dists/beta/ctor
*
* @example
* var Beta = require( '@stdlib/stats/base/dists/beta/ctor' );
*
* var beta = new Beta( 1.0, 1.0 );
*
* var y = beta.cdf( 0.8 );
* // returns 0.8
*
* var mu = beta.mean;
* // returns 0.5
*/

// MODULES //

/* removed: var _$Beta_548 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_549 = _$Beta_548;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_547 = require( '@stdlib/stats/base/dists/beta/cdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.074
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.38
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __cdf_582( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	return _$cdf_547( x / ( 1.0 + x ), alpha, beta );
}


// EXPORTS //

var _$cdf_582 = __cdf_582;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var betaFactory = _$cdf_547.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/
function __factory_583( alpha, beta ) {
	var betaCDF;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	betaCDF = betaFactory( alpha, beta );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		return betaCDF( x / ( 1.0 + x ) );
	}
}


// EXPORTS //

var _$factory_583 = __factory_583;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.
*
* @module @stdlib/stats/base/dists/betaprime/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/betaprime/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.333
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.539
*
* @example
* var factory = require( '@stdlib/stats/base/dists/betaprime/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.465
*
* y = cdf( 0.3 );
* // returns ~0.319
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_582 = require( './cdf.js' ); */;
/* removed: var _$factory_583 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_582, 'factory', _$factory_583 );


// EXPORTS //

var _$cdf_584 = _$cdf_582;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
*
* @example
* var v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
*
* @example
* var v = kurtosis( 2.0, 4.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_588( alpha, beta ) {
	var abm1;
	var bm1;
	var out;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 4.0
	) {
		return NaN;
	}
	abm1 = alpha + beta - 1.0;
	bm1 = beta - 1.0;
	out = ( alpha * abm1 * ( (5.0*beta )-11.0 ) ) + ( ( bm1*bm1 )*( bm1-1.0 ) );
	out *= 6.0;
	out /= alpha * abm1 * ( beta-3.0 ) * ( beta-4.0 );
	return out;
}


// EXPORTS //

var _$kurtosis_588 = __kurtosis_588;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/betaprime/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/betaprime/kurtosis' );
*
* var v = kurtosis( 2.0, 6.0 );
* // returns ~26.143
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~5.764
*
* v = kurtosis( 12.0, 6.0 );
* // returns ~19.49
*/

// MODULES //

/* removed: var _$kurtosis_588 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_587 = _$kurtosis_588;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 2.0 );
* // returns 1.0
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.364
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns 8.0
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_596( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 1.0 ) {
		return NaN;
	}
	return alpha / ( beta - 1.0 );
}


// EXPORTS //

var _$mean_596 = __mean_596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution expected value.
*
* @module @stdlib/stats/base/dists/betaprime/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/betaprime/mean' );
*
* var v = mean( 1.0, 2.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.364
*
* v = mean( 8.0, 2.0 );
* // returns 8.0
*/

// MODULES //

/* removed: var _$mean_596 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_595 = _$mean_596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 2.0 );
* // returns 0.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.231
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~2.333
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_598( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha < 1.0 ) {
		return 0.0;
	}
	return ( alpha - 1.0 ) / ( beta + 1.0 );
}


// EXPORTS //

var _$mode_598 = __mode_598;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution mode.
*
* @module @stdlib/stats/base/dists/betaprime/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/betaprime/mode' );
*
* var v = mode( 1.0, 2.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~0.231
*
* v = mode( 8.0, 2.0 );
* // returns ~2.333
*/

// MODULES //

/* removed: var _$mode_598 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_597 = _$mode_598;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~1.724
*
* @example
* var v = skewness( 8.0, 4.0 );
* // returns ~5.729
*
* @example
* var v = skewness( 2.0, 2.0 );
* // returns NaN
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_606( alpha, beta ) {
	var out;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 3.0
	) {
		return NaN;
	}
	out = 2.0 * ( ( 2.0*alpha ) + beta - 1.0 ) / ( beta-3.0 );
	out *= _$sqrt_437( ( beta-2.0 ) / ( alpha * ( alpha+beta-1.0 ) ) );
	return out;
}


// EXPORTS //

var _$skewness_606 = __skewness_606;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution skewness.
*
* @module @stdlib/stats/base/dists/betaprime/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/betaprime/skewness' );
*
* var v = skewness( 2.0, 4.0 );
* // returns ~6.261
*
* v = skewness( 4.0, 12.0 );
* // returns ~1.724
*
* v = skewness( 8.0, 4.0 );
* // returns ~5.729
*/

// MODULES //

/* removed: var _$skewness_606 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_605 = _$skewness_606;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.223
*
* @example
* var v = stdev( 8.0, 2.5 );
* // returns ~8.219
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns NaN
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_608( alpha, beta ) {
	var bm1;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return _$sqrt_437( ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 ) );
}


// EXPORTS //

var _$stdev_608 = __stdev_608;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution standard deviation.
*
* @module @stdlib/stats/base/dists/betaprime/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/betaprime/stdev' );
*
* var v = stdev( 1.0, 3.0 );
* // returns ~0.866
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.223
*
* v = stdev( 8.0, 2.5 );
* // returns ~8.219
*/

// MODULES //

/* removed: var _$stdev_608 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_607 = _$stdev_608;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a beta prime distribution.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.05
*
* @example
* var v = variance( 8.0, 2.5 );
* // returns ~67.556
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns NaN
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_610( alpha, beta ) {
	var bm1;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 2.0
	) {
		return NaN;
	}
	bm1 = beta - 1.0;
	return ( alpha * ( alpha + bm1 ) ) / ( ( bm1-1.0 ) * bm1*bm1 );
}


// EXPORTS //

var _$variance_610 = __variance_610;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution variance.
*
* @module @stdlib/stats/base/dists/betaprime/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/betaprime/variance' );
*
* var v = variance( 1.0, 3.0 );
* // returns ~0.75
*
* v = variance( 4.0, 12.0 );
* // returns ~0.05
*
* v = variance( 8.0, 2.5 );
* // returns ~67.556
*/

// MODULES //

/* removed: var _$variance_610 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_609 = _$variance_610;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$logcdf_555 = require( '@stdlib/stats/base/dists/beta/logcdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-1.099
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.618
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.603
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.968
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __logcdf_591( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	return _$logcdf_555( x / ( 1.0 + x ), alpha, beta );
}


// EXPORTS //

var _$logcdf_591 = __logcdf_591;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __betaFactory_589 = _$logcdf_555.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.767
*
* y = logcdf( 0.3 );
* // returns ~-1.143
*/
function __factory_589( alpha, beta ) {
	var betaLogCDF;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	betaLogCDF = __betaFactory_589( alpha, beta );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 0.0;
		}
		return betaLogCDF( x / ( 1.0 + x ) );
	}
}


// EXPORTS //

var _$factory_589 = __factory_589;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a beta prime distribution.
*
* @module @stdlib/stats/base/dists/betaprime/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/betaprime/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-1.099
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.618
*
* @example
* var factory = require( '@stdlib/stats/base/dists/betaprime/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.766
*
* y = logcdf( 0.3 );
* // returns ~-1.142
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_591 = require( './logcdf.js' ); */;
/* removed: var _$factory_589 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_591, 'factory', _$factory_589 );


// EXPORTS //

var _$logcdf_590 = _$logcdf_591;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.547
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~-0.43
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __logpdf_594( x, alpha, beta ) {
	var out;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		// Support of the BetaPrime distribution: (0,∞)
		return _$FLOAT64_NINF_107;
	}
	out = ( alpha-1.0 ) * _$ln_376( x );
	out -= ( alpha+beta ) * _$log1p_380( x );
	out -= _$betaln_170( alpha, beta );
	return out;
}


// EXPORTS //

var _$logpdf_594 = __logpdf_594;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-1.62
*
* y = logpdf( 0.3 );
* // returns ~-0.805
*/
function __factory_592( alpha, beta ) {
	var betalnAB;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	betalnAB = _$betaln_170( alpha, beta );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated natural logarithm of the PDF
	*
	* @example
	* var y = logpdf( 0.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			// Support of the BetaPrime distribution: (0,∞)
			return _$FLOAT64_NINF_107;
		}
		out = ( alpha-1.0 ) * _$ln_376( x );
		out -= ( alpha+beta ) * _$log1p_380( x );
		out -= betalnAB;
		return out;
	}
}


// EXPORTS //

var _$factory_592 = __factory_592;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the probability density function (logPDF) for a beta prime distribution.
*
* @module @stdlib/stats/base/dists/betaprime/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/betaprime/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns ~-0.811
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~-0.13
*
* @example
* var factory = require( '@stdlib/stats/base/dists/betaprime/logpdf' ).factory;
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.228
*
* y = logpdf( 0.3 );
* // returns ~-0.364
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_594 = require( './logpdf.js' ); */;
/* removed: var _$factory_592 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_594, 'factory', _$factory_592 );


// EXPORTS //

var _$logpdf_593 = _$logpdf_594;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$logpdf_593 = require( '@stdlib/stats/base/dists/betaprime/logpdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.579
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~0.65
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __pdf_601( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( _$logpdf_593( x, alpha, beta ) );
}


// EXPORTS //

var _$pdf_601 = __pdf_601;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var logpdfFactory = _$logpdf_593.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/
function __factory_599( alpha, beta ) {
	var logpdf;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	logpdf = logpdfFactory( alpha, beta );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a beta prime distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 0.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return _$exp_225( logpdf( x ) );
	}
}


// EXPORTS //

var _$factory_599 = __factory_599;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for a beta prime distribution.
*
* @module @stdlib/stats/base/dists/betaprime/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/betaprime/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns ~0.444
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~0.878
*
* @example
* var factory = require( '@stdlib/stats/base/dists/betaprime/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.198
*
* y = pdf( 0.3 );
* // returns ~0.447
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_601 = require( './pdf.js' ); */;
/* removed: var _$factory_599 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_601, 'factory', _$factory_599 );


// EXPORTS //

var _$pdf_600 = _$pdf_601;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betaincinv_166 = require( '@stdlib/math/base/special/betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_604( p, alpha, beta ) {
	var x;
	if (
		_$isnan_130( p ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	x = _$betaincinv_166( p, alpha, beta );
	return x / ( 1.0-x );
}


// EXPORTS //

var _$quantile_604 = __quantile_604;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betaincinv_166 = require( '@stdlib/math/base/special/betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.
*
* @param {PositiveNumber} alpha - first shape parameter
* @param {PositiveNumber} beta - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~9.468
*
* y = quantile( 0.8 );
* // returns ~70.042
*/
function __factory_602( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a beta prime distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var x;
		if (
			_$isnan_130( p ) ||
			p < 0.0 ||
			p > 1.0
		) {
			return NaN;
		}
		x = _$betaincinv_166( p, alpha, beta );
		return x / ( 1.0-x );
	}
}


// EXPORTS //

var _$factory_602 = __factory_602;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for a beta prime distribution.
*
* @module @stdlib/stats/base/dists/betaprime/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/betaprime/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~8.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~2.187
*
* @example
* var factory = require( '@stdlib/stats/base/dists/betaprime/quantile' ).factory;
*
* var quantile = factory( 2.0, 2.0 );
*
* var y = quantile( 0.8 );
* // returns ~2.482
*
* y = quantile( 0.4 );
* // returns ~0.763
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_604 = require( './quantile.js' ); */;
/* removed: var _$factory_602 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_604, 'factory', _$factory_602 );


// EXPORTS //

var _$quantile_603 = _$quantile_604;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_585 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$kurtosis_587 = require( '@stdlib/stats/base/dists/betaprime/kurtosis' ); */;
/* removed: var _$mean_595 = require( '@stdlib/stats/base/dists/betaprime/mean' ); */;
/* removed: var _$mode_597 = require( '@stdlib/stats/base/dists/betaprime/mode' ); */;
/* removed: var _$skewness_605 = require( '@stdlib/stats/base/dists/betaprime/skewness' ); */;
/* removed: var _$stdev_607 = require( '@stdlib/stats/base/dists/betaprime/stdev' ); */;
/* removed: var _$variance_609 = require( '@stdlib/stats/base/dists/betaprime/variance' ); */;
/* removed: var _$cdf_584 = require( '@stdlib/stats/base/dists/betaprime/cdf' ); */;
/* removed: var _$logcdf_590 = require( '@stdlib/stats/base/dists/betaprime/logcdf' ); */;
/* removed: var _$logpdf_593 = require( '@stdlib/stats/base/dists/betaprime/logpdf' ); */;
/* removed: var _$pdf_600 = require( '@stdlib/stats/base/dists/betaprime/pdf' ); */;
/* removed: var _$quantile_603 = require( '@stdlib/stats/base/dists/betaprime/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function betaPrimeCDF( x ) {
	return _$cdf_584( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function betaPrimeLogCDF( x ) {
	return _$logcdf_590( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function betaPrimeLogPDF( x ) {
	return _$logpdf_593( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function betaPrimePDF( x ) {
	return _$pdf_600( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function betaPrimeQuantile( p ) {
	return _$quantile_603( p, this.alpha, this.beta );
}


// MAIN //

/**
* Beta prime distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - first shape parameter
* @param {PositiveNumber} [beta=1.0] - second shape parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {BetaPrime} distribution instance
*
* @example
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var v = betaprime.mode;
* // returns 0.0
*/
function BetaPrime() {
	var alpha;
	var beta;
	if ( !(this instanceof BetaPrime) ) {
		if ( arguments.length === 0 ) {
			return new BetaPrime();
		}
		return new BetaPrime( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !__isPositive_585( alpha ) ) {
			throw new TypeError( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !__isPositive_585( beta ) ) {
			throw new TypeError( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !__isPositive_585( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !__isPositive_585( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Beta prime distribution excess kurtosis.
*
* @name kurtosis
* @memberof BetaPrime.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.kurtosis;
* // returns ~5.764
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'kurtosis', function get() {
	return _$kurtosis_587( this.alpha, this.beta );
});

/**
* Beta prime distribution expected value.
*
* @name mean
* @memberof BetaPrime.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mean;
* // returns ~0.364
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'mean', function get() {
	return _$mean_595( this.alpha, this.beta );
});

/**
* Beta prime distribution mode.
*
* @name mode
* @memberof BetaPrime.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.mode;
* // returns ~0.231
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'mode', function get() {
	return _$mode_597( this.alpha, this.beta );
});

/**
* Beta prime distribution skewness.
*
* @name skewness
* @memberof BetaPrime.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.skewness;
* // returns ~1.724
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'skewness', function get() {
	return _$skewness_605( this.alpha, this.beta );
});

/**
* Beta prime distribution standard deviation.
*
* @name stdev
* @memberof BetaPrime.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.stdev;
* // returns ~0.223
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'stdev', function get() {
	return _$stdev_607( this.alpha, this.beta );
});

/**
* Beta prime distribution variance.
*
* @name variance
* @memberof BetaPrime.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var betaprime = new BetaPrime( 4.0, 12.0 );
*
* var v = betaprime.variance;
* // returns ~0.05
*/
_$setNonEnumerableReadOnlyAccessor_1601( BetaPrime.prototype, 'variance', function get() {
	return _$variance_609( this.alpha, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.cdf( 0.5 );
* // returns ~0.539
*/
_$setNonEnumerableReadOnly_1603( BetaPrime.prototype, 'cdf', betaPrimeCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.logcdf( 0.5 );
* // returns ~-0.618
*/
_$setNonEnumerableReadOnly_1603( BetaPrime.prototype, 'logcdf', betaPrimeLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.logpdf( 0.8 );
* // returns ~-0.754
*/
_$setNonEnumerableReadOnly_1603( BetaPrime.prototype, 'logpdf', betaPrimeLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof BetaPrime.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.pdf( 0.8 );
* // returns ~0.47
*/
_$setNonEnumerableReadOnly_1603( BetaPrime.prototype, 'pdf', betaPrimePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof BetaPrime.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var betaprime = new BetaPrime( 2.0, 4.0 );
*
* var v = betaprime.quantile( 0.5 );
* // returns ~0.457
*/
_$setNonEnumerableReadOnly_1603( BetaPrime.prototype, 'quantile', betaPrimeQuantile );


// EXPORTS //

var _$BetaPrime_585 = BetaPrime;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Beta prime distribution constructor.
*
* @module @stdlib/stats/base/dists/betaprime/ctor
*
* @example
* var BetaPrime = require( '@stdlib/stats/base/dists/betaprime/ctor' );
*
* var betaprime = new BetaPrime( 1.0, 1.0 );
*
* var y = betaprime.cdf( 0.8 );
* // returns ~0.444
*
* var mode = betaprime.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$BetaPrime_585 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_586 = _$BetaPrime_585;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a nonnegative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -10.0 );
* // returns false
*/
function isNonNegativeInteger( x ) {
	return (_$floor_236(x) === x && x >= 0);
}


// EXPORTS //

var _$isNonNegativeInteger_137 = isNonNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a nonnegative integer.
*
* @module @stdlib/math/base/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 1.0 );
* // returns true
*
* bool = isNonNegativeInteger( 0.0 );
* // returns true
*
* bool = isNonNegativeInteger( -10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNonNegativeInteger_137 = require( './is_nonnegative_integer.js' ); */;


// EXPORTS //

var _$isNonNegativeInteger_136 = _$isNonNegativeInteger_137;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* @example
* var y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* @example
* var y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* @example
* var y = cdf( 0.0, 10, 0.4 );
* // returns ~0.006
*
* @example
* var y = cdf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function __cdf_611( x, n, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x >= n ) {
		return 1.0;
	}
	x = _$floor_236( x + 1.0e-7 );
	return _$betainc_164( p, x + 1.0, n - x, true, true );
}


// EXPORTS //

var _$cdf_611 = __cdf_611;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10, 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/
function __factory_612( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x >= n ) {
			return 1.0;
		}
		// Ensure left-continuity:
		x = _$floor_236( x + 1.0e-7 );
		return _$betainc_164( p, x + 1.0, n - x, true, true );
	}
}


// EXPORTS //

var _$factory_612 = __factory_612;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/binomial/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/binomial/cdf' );
*
* var y = cdf( 3.0, 20, 0.2 );
* // returns ~0.411
*
* y = cdf( 21.0, 20, 0.2 );
* // returns 1.0
*
* y = cdf( 5.0, 10, 0.4 );
* // returns ~0.834
*
* y = cdf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/cdf' ).factory;
*
* var cdf = factory( 10, 0.5 );
*
* var y = cdf( 3.0 );
* // returns ~0.172
*
* y = cdf( 1.0 );
* // returns ~0.011
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_611 = require( './cdf.js' ); */;
/* removed: var _$factory_612 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_611, 'factory', _$factory_612 );


// EXPORTS //

var _$cdf_613 = _$cdf_611;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Tests if a number primitive is an integer value.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a number primitive is an integer value
*/
function __isInteger_43( value ) {
	return (
		value < _$FLOAT64_PINF_110 &&
		value > _$FLOAT64_NINF_107 &&
		_$isInteger_128( value )
	);
}


// EXPORTS //

var _$isInteger_43 = __isInteger_43;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_46 = _$isNumber_58.isPrimitive;
/* removed: var _$isInteger_43 = require( './integer.js' ); */;


// MAIN //

/**
* Tests if a value is a number primitive having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having an integer value
*
* @example
* var bool = isInteger( -3.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( -3.0 ) );
* // returns false
*/
function __isInteger_46( value ) {
	return (
		__isNumber_46( value ) &&
		_$isInteger_43( value )
	);
}


// EXPORTS //

var _$isInteger_46 = __isInteger_46;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_45 = _$isNumber_58.isObject;
/* removed: var _$isInteger_43 = require( './integer.js' ); */;


// MAIN //

/**
* Tests if a value is a number object having an integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having an integer value
*
* @example
* var bool = isInteger( 3.0 );
* // returns false
*
* @example
* var bool = isInteger( new Number( 3.0 ) );
* // returns true
*/
function __isInteger_45( value ) {
	return (
		__isNumber_45( value ) &&
		_$isInteger_43( value.valueOf() )
	);
}


// EXPORTS //

var _$isInteger_45 = __isInteger_45;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_46 = require( './primitive.js' ); */;
/* removed: var _$isInteger_45 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is an integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an integer
*
* @example
* var bool = isInteger( 5.0 );
* // returns true
*
* @example
* var bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isInteger( -3.14 );
* // returns false
*
* @example
* var bool = isInteger( null );
* // returns false
*/
function __isInteger_44( value ) {
	return ( _$isInteger_46( value ) || _$isInteger_45( value ) );
}


// EXPORTS //

var _$isInteger_44 = __isInteger_44;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an integer.
*
* @module @stdlib/assert/is-integer
*
* @example
* var isInteger = require( '@stdlib/assert/is-integer' );
*
* var bool = isInteger( 5.0 );
* // returns true
*
* bool = isInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isInteger( -3.14 );
* // returns false
*
* bool = isInteger( null );
* // returns false
*
* @example
* // Use interface to check for integer primitives...
* var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
*
* var bool = isInteger( -3.0 );
* // returns true
*
* bool = isInteger( new Number( -3.0 ) );
* // returns false
*
* @example
* // Use interface to check for integer objects...
* var isInteger = require( '@stdlib/assert/is-integer' ).isObject;
*
* var bool = isInteger( 3.0 );
* // returns false
*
* bool = isInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isInteger_44 = require( './main.js' ); */;
/* removed: var _$isInteger_46 = require( './primitive.js' ); */;
/* removed: var _$isInteger_45 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isInteger_44, 'isPrimitive', _$isInteger_46 );
_$setNonEnumerableReadOnly_1603( _$isInteger_44, 'isObject', _$isInteger_45 );


// EXPORTS //

var _$isInteger_42 = _$isInteger_44;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_69 = _$isInteger_42.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*/
function isPositiveInteger( value ) {
	return (
		__isInteger_69( value ) &&
		value > 0.0
	);
}


// EXPORTS //

var _$isPositiveInteger_69 = isPositiveInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_68 = _$isInteger_42.isObject;


// MAIN //

/**
* Tests if a value is a number object having a positive integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a positive integer value
*
* @example
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/
function __isPositiveInteger_68( value ) {
	return (
		__isInteger_68( value ) &&
		value.valueOf() > 0.0
	);
}


// EXPORTS //

var _$isPositiveInteger_68 = __isPositiveInteger_68;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_69 = require( './primitive.js' ); */;
/* removed: var _$isPositiveInteger_68 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a positive integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a positive integer
*
* @example
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -5.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( 3.14 );
* // returns false
*
* @example
* var bool = isPositiveInteger( null );
* // returns false
*/
function __isPositiveInteger_67( value ) {
	return ( _$isPositiveInteger_69( value ) || _$isPositiveInteger_68( value ) );
}


// EXPORTS //

var _$isPositiveInteger_67 = __isPositiveInteger_67;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a positive integer.
*
* @module @stdlib/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 5.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isPositiveInteger( -5.0 );
* // returns false
*
* bool = isPositiveInteger( 3.14 );
* // returns false
*
* bool = isPositiveInteger( null );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
*
* var bool = isPositiveInteger( 3.0 );
* // returns true
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isObject;
*
* var bool = isPositiveInteger( 3.0 );
* // returns false
*
* bool = isPositiveInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isPositiveInteger_67 = require( './main.js' ); */;
/* removed: var _$isPositiveInteger_69 = require( './primitive.js' ); */;
/* removed: var _$isPositiveInteger_68 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isPositiveInteger_67, 'isPrimitive', _$isPositiveInteger_69 );
_$setNonEnumerableReadOnly_1603( _$isPositiveInteger_67, 'isObject', _$isPositiveInteger_68 );


// EXPORTS //

var _$isPositiveInteger_66 = _$isPositiveInteger_67;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the kurtosis of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
*
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~-0.1
*
* @example
* var v = kurtosis( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
*/
function __kurtosis_619( n, p ) {
	var pq;
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	pq = p * ( 1.0 - p );
	return ( 1.0 - ( 6.0 * pq ) ) / ( n * pq );
}


// EXPORTS //

var _$kurtosis_619 = __kurtosis_619;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.1 );
* // returns ~0.051
*
* v = kurtosis( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

/* removed: var _$kurtosis_619 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_618 = _$kurtosis_619;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the expected value of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.1 );
* // returns 10.0
*
* @example
* var v = mean( 20, 0.5 );
* // returns 10.0
*
* @example
* var v = mean( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
*
* @example
* var v = mean( 20, NaN );
* // returns NaN
*/
function __mean_624( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return n * p;
}


// EXPORTS //

var _$mean_624 = __mean_624;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution expected value.
*
* @module @stdlib/stats/base/dists/binomial/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/binomial/mean' );
*
* var v = mean( 100, 0.1 );
* // returns 10.0
*
* v = mean( 20, 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$mean_624 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_623 = _$mean_624;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$mean_623 = require( '@stdlib/stats/base/dists/binomial/mean' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the median of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 100, 0.1 );
* // returns 10
*
* @example
* var v = median( 20, 0.5 );
* // returns 10
*
* @example
* var v = median( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = median( 20, 1.1 );
* // returns NaN
*
* @example
* var v = median( 20, NaN );
* // returns NaN
*/
function __median_626( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return _$round_424( _$mean_623( n, p ) );
}


// EXPORTS //

var _$median_626 = __median_626;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution median.
*
* @module @stdlib/stats/base/dists/binomial/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/binomial/median' );
*
* var v = median( 100, 0.1 );
* // returns 10
*
* v = median( 20, 0.5 );
* // returns 10
*/

// MODULES //

/* removed: var _$median_626 = require( './median.js' ); */;


// EXPORTS //

var _$median_625 = _$median_626;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the mode of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.1 );
* // returns 10
*
* @example
* var v = mode( 20, 0.5 );
* // returns 10
*
* @example
* var v = mode( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
*
* @example
* var v = mode( 20, NaN );
* // returns NaN
*/
function __mode_631( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return _$floor_236( ( n+1 ) * p );
}


// EXPORTS //

var _$mode_631 = __mode_631;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution mode.
*
* @module @stdlib/stats/base/dists/binomial/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/binomial/mode' );
*
* var v = mode( 100, 0.1 );
* // returns 10
*
* v = mode( 20, 0.5 );
* // returns 10
*/

// MODULES //

/* removed: var _$mode_631 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_630 = _$mode_631;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the skewness of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} skewness
*
* @example
* var v = skewness( 100, 0.1 );
* // returns ~0.267
*
* @example
* var v = skewness( 20, 0.5 );
* // returns 0.0
*
* @example
* var v = skewness( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
*
* @example
* var v = skewness( 20, NaN );
* // returns NaN
*/
function __skewness_641( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return ( 1.0 - ( 2.0*p ) ) / _$sqrt_437( n * p * ( 1.0-p ) );
}


// EXPORTS //

var _$skewness_641 = __skewness_641;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution skewness.
*
* @module @stdlib/stats/base/dists/binomial/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/binomial/skewness' );
*
* var v = skewness( 100, 0.1 );
* // returns 9
*
* v = skewness( 20, 0.5 );
* // returns 5
*/

// MODULES //

/* removed: var _$skewness_641 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_640 = _$skewness_641;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.1 );
* // returns 3.0
*
* @example
* var v = stdev( 20, 0.5 );
* // returns ~2.236
*
* @example
* var v = stdev( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
*
* @example
* var v = stdev( 20, NaN );
* // returns NaN
*/
function __stdev_643( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return _$sqrt_437( n * p * ( 1.0 - p ) );
}


// EXPORTS //

var _$stdev_643 = __stdev_643;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution standard deviation.
*
* @module @stdlib/stats/base/dists/binomial/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/binomial/stdev' );
*
* var v = stdev( 100, 0.1 );
* // returns 3.0
*
* v = stdev( 20, 0.5 );
* // returns ~2.236
*/

// MODULES //

/* removed: var _$stdev_643 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_642 = _$stdev_643;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.1 );
* // returns 9.0
*
* @example
* var v = variance( 20, 0.5 );
* // returns 5.0
*
* @example
* var v = variance( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
*
* @example
* var v = variance( 20, NaN );
* // returns NaN
*/
function __variance_645( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	return n * p * ( 1.0 - p );
}


// EXPORTS //

var _$variance_645 = __variance_645;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution variance.
*
* @module @stdlib/stats/base/dists/binomial/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/binomial/variance' );
*
* var v = variance( 100, 0.1 );
* // returns 9
*
* v = variance( 20, 0.5 );
* // returns 5
*/

// MODULES //

/* removed: var _$variance_645 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_644 = _$variance_645;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Computes the natural logarithm of the binomial coefficient of two integers.
*
* @param {integer} n - input value
* @param {integer} k - second input value
* @returns {number} function value
*
* @example
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* @example
* var v = binomcoefln( 0, 0 );
* // returns 0.0
*
* @example
* var v = binomcoefln( -4, 2 );
* // returns ~2.303
*
* @example
* var v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* @example
* var v = binomcoefln( NaN, 3 );
* // returns NaN
*
* @example
* var v = binomcoefln( 5, NaN );
* // returns NaN
*
* @example
* var v = binomcoefln( NaN, NaN );
* // returns NaN
*/
function binomcoefln( n, k ) {
	if ( _$isnan_130( n ) || _$isnan_130( k ) ) {
		return NaN;
	}
	if ( !_$isInteger_128( n ) || !_$isInteger_128( k ) ) {
		return NaN;
	}
	if ( n < 0.0 ) {
		return binomcoefln( -n + k - 1.0, k );
	}
	if ( k < 0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( k === 0 ) {
		return 0.0;
	}
	if ( k === 1 ) {
		return _$ln_376( _$abs_147( n ) );
	}
	if ( n < k ) {
		return _$FLOAT64_NINF_107;
	}
	if ( n - k < 2 ) {
		return binomcoefln( n, n - k );
	}
	// Case: n - k >= 2
	return -_$ln_376( n + 1 ) - _$betaln_170( n - k + 1, k + 1 );
}


// EXPORTS //

var _$binomcoefln_173 = binomcoefln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the natural logarithm of the binomial coefficient.
*
* @module @stdlib/math/base/special/binomcoefln
*
* @example
* var binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );
*
* var v = binomcoefln( 8, 2 );
* // returns ~3.332
*
* v = binomcoefln( 0, 0 );
* // returns 0.0
*
* v = binomcoefln( -4, 2 );
* // returns ~2.302
*
* v = binomcoefln( 88, 3 );
* // returns ~11.606
*
* v = binomcoefln( NaN, 3 );
* // returns NaN
*
* v = binomcoefln( 5, NaN );
* // returns NaN
*
* v = binomcoefln( NaN, NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$binomcoefln_173 = require( './binomcoefln.js' ); */;


// EXPORTS //

var _$binomcoefln_174 = _$binomcoefln_173;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$binomcoefln_174 = require( '@stdlib/math/base/special/binomcoefln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 3.0, 20, 0.2 );
* // returns ~-1.583
*
* @example
* var y = logpmf( 21.0, 20, 0.2 );
* // returns -Infinity
*
* @example
* var y = logpmf( 5.0, 10, 0.4 );
* // returns ~-1.606
*
* @example
* var y = logpmf( 0.0, 10, 0.4 );
* // returns ~-5.108
*
* @example
* var y = logpmf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, 1.5 );
* // returns NaN
*/
function logpmf( x, n, p ) {
	var out;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( _$isNonNegativeInteger_136( x ) ) {
		if ( x > n ) {
			return _$FLOAT64_NINF_107;
		}
		if ( p === 0.0 ) {
			return ( x === 0 ) ? 0.0 : _$FLOAT64_NINF_107;
		}
		if ( p === 1.0 ) {
			return ( x === n ) ? 0.0 : _$FLOAT64_NINF_107;
		}
		out = _$binomcoefln_174( n, x );
		out += (x * _$ln_376( p )) + (( n - x ) * _$log1p_380( -p ));
		return out;
	}
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpmf_622 = logpmf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} logarithm of probability mass function
*
* @example
* var y = logpmf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logpmf( 3.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logpmf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*/
function __logpmf_778( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? 0.0 : _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpmf_778 = __logpmf_778;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 5.0 );
*
* var y = logpmf( 0.0 );
* // returns -Infinity
*
* y = logpmf( 5.0 );
* // returns 0.0
*/
function __factory_776( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 10.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? 0.0 : _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_776 = __factory_776;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PDF) for a degenerate distribution.
*
* @module @stdlib/stats/base/dists/degenerate/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/degenerate/logpmf' );
*
* var y = logpmf( 2.0, 0.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/logpmf' ).factory;
*
* var logpmf = factory( 10.0 );
*
* var y = logpmf( 10.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_778 = require( './logpmf.js' ); */;
/* removed: var _$factory_776 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_778, 'factory', _$factory_776 );


// EXPORTS //

var _$logpmf_777 = _$logpmf_778;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$binomcoefln_174 = require( '@stdlib/math/base/special/binomcoefln' ); */;
var degenerate = _$logpmf_777.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 10, 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-2.144
*
* y = logpmf( 5.0 );
* // returns ~-1.402
*/
function __factory_620( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( p === 0.0 || n === 0 ) {
		return degenerate( 0.0 );
	}
	if ( p === 1.0 ) {
		return degenerate( n );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) ) {
			if ( x > n ) {
				return _$FLOAT64_NINF_107;
			}
			out = _$binomcoefln_174( n, x );
			out += (x * _$ln_376( p )) + ((n - x) * _$log1p_380( -p ));
			return out;
		}
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_620 = __factory_620;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a binomial distribution.
*
* @module @stdlib/stats/base/dists/binomial/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/binomial/logpmf' );
*
* var y = logpmf( 3.0, 20, 0.2 );
* // returns ~-1.583
*
* y = logpmf( 21.0, 20, 0.2 );
* // returns -Infinity
*
* y = logpmf( 5.0, 10, 0.4 );
* // returns ~-1.606
*
* y = logpmf( 0.0, 10, 0.4 );
* // returns ~-5.108
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/logpmf' ).factory;
*
* var logpmf = factory( 10, 0.5 );
*
* var y = logpmf( 3.0 );
* // returns ~-2.146
*
* y = logpmf( 5.0 );
* // returns ~-1.402
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_622 = require( './logpmf.js' ); */;
/* removed: var _$factory_620 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_622, 'factory', _$factory_620 );


// EXPORTS //

var _$logpmf_621 = _$logpmf_622;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a binomial distribution with number of trials `n` and success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
*
* @example
* var y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
*
* @example
* var y = mgf( 0.9, 10, 0.4 );
* // returns ~99.338
*
* @example
* var y = mgf( 0.0, 10, 0.4 );
* // returns 1.0
*
* @example
* var y = mgf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function __mgf_629( t, n, p ) {
	var base;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	base = 1.0 - p + (p * _$exp_225(t));
	return _$pow_396( base, n );
}


// EXPORTS //

var _$mgf_629 = __mgf_629;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10, 0.5 );
* var y = mgf( 0.3 );
* // returns ~5.013
*/
function __factory_627( n, p ) {
	if ( _$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		base = 1.0 - p + (p * _$exp_225(t));
		return _$pow_396( base, n );
	}
}


// EXPORTS //

var _$factory_627 = __factory_627;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a binomial distribution.
*
* @module @stdlib/stats/base/dists/binomial/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/binomial/mgf' );
*
* var y = mgf( 0.5, 20, 0.2 );
* // returns ~11.471
*
* y = mgf( 5.0, 20, 0.2 );
* // returns ~4.798e29
*
* y = mgf( 0.9, 10, 0.4 )
* // returns ~99.338
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/mgf' ).factory;
*
* var mgf = factory( 10, 0.5 );
*
* var y = mgf( 0.3 );
* // returns ~5.013
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_629 = require( './mgf.js' ); */;
/* removed: var _$factory_627 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_629, 'factory', _$factory_627 );


// EXPORTS //

var _$mgf_628 = _$mgf_629;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$binomcoefln_174 = require( '@stdlib/math/base/special/binomcoefln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* @example
* var y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* @example
* var y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* @example
* var y = pmf( 0.0, 10, 0.4 );
* // returns ~0.006
*
* @example
* var y = pmf( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 20, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*/
function __pmf_634( x, n, p ) {
	var lnl;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( _$isNonNegativeInteger_136( x ) ) {
		if ( x > n ) {
			return 0.0;
		}
		if ( p === 0.0 ) {
			return ( x === 0 ) ? 1.0 : 0.0;
		}
		if ( p === 1.0 ) {
			return ( x === n ) ? 1.0 : 0.0;
		}
		lnl = _$binomcoefln_174( n, x );
		lnl += (x * _$ln_376( p )) + (( n - x ) * _$log1p_380( -p ));
		return _$exp_225( lnl );
	}
	return 0.0;
}


// EXPORTS //

var _$pmf_634 = __pmf_634;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability mass function
*
* @example
* var y = pmf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = pmf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = pmf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*/
function __pmf_793( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? 1.0 : 0.0;
}


// EXPORTS //

var _$pmf_793 = __pmf_793;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability mass function
*
* @example
* var pmf = factory( 5.0 );
*
* var y = pmf( 0.0 );
* // returns 0.0
*
* y = pmf( 5.0 );
* // returns 1.0
*/
function __factory_791( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 10.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? 1.0 : 0.0;
	}
}


// EXPORTS //

var _$factory_791 = __factory_791;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution probability mass function (PDF).
*
* @module @stdlib/stats/base/dists/degenerate/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/degenerate/pmf' );
*
* var y = pmf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/pmf' ).factory;
*
* var pmf = factory( 10.0 );
*
* var y = pmf( 10.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_793 = require( './pmf.js' ); */;
/* removed: var _$factory_791 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_793, 'factory', _$factory_791 );


// EXPORTS //

var _$pmf_792 = _$pmf_793;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$binomcoefln_174 = require( '@stdlib/math/base/special/binomcoefln' ); */;
var __degenerate_632 = _$pmf_792.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/
function __factory_632( n, p ) {
	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( p === 0.0 || n === 0 ) {
		return __degenerate_632( 0.0 );
	}
	if ( p === 1.0 ) {
		return __degenerate_632( n );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) ) {
			if ( x > n ) {
				return 0.0;
			}
			lnl = _$binomcoefln_174( n, x );
			lnl += (x * _$ln_376( p )) + ((n - x) * _$log1p_380( -p ));
			return _$exp_225( lnl );
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_632 = __factory_632;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/binomial/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/binomial/pmf' );
*
* var y = pmf( 3.0, 20, 0.2 );
* // returns ~0.205
*
* y = pmf( 21.0, 20, 0.2 );
* // returns 0.0
*
* y = pmf( 5.0, 10, 0.4 );
* // returns ~0.201
*
* y = pmf( 0.0, 10, 0.4 );
* // returns ~0.06
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/pmf' ).factory;
*
* var pmf = factory( 10, 0.5 );
*
* var y = pmf( 3.0 );
* // returns ~0.117
*
* y = pmf( 5.0 );
* // returns ~0.246
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_634 = require( './pmf.js' ); */;
/* removed: var _$factory_632 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_634, 'factory', _$factory_632 );


// EXPORTS //

var _$pmf_633 = _$pmf_634;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_613 = require( '@stdlib/stats/base/dists/binomial/cdf' ); */;


// MAIN //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchLeft( x, r, n, p ) {
	while ( x !== 0 && _$cdf_613( x-1, n, p) >= r ) {
		x -=1;
	}
	return x;
}


// EXPORTS //

var _$searchLeft_638 = searchLeft;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_613 = require( '@stdlib/stats/base/dists/binomial/cdf' ); */;


// MAIN //

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} r - probability
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `r` quantile of the specified distribution
*/
function searchRight( x, r, n, p ) {
	x += 1;
	while ( _$cdf_613( x, n, p ) < r ) {
		x += 1;
	}
	return x;
}


// EXPORTS //

var _$searchRight_639 = searchRight;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$cdf_613 = require( '@stdlib/stats/base/dists/binomial/cdf' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$searchLeft_638 = require( './search_left.js' ); */;
/* removed: var _$searchRight_639 = require( './search_right.js' ); */;


// MAIN //

/**
* Evaluates the quantile function for a binomial distribution with number of trials `n` and success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p  - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 20, 0.2 );
* // returns 3
*
* @example
* var y = quantile( 0.8, 20, 0.2 );
* // returns 5
*
* @example
* var y = quantile( 0.5, 10, 0.4 );
* // returns 4
*
* @example
* var y = quantile( 0.0, 10, 0.4 );
* // returns 0
*
* @example
* var y = quantile( 1.0, 10, 0.4 );
* // returns 10
*
* @example
* var y = quantile( NaN, 20, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 20, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.5, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 20, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 20, 1.5 );
* // returns NaN
*/
function __quantile_637( r, n, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;

	if (
		_$isnan_130( r ) ||
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		r < 0.0 ||
		r > 1.0 ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( r === 1.0 || p === 1.0 ) {
		return n;
	}
	if ( r === 0.0 || p === 0.0 || n === 0 ) {
		return 0.0;
	}
	// Cornish-Fisher expansion:
	mu = n * p;
	sigma = _$sqrt_437( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	if ( r < 0.5 ) {
		x = -_$erfcinv_210( 2.0 * r ) * _$SQRT2_118;
	} else {
		x = _$erfcinv_210( 2.0 * ( 1.0-r ) ) * _$SQRT2_118;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
	guess = _$round_424( mu + (sigma * corr) );
	if ( _$cdf_613( guess, n, p ) >= r ) {
		return _$searchLeft_638( guess, r, n, p );
	}
	return _$searchRight_639( guess, r, n, p );
}


// EXPORTS //

var _$quantile_637 = __quantile_637;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a degenerate distribution centered at `mu`.
*
* @param {Probability} p - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function __quantile_796( p, mu ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$quantile_796 = __quantile_796;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the quantile function
*
* @example
* var quantile = factory( 5.0 );
*
* var y = quantile( 0.3 );
* // returns 5.0
*
* y = quantile( 0.1 );
* // returns 5.0
*
* y = quantile( 1.1 );
* // returns NaN
*/
function __factory_794( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function of a degenerate distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.5 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu;
	}
}


// EXPORTS //

var _$factory_794 = __factory_794;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution quantile function.
*
* @module @stdlib/stats/base/dists/degenerate/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/degenerate/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/quantile' ).factory;
*
* var quantile = factory( 10.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_796 = require( './quantile.js' ); */;
/* removed: var _$factory_794 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_796, 'factory', _$factory_794 );


// EXPORTS //

var _$quantile_795 = _$quantile_796;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_635 = _$quantile_795.factory;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$cdf_613 = require( '@stdlib/stats/base/dists/binomial/cdf' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$searchLeft_638 = require( './search_left.js' ); */;
/* removed: var _$searchRight_639 = require( './search_right.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a binomial distribution with number of trials `n` and success probability `p`.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10, 0.5 );
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/
function __factory_635( n, p ) {
	var sigmaInv;
	var sigma;
	var mu;

	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( p === 0.0 || n === 0.0 ) {
		return __degenerate_635( 0.0 );
	}
	if ( p === 1.0 ) {
		return __degenerate_635( n );
	}
	mu = n * p;
	sigma = _$sqrt_437( n * p * ( 1.0-p ) );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a binomial distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( _$isnan_130( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 0.0 ) {
			return 0;
		}
		if ( r === 1.0 ) {
			return n;
		}
		// Cornish-Fisher expansion:
		if ( r < 0.5 ) {
			x = -_$erfcinv_210( 2.0 * r ) * _$SQRT2_118;
		} else {
			x = _$erfcinv_210( 2.0 * ( 1.0-r ) ) * _$SQRT2_118;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + ( sigmaInv * ( x2-1.0 ) / 6.0 );
		guess = _$round_424( mu + (sigma * corr) );
		if ( _$cdf_613( guess, n, p ) >= r ) {
			return _$searchLeft_638( guess, r, n, p );
		}
		return _$searchRight_639( guess, r, n, p );
	}
}


// EXPORTS //

var _$factory_635 = __factory_635;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution quantile function.
*
* @module @stdlib/stats/base/dists/binomial/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/binomial/quantile' );
*
* var y = quantile( 0.4, 20, 0.2 );
* // returns 2
*
* y = quantile( 0.8, 20, 0.2 );
* // returns 5
*
* y = quantile( 0.5, 10, 0.4 );
* // returns 4
*
* @example
* var factory = require( '@stdlib/stats/base/dists/binomial/quantile' ).factory;
*
* var quantile = factory( 10, 0.5 );
*
* var y = quantile( 0.1 );
* // returns 3
*
* y = quantile( 0.9 );
* // returns 7
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_637 = require( './quantile.js' ); */;
/* removed: var _$factory_635 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_637, 'factory', _$factory_635 );


// EXPORTS //

var _$quantile_636 = _$quantile_637;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var __isPositiveInteger_614 = _$isPositiveInteger_66.isPrimitive;
var __isProbability_614 = _$isProbability_74.isPrimitive;
/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$kurtosis_618 = require( '@stdlib/stats/base/dists/binomial/kurtosis' ); */;
/* removed: var _$mean_623 = require( '@stdlib/stats/base/dists/binomial/mean' ); */;
/* removed: var _$median_625 = require( '@stdlib/stats/base/dists/binomial/median' ); */;
/* removed: var _$mode_630 = require( '@stdlib/stats/base/dists/binomial/mode' ); */;
/* removed: var _$skewness_640 = require( '@stdlib/stats/base/dists/binomial/skewness' ); */;
/* removed: var _$stdev_642 = require( '@stdlib/stats/base/dists/binomial/stdev' ); */;
/* removed: var _$variance_644 = require( '@stdlib/stats/base/dists/binomial/variance' ); */;
/* removed: var _$cdf_613 = require( '@stdlib/stats/base/dists/binomial/cdf' ); */;
/* removed: var _$logpmf_621 = require( '@stdlib/stats/base/dists/binomial/logpmf' ); */;
/* removed: var _$mgf_628 = require( '@stdlib/stats/base/dists/binomial/mgf' ); */;
/* removed: var _$pmf_633 = require( '@stdlib/stats/base/dists/binomial/pmf' ); */;
/* removed: var _$quantile_636 = require( '@stdlib/stats/base/dists/binomial/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function binomialCDF( x ) {
	return _$cdf_613( x, this.n, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function binomialLogPMF( x ) {
	return _$logpmf_621( x, this.n, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function binomialMGF( t ) {
	return _$mgf_628( t, this.n, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function binomialPMF( x ) {
	return _$pmf_633( x, this.n, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function binomialQuantile( p ) {
	return _$quantile_636( p, this.n, this.p );
}


// MAIN //

/**
* Binomial distribution constructor.
*
* @constructor
* @param {PositiveInteger} [n=1.0] - number of trials
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `n` must be a positive integer
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {Binomial} distribution instance
*
* @example
* var binomial = new Binomial( 5, 0.1 );
*
* var y = binomial.cdf( 0.8 );
* // returns ~0.59
*
* var v = binomial.mode;
* // returns 0.0
*/
function Binomial() {
	var n;
	var p;
	if ( !(this instanceof Binomial) ) {
		if ( arguments.length === 0 ) {
			return new Binomial();
		}
		return new Binomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		n = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !__isPositiveInteger_614( n ) ) {
			throw new TypeError( 'invalid argument. Number of trials `n` must be a positive integer. Value: `' + n + '`' );
		}
		if ( !__isProbability_614( p ) ) {
			throw new TypeError( 'invalid argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		n = 1;
		p = 0.5;
	}
	_$defineProperty_1606( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !__isPositiveInteger_614( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	_$defineProperty_1606( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !__isProbability_614( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Binomial distribution excess kurtosis.
*
* @name kurtosis
* @memberof Binomial.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.kurtosis;
* // returns ~-0.153
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'kurtosis', function get() {
	return _$kurtosis_618( this.n, this.p );
});

/**
* Binomial distribution expected value.
*
* @name mean
* @memberof Binomial.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mean;
* // returns ~4.8
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'mean', function get() {
	return _$mean_623( this.n, this.p );
});

/**
* Binomial distribution median.
*
* @name median
* @memberof Binomial.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.median;
* // returns 5.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'median', function get() {
	return _$median_625( this.n, this.p );
});

/**
* Binomial distribution mode.
*
* @name mode
* @memberof Binomial.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.mode;
* // returns 5.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'mode', function get() {
	return _$mode_630( this.n, this.p );
});

/**
* Binomial distribution skewness.
*
* @name skewness
* @memberof Binomial.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.skewness;
* // returns ~0.118
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'skewness', function get() {
	return _$skewness_640( this.n, this.p );
});

/**
* Binomial distribution standard deviation.
*
* @name stdev
* @memberof Binomial.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.stdev;
* // returns ~1.697
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'stdev', function get() {
	return _$stdev_642( this.n, this.p );
});

/**
* Binomial distribution variance.
*
* @name variance
* @memberof Binomial.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var binomial = new Binomial( 12, 0.4 );
*
* var v = binomial.variance;
* // returns ~2.88
*/
_$setNonEnumerableReadOnlyAccessor_1601( Binomial.prototype, 'variance', function get() {
	return _$variance_644( this.n, this.p );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.cdf( 0.5 );
* // returns ~0.41
*/
_$setNonEnumerableReadOnly_1603( Binomial.prototype, 'cdf', binomialCDF );

/**
* Evaluates the natural logarithm of the probability density function (PMF).
*
* @name logpmf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.logpmf( 2.0 );
* // returns ~-1.873
*/
_$setNonEnumerableReadOnly_1603( Binomial.prototype, 'logpmf', binomialLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.mgf( 0.5 );
* // returns ~1.629
*/
_$setNonEnumerableReadOnly_1603( Binomial.prototype, 'mgf', binomialMGF );

/**
* Evaluates the probability density function (PMF).
*
* @name pmf
* @memberof Binomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.pmf( 2.0 );
* // returns ~0.154
*/
_$setNonEnumerableReadOnly_1603( Binomial.prototype, 'pmf', binomialPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Binomial.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var binomial = new Binomial( 4, 0.2 );
*
* var v = binomial.quantile( 0.5 );
* // returns 1.0
*/
_$setNonEnumerableReadOnly_1603( Binomial.prototype, 'quantile', binomialQuantile );


// EXPORTS //

var _$Binomial_614 = Binomial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution constructor.
*
* @module @stdlib/stats/base/dists/binomial/ctor
*
* @example
* var Binomial = require( '@stdlib/stats/base/dists/binomial/ctor' );
*
* var binomial = new Binomial( 8, 0.2 );
*
* var y = binomial.cdf( 2.8 );
* // returns ~0.797
*
* var mode = binomial.mode;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Binomial_614 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_615 = _$Binomial_614;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the entropy of a binomial distribution.
*
* @param {NonNegativeInteger} n - number of trials
* @param {Probability} p - success probability
* @returns {number} entropy
*
* @example
* var v = entropy( 100, 0.1 );
* // returns ~2.511
*
* @example
* var v = entropy( 20, 0.5 );
* // returns ~2.223
*
* @example
* var v = entropy( 10.3, 0.5 );
* // returns NaN
*
* @example
* var v = entropy( 20, 1.1 );
* // returns NaN
*
* @example
* var v = entropy( 20, NaN );
* // returns NaN
*/
function __entropy_616( n, p ) {
	var nlq;
	var out;
	var i;
	var q;

	if (
		_$isnan_130( n ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0 ||
		!_$isNonNegativeInteger_136( n ) ||
		n === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( p === 0 || p === 1 || n === 0 ) {
		return 0.0;
	}
	q = 1.0 - p;
	nlq = n * _$ln_376( q );
	out = _$exp_225( nlq ) * nlq;
	for ( i = 1; i <= n; i++ ) {
		nlq += _$ln_376( ( n - i + 1 ) / i ) + _$ln_376( p / q );
		out += _$exp_225( nlq ) * nlq;
	}
	return -out;
}


// EXPORTS //

var _$entropy_616 = __entropy_616;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Binomial distribution entropy.
*
* @module @stdlib/stats/base/dists/binomial/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/binomial/entropy' );
*
* var v = entropy( 100, 0.1 );
* // returns ~0.051
*
* v = entropy( 20, 0.5 );
* // returns ~-0.1
*/

// MODULES //

/* removed: var _$entropy_616 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_617 = _$entropy_616;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;


// MAIN //

/**
* Returns a boolean indicating if the sign bit is on (true) or off (false).
*
* @param {number} x - input value
* @returns {boolean} boolean indicating if sign bit is on or off
*
* @example
* var bool = signbit( 4.0 );
* // returns false
*
* @example
* var bool = signbit( -9.14e-307 );
* // returns true
*
* @example
* var bool = signbit( 0.0 );
* // returns false
*
* @example
* var bool = signbit( -0.0 );
* // returns true
*/
function signbit( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) containing the exponent and sign:
	var high = _$getHighWord_460( x );

	// Shift off all bits which are not the sign bit and check if the sign bit is on:
	return ( high >>> 31 ) ? true : false; // eslint-disable-line no-unneeded-ternary
}


// EXPORTS //

var _$signbit_475 = signbit;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if the sign bit is on (true) or off (false).
*
* @module @stdlib/number/float64/base/signbit
*
* @example
* var signbit = require( '@stdlib/number/float64/base/signbit' );
*
* var bool = signbit( 4.0 );
* // returns false
*
* bool = signbit( -9.14e-307 );
* // returns true
*
* bool = signbit( 0.0 );
* // returns false
*
* bool = signbit( -0.0 );
* // returns true
*/

// MODULES //

/* removed: var _$signbit_475 = require( './main.js' ); */;


// EXPORTS //

var _$signbit_474 = _$signbit_475;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_156( x ) {
	if ( x === 0.0 ) {
		return -64.85021904942025;
	}
	return -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_156 = __evalpoly_156;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_157( x ) {
	if ( x === 0.0 ) {
		return 194.5506571482614;
	}
	return 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_157 = __evalpoly_157;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$HALF_PI_93 = require( '@stdlib/constants/math/float64-half-pi' ); */;
/* removed: var _$FOURTH_PI_90 = require( '@stdlib/constants/math/float64-fourth-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_156 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_157 = require( './polyval_q.js' ); */;


// VARIABLES //

var __MOREBITS_154 = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.
var T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )


// MAIN //

/**
* Computes the arctangent of a number.
*
* ## Method
*
* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form
*
*     ```tex
*     x + x^3 \frac{P(x)}{Q(x)}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain  | # trials | peak    | rms     |
*     |:-----------|:--------|:---------|:--------|:--------|
*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |
*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |
*
* @param {number} x - input value
* @returns {number} arctangent (in radians)
*
* @example
* var v = atan( 0.0 );
* // returns ~0.0
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( -PI/4.0 );
* // returns ~-0.666
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
*
* var v = atan( PI/4.0 );
* // returns ~0.666
*
* @example
* var v = atan( NaN );
* // returns NaN
*/
function atan( x ) {
	var flg;
	var sgn;
	var y;
	var z;
	if ( _$isnan_130( x ) || x === 0.0 ) {
		return x;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return _$HALF_PI_93;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return -_$HALF_PI_93;
	}
	if ( x < 0.0 ) {
		sgn = true;
		x = -x;
	}
	// Range reduction:
	flg = 0;
	if ( x > T3P8 ) {
		y = _$HALF_PI_93;
		flg = 1;
		x = -( 1.0/x );
	}
	else if ( x <= 0.66 ) {
		y = 0.0;
	}
	else {
		y = _$FOURTH_PI_90;
		flg = 2;
		x = (x-1.0) / (x+1.0);
	}
	z = x * x;
	z = z*_$evalpoly_156( z ) / _$evalpoly_157( z );
	z = ( x*z ) + x;
	if ( flg === 2 ) {
		z += 0.5 * __MOREBITS_154;
	}
	else if ( flg === 1 ) {
		z += __MOREBITS_154;
	}
	y += z;
	return ( sgn ) ? -y : y;
}


// EXPORTS //

var _$atan_154 = atan;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the arctangent of a number.
*
* @module @stdlib/math/base/special/atan
*
* @example
* var PI = require( '@stdlib/constants/math/float64-pi' );
* var atan = require( '@stdlib/math/base/special/atan' );
*
* var v = atan( 0.0 );
* // returns ~0.0
*
* v = atan( -PI/4.0 );
* // returns ~-1.0
*
* v = atan( PI/4.0 );
* // returns ~1.0
*
* v = atan( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan_154 = require( './atan.js' ); */;


// EXPORTS //

var _$atan_155 = _$atan_154;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original code, copyright and license are from [Go]{@link https://golang.org/src/math/atan2.go}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (c) 2009 The Go Authors. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are
* met:
*
*    * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following disclaimer
* in the documentation and/or other materials provided with the
* distribution.
*    * Neither the name of Google Inc. nor the names of its
* contributors may be used to endorse or promote products derived from
* this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
* OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$copysign_178 = require( '@stdlib/math/base/special/copysign' ); */;
/* removed: var _$signbit_474 = require( '@stdlib/number/float64/base/signbit' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan_155 = require( '@stdlib/math/base/special/atan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the arctangent of a quotient of two numbers.
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{atan2}(y,\mathrm{NaN}) &= \mathrm{NaN}\\
* \operatorname{atan2}(\mathrm{NaN},x) &= \mathrm{NaN}\\
* \operatorname{atan2}( +0,x \ge 0 ) &= +0 \\
* \operatorname{atan2}( -0, x \ge 0 ) &= -0 \\
* \operatorname{atan2}( +0,x \le -0 ) &= +\Pi \\
* \operatorname{atan2}( -0, x \le -0 ) &= -\Pi \\
* \operatorname{atan2}(+\infty, +\infty) &= +\tfrac{\Pi}{4} \\
* \operatorname{atan2}(-\infty, +\infty) &= -\tfrac{\Pi}{4} \\
* \operatorname{atan2}(+\infty, -\infty) &= +\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(-\infty, -\infty) &= -\tfrac{3\Pi}{4} \\
* \operatorname{atan2}(y, +\infty) &= 0.0 \\
* \operatorname{atan2}(y>0, -\infty) &= +\Pi \\
* \operatorname{atan2}(y<0, -\infty) &= -\Pi \\
* \operatorname{atan2}(+\infty, x ) &= +\tfrac{\Pi}{2} \\
* \operatorname{atan2}(-\infty, x ) &= -\tfrac{\Pi}{2} \\
* \end{align*}
* ```
*
* @param {number} y - numerator
* @param {number} x - denominator
* @returns {number} arctangent of `y/x` (in radians)
*
* @example
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* @example
* var v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* @example
* var v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* @example
* var v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* @example
* var v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* @example
* var v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* @example
* var v = atan2( 3.0, NaN );
* // returns NaN
*
* @example
* var v = atan2( NaN, 2.0 );
* // returns NaN
*/
function atan2( y, x ) {
	var q;
	if ( _$isnan_130( x ) || _$isnan_130( y ) ) {
		return NaN;
	}
	if ( _$isInfinite_126( x ) ) {
		if ( x === _$FLOAT64_PINF_110 ) {
			if ( _$isInfinite_126( y ) ) {
				return _$copysign_178( _$PI_109 / 4.0, y );
			}
			return _$copysign_178( 0.0, y );
		}
		// Case: x is -Infinity
		if ( _$isInfinite_126( y ) ) {
			return _$copysign_178( 3.0*_$PI_109/4.0, y );
		}
		return _$copysign_178( _$PI_109, y );
	}
	if ( _$isInfinite_126( y ) ) {
		return _$copysign_178( _$PI_109 / 2.0, y );
	}
	if ( y === 0.0 ) {
		if ( x >= 0.0 && !_$signbit_474( x ) ) {
			return _$copysign_178( 0.0, y );
		}
		return _$copysign_178( _$PI_109, y );
	}
	if ( x === 0.0 ) {
		return _$copysign_178( _$PI_109 / 2.0, y );
	}
	q = _$atan_155( y / x );
	if ( x < 0.0 ) {
		if ( q <= 0.0 ) {
			return q + _$PI_109;
		}
		return q - _$PI_109;
	}
	return q;
}


// EXPORTS //

var _$atan2_158 = atan2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the arctangent of the quotient of two numbers.
*
* @module @stdlib/math/base/special/atan2
*
* @example
* var atan2 = require( '@stdlib/math/base/special/atan2' );
*
* var v = atan2( 2.0, 2.0 ); // => atan(1.0)
* // returns ~0.785
*
* v = atan2( 6.0, 2.0 ); // => atan(3.0)
* // returns ~1.249
*
* v = atan2( -1.0, -1.0 ); // => atan(1.0) - π
* // returns ~-2.356
*
* v = atan2( 3.0, 0.0 ); // => π/2
* // returns ~1.571
*
* v = atan2( -2.0, 0.0 ); // => -π/2
* // returns ~-1.571
*
* v = atan2( 0.0, 0.0 );
* // returns 0.0
*
* v = atan2( 3.0, NaN );
* // returns NaN
*
* v = atan2( NaN, 2.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$atan2_158 = require( './atan2.js' ); */;


// EXPORTS //

var _$atan2_159 = _$atan2_158;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan2_159 = require( '@stdlib/math/base/special/atan2' ); */;


// VARIABLES //

var __ONE_OVER_PI_646 = 0.3183098861837907;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 4.0, 0.0, 2.0 );
* // returns ~0.852
*
* @example
* var y = cdf( 1.0, 0.0, 2.0 );
* // returns ~0.648
*
* @example
* var y = cdf( 1.0, 3.0, 2.0 );
* // returns 0.25
*
* @example
* var y = cdf( NaN, 0.0, 2.0 );
* // returns NaN
*
* @example
* var y = cdf( 1.0, 2.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function __cdf_646( x, x0, gamma ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return ( __ONE_OVER_PI_646 * _$atan2_159( x-x0, gamma ) ) + 0.5;
}


// EXPORTS //

var _$cdf_646 = __cdf_646;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan2_159 = require( '@stdlib/math/base/special/atan2' ); */;


// VARIABLES //

var __ONE_OVER_PI_647 = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns 0.75
*/
function __factory_647( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( __ONE_OVER_PI_647 * _$atan2_159( x-x0, gamma ) ) + 0.5;
	}
}


// EXPORTS //

var _$factory_647 = __factory_647;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/cauchy/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/cauchy/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.852
*
* @example
* var factory = require( '@stdlib/stats/base/dists/cauchy/cdf' ).factory;
*
* var cdf = factory( 1.5, 3.0 );
*
* var y = cdf( 1.0 );
* // returns ~0.447
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_646 = require( './cdf.js' ); */;
/* removed: var _$factory_647 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_646, 'factory', _$factory_647 );


// EXPORTS //

var _$cdf_648 = _$cdf_646;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_53 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Tests if a value is a `NaN` number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a `NaN` number primitive
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns false
*/
function __isnan_53( value ) {
	return (
		__isNumber_53( value ) &&
		_$isnan_130( value )
	);
}


// EXPORTS //

var _$isnan_53 = __isnan_53;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isNumber_52 = _$isNumber_58.isObject;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Tests if a value is a number object having a value of `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a value of `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns false
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*/
function __isnan_52( value ) {
	return (
		__isNumber_52( value ) &&
		_$isnan_130( value.valueOf() )
	);
}


// EXPORTS //

var _$isnan_52 = __isnan_52;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_53 = require( './primitive.js' ); */;
/* removed: var _$isnan_52 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is `NaN`.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( new Number( NaN ) );
* // returns true
*
* @example
* var bool = isnan( 3.14 );
* // returns false
*
* @example
* var bool = isnan( null );
* // returns false
*/
function __isnan_51( value ) {
	return ( _$isnan_53( value ) || _$isnan_52( value ) );
}


// EXPORTS //

var _$isnan_51 = __isnan_51;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is `NaN`.
*
* @module @stdlib/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( new Number( NaN ) );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( null );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isPrimitive;
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 3.14 );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns false
*
* @example
* var isnan = require( '@stdlib/assert/is-nan' ).isObject;
*
* var bool = isnan( NaN );
* // returns false
*
* bool = isnan( new Number( NaN ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isnan_51 = require( './main.js' ); */;
/* removed: var _$isnan_53 = require( './primitive.js' ); */;
/* removed: var _$isnan_52 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isnan_51, 'isPrimitive', _$isnan_53 );
_$setNonEnumerableReadOnly_1603( _$isnan_51, 'isObject', _$isnan_52 );


// EXPORTS //

var _$isnan_50 = _$isnan_51;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns the differential entropy of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 10.0, 5.0 );
* // returns ~4.14
*
* @example
* var v = entropy( 7.0, 0.1 );
* // returns ~0.228
*
* @example
* var v = entropy( 10.0, -0.5 );
* // returns NaN
*/
function __entropy_651( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( gamma ) + _$ln_376( 4.0*_$PI_109 );
}


// EXPORTS //

var _$entropy_651 = __entropy_651;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution differential entropy.
*
* @module @stdlib/stats/base/dists/cauchy/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/cauchy/entropy' );
*
* var v = entropy( 10.0, 7.0 );
* // returns ~4.477
*
* v = entropy( 22.0, 0.5 );
* // returns ~1.838
*/

// MODULES //

/* removed: var _$entropy_651 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_652 = _$entropy_651;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} median
*
* @example
* var v = median( 10.0, 5.0 );
* // returns 10.0
*
* @example
* var v = median( 7.0, 0.1 );
* // returns 7.0
*
* @example
* var v = median( 10.0, -0.5 );
* // returns NaN
*/
function __median_660( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
}


// EXPORTS //

var _$median_660 = __median_660;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution median.
*
* @module @stdlib/stats/base/dists/cauchy/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/cauchy/median' );
*
* var v = median( 10.0, 7.0 );
* // returns 10.0
*
* v = median( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

/* removed: var _$median_660 = require( './median.js' ); */;


// EXPORTS //

var _$median_659 = _$median_660;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a Cauchy distribution.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} mode
*
* @example
* var v = mode( 10.0, 5.0 );
* // returns 10.0
*
* @example
* var v = mode( 7.0, 0.1 );
* // returns 7.0
*
* @example
* var v = mode( 10.0, -0.5 );
* // returns NaN
*/
function __mode_662( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return x0;
}


// EXPORTS //

var _$mode_662 = __mode_662;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution mode.
*
* @module @stdlib/stats/base/dists/cauchy/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/cauchy/mode' );
*
* var v = mode( 10.0, 7.0 );
* // returns 10.0
*
* v = mode( 22.0, 0.5 );
* // returns 22.0
*/

// MODULES //

/* removed: var _$mode_662 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_661 = _$mode_662;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan2_159 = require( '@stdlib/math/base/special/atan2' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var __ONE_OVER_PI_655 = 0.3183098861837907;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 4.0, 0.0, 2.0 );
* // returns ~-0.16
*
* @example
* var y = logcdf( 1.0, 0.0, 2.0 );
* // returns ~-0.435
*
* @example
* var y = logcdf( 1.0, 3.0, 2.0 );
* // returns ~-1.386
*
* @example
* var y = logcdf( NaN, 0.0, 2.0 );
* // returns NaN
*
* @example
* var y = logcdf( 1.0, 2.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 1.0, NaN, 3.0 );
* // returns NaN
*/
function __logcdf_655( x, x0, gamma ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( ( __ONE_OVER_PI_655 * _$atan2_159( x-x0, gamma ) ) + 0.5 );
}


// EXPORTS //

var _$logcdf_655 = __logcdf_655;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$atan2_159 = require( '@stdlib/math/base/special/atan2' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// VARIABLES //

var __ONE_OVER_PI_653 = 0.3183098861837907;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 10.0, 2.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.693
*
* y = logcdf( 12.0 );
* // returns ~-0.288
*/
function __factory_653( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the  natural logarithm of the cumulative distribution function (logCDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return _$ln_376( ( __ONE_OVER_PI_653 * _$atan2_159( x-x0, gamma ) ) + 0.5 );
	}
}


// EXPORTS //

var _$factory_653 = __factory_653;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/cauchy/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/cauchy/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.16
*
* @example
* var factory = require( '@stdlib/stats/base/dists/cauchy/logcdf' ).factory;
*
* var logCDF = factory( 1.5, 3.0 );
*
* var y = logCDF( 1.0 );
* // returns ~-0.805
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_655 = require( './logcdf.js' ); */;
/* removed: var _$factory_653 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_655, 'factory', _$factory_653 );


// EXPORTS //

var _$logcdf_654 = _$logcdf_655;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 1.0, 1.0 );
* // returns ~-1.838
*
* @example
* var y = logpdf( 4.0, 3.0, 0.1 );
* // returns ~-3.457
*
* @example
* var y = logpdf( 4.0, 3.0, 3.0 );
* // returns ~-2.349
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 1.0, -2.0 );
* // returns NaN
*/
function __logpdf_658( x, x0, gamma ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	return -( _$LN_PI_96 + _$ln_376( gamma ) + _$log1p_380( _$pow_396( (x-x0)/gamma, 2.0 ) ) );
}


// EXPORTS //

var _$logpdf_658 = __logpdf_658;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_PI_96 = require( '@stdlib/constants/math/float64-ln-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-4.14
*
* y = logpdf( 3.0 );
* // returns ~-2.061
*/
function __factory_656( x0, gamma ) {
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return -( _$LN_PI_96 + _$ln_376( gamma ) + _$log1p_380( _$pow_396( (x-x0)/gamma, 2.0 ) ) );
	}
}


// EXPORTS //

var _$factory_656 = __factory_656;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/stats/base/dists/cauchy/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/cauchy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.765
*
* @example
* var factory = require( '@stdlib/stats/base/dists/cauchy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-1.839
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_658 = require( './logpdf.js' ); */;
/* removed: var _$factory_656 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_658, 'factory', _$factory_656 );


// EXPORTS //

var _$logpdf_657 = _$logpdf_658;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.
*
* @param {number} x - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 1.0, 1.0 );
* // returns ~0.159
*
* @example
* var y = pdf( 4.0, 3.0, 0.1 );
* // returns ~0.0315
*
* @example
* var y = pdf( 4.0, 3.0, 3.0 );
* // returns ~0.095
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -2.0 );
* // returns NaN
*/
function __pdf_665( x, x0, gamma ) {
	var denom;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return NaN;
	}
	denom = _$PI_109 * gamma * ( 1.0 + _$pow_396( (x-x0)/gamma, 2.0 ) );
	return 1.0 / denom;
}


// EXPORTS //

var _$pdf_665 = __pdf_665;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.0159
*
* y = pdf( 3.0 );
* // returns ~0.127
*/
function __factory_663( x0, gamma ) {
	var gpi;
	if (
		_$isnan_130( gamma ) ||
		_$isnan_130( x0 ) ||
		gamma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	gpi = gamma * _$PI_109;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Cauchy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return 1.0 / ( gpi * (1.0 + _$pow_396( (x-x0)/gamma, 2.0 )) );
	}
}


// EXPORTS //

var _$factory_663 = __factory_663;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/cauchy/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/cauchy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.063
*
* @example
* var factory = require( '@stdlib/stats/base/dists/cauchy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.159
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_665 = require( './pdf.js' ); */;
/* removed: var _$factory_663 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_665, 'factory', _$factory_663 );


// EXPORTS //

var _$pdf_664 = _$pdf_665;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$tan_439 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.3, 2.0, 2.0 );
* // returns ~0.547
*
* @example
* var y = quantile( 0.8, 10, 2.0 );
* // returns ~12.753
*
* @example
* var y = quantile( 0.1, 10.0, 2.0 );
* // returns ~3.845
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_668( p, x0, gamma ) {
	if (
		_$isnan_130( x0 ) ||
		_$isnan_130( gamma ) ||
		gamma <= 0.0 ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return x0 + ( gamma * _$tan_439( _$PI_109*( p-0.5 ) ) );
}


// EXPORTS //

var _$quantile_668 = __quantile_668;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$tan_439 = require( '@stdlib/math/base/special/tan' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.
*
* @param {number} x0 - location parameter
* @param {PositiveNumber} gamma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.2 );
* // returns ~7.247
*
* y = quantile( 0.8 );
* // returns ~12.753
*/
function __factory_666( x0, gamma ) {
	if (
		_$isnan_130( x0 ) ||
		_$isnan_130( gamma ) ||
		gamma <= 0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Cauchy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return x0 + ( gamma * _$tan_439( _$PI_109*( p-0.5 ) ) );
	}
}


// EXPORTS //

var _$factory_666 = __factory_666;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution quantile function.
*
* @module @stdlib/stats/base/dists/cauchy/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/cauchy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.376
*
* @example
* var factory = require( '@stdlib/stats/base/dists/cauchy/quantile' ).factory;
*
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_668 = require( './quantile.js' ); */;
/* removed: var _$factory_666 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_668, 'factory', _$factory_666 );


// EXPORTS //

var _$quantile_667 = _$quantile_668;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_649 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_649 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_652 = require( '@stdlib/stats/base/dists/cauchy/entropy' ); */;
/* removed: var _$median_659 = require( '@stdlib/stats/base/dists/cauchy/median' ); */;
/* removed: var _$mode_661 = require( '@stdlib/stats/base/dists/cauchy/mode' ); */;
/* removed: var _$cdf_648 = require( '@stdlib/stats/base/dists/cauchy/cdf' ); */;
/* removed: var _$logcdf_654 = require( '@stdlib/stats/base/dists/cauchy/logcdf' ); */;
/* removed: var _$logpdf_657 = require( '@stdlib/stats/base/dists/cauchy/logpdf' ); */;
/* removed: var _$pdf_664 = require( '@stdlib/stats/base/dists/cauchy/pdf' ); */;
/* removed: var _$quantile_667 = require( '@stdlib/stats/base/dists/cauchy/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function cauchyCDF( x ) {
	return _$cdf_648( x, this.x0, this.gamma );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function cauchyLogCDF( x ) {
	return _$logcdf_654( x, this.x0, this.gamma );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cauchyLogPDF( x ) {
	return _$logpdf_657( x, this.x0, this.gamma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cauchyPDF( x ) {
	return _$pdf_664( x, this.x0, this.gamma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cauchyQuantile( p ) {
	return _$quantile_667( p, this.x0, this.gamma );
}


// MAIN //

/**
* Cauchy distribution constructor.
*
* @constructor
* @param {number} [x0=0.0] - location parameter
* @param {PositiveNumber} [gamma=1.0] - scale parameter
* @throws {TypeError} `gamma` must be a positive number
* @returns {Cauchy} distribution instance
*
* @example
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var v = cauchy.median;
* // returns 1.0
*/
function Cauchy() {
	var gamma;
	var x0;
	if ( !(this instanceof Cauchy) ) {
		if ( arguments.length === 0 ) {
			return new Cauchy();
		}
		return new Cauchy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		x0 = arguments[ 0 ];
		gamma = arguments[ 1 ];
		if ( !__isNumber_649( x0 ) || _$isnan_50( x0 ) ) {
			throw new TypeError( 'invalid argument. Location parameter `x0` must be a number primitive. Value: `' + x0 + '`' );
		}
		if ( !__isPositive_649( gamma ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `gamma` must be a positive number. Value: `' + gamma + '`' );
		}
	} else {
		x0 = 0.0;
		gamma = 1.0;
	}
	_$defineProperty_1606( this, 'x0', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return x0;
		},
		'set': function set( value ) {
			if ( !__isNumber_649( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			x0 = value;
		}
	});
	_$defineProperty_1606( this, 'gamma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return gamma;
		},
		'set': function set( value ) {
			if ( !__isPositive_649( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			gamma = value;
		}
	});
	return this;
}

/**
* Cauchy distribution differential entropy.
*
* @name entropy
* @memberof Cauchy.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.entropy;
* // returns ~5.016
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cauchy.prototype, 'entropy', function get() {
	return _$entropy_652( this.x0, this.gamma );
});

/**
* Cauchy distribution median.
*
* @name median
* @memberof Cauchy.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cauchy.prototype, 'median', function get() {
	return _$median_659( this.x0, this.gamma );
});

/**
* Cauchy distribution mode.
*
* @name mode
* @memberof Cauchy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cauchy = new Cauchy( 4.0, 12.0 );
*
* var v = cauchy.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cauchy.prototype, 'mode', function get() {
	return _$mode_661( this.x0, this.gamma );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.cdf( 0.5 );
* // returns ~0.386
*/
_$setNonEnumerableReadOnly_1603( Cauchy.prototype, 'cdf', cauchyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logcdf( 0.5 );
* // returns ~-0.952
*/
_$setNonEnumerableReadOnly_1603( Cauchy.prototype, 'logcdf', cauchyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.logpdf( 0.8 );
* // returns ~-2.617
*/
_$setNonEnumerableReadOnly_1603( Cauchy.prototype, 'logpdf', cauchyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Cauchy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.pdf( 0.8 );
* // returns ~0.073
*/
_$setNonEnumerableReadOnly_1603( Cauchy.prototype, 'pdf', cauchyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Cauchy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cauchy = new Cauchy( 2.0, 4.0 );
*
* var v = cauchy.quantile( 0.5 );
* // returns 2.0
*/
_$setNonEnumerableReadOnly_1603( Cauchy.prototype, 'quantile', cauchyQuantile );


// EXPORTS //

var _$Cauchy_649 = Cauchy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cauchy distribution constructor.
*
* @module @stdlib/stats/base/dists/cauchy/ctor
*
* @example
* var Cauchy = require( '@stdlib/stats/base/dists/cauchy/ctor' );
*
* var cauchy = new Cauchy( 1.0, 1.0 );
*
* var y = cauchy.cdf( 0.8 );
* // returns ~0.437
*
* var mode = cauchy.mode;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Cauchy_649 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_650 = _$Cauchy_649;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.323
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __cdf_962( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return ( x < 0 ) ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	return _$gammainc_263( x * beta, alpha );
}


// EXPORTS //

var _$cdf_962 = __cdf_962;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( 4.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( 3.0, 3.0 );
* // returns 1.0
*
* @example
* var y = cdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*/
function __cdf_763( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return (x < mu) ? 0.0 : 1.0;
}


// EXPORTS //

var _$cdf_763 = __cdf_763;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - constant value of distribution
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*
* y = cdf( NaN );
* // returns NaN
*/
function __factory_764( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated cumulative distribution function
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return (x < mu) ? 0.0 : 1.0;
	}
}


// EXPORTS //

var _$factory_764 = __factory_764;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/degenerate/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/degenerate/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/cdf' ).factory;
*
* var cdf = factory( 5.0 );
*
* var y = cdf( 3.0 );
* // returns 0.0
*
* y = cdf( 6.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_763 = require( './cdf.js' ); */;
/* removed: var _$factory_764 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_763, 'factory', _$factory_764 );


// EXPORTS //

var _$cdf_765 = _$cdf_763;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_963 = _$cdf_765.factory;
/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.879
*
* y = cdf( 8.0 );
* // returns ~0.794
*/
function __factory_963( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( alpha === 0.0 ) {
		return __degenerate_963( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		return _$gammainc_263( x * beta, alpha );
	}
}


// EXPORTS //

var _$factory_963 = __factory_963;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/gamma/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/gamma/cdf' );
*
* var y = cdf( 2.0, 8.0, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_962 = require( './cdf.js' ); */;
/* removed: var _$factory_963 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_962, 'factory', _$factory_963 );


// EXPORTS //

var _$cdf_964 = _$cdf_962;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_964 = require( '@stdlib/stats/base/dists/gamma/cdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.739
*
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_669( x, k ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return ( x < 0 ) ? 0.0 : 1.0;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return _$cdf_964( x*x, k/2.0, 0.5 );
}


// EXPORTS //

var _$cdf_669 = __cdf_669;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __degenerate_670 = _$cdf_765.factory;
var gammaFactory = _$cdf_964.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~1.0
*
* y = cdf( 1.5 );
* // returns ~0.478
*/
function __factory_670( k ) {
	var gamma;
	if ( k === 0.0 ) {
		return __degenerate_670( 0.0 );
	}
	gamma = gammaFactory( k/2.0, 0.5 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return gamma( x*x );
	}
}


// EXPORTS //

var _$factory_670 = __factory_670;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/chi/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/chi/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.143
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chi/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.954
*
* y = cdf( 1.2 );
* // returns ~0.77
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_669 = require( './cdf.js' ); */;
/* removed: var _$factory_670 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_669, 'factory', _$factory_670 );


// EXPORTS //

var _$cdf_671 = _$cdf_669;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns the differential entropy of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.052
*
* @example
* var v = entropy( 1.0 );
* // returns ~0.726
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_674( k ) {
	var kh;
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return _$gammaln_305( kh ) + ( 0.5 * ( k - _$LN2_99 - ( ( k-1.0 )*_$digamma_185( kh ) ) ) );
}


// EXPORTS //

var _$entropy_674 = __entropy_674;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution differential entropy.
*
* @module @stdlib/stats/base/dists/chi/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/chi/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.056
*
* v = entropy( 1.5 );
* // returns ~0.878
*/

// MODULES //

/* removed: var _$entropy_674 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_675 = _$entropy_674;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns the expected value of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~2.918
*
* @example
* var v = mean( 1.0 );
* // returns ~0.798
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_682( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	return _$SQRT2_118 * _$gamma_247( ( k+1.0 ) / 2.0 ) / _$gamma_247( k / 2.0 );
}


// EXPORTS //

var _$mean_682 = __mean_682;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution expected value.
*
* @module @stdlib/stats/base/dists/chi/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/chi/mean' );
*
* var v = mean( 11.0 );
* // returns ~3.242
*
* v = mean( 4.5 );
* // returns ~2.008
*/

// MODULES //

/* removed: var _$mean_682 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_681 = _$mean_682;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$mean_681 = require( '@stdlib/stats/base/dists/chi/mean' ); */;


// MAIN //

/**
* Returns the variance of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.485
*
* @example
* var v = variance( 1.0 );
* // returns ~0.363
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_696( k ) {
	var mu;
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = _$mean_681( k );
	return k - ( mu*mu );
}


// EXPORTS //

var _$variance_696 = __variance_696;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution variance.
*
* @module @stdlib/stats/base/dists/chi/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/chi/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.488
*
* v = variance( 1.5 );
* // returns ~0.406
*/

// MODULES //

/* removed: var _$variance_696 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_695 = _$variance_696;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$variance_695 = require( '@stdlib/stats/base/dists/chi/variance' ); */;
/* removed: var _$mean_681 = require( '@stdlib/stats/base/dists/chi/mean' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.252
*
* @example
* var v = skewness( 1.0 );
* // returns ~0.995
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_692( k ) {
	var sigma3;
	var sigma2;
	var sigma;
	var mu;
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	mu = _$mean_681( k );
	sigma = _$sqrt_437( _$variance_695( k ) );
	sigma2 = sigma * sigma;
	sigma3 = sigma2 * sigma;
	return ( mu / sigma3 ) * ( 1.0 - ( 2.0*sigma2 ) );
}


// EXPORTS //

var _$skewness_692 = __skewness_692;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution skewness.
*
* @module @stdlib/stats/base/dists/chi/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/chi/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.225
*
* v = skewness( 1.5 );
* // returns ~0.763
*/

// MODULES //

/* removed: var _$skewness_692 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_691 = _$skewness_692;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$skewness_691 = require( '@stdlib/stats/base/dists/chi/skewness' ); */;
/* removed: var _$variance_695 = require( '@stdlib/stats/base/dists/chi/variance' ); */;
/* removed: var _$mean_681 = require( '@stdlib/stats/base/dists/chi/mean' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.011
*
* @example
* var v = kurtosis( 1.0 );
* // returns ~0.869
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_677( k ) {
	var sigma2;
	var sigma;
	var g1;
	var mu;
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	sigma2 = _$variance_695( k );
	sigma = _$sqrt_437( sigma2 );
	mu = _$mean_681( k );
	g1 = _$skewness_691( k );
	return ( 2.0/sigma2 ) * ( 1.0 - ( mu*sigma*g1 ) - sigma2 );
}


// EXPORTS //

var _$kurtosis_677 = __kurtosis_677;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/chi/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/chi/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.007
*
* v = kurtosis( 1.5 );
* // returns ~0.424
*/

// MODULES //

/* removed: var _$kurtosis_677 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_676 = _$kurtosis_677;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the mode of a chi distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns ~2.828
*
* @example
* var v = mode( 1.0 );
* // returns 0.0
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_684( k ) {
	if ( _$isnan_130( k ) || k < 1.0 ) {
		return NaN;
	}
	return _$sqrt_437( k - 1.0 );
}


// EXPORTS //

var _$mode_684 = __mode_684;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution mode.
*
* @module @stdlib/stats/base/dists/chi/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/chi/mode' );
*
* var v = mode( 11.0 );
* // returns ~3.162
*
* v = mode( 1.5 );
* // returns ~0.707
*/

// MODULES //

/* removed: var _$mode_684 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_683 = _$mode_684;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$mean_681 = require( '@stdlib/stats/base/dists/chi/mean' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a chi distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.697
*
* @example
* var v = stdev( 1.0 );
* // returns ~0.603
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_694( k ) {
	var mu;
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	mu = _$mean_681( k );
	return _$sqrt_437( k - ( mu*mu ) );
}


// EXPORTS //

var _$stdev_694 = __stdev_694;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution standard deviation.
*
* @module @stdlib/stats/base/dists/chi/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/chi/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.699
*
* v = stdev( 1.5 );
* // returns ~0.637
*/

// MODULES //

/* removed: var _$stdev_694 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_693 = _$stdev_694;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-4.35
*
* @example
* var y = logpdf( 0.7, 0.7 );
* // returns ~-0.622
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function __logpdf_680( x, k ) {
	var out;
	var kh;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		// Point mass at 0...
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return _$FLOAT64_NINF_107;
	}
	kh = k / 2.0;
	out = ( ( 1.0-kh ) * _$LN2_99 ) + ( ( k-1.0 ) * _$ln_376( x ) ) - ( (x*x) / 2.0 );
	out -= _$gammaln_305( kh );
	return out;
}


// EXPORTS //

var _$logpdf_680 = __logpdf_680;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (logPDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} natural logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 3.0, 3.0 );
* // returns Infinity
*
* @example
* var y = logpdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*/
function __logpdf_775( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpdf_775 = __logpdf_775;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (logPDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the natural logarithm of the probability density function
*
* @example
* var logpdf = factory( 5.0 );
*
* var y = logpdf( 0.0 );
* // returns -Infinity
*
* y = logpdf( 5.0 );
* // returns Infinity
*/
function __factory_773( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (logPDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of the probability density function
	*
	* @example
	* var y = logpdf( 10.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_773 = __factory_773;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution logarithm of probability density function (logPDF).
*
* @module @stdlib/stats/base/dists/degenerate/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/degenerate/logpdf' );
*
* var y = logpdf( 2.0, 0.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/logpdf' ).factory;
*
* var logPDF = factory( 10.0 );
*
* var y = logPDF( 10.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_775 = require( './logpdf.js' ); */;
/* removed: var _$factory_773 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_775, 'factory', _$factory_773 );


// EXPORTS //

var _$logpdf_774 = _$logpdf_775;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_678 = _$logpdf_774.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
*
* var y = logpdf( 2.0 );
* // returns ~-3.115
*
* y = logpdf( 1.0 );
* // returns ~-1.268
*/
function __factory_678( k ) {
	var km1;
	var kh;

	if ( _$isnan_130( k ) || k < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( k === 0.0 ) {
		return __degenerate_678( 0.0 );
	}

	kh = k / 2.0;
	km1 = k - 1.0;
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 1.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return _$FLOAT64_NINF_107;
		}
		out = ( ( 1.0-kh ) * _$LN2_99 ) + ( km1 * _$ln_376( x ) ) - ( (x*x) / 2.0 );
		out -= _$gammaln_305( kh );
		return out;
	}
}


// EXPORTS //

var _$factory_678 = __factory_678;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a chi distribution.
*
* @module @stdlib/stats/base/dists/chi/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/chi/logpdf' );
*
* var y = logpdf( 2.0, 1.0 );
* // returns ~-2.226
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chi/logpdf' ).factory;
*
* var logpdf = factory( 6.0 );
*
* var y = logpdf( 3.0 );
* // returns ~-1.088
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_680 = require( './logpdf.js' ); */;
/* removed: var _$factory_678 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_680, 'factory', _$factory_678 );


// EXPORTS //

var _$logpdf_679 = _$logpdf_680;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.013
*
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.537
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function __pdf_687( x, k ) {
	var out;
	var kh;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( k ) ||
		k < 0.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		// Point mass at 0...
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	kh = k / 2.0;
	out = _$pow_396( 2.0, 1.0-kh ) * _$pow_396( x, k-1.0 ) * _$exp_225( -(x*x)/2.0 );
	out /= _$gamma_247( kh );
	return out;
}


// EXPORTS //

var _$pdf_687 = __pdf_687;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a degenerate distribution centered at `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of the distribution
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 3.0 );
* // returns 0.0
*
* @example
* var y = pdf( 3.0, 3.0 );
* // returns Infinity
*
* @example
* var y = pdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*/
function __pdf_790( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return ( x === mu ) ? _$FLOAT64_PINF_110 : 0.0;
}


// EXPORTS //

var _$pdf_790 = __pdf_790;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 5.0 );
*
* var y = pdf( 0.0 );
* // returns 0.0
*
* y = pdf( 5.0 );
* // returns Infinity
*/
function __factory_788( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( 10.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( x === mu ) ? _$FLOAT64_PINF_110 : 0.0;
	}
}


// EXPORTS //

var _$factory_788 = __factory_788;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/degenerate/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/degenerate/pdf' );
*
* var y = pdf( 2.0, 0.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/pdf' ).factory;
*
* var pdf = factory( 10.0 );
*
* var y = pdf( 10.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_790 = require( './pdf.js' ); */;
/* removed: var _$factory_788 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_790, 'factory', _$factory_788 );


// EXPORTS //

var _$pdf_789 = _$pdf_790;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_685 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.04
*
* y = pdf( 1.0 );
* // returns ~0.281
*/
function __factory_685( k ) {
	var km1;
	var kh;

	if ( _$isnan_130( k ) || k < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( k === 0.0 ) {
		return __degenerate_685( 0.0 );
	}

	kh = k / 2.0;
	km1 = k - 1.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a chi distribution with degrees of freedom `k`.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 1.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		out = _$pow_396( 2.0, 1.0-kh ) * _$pow_396( x, km1 ) * _$exp_225( -(x*x)/2.0 );
		out /= _$gamma_247( kh );
		return out;
	}
}


// EXPORTS //

var _$factory_685 = __factory_685;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/chi/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/chi/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.108
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chi/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.337
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_687 = require( './pdf.js' ); */;
/* removed: var _$factory_685 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_687, 'factory', _$factory_685 );


// EXPORTS //

var _$pdf_686 = _$pdf_687;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gammaincinv_288 = require( '@stdlib/math/base/special/gammaincinv' ); */;


// MAIN //

/**
* Evaluates the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.994
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.836
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_990( p, alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		_$isnan_130( p ) ||
		alpha < 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( alpha === 0.0 ) {
		return 0.0;
	}
	return ( 1.0 / beta ) * _$gammaincinv_288( p, alpha );
}


// EXPORTS //

var _$quantile_990 = __quantile_990;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$gammaincinv_288 = require( '@stdlib/math/base/special/gammaincinv' ); */;
var __degenerate_988 = _$quantile_795.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~4.351
*
* y = quantile( 0.8 );
* // returns ~7.289
*/
function __factory_988( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( alpha === 0.0 ) {
		return __degenerate_988( 0.0 );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return ( 1.0 / beta ) * _$gammaincinv_288( p, alpha );
	}
}


// EXPORTS //

var _$factory_988 = __factory_988;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution quantile function.
*
* @module @stdlib/stats/base/dists/gamma/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/gamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~1.497
*
* y = myquantile( 0.4 );
* // returns ~0.688
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_990 = require( './quantile.js' ); */;
/* removed: var _$factory_988 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_990, 'factory', _$factory_988 );


// EXPORTS //

var _$quantile_989 = _$quantile_990;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$quantile_989 = require( '@stdlib/stats/base/dists/gamma/quantile' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a chi distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.282
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~1.832
*
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.116
*
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function __quantile_690( p, k ) {
	return _$sqrt_437( _$quantile_989( p, k/2.0, 0.5 ) );
}


// EXPORTS //

var _$quantile_690 = __quantile_690;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __gammaFactory_688 = _$quantile_989.factory;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.1
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_688( k ) {
	var gamma = __gammaFactory_688( k/2.0, 0.5 );
	return quantile;

	/**
	* Evaluates the quantile function for a chi distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		return _$sqrt_437( gamma( p ) );
	}
}


// EXPORTS //

var _$factory_688 = __factory_688;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution quantile function.
*
* @module @stdlib/stats/base/dists/chi/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/chi/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~2.154
*
* var myquantile = quantile.factory( 2.0 );
*
* y = myquantile( 0.3 );
* // returns ~0.844
*
* y = myquantile( 0.7 );
* // returns ~1.552
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_690 = require( './quantile.js' ); */;
/* removed: var _$factory_688 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_690, 'factory', _$factory_688 );


// EXPORTS //

var _$quantile_689 = _$quantile_690;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_672 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_675 = require( '@stdlib/stats/base/dists/chi/entropy' ); */;
/* removed: var _$kurtosis_676 = require( '@stdlib/stats/base/dists/chi/kurtosis' ); */;
/* removed: var _$mean_681 = require( '@stdlib/stats/base/dists/chi/mean' ); */;
/* removed: var _$mode_683 = require( '@stdlib/stats/base/dists/chi/mode' ); */;
/* removed: var _$skewness_691 = require( '@stdlib/stats/base/dists/chi/skewness' ); */;
/* removed: var _$stdev_693 = require( '@stdlib/stats/base/dists/chi/stdev' ); */;
/* removed: var _$variance_695 = require( '@stdlib/stats/base/dists/chi/variance' ); */;
/* removed: var _$cdf_671 = require( '@stdlib/stats/base/dists/chi/cdf' ); */;
/* removed: var _$logpdf_679 = require( '@stdlib/stats/base/dists/chi/logpdf' ); */;
/* removed: var _$pdf_686 = require( '@stdlib/stats/base/dists/chi/pdf' ); */;
/* removed: var _$quantile_689 = require( '@stdlib/stats/base/dists/chi/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chiCDF( x ) {
	return _$cdf_671( x, this.k );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function chiLogPDF( x ) {
	return _$logpdf_679( x, this.k );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chiPDF( x ) {
	return _$pdf_686( x, this.k );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chiQuantile( p ) {
	return _$quantile_689( p, this.k );
}


// MAIN //

/**
* Chi distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - degrees of freedom
* @throws {TypeError} `k` must be a positive number
* @returns {Chi} distribution instance
*
* @example
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var v = chi.mode;
* // returns 0.0
*/
function Chi() {
	var k;
	if ( !(this instanceof Chi) ) {
		if ( arguments.length === 0 ) {
			return new Chi();
		}
		return new Chi( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !__isPositive_672( k ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	_$defineProperty_1606( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !__isPositive_672( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
}

/**
* Chi distribution differential entropy.
*
* @name entropy
* @memberof Chi.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.entropy;
* // returns ~1.019
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'entropy', function get() {
	return _$entropy_675( this.k );
});

/**
* Chi distribution excess kurtosis.
*
* @name kurtosis
* @memberof Chi.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.kurtosis;
* // returns ~0.059
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'kurtosis', function get() {
	return _$kurtosis_676( this.k );
});

/**
* Chi distribution expected value.
*
* @name mean
* @memberof Chi.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mean;
* // returns ~1.88
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'mean', function get() {
	return _$mean_681( this.k );
});

/**
* Chi distribution mode.
*
* @name mode
* @memberof Chi.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.mode;
* // returns ~1.732
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'mode', function get() {
	return _$mode_683( this.k );
});

/**
* Chi distribution skewness.
*
* @name skewness
* @memberof Chi.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.skewness;
* // returns ~0.406
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'skewness', function get() {
	return _$skewness_691( this.k );
});

/**
* Chi distribution standard deviation.
*
* @name stdev
* @memberof Chi.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.stdev;
* // returns ~0.682
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'stdev', function get() {
	return _$stdev_693( this.k );
});

/**
* Chi distribution variance.
*
* @name variance
* @memberof Chi.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chi = new Chi( 4.0 );
*
* var v = chi.variance;
* // returns ~0.466
*/
_$setNonEnumerableReadOnlyAccessor_1601( Chi.prototype, 'variance', function get() {
	return _$variance_695( this.k );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.cdf( 0.5 );
* // returns ~0.118
*/
_$setNonEnumerableReadOnly_1603( Chi.prototype, 'cdf', chiCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.logpdf( 0.8 );
* // returns ~-0.543
*/
_$setNonEnumerableReadOnly_1603( Chi.prototype, 'logpdf', chiLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Chi.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.pdf( 0.8 );
* // returns ~0.581
*/
_$setNonEnumerableReadOnly_1603( Chi.prototype, 'pdf', chiPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Chi.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chi = new Chi( 2.0 );
*
* var v = chi.quantile( 0.5 );
* // returns ~1.177
*/
_$setNonEnumerableReadOnly_1603( Chi.prototype, 'quantile', chiQuantile );


// EXPORTS //

var _$Chi_672 = Chi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi distribution constructor.
*
* @module @stdlib/stats/base/dists/chi/ctor
*
* @example
* var Chi = require( '@stdlib/stats/base/dists/chi/ctor' );
*
* var chi = new Chi( 1.0 );
*
* var y = chi.cdf( 0.8 );
* // returns ~0.576
*
* var mode = chi.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Chi_672 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_673 = _$Chi_672;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_964 = require( '@stdlib/stats/base/dists/gamma/cdf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.428
*
* @example
* var y = cdf( 1.0, 0.5 );
* // returns ~0.846
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_697( x, k ) {
	return _$cdf_964( x, k/2.0, 0.5 );
}


// EXPORTS //

var _$cdf_697 = __cdf_697;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __gammaFactory_698 = _$cdf_964.factory;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0 );
*
* var y = cdf( 6.0 );
* // returns ~0.888
*
* y = cdf( 1.5 );
* // returns ~0.318
*/
function __factory_698( k ) {
	return __gammaFactory_698( k/2.0, 0.5 );
}


// EXPORTS //

var _$factory_698 = __factory_698;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/chisquare/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/chisquare/cdf' );
*
* var y = cdf( 2.0, 8.0 );
* // returns ~0.019
*
* y = cdf( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chisquare/cdf' ).factory;
*
* var cdf = factory( 1.0 );
*
* var y = cdf( 2.0 );
* // returns ~0.843
*
* y = cdf( 1.2 );
* // returns ~0.727
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_697 = require( './cdf.js' ); */;
/* removed: var _$factory_698 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_697, 'factory', _$factory_698 );


// EXPORTS //

var _$cdf_699 = _$cdf_697;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.786
*
* @example
* var v = entropy( 1.0 );
* // returns ~0.784
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_702( k ) {
	var kh;
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	kh = k / 2.0;
	return kh + _$ln_376( 2.0*_$gamma_247( kh ) ) + ( ( 1.0-kh ) * _$digamma_185( kh ) );
}


// EXPORTS //

var _$entropy_702 = __entropy_702;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution differential entropy.
*
* @module @stdlib/stats/base/dists/chisquare/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/chisquare/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.901
*
* v = entropy( 1.5 );
* // returns ~1.375
*/

// MODULES //

/* removed: var _$entropy_702 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_703 = _$entropy_702;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~1.333
*
* @example
* var v = kurtosis( 1.0 );
* // returns 12.0
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_705( k ) {
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	return 12.0 / k;
}


// EXPORTS //

var _$kurtosis_705 = __kurtosis_705;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/chisquare/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/chisquare/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~1.091
*
* v = kurtosis( 1.5 );
* // returns 8.0
*/

// MODULES //

/* removed: var _$kurtosis_705 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_704 = _$kurtosis_705;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
*
* @example
* var v = mean( 1.0 );
* // returns 1.0
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_710( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	return k;
}


// EXPORTS //

var _$mean_710 = __mean_710;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution expected value.
*
* @module @stdlib/stats/base/dists/chisquare/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/chisquare/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

/* removed: var _$mean_710 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_709 = _$mean_710;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;


// MAIN //

/**
* Returns the mode of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 7.0
*
* @example
* var v = mode( 1.0 );
* // returns 0.0
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_715( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	return _$max_388( k - 2.0, 0.0 );
}


// EXPORTS //

var _$mode_715 = __mode_715;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution mode.
*
* @module @stdlib/stats/base/dists/chisquare/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/chisquare/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 1.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$mode_715 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_714 = _$mode_715;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a chi-squared distribution.
*
* @param {PositiveNumber} k - degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.943
*
* @example
* var v = skewness( 1.0 );
* // returns ~2.828
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_723( k ) {
	if ( _$isnan_130( k ) || k <= 0.0 ) {
		return NaN;
	}
	return _$sqrt_437( 8.0 / k );
}


// EXPORTS //

var _$skewness_723 = __skewness_723;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution skewness.
*
* @module @stdlib/stats/base/dists/chisquare/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/chisquare/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.853
*
* v = skewness( 1.5 );
* // returns ~2.309
*/

// MODULES //

/* removed: var _$skewness_723 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_722 = _$skewness_723;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~4.243
*
* @example
* var v = stdev( 1.0 );
* // returns ~1.414
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_725( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	return _$sqrt_437( 2.0 * k );
}


// EXPORTS //

var _$stdev_725 = __stdev_725;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution standard deviation.
*
* @module @stdlib/stats/base/dists/chisquare/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/chisquare/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~4.69
*
* v = stdev( 1.5 );
* // returns ~1.732
*/

// MODULES //

/* removed: var _$stdev_725 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_724 = _$stdev_725;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a chi-squared distribution.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 18.0
*
* @example
* var v = variance( 1.0 );
* // returns 2.0
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_727( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return NaN;
	}
	return 2.0 * k;
}


// EXPORTS //

var _$variance_727 = __variance_727;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution variance.
*
* @module @stdlib/stats/base/dists/chisquare/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/chisquare/variance' );
*
* var v = variance( 11.0 );
* // returns 22.0
*
* v = variance( 1.5 );
* // returns 3.0
*/

// MODULES //

/* removed: var _$variance_727 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_726 = _$variance_727;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a chi-squared distribution with degrees of freedom `k` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.4, 2 );
* // returns ~5.0
*
* @example
* var y = mgf( -1.0, 5.0 );
* // returns ~0.0642
*
* @example
* var y = mgf( 0.0, 10.0 );
* // returns 1.0
*/
function __mgf_713( t, k ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( k ) ||
		k < 0.0 ||
		t >= 0.5
	) {
		return NaN;
	}
	return _$pow_396( 1-(2*t), -k/2 );
}


// EXPORTS //

var _$mgf_713 = __mgf_713;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} MGF
*
* @example
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/
function __factory_711( k ) {
	if ( _$isnan_130( k ) || k < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a chi-squared distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) || t >= 0.5 ) {
			return NaN;
		}
		return _$pow_396( 1-(2*t), -k/2 );
	}
}


// EXPORTS //

var _$factory_711 = __factory_711;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Moment-generating function (MGF) for a chi-squared distribution.
*
* @module @stdlib/stats/base/dists/chisquare/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/chisquare/mgf' );
*
* var y = mgf( 0.4, 2 );
* // returns ~5.0
*
* y = mgf( -1.0, 5.0 );
* // returns ~0.0642
*
* y = mgf( 0.0, 10.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chisquare/mgf' ).factory;
*
* var mgf = factory( 1.0 );
*
* var y = mgf( 0.2 );
* // returns ~1.291
*
* y = mgf( 0.4 );
* // returns ~2.236
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_713 = require( './mgf.js' ); */;
/* removed: var _$factory_711 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_713, 'factory', _$factory_711 );


// EXPORTS //

var _$mgf_712 = _$mgf_713;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function __regularisedGammaPrefix_987( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_91 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_106 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_225( ( a * _$ln_376(z) ) - z - _$gammaln_305( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_396( z, a ) * _$exp_225( -z ) / _$gamma_247( a );
	}
	if ( _$abs_147(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_380( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_91 ) / agh );
		prefix = _$exp_225( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_376(z / agh);
		amz = a - z;
		if (
			_$min_392(alz, amz) <= _$FLOAT64_MIN_LN_106 ||
			_$max_388(alz, amz) >= _$FLOAT64_MAX_LN_102
		) {
			amza = amz / a;
			if (
				_$min_392(alz, amz)/2.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/2.0 < _$FLOAT64_MAX_LN_102
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_396( z / agh, a / 2.0 ) * _$exp_225( amz / 2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_392(alz, amz)/4.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/4.0 < _$FLOAT64_MAX_LN_102 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_396( z / agh, a / 4.0 ) * _$exp_225( amz / 4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_106 &&
				amza < _$FLOAT64_MAX_LN_102
			) {
				prefix = _$pow_396( (z * _$exp_225(amza)) / agh, a );
			}
			else {
				prefix = _$exp_225( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_396( z / agh, a ) * _$exp_225( amz );
		}
	}
	prefix *= _$sqrt_437( agh / _$E_86 ) / _$gammaLanczosSumExpGScaled_241( a );
	return prefix;
}


// EXPORTS //

var _$regularisedGammaPrefix_987 = __regularisedGammaPrefix_987;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes `(z^a)*(e^-z) / gamma(a)`.
*
* @private
* @param {number} a - input value
* @param {number} z - input value
* @returns {number} function value
*/
function __regularisedGammaPrefix_975( a, z ) {
	var prefix;
	var amza;
	var agh;
	var alz;
	var amz;
	var sq;
	var d;

	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	d = ( (z - a) - _$FLOAT64_GAMMA_LANCZOS_G_91 + 0.5 ) / agh;
	if ( a < 1.0 ) {
		// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
		if ( z <= _$FLOAT64_MIN_LN_106 ) {
			// Use logs, so should be free of cancellation errors:
			return _$exp_225( ( a * _$ln_376(z) ) - z - _$gammaln_305( a ) );
		}
		// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
		return _$pow_396( z, a ) * _$exp_225( -z ) / _$gamma_247( a );
	}
	if ( _$abs_147(d*d*a) <= 100.0 && a > 150.0 ) {
		// Special case for large a and a ~ z:
		prefix = ( a * ( _$log1p_380( d ) - d ) ) + ( z * ( 0.5-_$FLOAT64_GAMMA_LANCZOS_G_91 ) / agh );
		prefix = _$exp_225( prefix );
	}
	else {
		// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
		alz = a * _$ln_376(z / agh);
		amz = a - z;
		if (
			_$min_392(alz, amz) <= _$FLOAT64_MIN_LN_106 ||
			_$max_388(alz, amz) >= _$FLOAT64_MAX_LN_102
		) {
			amza = amz / a;
			if (
				_$min_392(alz, amz)/2.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/2.0 < _$FLOAT64_MAX_LN_102
			) {
				// Compute square root of the result and then square it:
				sq = _$pow_396( z / agh, a / 2.0 ) * _$exp_225( amz / 2.0 );
				prefix = sq * sq;
			}
			else if (
				_$min_392(alz, amz)/4.0 > _$FLOAT64_MIN_LN_106 &&
				_$max_388(alz, amz)/4.0 < _$FLOAT64_MAX_LN_102 &&
				z > a
			) {
				// Compute the 4th root of the result then square it twice:
				sq = _$pow_396( z / agh, a / 4.0 ) * _$exp_225( amz / 4.0 );
				prefix = sq * sq;
				prefix *= prefix;
			}
			else if (
				amza > _$FLOAT64_MIN_LN_106 &&
				amza < _$FLOAT64_MAX_LN_102
			) {
				prefix = _$pow_396( (z * _$exp_225(amza)) / agh, a );
			}
			else {
				prefix = _$exp_225( alz + amz );
			}
		}
		else
		{
			prefix = _$pow_396( z / agh, a ) * _$exp_225( amz );
		}
	}
	prefix *= _$sqrt_437( agh / _$E_86 ) / _$gammaLanczosSumExpGScaled_241( a );
	return prefix;
}


// EXPORTS //

var _$regularisedGammaPrefix_975 = __regularisedGammaPrefix_975;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$regularisedGammaPrefix_975 = require( './regularised_gamma_prefix.js' ); */;


// MAIN //

/**
* Calculates the partial derivative with respect to x of the incomplete gamma function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {NonNegativeNumber} x - function parameter
* @returns {number} function value
*/
function gammaPDerivative( a, x ) {
	var f1;
	if ( a <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( a > 1.0 ) {
			return 0.0;
		}
		return ( a === 1.0 ) ? 1.0 : _$FLOAT64_PINF_110;
	}
	f1 = _$regularisedGammaPrefix_975( a, x );
	if ( x < 1.0 && ( _$FLOAT64_MAX_104 * x < f1 ) ) {
		return _$FLOAT64_PINF_110;
	}
	if ( f1 === 0.0 ) {
		// Underflow in calculation, use logs instead:
		f1 = (a * _$ln_376( x )) - x - _$gammaln_305( a ) - _$ln_376( x );
		f1 = _$exp_225( f1 );
	} else {
		f1 /= x;
	}
	return f1;
}


// EXPORTS //

var _$gammaPDerivative_972 = gammaPDerivative;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_58_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright John Maddock 2006-7, 2013-14.
* Copyright Paul A. Bristow 2007, 2013-14.
* Copyright Nikhar Agrawal 2013-14.
* Copyright Christopher Kormanyos 2013-14.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_MAX_104 = require( '@stdlib/constants/math/float64-max' ); */;
/* removed: var _$regularisedGammaPrefix_987 = require( './regularised_gamma_prefix.js' ); */;


// MAIN //

/**
* Calculates the partial derivative with respect to x of the incomplete gamma function.
*
* @private
* @param {PositiveNumber} a - function parameter
* @param {NonNegativeNumber} x - function parameter
* @returns {number} function value
*/
function __gammaPDerivative_984( a, x ) {
	var f1;
	if ( a <= 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		if ( a > 1.0 ) {
			return 0.0;
		}
		return ( a === 1.0 ) ? 1.0 : _$FLOAT64_PINF_110;
	}
	f1 = _$regularisedGammaPrefix_987( a, x );
	if ( x < 1.0 && ( _$FLOAT64_MAX_104 * x < f1 ) ) {
		return _$FLOAT64_PINF_110;
	}
	if ( f1 === 0.0 ) {
		// Underflow in calculation, use logs instead:
		f1 = (a * _$ln_376( x )) - x - _$gammaln_305( a ) - _$ln_376( x );
		f1 = _$exp_225( f1 );
	} else {
		f1 /= x;
	}
	return f1;
}


// EXPORTS //

var _$gammaPDerivative_984 = __gammaPDerivative_984;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaPDerivative_984 = require( './gamma_p_derivative.js' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.905
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __pdf_986( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	return _$gammaPDerivative_984( alpha, x * beta ) * beta;
}


// EXPORTS //

var _$pdf_986 = __pdf_986;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_983 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaPDerivative_984 = require( './gamma_p_derivative.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 4.0 );
* // returns ~0.067
*/
function __factory_983( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( alpha === 0.0 ) {
		return __degenerate_983( 0.0 );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return 0.0;
		}
		return _$gammaPDerivative_984( alpha, x * beta ) * beta;
	}
}


// EXPORTS //

var _$factory_983 = __factory_983;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/gamma/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/gamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.026
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_986 = require( './pdf.js' ); */;
/* removed: var _$factory_983 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_986, 'factory', _$factory_983 );


// EXPORTS //

var _$pdf_985 = _$pdf_986;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pdf_985 = require( '@stdlib/stats/base/dists/gamma/pdf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.065
*
* @example
* var y = pdf( 0.7, 0.7 );
* // returns ~0.274
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function __pdf_718( x, k ) {
	return _$pdf_985( x, k/2.0, 0.5 );
}


// EXPORTS //

var _$pdf_718 = __pdf_718;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __gammaFactory_716 = _$pdf_985.factory;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
*
* var y = pdf( 2.0 );
* // returns ~0.051
*
* y = pdf( 1.0 );
* // returns ~0.141
*/
function __factory_716( k ) {
	return __gammaFactory_716( k/2.0, 0.5 );
}


// EXPORTS //

var _$factory_716 = __factory_716;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/chisquare/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/chisquare/pdf' );
*
* var y = pdf( 2.0, 1.0 );
* // returns ~0.104
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chisquare/pdf' ).factory;
*
* var pdf = factory( 6.0 );
*
* var y = pdf( 3.0 );
* // returns ~0.126
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_718 = require( './pdf.js' ); */;
/* removed: var _$factory_716 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_718, 'factory', _$factory_716 );


// EXPORTS //

var _$pdf_717 = _$pdf_718;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$quantile_989 = require( '@stdlib/stats/base/dists/gamma/quantile' ); */;


// MAIN //

/**
* Evaluates the quantile function for a chi-squared distribution with degrees of freedom `k` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.642
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~3.357
*
* @example
* var y = quantile( 0.8, 0.1 );
* // returns ~0.014
*
* @example
* var y = quantile( -0.2, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 1.1, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function __quantile_721( p, k ) {
	return _$quantile_989( p, k/2.0, 0.5 );
}


// EXPORTS //

var _$quantile_721 = __quantile_721;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __gammaFactory_719 = _$quantile_989.factory;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
*
* var y = quantile( 0.9 );
* // returns ~1.21
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_719( k ) {
	return __gammaFactory_719( k/2.0, 0.5 );
}


// EXPORTS //

var _$factory_719 = __factory_719;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution quantile function.
*
* @module @stdlib/stats/base/dists/chisquare/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/chisquare/quantile' );
*
* var y = quantile( 0.8, 3.0 );
* // returns ~4.642
*
* var myquantile = quantile.factory( 2.0 );
*
* y = myquantile( 0.3 );
* // returns ~0.713
*
* y = myquantile( 0.7 );
* // returns ~2.408
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_721 = require( './quantile.js' ); */;
/* removed: var _$factory_719 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_721, 'factory', _$factory_719 );


// EXPORTS //

var _$quantile_720 = _$quantile_721;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_700 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_703 = require( '@stdlib/stats/base/dists/chisquare/entropy' ); */;
/* removed: var _$kurtosis_704 = require( '@stdlib/stats/base/dists/chisquare/kurtosis' ); */;
/* removed: var _$mean_709 = require( '@stdlib/stats/base/dists/chisquare/mean' ); */;
/* removed: var _$mode_714 = require( '@stdlib/stats/base/dists/chisquare/mode' ); */;
/* removed: var _$skewness_722 = require( '@stdlib/stats/base/dists/chisquare/skewness' ); */;
/* removed: var _$stdev_724 = require( '@stdlib/stats/base/dists/chisquare/stdev' ); */;
/* removed: var _$variance_726 = require( '@stdlib/stats/base/dists/chisquare/variance' ); */;
/* removed: var _$cdf_699 = require( '@stdlib/stats/base/dists/chisquare/cdf' ); */;
/* removed: var _$mgf_712 = require( '@stdlib/stats/base/dists/chisquare/mgf' ); */;
/* removed: var _$pdf_717 = require( '@stdlib/stats/base/dists/chisquare/pdf' ); */;
/* removed: var _$quantile_720 = require( '@stdlib/stats/base/dists/chisquare/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function chisquareCDF( x ) {
	return _$cdf_699( x, this.k );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function chisquareMGF( t ) {
	return _$mgf_712( t, this.k );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function chisquarePDF( x ) {
	return _$pdf_717( x, this.k );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function chisquareQuantile( p ) {
	return _$quantile_720( p, this.k );
}


// MAIN //

/**
* Chi-squared distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @returns {ChiSquare} distribution instance
*
* @example
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var v = chisquare.mode;
* // returns 0.0
*/
function ChiSquare() {
	var k;
	if ( !(this instanceof ChiSquare) ) {
		if ( arguments.length === 0 ) {
			return new ChiSquare();
		}
		return new ChiSquare( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		if ( !__isPositive_700( k ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `k` must be a positive number. Value: `' + k + '`' );
		}
	} else {
		k = 1.0;
	}
	_$defineProperty_1606( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !__isPositive_700( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	return this;
}

/**
* Chi-squared distribution differential entropy.
*
* @name entropy
* @memberof ChiSquare.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.entropy;
* // returns ~2.27
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'entropy', function get() {
	return _$entropy_703( this.k );
});

/**
* Chi-squared distribution excess kurtosis.
*
* @name kurtosis
* @memberof ChiSquare.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.kurtosis;
* // returns 3.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'kurtosis', function get() {
	return _$kurtosis_704( this.k );
});

/**
* Chi-squared distribution expected value.
*
* @name mean
* @memberof ChiSquare.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'mean', function get() {
	return _$mean_709( this.k );
});

/**
* Chi-squared distribution mode.
*
* @name mode
* @memberof ChiSquare.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.mode;
* // returns 2.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'mode', function get() {
	return _$mode_714( this.k );
});

/**
* Chi-squared distribution skewness.
*
* @name skewness
* @memberof ChiSquare.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.skewness;
* // returns ~1.414
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'skewness', function get() {
	return _$skewness_722( this.k );
});

/**
* Chi-squared distribution standard deviation.
*
* @name stdev
* @memberof ChiSquare.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.stdev;
* // returns ~2.828
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'stdev', function get() {
	return _$stdev_724( this.k );
});

/**
* Chi-squared distribution variance.
*
* @name variance
* @memberof ChiSquare.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var chisquare = new ChiSquare( 4.0 );
*
* var v = chisquare.variance;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( ChiSquare.prototype, 'variance', function get() {
	return _$variance_726( this.k );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.cdf( 0.5 );
* // returns ~0.221
*/
_$setNonEnumerableReadOnly_1603( ChiSquare.prototype, 'cdf', chisquareCDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.mgf( 0.2 );
* // returns ~1.667
*/
_$setNonEnumerableReadOnly_1603( ChiSquare.prototype, 'mgf', chisquareMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof ChiSquare.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.pdf( 0.8 );
* // returns ~0.335
*/
_$setNonEnumerableReadOnly_1603( ChiSquare.prototype, 'pdf', chisquarePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof ChiSquare.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var chisquare = new ChiSquare( 2.0 );
*
* var v = chisquare.quantile( 0.5 );
* // returns ~1.386
*/
_$setNonEnumerableReadOnly_1603( ChiSquare.prototype, 'quantile', chisquareQuantile );


// EXPORTS //

var _$ChiSquare_700 = ChiSquare;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Chi-squared distribution constructor.
*
* @module @stdlib/stats/base/dists/chisquare/ctor
*
* @example
* var ChiSquare = require( '@stdlib/stats/base/dists/chisquare/ctor' );
*
* var chisquare = new ChiSquare( 1.0 );
*
* var y = chisquare.cdf( 0.8 );
* // returns ~0.629
*
* var mode = chisquare.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$ChiSquare_700 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_701 = _$ChiSquare_700;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$gammaPDerivative_972 = require( './gamma_p_derivative.js' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
*
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = logpdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = logpdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __logpdf_974( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( alpha === 0.0 ) {
		// Point mass at 0...
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	return _$ln_376( _$gammaPDerivative_972( alpha, x * beta ) ) + _$ln_376( beta );
}


// EXPORTS //

var _$logpdf_974 = __logpdf_974;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_971 = _$logpdf_774.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$gammaPDerivative_972 = require( './gamma_p_derivative.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 1.5 );
*
* var y = logpdf( 1.0 );
* // returns ~-0.977
*
* y = logpdf( 4.0 );
* // returns ~-2.704
*/
function __factory_971( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( alpha === 0.0 ) {
		return __degenerate_971( 0.0 );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$ln_376( _$gammaPDerivative_972( alpha, x * beta ) ) + _$ln_376( beta );
	}
}


// EXPORTS //

var _$factory_971 = __factory_971;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/gamma/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/gamma/logpdf' );
*
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.919
*
* @example
* var factory = require( '@stdlib/stats/base/dists/gamma/logpdf' ).factory;
*
* var logpdf = factory( 6.0, 7.0 );
* var y = logpdf( 2.0 );
* // returns ~-3.646
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_974 = require( './logpdf.js' ); */;
/* removed: var _$factory_971 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_974, 'factory', _$factory_971 );


// EXPORTS //

var _$logpdf_973 = _$logpdf_974;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$logpdf_973 = require( '@stdlib/stats/base/dists/gamma/logpdf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-2.74
*
* @example
* var y = logpdf( 0.7, 0.7 );
* // returns ~-1.295
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative degrees of freedom:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function __logpdf_708( x, k ) {
	return _$logpdf_973( x, k/2.0, 0.5 );
}


// EXPORTS //

var _$logpdf_708 = __logpdf_708;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __gammaFactory_706 = _$logpdf_973.factory;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a chi-squared distribution with degrees of freedom `k`.
*
* @param {NonNegativeNumber} k - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
*
* var y = logpdf( 2.0 );
* // returns ~-2.981
*
* y = logpdf( 1.0 );
* // returns ~-1.961
*/
function __factory_706( k ) {
	return __gammaFactory_706( k/2.0, 0.5 );
}


// EXPORTS //

var _$factory_706 = __factory_706;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a chi-squared distribution.
*
* @module @stdlib/stats/base/dists/chisquare/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/chisquare/logpdf' );
*
* var y = logpdf( 2.0, 1.0 );
* // returns ~-2.266
*
* @example
* var factory = require( '@stdlib/stats/base/dists/chisquare/logpdf' ).factory;
*
* var logpdf = factory( 6.0 );
*
* var y = logpdf( 3.0 );
* // returns ~-2.071
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_708 = require( './logpdf.js' ); */;
/* removed: var _$factory_706 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_708, 'factory', _$factory_706 );


// EXPORTS //

var _$logpdf_707 = _$logpdf_708;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* @example
* var y = cdf( 1.2, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = cdf( -0.9, 0.0, 1.0);
* // returns ~0.0
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __cdf_728( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x < mu ) ? 0.0 : 1.0;
	}
	if ( x < mu - s ) {
		return 0.0;
	}
	if ( x > mu + s ) {
		return 1.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + z + ( _$sinpi_435( z ) / _$PI_109 ) ) / 2.0;
}


// EXPORTS //

var _$cdf_728 = __cdf_728;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_729 = _$cdf_765.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.9 );
* // returns ~0.015
*
* y = cdf( 4.0 );
* // returns ~0.971
*/
function __factory_729( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_729( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return 0.0;
		}
		if ( x > mu + s ) {
			return 1.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + z + ( _$sinpi_435( z ) / _$PI_109 ) ) / 2.0;
	}
}


// EXPORTS //

var _$factory_729 = __factory_729;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/cosine/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/cosine/cdf' );
*
* var y = cdf( 0.5, 0.0, 1.0 );
* // returns ~0.909
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 4.0 );
* // returns ~0.971
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_728 = require( './cdf.js' ); */;
/* removed: var _$factory_729 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_728, 'factory', _$factory_729 );


// EXPORTS //

var _$cdf_730 = _$cdf_728;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-pi-squared
* @type {number}
*
* @example
* var PI_SQUARED = require( '@stdlib/constants/math/float64-pi-squared' );
* // returns 9.869604401089358
*/


// MAIN //

/**
* Square of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 9.869604401089358
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len


// EXPORTS //

var _$PI_SQUARED_108 = PI_SQUARED;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~-0.594
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_734( mu, s ) {
	var out;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( 90.0 - ( _$PI_SQUARED_108*_$PI_SQUARED_108 ) );
	out /= 5.0 * _$pow_396( _$PI_SQUARED_108-6.0, 2.0 );
	return out;
}


// EXPORTS //

var _$kurtosis_734 = __kurtosis_734;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/cosine/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/cosine/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~-0.594
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~-0.594
*/

// MODULES //

/* removed: var _$kurtosis_734 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_733 = _$kurtosis_734;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_742( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mean_742 = __mean_742;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution expected value.
*
* @module @stdlib/stats/base/dists/cosine/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/cosine/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_742 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_741 = _$mean_742;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_744( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$median_744 = __median_744;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution median.
*
* @module @stdlib/stats/base/dists/cosine/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/cosine/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$median_744 = require( './median.js' ); */;


// EXPORTS //

var _$median_743 = _$median_744;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_749( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mode_749 = __mode_749;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution mode.
*
* @module @stdlib/stats/base/dists/cosine/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/cosine/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mode_749 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_748 = _$mode_749;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_758( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_758 = __skewness_758;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution skewness.
*
* @module @stdlib/stats/base/dists/cosine/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/cosine/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_758 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_757 = _$skewness_758;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns the standard deviation for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~0.723
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_760( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * _$sqrt_437( ( 1.0/3.0 ) - ( 2/_$PI_SQUARED_108 ) );
}


// EXPORTS //

var _$stdev_760 = __stdev_760;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution standard deviation.
*
* @module @stdlib/stats/base/dists/cosine/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/cosine/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~0.362
*
* y = stdev( 4.0, 2.0 );
* // returns ~0.723
*/

// MODULES //

/* removed: var _$stdev_760 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_759 = _$stdev_760;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns the variance for a raised cosine distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~0.523
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_762( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * ( ( 1.0/3.0 ) - ( 2/_$PI_SQUARED_108 ) );
}


// EXPORTS //

var _$variance_762 = __variance_762;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution variance.
*
* @module @stdlib/stats/base/dists/cosine/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/cosine/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~0.131
*
* y = variance( 4.0, 2.0 );
* // returns ~0.523
*/

// MODULES //

/* removed: var _$variance_762 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_761 = _$variance_762;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 0.0, 1.0 );
* // returns ~-0.095
*
* @example
* var y = logcdf( 1.2, 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -0.9, 0.0, 1.0 );
* // returns ~-7.108
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __logcdf_737( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x < mu ) ? _$FLOAT64_NINF_107 : 0.0;
	}
	if ( x < mu - s ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x > mu + s ) {
		return 0.0;
	}
	z = ( x - mu ) / s;
	return _$ln_376( ( 1.0 + z + ( _$sinpi_435( z ) / _$PI_109 ) ) / 2.0 );
}


// EXPORTS //

var _$logcdf_737 = __logcdf_737;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF) for a degenerate distribution with mean `mu`.
*
* @param {number} x - input value
* @param {number} mu - constant value of distribution
* @returns {number} natural logarithm of cumulative distribution function
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 4.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 3.0, 3.0 );
* // returns 0.0
*
* @example
* var y = logcdf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*/
function __logcdf_772( x, mu ) {
	if ( _$isnan_130( x ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return ( x < mu ) ? _$FLOAT64_NINF_107 : 0.0;
}


// EXPORTS //

var _$logcdf_772 = __logcdf_772;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns -Infinity
*
* y = logcdf( 6.0 );
* // returns 0.0
*
* y = logcdf( NaN );
* // returns NaN
*/
function __factory_770( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (logCDF) of a degenerate distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} natural logarithm of cumulative distribution function
	*
	* @example
	* var y = logcdf( 10.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( x < mu ) ? _$FLOAT64_NINF_107 : 0.0;
	}
}


// EXPORTS //

var _$factory_770 = __factory_770;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/degenerate/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/degenerate/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/logcdf' ).factory;
*
* var logcdf = factory( 5.0 );
*
* var y = logcdf( 3.0 );
* // returns -Infinity
*
* y = logcdf( 6.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_772 = require( './logcdf.js' ); */;
/* removed: var _$factory_770 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_772, 'factory', _$factory_770 );


// EXPORTS //

var _$logcdf_771 = _$logcdf_772;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_735 = _$logcdf_771.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.9 );
* // returns ~-4.2
*
* y = logcdf( 4.0 );
* // returns ~-0.029
*/
function __factory_735( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_735( mu );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < mu - s ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x > mu + s ) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		return _$ln_376( ( 1.0 + z + ( _$sinpi_435( z ) / _$PI_109 ) ) / 2.0 );
	}
}


// EXPORTS //

var _$factory_735 = __factory_735;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of cumulative distribution function (CDF) for a raised cosine distribution.
*
* @module @stdlib/stats/base/dists/cosine/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/cosine/logcdf' );
*
* var y = logcdf( 0.5, 0.0, 1.0 );
* // returns ~-0.095
*
* var mylogcdf = logcdf.factory( 3.0, 1.5 );
*
* y = mylogcdf( 4.0 );
* // returns ~--0.029
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_737 = require( './logcdf.js' ); */;
/* removed: var _$factory_735 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_737, 'factory', _$factory_735 );


// EXPORTS //

var _$logcdf_736 = _$logcdf_737;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum safe double-precision floating-point integer.
*
* @module @stdlib/constants/math/float64-max-safe-integer
* @type {number}
*
* @example
* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/math/float64-max-safe-integer' );
* // returns 9007199254740991
*/


// MAIN //

/**
* Maximum safe double-precision floating-point integer.
*
* ## Notes
*
* The integer has the value
*
* ```tex
* 2^{53} - 1
* ```
*
* @constant
* @type {number}
* @default 9007199254740991
* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;


// EXPORTS //

var _$FLOAT64_MAX_SAFE_INTEGER_103 = FLOAT64_MAX_SAFE_INTEGER;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Notes:
*	=> cos(-x) = cos(x)
*	=> sin(-x) = -sin(x)
*	=> cos(π/2) = 0
*	=> cos(0) = 1
*	=> cos(π) = -1
*/


// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$cos_180 = require( '@stdlib/math/base/special/cos' ); */;
/* removed: var _$sin_428 = require( '@stdlib/math/base/special/sin' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;
/* removed: var _$FLOAT64_MAX_SAFE_INTEGER_103 = require( '@stdlib/constants/math/float64-max-safe-integer' ); */;


// VARIABLES //

_$FLOAT64_MAX_SAFE_INTEGER_103 += 1;


// MAIN //

/**
* Computes the value of `cos(πx)`.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = cospi( 0.0 );
* // returns 1.0
*
* @example
* var y = cospi( 0.5 );
* // returns 0.0
*
* @example
* var y = cospi( 0.1 );
* // returns ~0.951
*
* @example
* var y = cospi( NaN );
* // returns NaN
*/
function cospi( x ) {
	var ax;
	var ix;
	var rx;
	var y;
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_126( x ) ) {
		return NaN;
	}
	ax = _$abs_147( x );
	if ( ax > _$FLOAT64_MAX_SAFE_INTEGER_103 ) {
		// Always even integer...
		return 1.0;
	}
	// Argument reduction (reduce to [0,1))...
	ix = _$floor_236( ax );
	rx = ax - ix;
	if ( rx === 0.5 ) {
		return 0.0;
	}
	if ( rx < 0.25 ) {
		y = _$cos_180( _$PI_109*rx );
	}
	else if ( rx < 0.75 ) {
		rx = 0.5 - rx;
		y = _$sin_428( _$PI_109*rx ); // recall sin(-x) = -sin(x), thus returned result will be properly signed
	}
	else {
		rx = 1.0 - rx;
		y = -_$cos_180( _$PI_109*rx );
	}
	// If the integer of `x` is odd, we need to flip the sign...
	return ( ix%2 === 1 ) ? -y : y;
}


// EXPORTS //

var _$cospi_181 = cospi;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute cos(πx).
*
* @module @stdlib/math/base/special/cospi
*
* @example
* var cospi = require( '@stdlib/math/base/special/cospi' );
*
* var y = cospi( 0.0 );
* // returns 1.0
*
* y = cospi( 0.5 );
* // returns 0.0
*
* y = cospi( 0.1 );
* // returns ~0.951
*
* y = cospi( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$cospi_181 = require( './cospi.js' ); */;


// EXPORTS //

var _$cospi_182 = _$cospi_181;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_182 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 3.0 );
* // returns ~-2.485
*
* @example
* var y = logpdf( 1.5, 4.0, 4.0 );
* // returns ~-2.562
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __logpdf_740( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return _$FLOAT64_NINF_107;
	}
	z = ( x - mu ) / s;
	return _$ln_376( 1.0 + _$cospi_182( z ) ) - _$ln_376( 2.0 * s );
}


// EXPORTS //

var _$logpdf_740 = __logpdf_740;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_738 = _$logpdf_774.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_182 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-0.693
*
* y = logpdf( 9.0 );
* // returns ~-1.386
*/
function __factory_738( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_738( mu );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return _$FLOAT64_NINF_107;
		}
		z = ( x - mu ) / s;
		return _$ln_376( 1.0 + _$cospi_182( z ) ) - _$ln_376( 2.0 * s );
	}
}


// EXPORTS //

var _$factory_738 = __factory_738;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/cosine/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/cosine/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-0.693
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_740 = require( './logpdf.js' ); */;
/* removed: var _$factory_738 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_740, 'factory', _$factory_738 );


// EXPORTS //

var _$logpdf_739 = _$logpdf_740;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_433( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.16666666666666666;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -351754.9648081514 + (x * (-11561.443576500522 + (x * (-163.72585752598383 + (x * -0.789474443963537))))); // eslint-disable-line max-len
		s2 = -2110529.7888489086 + (x * (36157.827983443196 + (x * (-277.7110814206028 + (x * 1.0))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.789474443963537 + (x * (-163.72585752598383 + (x * (-11561.443576500522 + (x * -351754.9648081514))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-277.7110814206028 + (x * (36157.827983443196 + (x * -2110529.7888489086))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_433 = __evalrational_433;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;
/* removed: var _$evalrational_433 = require( './rational_pq.js' ); */;


// VARIABLES //

// ln(2^1024)
var MAXLOG = 7.09782712893383996843e2;

// ln(2^-1022)
var MINLOG = -7.08396418532264106224e2;

var POS_OVERFLOW = MAXLOG + _$LN2_99;
var NEG_OVERFLOW = MINLOG - _$LN2_99;

var LARGE = MAXLOG - _$LN2_99;


// MAIN //

/**
* Computes the hyperbolic sine of a number.
*
* ## Method
*
* The range is partitioned into two segments. If \\( |x| \le 1 \\), we use a rational function of the form
*
* ```tex
* x + x^3 \frac{\mathrm{P}(x)}{\mathrm{Q}(x)}
* ```
*
* Otherwise, the calculation is
*
* ```tex
* \operatorname{sinh}(x) = \frac{ e^x - e^{-x} }{2}.
* ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain   | # trials | peak    | rms     |
*     |:----------:|:--------:|:--------:|:-------:|:-------:|
*     | DEC        | +- 88    | 50000    | 4.0e-17 | 7.7e-18 |
*     | IEEE       | +-MAXLOG | 30000    | 2.6e-16 | 5.7e-17 |
*
*
* @param {number} x - input value (in radians)
* @returns {number} hyperbolic sine
*
* @example
* var v = sinh( 0.0 );
* // returns 0.0
*
* @example
* var v = sinh( 2.0 );
* // returns ~3.627
*
* @example
* var v = sinh( -2.0 );
* // returns ~-3.627
*
* @example
* var v = sinh( NaN );
* // returns NaN
*/
function sinh( x ) {
	var a;
	if ( x === 0.0 ) {
		return x; // handles `+-0`
	}
	a = _$abs_147( x );
	if ( x > POS_OVERFLOW || x < NEG_OVERFLOW ) {
		return ( x > 0.0 ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	if ( a > 1.0 ) {
		if ( a >= LARGE ) {
			a = _$exp_225( 0.5*a );
			a *= 0.5 * a;
			if ( x < 0.0 ) {
				a = -a;
			}
			return a;
		}
		a = _$exp_225( a );
		a = (0.5*a) - (0.5/a);
		if ( x < 0.0 ) {
			a = -a;
		}
		return a;
	}
	a *= a;
	return x + ( x*a*_$evalrational_433( a ) );
}


// EXPORTS //

var _$sinh_434 = sinh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the hyperbolic sine of a number.
*
* @module @stdlib/math/base/special/sinh
*
* @example
* var sinh = require( '@stdlib/math/base/special/sinh' );
*
* var v = sinh( 0.0 );
* // returns 0.0
*
* v = sinh( 2.0 );
* // returns ~3.627
*
* v = sinh( -2.0 );
* // returns ~-3.627
*
* v = sinh( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinh_434 = require( './sinh.js' ); */;


// EXPORTS //

var _$sinh_432 = _$sinh_434;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinh_432 = require( '@stdlib/math/base/special/sinh' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
*
* @example
* var y = mgf( 1.2, 0.0, 1.0 );
* // returns ~1.098
*
* @example
* var y = mgf( -0.9, 0.0, 3.0);
* // returns ~1.578
*
* @example
* var y = mgf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __mgf_747( t, mu, s ) {
	var out;
	var st;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	st = s * t;
	out = _$PI_SQUARED_108 * _$sinh_432( st );
	out /= st * ( _$PI_SQUARED_108 + ( st*st ) );
	out *= _$exp_225( mu * t );
	return out;
}


// EXPORTS //

var _$mgf_747 = __mgf_747;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinh_432 = require( '@stdlib/math/base/special/sinh' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.9 );
* // returns ~495.57
*
* y = mgf( -1.0 );
* // returns ~0.058
*/
function __factory_745( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a raised cosine distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 2.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		var out;
		var st;
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		st = s * t;
		out = _$PI_SQUARED_108 * _$sinh_432( st );
		out /= st * ( _$PI_SQUARED_108 + ( st*st ) );
		out *= _$exp_225( mu * t );
		return out;
	}
}


// EXPORTS //

var _$factory_745 = __factory_745;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution moment-generating function (MGF).
*
* @module @stdlib/stats/base/dists/cosine/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/cosine/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.016
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~23.219
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_747 = require( './mgf.js' ); */;
/* removed: var _$factory_745 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_747, 'factory', _$factory_745 );


// EXPORTS //

var _$mgf_746 = _$mgf_747;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_182 = require( '@stdlib/math/base/special/cospi' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
*
* @example
* var y = pdf( 2.5, 4.0, 2.0 );
* // returns ~0.073
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __pdf_752( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	if (
		x < mu - s ||
		x > mu + s
	) {
		return 0.0;
	}
	z = ( x - mu ) / s;
	return ( 1.0 + _$cospi_182( z ) ) / ( 2.0 * s );
}


// EXPORTS //

var _$pdf_752 = __pdf_752;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_750 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cospi_182 = require( '@stdlib/math/base/special/cospi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 3.0 );
* var y = pdf( 2.0 );
* // returns ~0.083
*
* y = pdf( 5.0 );
* // returns 0.0
*/
function __factory_750( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_750( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a raised cosine distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if (
			x < mu - s ||
			x > mu + s
		) {
			return 0.0;
		}
		z = ( x - mu ) / s;
		return ( 1.0 + _$cospi_182( z ) ) / ( 2.0 * s );
	}
}


// EXPORTS //

var _$factory_750 = __factory_750;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/cosine/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/cosine/pdf' );
*
* var y = pdf( 2.0, 0.0, 3.0 );
* // returns ~0.083
*
* var myPDF = pdf.factory( 0.0, 3.0 );
* y = myPDF( 2.0 );
* // returns ~0.083
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_752 = require( './pdf.js' ); */;
/* removed: var _$factory_750 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_752, 'factory', _$factory_750 );


// EXPORTS //

var _$pdf_751 = _$pdf_752;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_730 = require( '@stdlib/stats/base/dists/cosine/cdf' ); */;


// VARIABLES //

var __MAX_ITERATIONS_753 = 1e4;
var TOLERANCE = 1e-12;


// MAIN //

/**
* Bisection method to find quantile as there is no closed-form expression for the inverse of the CDF.
*
* @private
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*/
function bisect( p, mu, s ) {
	var a;
	var b;
	var c;
	var m;
	var n;

	n = 1;
	a = mu - s;
	b = mu + s;
	while ( n < __MAX_ITERATIONS_753 ) {
		m = ( a + b ) / 2.0;
		if ( b - a < TOLERANCE ) {
			return m;
		}
		c = _$cdf_730( m, mu, s);
		if ( p > c ) {
			a = m;
		} else {
			b = m;
		}
		n += 1;
	}
	return m;
}


// EXPORTS //

var _$bisect_753 = bisect;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$bisect_753 = require( './bisect.js' ); */;


// MAIN //

/**
* Evaluates the quantile function for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_756( p, mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		_$isnan_130( p ) ||
		s < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return _$bisect_753( p, mu, s );
}


// EXPORTS //

var _$quantile_756 = __quantile_756;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_754 = _$quantile_795.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$bisect_753 = require( './bisect.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a raised cosine distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~10.0
*
* y = quantile( 0.8 );
* // returns ~10.655
*/
function __factory_754( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_754( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a raised cosine distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return _$bisect_753( p, mu, s );
	}
}


// EXPORTS //

var _$factory_754 = __factory_754;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Raised cosine distribution quantile function.
*
* @module @stdlib/stats/base/dists/cosine/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/cosine/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.327
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_756 = require( './quantile.js' ); */;
/* removed: var _$factory_754 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_756, 'factory', _$factory_754 );


// EXPORTS //

var _$quantile_755 = _$quantile_756;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_731 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_731 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$kurtosis_733 = require( '@stdlib/stats/base/dists/cosine/kurtosis' ); */;
/* removed: var _$mean_741 = require( '@stdlib/stats/base/dists/cosine/mean' ); */;
/* removed: var _$median_743 = require( '@stdlib/stats/base/dists/cosine/median' ); */;
/* removed: var _$mode_748 = require( '@stdlib/stats/base/dists/cosine/mode' ); */;
/* removed: var _$skewness_757 = require( '@stdlib/stats/base/dists/cosine/skewness' ); */;
/* removed: var _$stdev_759 = require( '@stdlib/stats/base/dists/cosine/stdev' ); */;
/* removed: var _$variance_761 = require( '@stdlib/stats/base/dists/cosine/variance' ); */;
/* removed: var _$cdf_730 = require( '@stdlib/stats/base/dists/cosine/cdf' ); */;
/* removed: var _$logcdf_736 = require( '@stdlib/stats/base/dists/cosine/logcdf' ); */;
/* removed: var _$logpdf_739 = require( '@stdlib/stats/base/dists/cosine/logpdf' ); */;
/* removed: var _$mgf_746 = require( '@stdlib/stats/base/dists/cosine/mgf' ); */;
/* removed: var _$pdf_751 = require( '@stdlib/stats/base/dists/cosine/pdf' ); */;
/* removed: var _$quantile_755 = require( '@stdlib/stats/base/dists/cosine/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function __cosineCDF_731( x ) {
	return _$cdf_730( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function cosineLogCDF( x ) {
	return _$logcdf_736( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function cosineLogPDF( x ) {
	return _$logpdf_739( x, this.mu, this.s );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function cosineMGF( t ) {
	return _$mgf_746( t, this.mu, this.s );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function cosinePDF( x ) {
	return _$pdf_751( x, this.mu, this.s );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function cosineQuantile( p ) {
	return _$quantile_755( p, this.mu, this.s );
}


// MAIN //

/**
* Cosine distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Cosine} distribution instance
*
* @example
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mu = cosine.mean;
* // returns 1.0
*/
function Cosine() {
	var mu;
	var s;
	if ( !(this instanceof Cosine) ) {
		if ( arguments.length === 0 ) {
			return new Cosine();
		}
		return new Cosine( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !__isNumber_731( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_731( s ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_731( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !__isPositive_731( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
}

/**
* Cosine distribution excess kurtosis.
*
* @name kurtosis
* @memberof Cosine.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.kurtosis;
* // returns ~-0.594
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'kurtosis', function get() {
	return _$kurtosis_733( this.mu, this.s );
});

/**
* Cosine distribution expected value.
*
* @name mean
* @memberof Cosine.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'mean', function get() {
	return _$mean_741( this.mu, this.s );
});

/**
* Cosine distribution median.
*
* @name median
* @memberof Cosine.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'median', function get() {
	return _$median_743( this.mu, this.s );
});

/**
* Cosine distribution mode.
*
* @name mode
* @memberof Cosine.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'mode', function get() {
	return _$mode_748( this.mu, this.s );
});

/**
* Cosine distribution skewness.
*
* @name skewness
* @memberof Cosine.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'skewness', function get() {
	return _$skewness_757( this.mu, this.s );
});

/**
* Cosine distribution standard deviation.
*
* @name stdev
* @memberof Cosine.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.stdev;
* // returns ~4.338
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'stdev', function get() {
	return _$stdev_759( this.mu, this.s );
});

/**
* Cosine distribution variance.
*
* @name variance
* @memberof Cosine.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var cosine = new Cosine( 4.0, 12.0 );
*
* var v = cosine.variance;
* // returns ~18.819
*/
_$setNonEnumerableReadOnlyAccessor_1601( Cosine.prototype, 'variance', function get() {
	return _$variance_761( this.mu, this.s );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.cdf( 0.5 );
* // returns ~0.165
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'cdf', __cosineCDF_731 );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.logcdf( 0.5 );
* // returns ~-1.799
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'logcdf', cosineLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.logpdf( 0.8 );
* // returns ~-1.617
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'logpdf', cosineLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.mgf( 0.2 );
* // returns ~1.555
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'mgf', cosineMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Cosine.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.pdf( 0.8 );
* // returns ~0.198
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'pdf', cosinePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Cosine.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var cosine = new Cosine( 2.0, 4.0 );
*
* var v = cosine.quantile( 0.5 );
* // returns ~2.0
*/
_$setNonEnumerableReadOnly_1603( Cosine.prototype, 'quantile', cosineQuantile );


// EXPORTS //

var _$Cosine_731 = Cosine;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Cosine distribution constructor.
*
* @module @stdlib/stats/base/dists/cosine/ctor
*
* @example
* var Cosine = require( '@stdlib/stats/base/dists/cosine/ctor' );
*
* var cosine = new Cosine( 1.0, 1.0 );
*
* var y = cosine.cdf( 1.5 );
* // returns ~0.909
*
* var mean = cosine.mean;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Cosine_731 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_732 = _$Cosine_731;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the entropy of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {NonNegativeNumber} entropy
*
* @example
* var v = entropy( 0.1 );
* // returns 0.0
*
* @example
* var v = entropy( 0.5 );
* // returns 0.0
*
* @example
* var v = entropy( 10.0 );
* // returns 0.0
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_768( mu ) {
	if ( _$isnan_130( mu ) ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$entropy_768 = __entropy_768;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution entropy.
*
* @module @stdlib/stats/base/dists/degenerate/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/degenerate/entropy' );
*
* var v = entropy( 10.0 );
* // returns 0.0
*
* v = entropy( -5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$entropy_768 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_769 = _$entropy_768;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {number} expected value
*
* @example
* var v = mean( 0.1 );
* // returns 0.1
*
* @example
* var v = mean( 0.5 );
* // returns 0.5
*
* @example
* var v = mean( 10.0 );
* // returns 10.0
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_780( mu ) {
	return mu;
}


// EXPORTS //

var _$mean_780 = __mean_780;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution expected value.
*
* @module @stdlib/stats/base/dists/degenerate/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/degenerate/mean' );
*
* var v = mean( 10.0 );
* // returns 10.0
*
* v = mean( -5.0 );
* // returns -5.0
*/

// MODULES //

/* removed: var _$mean_780 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_779 = _$mean_780;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {number} mode
*
* @example
* var v = mode( 0.1 );
* // returns 0.1
*
* @example
* var v = mode( 0.5 );
* // returns 0.5
*
* @example
* var v = mode( 10.0 );
* // returns 10.0
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_787( mu ) {
	return mu;
}


// EXPORTS //

var _$mode_787 = __mode_787;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution mode.
*
* @module @stdlib/stats/base/dists/degenerate/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/degenerate/mode' );
*
* var v = mode( 10.0 );
* // returns 10.0
*
* v = mode( -5.0 );
* // returns -5.0
*/

// MODULES //

/* removed: var _$mode_787 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_786 = _$mode_787;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the median of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {number} median
*
* @example
* var v = median( 0.1 );
* // returns 0.1
*
* @example
* var v = median( 0.5 );
* // returns 0.5
*
* @example
* var v = median( 10.0 );
* // returns 10.0
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_782( mu ) {
	return mu;
}


// EXPORTS //

var _$median_782 = __median_782;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution median.
*
* @module @stdlib/stats/base/dists/degenerate/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/degenerate/median' );
*
* var v = median( 10.0 );
* // returns 10.0
*
* v = median( -5.0 );
* // returns -5.0
*/

// MODULES //

/* removed: var _$median_782 = require( './median.js' ); */;


// EXPORTS //

var _$median_781 = _$median_782;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the standard deviation of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 0.1 );
* // returns 0.0
*
* @example
* var v = stdev( 0.5 );
* // returns 0.0
*
* @example
* var v = stdev( 10.0 );
* // returns 0.0
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_798( mu ) {
	if ( _$isnan_130( mu ) ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$stdev_798 = __stdev_798;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution standard deviation.
*
* @module @stdlib/stats/base/dists/degenerate/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/degenerate/stdev' );
*
* var v = stdev( 10.0 );
* // returns 0.0
*
* v = stdev( -5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$stdev_798 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_797 = _$stdev_798;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a degenerate distribution.
*
* @param {number} mu - constant value of distribution
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 0.1 );
* // returns 0.0
*
* @example
* var v = variance( 0.5 );
* // returns 0.0
*
* @example
* var v = variance( 10.0 );
* // returns 0.0
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_800( mu ) {
	if ( _$isnan_130( mu ) ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$variance_800 = __variance_800;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution variance.
*
* @module @stdlib/stats/base/dists/degenerate/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/degenerate/variance' );
*
* var v = variance( 10.0 );
* // returns 0.0
*
* v = variance( -5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$variance_800 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_799 = _$variance_800;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a degenerate distribution centered at `mu`.
*
* @param {number} t - input value
* @param {number} mu - value at which to center the distribution
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0 );
* // returns ~2.718
*
* @example
* var y = mgf( 2.0, 3.0 );
* // returns ~403.429
*
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*/
function __mgf_785( t, mu ) {
	if ( _$isnan_130( t ) || _$isnan_130( mu ) ) {
		return NaN;
	}
	return _$exp_225( mu*t );
}


// EXPORTS //

var _$mgf_785 = __mgf_785;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a degenerate distribution centered at a provided mean value.
*
* @param {number} mu - value at which to center the distribution
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
*
* var y = mgf( 0.0 );
* // returns 1.0
*
* y = mgf( 2.0 );
* // returns ~54.598
*/
function __factory_783( mu ) {
	if ( _$isnan_130( mu ) ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a degenerate distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 10.0 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		return _$exp_225( mu*t );
	}
}


// EXPORTS //

var _$factory_783 = __factory_783;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution moment-generating function (MGF).
*
* @module @stdlib/stats/base/dists/degenerate/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/degenerate/mgf' );
*
* var y = mgf( 2.0, 0.0 );
* // returns 1.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/degenerate/mgf' ).factory;
*
* var mgf = factory( 10.0 );
*
* var y = mymgf( 0.1 );
* // returns ~2.718
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_785 = require( './mgf.js' ); */;
/* removed: var _$factory_783 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_785, 'factory', _$factory_783 );


// EXPORTS //

var _$mgf_784 = _$mgf_785;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$isNumber_58 = require( '@stdlib/assert/is-number' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$entropy_769 = require( '@stdlib/stats/base/dists/degenerate/entropy' ); */;
/* removed: var _$mean_779 = require( '@stdlib/stats/base/dists/degenerate/mean' ); */;
/* removed: var _$mode_786 = require( '@stdlib/stats/base/dists/degenerate/mode' ); */;
/* removed: var _$median_781 = require( '@stdlib/stats/base/dists/degenerate/median' ); */;
/* removed: var _$stdev_797 = require( '@stdlib/stats/base/dists/degenerate/stdev' ); */;
/* removed: var _$variance_799 = require( '@stdlib/stats/base/dists/degenerate/variance' ); */;
/* removed: var _$cdf_765 = require( '@stdlib/stats/base/dists/degenerate/cdf' ); */;
/* removed: var _$mgf_784 = require( '@stdlib/stats/base/dists/degenerate/mgf' ); */;
/* removed: var _$pdf_789 = require( '@stdlib/stats/base/dists/degenerate/pdf' ); */;
/* removed: var _$pmf_792 = require( '@stdlib/stats/base/dists/degenerate/pmf' ); */;
/* removed: var _$logcdf_771 = require( '@stdlib/stats/base/dists/degenerate/logcdf' ); */;
/* removed: var _$logpdf_774 = require( '@stdlib/stats/base/dists/degenerate/logpdf' ); */;
/* removed: var _$logpmf_777 = require( '@stdlib/stats/base/dists/degenerate/logpmf' ); */;
/* removed: var _$quantile_795 = require( '@stdlib/stats/base/dists/degenerate/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function degenerateCDF( x ) {
	return _$cdf_765( x, this.mu );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function degenerateLogCDF( x ) {
	return _$logcdf_771( x, this.mu );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function degenerateLogPDF( x ) {
	return _$logpdf_774( x, this.mu );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function degeneratePDF( x ) {
	return _$pdf_789( x, this.mu );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function degenerateLogPMF( x ) {
	return _$logpmf_777( x, this.mu );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function degenerateMGF( t ) {
	return _$mgf_784( t, this.mu );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function degeneratePMF( x ) {
	return _$pmf_792( x, this.mu );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function degenerateQuantile( p ) {
	return _$quantile_795( p, this.mu );
}


// MAIN //

/**
* Degenerate distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - constant value of distribution
* @throws {TypeError} `p` must be a probability
* @returns {Degenerate} distribution instance
*
* @example
* var degenerate = new Degenerate();
*
* var y = degenerate.cdf( 1.8 );
* // returns 1.0
*
* var v = degenerate.median;
* // returns 0.0
*/
function Degenerate() {
	var mu;
	if ( !(this instanceof Degenerate) ) {
		if ( arguments.length === 0 ) {
			return new Degenerate();
		}
		return new Degenerate( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		if ( !_$isNumber_58( mu ) || _$isnan_130( mu ) ) {
			throw new TypeError( 'invalid argument. Mean parameter `mu` must be a number. Value: `' + mu + '`' );
		}
	} else {
		mu = 0.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !_$isNumber_58( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	return this;
}

/**
* Degenerate distribution differential entropy.
*
* @name entropy
* @memberof Degenerate.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var degenerate = new Degenerate( 20.0 );
*
* var v = degenerate.entropy;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'entropy', function get() {
	return _$entropy_769( this.mu );
});

/**
* Degenerate distribution expected value.
*
* @name mean
* @memberof Degenerate.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var degenerate = new Degenerate( 20.0 );
*
* var v = degenerate.mean;
* // returns 20.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'mean', function get() {
	return _$mean_779( this.mu );
});

/**
* Degenerate distribution mode.
*
* @name mode
* @memberof Degenerate.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var degenerate = new Degenerate( 20.0 );
*
* var v = degenerate.mode;
* // returns 20.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'mode', function get() {
	return _$mode_786( this.mu );
});

/**
* Degenerate distribution median.
*
* @name median
* @memberof Degenerate.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var degenerate = new Degenerate( -0.4 );
*
* var v = degenerate.median;
* // returns -0.4
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'median', function get() {
	return _$median_781( this.mu );
});

/**
* Degenerate distribution standard deviation.
*
* @name stdev
* @memberof Degenerate.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var degenerate = new Degenerate( 40.0 );
*
* var v = degenerate.stdev;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'stdev', function get() {
	return _$stdev_797( this.mu );
});

/**
* Degenerate distribution variance.
*
* @name variance
* @memberof Degenerate.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var degenerate = new Degenerate( 40.0 );
*
* var v = degenerate.variance;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Degenerate.prototype, 'variance', function get() {
	return _$variance_799( this.mu );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var degenerate = new Degenerate( -0.5 );
*
* var v = degenerate.cdf( 1.5 );
* // returns 1.0
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'cdf', degenerateCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var degenerate = new Degenerate( 3.0 );
*
* var v = degenerate.logcdf( 4.0 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'logcdf', degenerateLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var degenerate = new Degenerate( -4.0 );
*
* var v = degenerate.logpdf( 4.0 );
* // returns -Infinity
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'logpdf', degenerateLogPDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @name logpdf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var degenerate = new Degenerate( 20.0 );
*
* var v = degenerate.logpmf( 20.0 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'logpmf', degenerateLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var degenerate = new Degenerate( 2.0 );
*
* var v = degenerate.mgf( -3.0 );
* // returns ~0.002
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'mgf', degenerateMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var degenerate = new Degenerate( 0.2 );
*
* var v = degenerate.pdf( 0.2 );
* // returns +Infinity
*
* v = degenerate.pdf( 0.4 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'pdf', degeneratePDF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Degenerate.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var degenerate = new Degenerate( 0.2 );
*
* var v = degenerate.pmf( 0.4 );
* // returns 0.0
*
* v = degenerate.pmf( 0.2 );
* // returns 1.0
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'pmf', degeneratePMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Degenerate.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var degenerate = new Degenerate( 0.2 );
*
* var v = degenerate.quantile( 0.9 );
* // returns 0.2
*/
_$setNonEnumerableReadOnly_1603( Degenerate.prototype, 'quantile', degenerateQuantile );


// EXPORTS //

var _$Degenerate_766 = Degenerate;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Degenerate distribution constructor.
*
* @module @stdlib/stats/base/dists/degenerate/ctor
*
* @example
* var Degenerate = require( '@stdlib/stats/base/dists/degenerate/ctor' );
*
* var degenerate = new Degenerate( 0.0 );
*
* var y = degenerate.cdf( 0.5 );
* // returns 1.0
*
* var median = degenerate.median;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Degenerate_766 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_767 = _$Degenerate_766;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns ~0.909
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns ~0.333
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function __cdf_801( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return ( _$floor_236( x ) - a + 1.0 ) / ( b - a + 1.0 );
}


// EXPORTS //

var _$cdf_801 = __cdf_801;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns ~0.091
*
* y = cdf( 8.0 );
* // returns ~0.818
*/
function __factory_802( a, b ) {
	var am1;
	var n;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	am1 = a - 1.0;
	n = b - a + 1.0;
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return ( _$floor_236( x ) - am1 ) / n;
	}
}


// EXPORTS //

var _$factory_802 = __factory_802;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/discrete-uniform/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/discrete-uniform/cdf' );
*
* var y = cdf( 3.0, 0, 4 );
* // returns ~0.8
*
* var mycdf = cdf.factory( 0, 10 );
* y = mycdf( 0.5 );
* // returns ~0.091
*
* y = mycdf( 8.0 );
* // returns ~0.818
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_801 = require( './cdf.js' ); */;
/* removed: var _$factory_802 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_801, 'factory', _$factory_802 );


// EXPORTS //

var _$cdf_803 = _$cdf_801;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the entropy of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} entropy
*
* @example
* var v = entropy( 0, 1 );
* // returns ~0.693
*
* @example
* var v = entropy( 4, 12 );
* // returns ~2.197
*
* @example
* var v = entropy( -4, 4 );
* // returns ~2.197
*
* @example
* var v = entropy( 1, 2.5 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1 );
* // returns NaN
*
* @example
* var v = entropy( 2, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2 );
* // returns NaN
*/
function __entropy_806( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return _$ln_376( b - a + 1 );
}


// EXPORTS //

var _$entropy_806 = __entropy_806;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution entropy.
*
* @module @stdlib/stats/base/dists/discrete-uniform/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/discrete-uniform/entropy' );
*
* var v = entropy( 0, 1 );
* // returns ~0.693
*
* v = entropy( 4, 12 );
* // returns ~2.197
*
* v = entropy( 2, 8 );
* // returns ~1.946
*/

// MODULES //

/* removed: var _$entropy_806 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_807 = _$entropy_806;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0, 1 );
* // returns -2.0
*
* @example
* var v = kurtosis( 4, 12 );
* // returns ~-1.23
*
* @example
* var v = kurtosis( -4, 4 );
* // returns ~-1.23
*
* @example
* var v = kurtosis( 1, 0.4 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1 );
* // returns NaN
*
* @example
* var v = kurtosis( 2, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2 );
* // returns NaN
*/
function __kurtosis_809( a, b ) {
	var n2;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	n2 = _$pow_396( b - a + 1.0, 2.0 );
	return -1.2 * ( n2 + 1.0 ) / ( n2 - 1.0 );
}


// EXPORTS //

var _$kurtosis_809 = __kurtosis_809;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/discrete-uniform/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/discrete-uniform/kurtosis' );
*
* var v = kurtosis( 0, 1 );
* // returns -2.0
*
* v = kurtosis( 4, 12 );
* // returns ~-1.23
*
* v = kurtosis( -4, 8 );
* // returns ~-1.214
*/

// MODULES //

/* removed: var _$kurtosis_809 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_808 = _$kurtosis_809;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Returns the expected value of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0, 1 );
* // returns 0.5
*
* @example
* var v = mean( -4, 4 );
* // returns 0.0
*
* @example
* var v = mean( 0, 10 );
* // returns 5.0
*
* @example
* var v = mean( 1, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1 );
* // returns NaN
*
* @example
* var v = mean( 2, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2 );
* // returns NaN
*/
function __mean_817( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( a/2 ) + ( b/2 );
}


// EXPORTS //

var _$mean_817 = __mean_817;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution expected value.
*
* @module @stdlib/stats/base/dists/discrete-uniform/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/discrete-uniform/mean' );
*
* var v = mean( 0, 1 );
* // returns 0.5
*
* v = mean( 2, 10 );
* // returns 6.0
*
* v = mean( -10, 10 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$mean_817 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_816 = _$mean_817;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Returns the median of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0, 1 );
* // returns 0.5
*
* @example
* var v = median( -4, 4 );
* // returns 0.0
*
* @example
* var v = median( 0, 10 );
* // returns 5.0
*
* @example
* var v = median( 1, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1 );
* // returns NaN
*
* @example
* var v = median( 2, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2 );
* // returns NaN
*/
function __median_819( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( a/2 ) + ( b/2 );
}


// EXPORTS //

var _$median_819 = __median_819;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution median.
*
* @module @stdlib/stats/base/dists/discrete-uniform/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/discrete-uniform/median' );
*
* var v = median( 0, 1 );
* // returns 0.5
*
* v = median( 2, 10 );
* // returns 6.0
*
* v = median( -10, 10 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$median_819 = require( './median.js' ); */;


// EXPORTS //

var _$median_818 = _$median_819;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;


// MAIN //

/**
* Returns the skewness of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0, 1 );
* // returns 0.0
*
* @example
* var v = skewness( -4, 4 );
* // returns 0.0
*
* @example
* var v = skewness( 0, 10 );
* // returns 0.0
*
* @example
* var v = skewness( 1, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1 );
* // returns NaN
*
* @example
* var v = skewness( 2, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2 );
* // returns NaN
*/
function __skewness_830( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_830 = __skewness_830;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution skewness.
*
* @module @stdlib/stats/base/dists/discrete-uniform/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/discrete-uniform/skewness' );
*
* var v = skewness( 0, 1 );
* // returns 0.0
*
* v = skewness( 2, 10 );
* // returns 0.0
*
* v = skewness( -10, 10 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_830 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_829 = _$skewness_830;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// VARIABLES //

var SQRT1O12 = _$sqrt_437( 1.0/12.0 );


// MAIN //

/**
* Returns the standard deviation of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0, 1 );
* // returns ~0.5
*
* @example
* var v = stdev( 4, 12 );
* // returns ~2.582
*
* @example
* var v = stdev( -4, 4 );
* // returns ~2.582
*
* @example
* var v = stdev( 1, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( 0.5, 1 );
* // returns NaN
*
* @example
* var v = stdev( 2, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2 );
* // returns NaN
*/
function __stdev_832( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return SQRT1O12 * _$sqrt_437( ( _$pow_396( b-a+1, 2.0 ) - 1.0 ) );
}


// EXPORTS //

var _$stdev_832 = __stdev_832;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution standard deviation.
*
* @module @stdlib/stats/base/dists/discrete-uniform/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/discrete-uniform/stdev' );
*
* var v = stdev( 0, 1 );
* // returns ~0.5
*
* v = stdev( 4, 12 );
* // returns ~2.582
*
* v = stdev( 2, 8 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$stdev_832 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_831 = _$stdev_832;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the variance of a discrete uniform distribution.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0, 1 );
* // returns ~0.25
*
* @example
* var v = variance( 4, 12 );
* // returns ~6.667
*
* @example
* var v = variance( -4, 4 );
* // returns ~6.667
*
* @example
* var v = variance( 1, -0.1 );
* // returns NaN
*
* @example
* var v = variance( 0.5, 1 );
* // returns NaN
*
* @example
* var v = variance( 2, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2 );
* // returns NaN
*/
function __variance_834( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	return ( _$pow_396( b-a+1, 2.0 ) - 1.0 ) / 12.0;
}


// EXPORTS //

var _$variance_834 = __variance_834;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution variance.
*
* @module @stdlib/stats/base/dists/discrete-uniform/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/discrete-uniform/variance' );
*
* var v = variance( 0, 1 );
* // returns ~0.25
*
* v = variance( 4, 12 );
* // returns ~6.667
*
* v = variance( 2, 8 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$variance_834 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_833 = _$variance_834;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0, 10 );
* // returns ~-0.095
*
* @example
* var y = logcdf( 0.5, 0, 2 );
* // returns ~-1.099
*
* @example
* var y = logcdf( +Infinity, 2, 4 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2, 4 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1, 0 );
* // returns NaN
*/
function __logcdf_812( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return _$ln_376( _$floor_236( x ) - a + 1.0 ) - _$ln_376( b - a + 1.0 );
}


// EXPORTS //

var _$logcdf_812 = __logcdf_812;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0, 10 );
* var y = logcdf( 0.5 );
* // returns ~-2.398
*
* y = logcdf( 8.0 );
* // returns ~-0.201
*/
function __factory_810( a, b ) {
	var logn;
	var am1;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	am1 = a - 1.0;
	logn = _$ln_376( b - a + 1.0 );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return _$ln_376( _$floor_236( x ) - am1 ) - logn;
	}
}


// EXPORTS //

var _$factory_810 = __factory_810;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a discrete uniform distribution.
*
* @module @stdlib/stats/base/dists/discrete-uniform/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/discrete-uniform/logcdf' );
*
* var y = logcdf( 3.0, 0, 4 );
* // returns ~-0.223
*
* var mylogcdf = logcdf.factory( 0, 10 );
* y = mylogcdf( 0.5 );
* // returns ~-2.398
*
* y = mylogcdf( 8.0 );
* // returns ~-0.201
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_812 = require( './logcdf.js' ); */;
/* removed: var _$factory_810 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_812, 'factory', _$factory_810 );


// EXPORTS //

var _$logcdf_811 = _$logcdf_812;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 2.0, 0, 4 );
* // returns ~-1.609
*
* @example
* var y = logpmf( 5.0, 0, 4 );
* // returns -Infinity
*
* @example
* var y = logpmf( 2, 0, 8 );
* // returns ~-2.197
*
* @example
* var y = logpmf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function __logpmf_815( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a || x > b || !_$isInteger_128( x ) ) {
		return _$FLOAT64_NINF_107;
	}
	return -_$ln_376( b - a + 1.0 );
}


// EXPORTS //

var _$logpmf_815 = __logpmf_815;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 0, 10 );
* var y = logpmf( 2.0 );
* // returns ~-2.398
*
* y = logpmf( 12.0 );
* // returns -Infinity
*/
function __factory_813( a, b ) {
	var logn;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	logn = -_$ln_376( b - a + 1.0 );
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b || !_$isInteger_128( x ) ) {
			return _$FLOAT64_NINF_107;
		}
		return logn;
	}
}


// EXPORTS //

var _$factory_813 = __factory_813;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a discrete uniform distribution.
*
* @module @stdlib/stats/base/dists/discrete-uniform/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/discrete-uniform/logpmf' );
*
* var y = logpmf( 3.0, 2, 6 );
* // returns ~-1.609
*
* var myLogPMF = logpmf.factory( 6, 7 );
* y = myLogPMF( 7.0 );
* // returns ~-0.693
*
* y = myLogPMF( 5.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_815 = require( './logpmf.js' ); */;
/* removed: var _$factory_813 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_815, 'factory', _$factory_813 );


// EXPORTS //

var _$logpmf_814 = _$logpmf_815;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0, 4 );
* // returns ~689.475
*
* @example
* var y = mgf( -0.2, 0, 4 );
* // returns ~0.697
*
* @example
* var y = mgf( 2.0, 0, 1 );
* // returns ~4.195
*
* @example
* var y = mgf( 0.5, 3, 3 );
* // returns ~4.482
*
* @example
* var y = mgf( 0.5, 3, 2 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0, NaN );
* // returns NaN
*/
function __mgf_822( t, a, b ) {
	var ret;
	var n;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	n = b - a + 1;
	ret = _$exp_225( t*a ) * _$expm1_228( t*n );
	ret /= n * _$expm1_228( t );
	return ret;
}


// EXPORTS //

var _$mgf_822 = __mgf_822;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} MGF
*
* @example
* var mgf = factory( 6, 7 );
* var y = mgf( 0.1 );
* // returns ~1.918
*
* y = mgf( 1.1 );
* // returns ~1471.722
*/
function __factory_820( a, b ) {
	var n;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	n = b - a + 1;
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a discrete uniform distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		// Case: t not equal to zero
		ret = _$exp_225( t*a ) * _$expm1_228( t*n );
		ret /= n * _$expm1_228( t );
		return ret;
	}
}


// EXPORTS //

var _$factory_820 = __factory_820;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) of a discrete uniform distribution.
*
* @module @stdlib/stats/base/dists/discrete-uniform/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/discrete-uniform/mgf' );
*
* var y = mgf( 2.0, 0, 4 );
* // returns ~689.475
*
* y = mgf( -0.2, 0, 4 );
* // returns ~0.697
*
* y = mgf( 2.0, 0, 1 );
* // returns ~4.195
*
* var mymgf = mgf.factory( 6, 7 );
* y = mymgf( 0.1 );
* // returns ~1.918
*
* y = mymgf( 1.1 );
* // returns ~1471.722
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_822 = require( './mgf.js' ); */;
/* removed: var _$factory_820 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_822, 'factory', _$factory_820 );


// EXPORTS //

var _$mgf_821 = _$mgf_822;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {number} evaluated PMF
*
* @example
* var y = pmf( 2.0, 0, 4 );
* // returns ~0.2
*
* @example
* var y = pmf( 5.0, 0, 4 );
* // returns 0.0
*
* @example
* var y = pmf( 2, 0, 8 );
* // returns ~0.111
*
* @example
* var y = pmf( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 1 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 3, 1 );
* // returns NaN
*/
function __pmf_825( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return NaN;
	}
	if ( x < a || x > b || !_$isInteger_128( x ) ) {
		return 0.0;
	}
	return 1.0 / ( b - a + 1.0 );
}


// EXPORTS //

var _$pmf_825 = __pmf_825;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0, 10 );
* var y = pmf( 2.0 );
* // returns ~0.091
*
* y = pmf( 12.0 );
* // returns 0.0
*/
function __factory_823( a, b ) {
	var ninv;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	ninv = 1.0 / ( b - a + 1.0 );
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a discrete uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b || !_$isInteger_128( x ) ) {
			return 0.0;
		}
		return ninv;
	}
}


// EXPORTS //

var _$factory_823 = __factory_823;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/discrete-uniform/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/discrete-uniform/pmf' );
*
* var y = pmf( 3.0, 2, 6 );
* // returns ~0.2
*
* var myPMF = pmf.factory( 6, 7 );
* y = myPMF( 7.0 );
* // returns 0.5
*
* y = myPMF( 5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_825 = require( './pmf.js' ); */;
/* removed: var _$factory_823 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_825, 'factory', _$factory_823 );


// EXPORTS //

var _$pmf_824 = _$pmf_825;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Evaluates the quantile function for a discrete uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {integer} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0, 1 );
* // returns 1
*
* @example
* var y = quantile( 0.5, 0, 10 );
* // returns 5
*
* @example
* var y = quantile( 1.1, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1, 1.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0, 1 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2, 1 );
* // returns NaN
*/
function __quantile_828( p, a, b ) {
	var n;
	if (
		_$isnan_130( p ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	n = b - a + 1;
	return a + _$floor_236( p * n );
}


// EXPORTS //

var _$quantile_828 = __quantile_828;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a discrete uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {integer} a - minimum support
* @param {integer} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 4 );
* var y = quantile( 0.4 );
* // returns 3
*
* y = quantile( 0.8 );
* // returns 4
*/
function __factory_826( a, b ) {
	var n;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		!_$isInteger_128( a ) ||
		!_$isInteger_128( b ) ||
		a > b
	) {
		return _$constantFunction_1600( NaN );
	}
	n = b - a + 1;
	return quantile;

	/**
	* Evaluates the quantile function for a discrete uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + _$floor_236( p * n );
	}
}


// EXPORTS //

var _$factory_826 = __factory_826;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution quantile function.
*
* @module @stdlib/stats/base/dists/discrete-uniform/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/discrete-uniform/quantile' );
*
* var y = quantile( 0.8, 0, 1 );
* // returns 1
*
* y = quantile( 0.5, 0, 10 );
* // returns 5
*
* var myQuantile = quantile.factory( 0, 4 );
* y = myQuantile( 0.8 );
* // returns 4
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_828 = require( './quantile.js' ); */;
/* removed: var _$factory_826 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_828, 'factory', _$factory_826 );


// EXPORTS //

var _$quantile_827 = _$quantile_828;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isInteger_804 = _$isInteger_42.isPrimitive;
/* removed: var _$entropy_807 = require( '@stdlib/stats/base/dists/discrete-uniform/entropy' ); */;
/* removed: var _$kurtosis_808 = require( '@stdlib/stats/base/dists/discrete-uniform/kurtosis' ); */;
/* removed: var _$mean_816 = require( '@stdlib/stats/base/dists/discrete-uniform/mean' ); */;
/* removed: var _$median_818 = require( '@stdlib/stats/base/dists/discrete-uniform/median' ); */;
/* removed: var _$skewness_829 = require( '@stdlib/stats/base/dists/discrete-uniform/skewness' ); */;
/* removed: var _$stdev_831 = require( '@stdlib/stats/base/dists/discrete-uniform/stdev' ); */;
/* removed: var _$variance_833 = require( '@stdlib/stats/base/dists/discrete-uniform/variance' ); */;
/* removed: var _$cdf_803 = require( '@stdlib/stats/base/dists/discrete-uniform/cdf' ); */;
/* removed: var _$logcdf_811 = require( '@stdlib/stats/base/dists/discrete-uniform/logcdf' ); */;
/* removed: var _$logpmf_814 = require( '@stdlib/stats/base/dists/discrete-uniform/logpmf' ); */;
/* removed: var _$mgf_821 = require( '@stdlib/stats/base/dists/discrete-uniform/mgf' ); */;
/* removed: var _$pmf_824 = require( '@stdlib/stats/base/dists/discrete-uniform/pmf' ); */;
/* removed: var _$quantile_827 = require( '@stdlib/stats/base/dists/discrete-uniform/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function discreteUniformCDF( x ) {
	return _$cdf_803( x, this.a, this.b );
}

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function discreteUniformLogCDF( x ) {
	return _$logcdf_811( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function discreteUniformLogPMF( x ) {
	return _$logpmf_814( x, this.a, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function discreteUniformMGF( t ) {
	return _$mgf_821( t, this.a, this.b );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function discreteUniformPMF( x ) {
	return _$pmf_824( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function discreteUniformQuantile( p ) {
	return _$quantile_827( p, this.a, this.b );
}


// MAIN //

/**
* Discrete uniform distribution constructor.
*
* @constructor
* @param {integer} [a=0] - minimum support
* @param {integer} [b=1] - maximum support
* @throws {TypeError} `a` must be an integer
* @throws {TypeError} `b` must be an integer
* @throws {RangeError} `a` must be smaller than `b`
* @returns {DiscreteUniform} distribution instance
*
* @example
* var discreteUniform = new DiscreteUniform( 0, 1 );
*
* var y = discreteUniform.cdf( 0.8 );
* // returns 0.5
*
* var mu = discreteUniform.mean;
* // returns 0.5
*/
function DiscreteUniform() {
	var a;
	var b;
	if ( !(this instanceof DiscreteUniform) ) {
		if ( arguments.length === 0 ) {
			return new DiscreteUniform();
		}
		return new DiscreteUniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !__isInteger_804( a ) ) {
			throw new TypeError( 'invalid argument. Minimum support `a` must be an integer. Value: `' + a + '`' );
		}
		if ( !__isInteger_804( b ) ) {
			throw new TypeError( 'invalid argument. Maximum support `b` must be an integer. Value: `' + b + '`' );
		}
		if ( a > b ) {
			throw new RangeError( 'invalid arguments. Minimum support `a` must be less than or equal to maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0;
		b = 1;
	}
	_$defineProperty_1606( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !__isInteger_804( value ) ) {
				throw new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );
			}
			if ( value > b ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isInteger_804( value ) ) {
				throw new TypeError( 'invalid value. Must be an integer. Value: `' + value + '`' );
			}
			if ( a > value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Discrete uniform distribution differential entropy.
*
* @name entropy
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.entropy;
* // returns ~2.197
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'entropy', function get() {
	return _$entropy_807( this.a, this.b );
});

/**
* Discrete uniform distribution excess kurtosis.
*
* @name kurtosis
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.kurtosis;
* // returns -1.23
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'kurtosis', function get() {
	return _$kurtosis_808( this.a, this.b );
});

/**
* Discrete uniform distribution expected value.
*
* @name mean
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.mean;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'mean', function get() {
	return _$mean_816( this.a, this.b );
});

/**
* Discrete uniform distribution median.
*
* @name median
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.median;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'median', function get() {
	return _$median_818( this.a, this.b );
});

/**
* Discrete uniform distribution skewness.
*
* @name skewness
* @memberof DiscreteUniform.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'skewness', function get() {
	return _$skewness_829( this.a, this.b );
});

/**
* Discrete uniform distribution standard deviation.
*
* @name stdev
* @memberof DiscreteUniform.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.stdev;
* // returns ~2.582
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'stdev', function get() {
	return _$stdev_831( this.a, this.b );
});

/**
* Discrete uniform distribution variance.
*
* @name variance
* @memberof DiscreteUniform.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var discreteUniform = new DiscreteUniform( 4, 12 );
*
* var v = discreteUniform.variance;
* // returns ~6.667
*/
_$setNonEnumerableReadOnlyAccessor_1601( DiscreteUniform.prototype, 'variance', function get() {
	return _$variance_833( this.a, this.b );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.cdf( 3.0 );
* // returns ~0.667
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'cdf', discreteUniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.logcdf( 2.5 );
* // returns ~-1.099
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'logcdf', discreteUniformLogCDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @name logpmf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.logpmf( 3.0 );
* // returns ~-1.099
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'logpmf', discreteUniformLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.mgf( 0.5 );
* // returns ~4.863
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'mgf', discreteUniformMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.pmf( 3.0 );
* // returns ~0.333
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'pmf', discreteUniformPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof DiscreteUniform.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var discreteUniform = new DiscreteUniform( 2, 4 );
*
* var v = discreteUniform.quantile( 0.6 );
* // returns 3.0
*/
_$setNonEnumerableReadOnly_1603( DiscreteUniform.prototype, 'quantile', discreteUniformQuantile );


// EXPORTS //

var _$DiscreteUniform_804 = DiscreteUniform;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Discrete uniform distribution constructor.
*
* @module @stdlib/stats/base/dists/discrete-uniform/ctor
*
* @example
* var DiscreteUniform = require( '@stdlib/stats/base/dists/discrete-uniform/ctor' );
*
* var discreteUniform = new DiscreteUniform( 0, 8 );
*
* var y = discreteUniform.cdf( 0.8 );
* // returns ~0.111
*
* var mu = discreteUniform.mean;
* // returns 4.0
*/

// MODULES //

/* removed: var _$DiscreteUniform_804 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_805 = _$DiscreteUniform_804;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$cdf_964 = require( '@stdlib/stats/base/dists/gamma/cdf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( 2.0, 3, 1.0 );
* // returns ~0.323
*
* @example
* var y = cdf( 2.0, 2.5, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( -1.0, 2, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function __cdf_835( x, k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return NaN;
	}
	return _$cdf_964( x, k, lambda );
}


// EXPORTS //

var _$cdf_835 = __cdf_835;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var factoryGamma = _$cdf_964.factory;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2, 0.1 );
* var y = cdf( 12.0 );
* // returns ~0.337
*
* y = cdf( 8.0 );
* // returns ~0.191
*/
function __factory_836( k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return _$constantFunction_1600( NaN );
	}
	return factoryGamma( k, lambda );
}


// EXPORTS //

var _$factory_836 = __factory_836;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/erlang/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/erlang/cdf' );
*
* var y = cdf( 2.0, 8, 3.0 );
* // returns ~0.256
*
* y = cdf( 0.0, 1, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2, 0.5 );
* y = mycdf( 6.0 );
* // returns ~0.801
*
* y = mycdf( 2.0 );
* // returns ~0.264
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_835 = require( './cdf.js' ); */;
/* removed: var _$factory_836 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_835, 'factory', _$factory_836 );


// EXPORTS //

var _$cdf_837 = _$cdf_835;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a positive integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a positive integer
*
* @example
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* @example
* var bool = isPositiveInteger( 0.0 );
* // returns false
*
* @example
* var bool = isPositiveInteger( -10.0 );
* // returns false
*/
function __isPositiveInteger_141( x ) {
	return (_$floor_236(x) === x && x > 0);
}


// EXPORTS //

var _$isPositiveInteger_141 = __isPositiveInteger_141;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a positive integer.
*
* @module @stdlib/math/base/assert/is-positive-integer
*
* @example
* var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
*
* var bool = isPositiveInteger( 1.0 );
* // returns true
*
* bool = isPositiveInteger( 0.0 );
* // returns false
*
* bool = isPositiveInteger( -10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isPositiveInteger_141 = require( './is_positive_integer.js' ); */;


// EXPORTS //

var _$isPositiveInteger_140 = _$isPositiveInteger_141;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1, 1.0 );
* // returns 1.0
*
* @example
* var v = entropy( 4, 12.0 );
* // returns ~-0.462
*
* @example
* var v = entropy( 8, 2.0 );
* // returns ~1.723
*
* @example
* var v = entropy( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = entropy( 1, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_840( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( ( 1-k ) * _$digamma_185( k ) ) + _$ln_376( _$gamma_247( k ) / lambda ) + k;
}


// EXPORTS //

var _$entropy_840 = __entropy_840;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution differential entropy.
*
* @module @stdlib/stats/base/dists/erlang/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/erlang/entropy' );
*
* var v = entropy( 1, 1.0 );
* // returns ~-0.154
*
* v = entropy( 4, 12.0 );
* // returns ~9.587
*
* v = entropy( 8, 2.0 );
* // returns ~33.973
*/

// MODULES //

/* removed: var _$entropy_840 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_841 = _$entropy_840;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( 4, 12.0 );
* // returns 1.5
*
* @example
* var v = kurtosis( 8, 2.0 );
* // returns 0.75
*
* @example
* var v = kurtosis( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 1, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_843( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 6.0 / k;
}


// EXPORTS //

var _$kurtosis_843 = __kurtosis_843;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/erlang/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/erlang/kurtosis' );
*
* var v = kurtosis( 1, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8, 2.0 );
* // returns 0.75
*/

// MODULES //

/* removed: var _$kurtosis_843 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_842 = _$kurtosis_843;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 1, 1.0 );
* // returns 1.0
*
* @example
* var v = mean( 4, 12.0 );
* // returns ~0.333
*
* @example
* var v = mean( 8, 2.0 );
* // returns 4.0
*
* @example
* var v = mean( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = mean( 1, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_848( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / lambda;
}


// EXPORTS //

var _$mean_848 = __mean_848;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution expected value.
*
* @module @stdlib/stats/base/dists/erlang/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/erlang/mean' );
*
* var v = mean( 1, 1.0 );
* // returns 1.0
*
* v = mean( 4, 12.0 );
* // returns ~0.333
*
* v = mean( 8, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_848 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_847 = _$mean_848;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 4, 12.0 );
* // returns 0.25
*
* @example
* var v = mode( 8, 2.0 );
* // returns 3.5
*
* @example
* var v = mode( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 1, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_853( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( k - 1 ) / lambda;
}


// EXPORTS //

var _$mode_853 = __mode_853;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution mode.
*
* @module @stdlib/stats/base/dists/erlang/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/erlang/mode' );
*
* var v = mode( 1, 1.0 );
* // returns 0.0
*
* v = mode( 4, 12.0 );
* // returns 0.25
*
* v = mode( 8, 2.0 );
* // returns 3.5
*/

// MODULES //

/* removed: var _$mode_853 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_852 = _$mode_853;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 1, 1.0 );
* // returns 2.0
*
* @example
* var v = skewness( 4, 12.0 );
* // returns 1.0
*
* @example
* var v = skewness( 8, 2.0 );
* // returns ~0.707
*
* @example
* var v = skewness( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = skewness( 1, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_861( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return 2.0 / _$sqrt_437( k );
}


// EXPORTS //

var _$skewness_861 = __skewness_861;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution skewness.
*
* @module @stdlib/stats/base/dists/erlang/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/erlang/skewness' );
*
* var v = skewness( 1, 1.0 );
* // returns 2.0
*
* v = skewness( 4, 12.0 );
* // returns 1.0
*
* v = skewness( 8, 2.0 );
* // returns ~0.707
*/

// MODULES //

/* removed: var _$skewness_861 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_860 = _$skewness_861;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 1, 1.0 );
* // returns 1.0
*
* @example
* var v = stdev( 4, 12.0 );
* // returns ~0.167
*
* @example
* var v = stdev( 8, 2.0 );
* // returns ~1.414
*
* @example
* var v = stdev( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = stdev( 1, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_863( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return _$sqrt_437( k ) / lambda;
}


// EXPORTS //

var _$stdev_863 = __stdev_863;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution standard deviation.
*
* @module @stdlib/stats/base/dists/erlang/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/erlang/stdev' );
*
* var v = stdev( 1, 1.0 );
* // returns 1.0
*
* v = stdev( 4, 12.0 );
* // returns ~0.167
*
* v = stdev( 8, 2.0 );
* // returns ~1.414
*/

// MODULES //

/* removed: var _$stdev_863 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_862 = _$stdev_863;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isPositiveInteger_140 = require( '@stdlib/math/base/assert/is-positive-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of an Erlang distribution.
*
* @param {PositiveInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 1, 1.0 );
* // returns 1.0
*
* @example
* var v = variance( 4, 12.0 );
* // returns ~0.028
*
* @example
* var v = variance( 8, 2.0 );
* // returns 2.0
*
* @example
* var v = variance( 1.5, 2.0 );
* // returns NaN
*
* @example
* var v = variance( 1, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_865( k, lambda ) {
	if (
		!_$isPositiveInteger_140( k ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return k / ( lambda*lambda );
}


// EXPORTS //

var _$variance_865 = __variance_865;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution variance.
*
* @module @stdlib/stats/base/dists/erlang/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/erlang/variance' );
*
* var v = variance( 1, 1.0 );
* // returns 1.0
*
* v = variance( 4, 12.0 );
* // returns ~0.028
*
* v = variance( 8, 2.0 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$variance_865 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_864 = _$variance_865;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$logpdf_973 = require( '@stdlib/stats/base/dists/gamma/logpdf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.1, 1, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( 0.5, 2, 2.5 );
* // returns ~-0.111
*
* @example
* var y = logpdf( -1.0, 4, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, -2, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, 0.0, 2.0 );
* // returns Infinity
*
* @example
* var y = logpdf( 2.0, 1, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function __logpdf_846( x, k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return NaN;
	}
	return _$logpdf_973( x, k, lambda );
}


// EXPORTS //

var _$logpdf_846 = __logpdf_846;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __factoryGamma_844 = _$logpdf_973.factory;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logPDF
*
* @example
* var myLogPDF = factory( 6.0, 7.0 );
* var y = myLogPDF( 7.0 );
* // returns ~-32.382
*/
function __factory_844( k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return _$constantFunction_1600( NaN );
	}
	return __factoryGamma_844( k, lambda );
}


// EXPORTS //

var _$factory_844 = __factory_844;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an Erlang distribution.
*
* @module @stdlib/stats/base/dists/erlang/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/erlang/logpdf' );
*
* var y = logpdf( 0.5, 2, 2.5 );
* // returns ~-0.111
*
* var myLogPDF = logpdf.factory( 6, 7.0 );
* y = myLogPDF( 7.0 );
* // returns ~-1.864
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_846 = require( './logpdf.js' ); */;
/* removed: var _$factory_844 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_846, 'factory', _$factory_844 );


// EXPORTS //

var _$logpdf_845 = _$logpdf_846;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.3, 1, 1.0 );
* // returns ~1.429
*
* @example
* var y = mgf( 2.0, 2, 3.0 );
* // returns ~9.0
*
* @example
* var y = mgf( -1.0, 2, 2.0 );
* // returns ~0.444
*
* @example
* var y = mgf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -2, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 1, -5.0 );
* // returns NaN
*/
function __mgf_851( t, k, lambda ) {
	if (
		_$isnan_130( t ) ||
		!_$isNonNegativeInteger_136( k ) ||
		_$isnan_130( lambda )||
		lambda < 0.0 ||
		t >= lambda
	) {
		return NaN;
	}
	return _$pow_396( 1.0 - (t/lambda), -k );
}


// EXPORTS //

var _$mgf_851 = __mgf_851;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2, 0.5 );
*
* var y = mgf( 0.2 );
* // returns ~2.778
*
* y = mgf( -0.5 );
* // returns 0.25
*/
function __factory_849( k, lambda ) {
	if (
		!_$isNonNegativeInteger_136( k ) ||
		_$isnan_130( lambda ) ||
		lambda < 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an Erlang distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) || t >= lambda ) {
			return NaN;
		}
		return _$pow_396( 1.0 - (t/lambda), -k );
	}
}


// EXPORTS //

var _$factory_849 = __factory_849;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for an Erlang distribution.
*
* @module @stdlib/stats/base/dists/erlang/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/erlang/mgf' );
*
* var y = mgf( 0.3, 1, 1.0 );
* // returns ~1.429
*
* var myMGF = mgf.factory( 2, 0.5 );
*
* y = myMGF( 0.2 );
* // returns ~2.778
*
* y = myMGF( -0.5 );
* // returns 0.25
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_851 = require( './mgf.js' ); */;
/* removed: var _$factory_849 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_851, 'factory', _$factory_849 );


// EXPORTS //

var _$mgf_850 = _$mgf_851;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$pdf_985 = require( '@stdlib/stats/base/dists/gamma/pdf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.1, 1, 1.0 );
* // returns ~0.905
*
* @example
* var y = pdf( 0.5, 2, 2.5 );
* // returns ~0.895
*
* @example
* var y = pdf( -1.0, 4, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -2, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.5, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns Infinity
*
* @example
* var y = pdf( 2.0, 1, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1, -1.0 );
* // returns NaN
*/
function __pdf_856( x, k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return NaN;
	}
	return _$pdf_985( x, k, lambda );
}


// EXPORTS //

var _$pdf_856 = __pdf_856;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __factoryGamma_854 = _$pdf_985.factory;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} PDF
*
* @example
* var myPDF = factory( 6.0, 7.0 );
* var y = myPDF( 7.0 );
* // returns ~8.639e-15
*/
function __factory_854( k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return _$constantFunction_1600( NaN );
	}
	return __factoryGamma_854( k, lambda );
}


// EXPORTS //

var _$factory_854 = __factory_854;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/erlang/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/erlang/pdf' );
*
* var y = pdf( 0.5, 2, 2.5 );
* // returns ~0.895
*
* var myPDF = pdf.factory( 6, 7.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_856 = require( './pdf.js' ); */;
/* removed: var _$factory_854 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_856, 'factory', _$factory_854 );


// EXPORTS //

var _$pdf_855 = _$pdf_856;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$quantile_989 = require( '@stdlib/stats/base/dists/gamma/quantile' ); */;


// MAIN //

/**
* Evaluates the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2, 1.0 );
* // returns ~2.994
*
* @example
* var y = quantile( 0.5, 4, 2.0 );
* // returns ~1.836
*
* @example
* var y = quantile( 1.1, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1, NaN );
* // returns NaN
*
* @example
* // Non-integer shape parameter:
* var y = quantile( 0.5, 0.5, 1.0 );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1, 1.0 );
* // returns NaN
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1, -1.0 );
* // returns NaN
*/
function __quantile_859( p, k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return NaN;
	}
	return _$quantile_989( p, k, lambda );
}


// EXPORTS //

var _$quantile_859 = __quantile_859;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __factoryGamma_857 = _$quantile_989.factory;


// MAIN //

/**
* Returns a function for evaluating the quantile function for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.
*
* @param {NonNegativeInteger} k - shape parameter
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2, 0.5 );
* var y = quantile( 0.5 );
* // returns ~3.357
*
* y = quantile( 0.8 );
* // returns ~5.989
*/
function __factory_857( k, lambda ) {
	if ( !_$isNonNegativeInteger_136( k ) ) {
		return _$constantFunction_1600( NaN );
	}
	return __factoryGamma_857( k, lambda );
}


// EXPORTS //

var _$factory_857 = __factory_857;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution quantile function.
*
* @module @stdlib/stats/base/dists/erlang/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/erlang/quantile' );
*
* var y = quantile( 0.8, 1, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 10, 2.0 );
* y = myQuantile( 0.4 );
* // returns ~4.452
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_859 = require( './quantile.js' ); */;
/* removed: var _$factory_857 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_859, 'factory', _$factory_857 );


// EXPORTS //

var _$quantile_858 = _$quantile_859;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositiveInteger_838 = _$isPositiveInteger_66.isPrimitive;
var __isPositive_838 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_841 = require( '@stdlib/stats/base/dists/erlang/entropy' ); */;
/* removed: var _$kurtosis_842 = require( '@stdlib/stats/base/dists/erlang/kurtosis' ); */;
/* removed: var _$mean_847 = require( '@stdlib/stats/base/dists/erlang/mean' ); */;
/* removed: var _$mode_852 = require( '@stdlib/stats/base/dists/erlang/mode' ); */;
/* removed: var _$skewness_860 = require( '@stdlib/stats/base/dists/erlang/skewness' ); */;
/* removed: var _$stdev_862 = require( '@stdlib/stats/base/dists/erlang/stdev' ); */;
/* removed: var _$variance_864 = require( '@stdlib/stats/base/dists/erlang/variance' ); */;
/* removed: var _$cdf_837 = require( '@stdlib/stats/base/dists/erlang/cdf' ); */;
/* removed: var _$logpdf_845 = require( '@stdlib/stats/base/dists/erlang/logpdf' ); */;
/* removed: var _$mgf_850 = require( '@stdlib/stats/base/dists/erlang/mgf' ); */;
/* removed: var _$pdf_855 = require( '@stdlib/stats/base/dists/erlang/pdf' ); */;
/* removed: var _$quantile_858 = require( '@stdlib/stats/base/dists/erlang/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function erlangCDF( x ) {
	return _$cdf_837( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function erlangLogPDF( x ) {
	return _$logpdf_845( x, this.k, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function erlangMGF( t ) {
	return _$mgf_850( t, this.k, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function erlangPDF( x ) {
	return _$pdf_855( x, this.k, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function erlangQuantile( p ) {
	return _$quantile_858( p, this.k, this.lambda );
}


// MAIN //

/**
* Erlang distribution constructor.
*
* @constructor
* @param {PositiveInteger} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Erlang} distribution instance
*
* @example
* var erlang = new Erlang( 1.0, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var v = erlang.mode;
* // returns 0.0
*/
function Erlang() {
	var lambda;
	var k;
	if ( !(this instanceof Erlang) ) {
		if ( arguments.length === 0 ) {
			return new Erlang();
		}
		return new Erlang( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !__isPositiveInteger_838( k ) ) {
			throw new TypeError( 'invalid argument. Shape parameter `k` must be a positive integer. Value: `' + k + '`' );
		}
		if ( !__isPositive_838( lambda ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	_$defineProperty_1606( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !__isPositiveInteger_838( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive integer. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	_$defineProperty_1606( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !__isPositive_838( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Erlang distribution differential entropy.
*
* @name entropy
* @memberof Erlang.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.entropy;
* // returns ~-0.462
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'entropy', function get() {
	return _$entropy_841( this.k, this.lambda );
});

/**
* Erlang distribution excess kurtosis.
*
* @name kurtosis
* @memberof Erlang.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.kurtosis;
* // returns 1.5
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'kurtosis', function get() {
	return _$kurtosis_842( this.k, this.lambda );
});

/**
* Erlang distribution expected value.
*
* @name mean
* @memberof Erlang.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mean;
* // returns ~0.333
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'mean', function get() {
	return _$mean_847( this.k, this.lambda );
});

/**
* Erlang distribution mode.
*
* @name mode
* @memberof Erlang.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.mode;
* // returns 0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'mode', function get() {
	return _$mode_852( this.k, this.lambda );
});

/**
* Erlang distribution skewness.
*
* @name skewness
* @memberof Erlang.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.skewness;
* // returns 1.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'skewness', function get() {
	return _$skewness_860( this.k, this.lambda );
});

/**
* Erlang distribution standard deviation.
*
* @name stdev
* @memberof Erlang.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.stdev;
* // returns ~0.167
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'stdev', function get() {
	return _$stdev_862( this.k, this.lambda );
});

/**
* Erlang distribution variance.
*
* @name variance
* @memberof Erlang.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var erlang = new Erlang( 4, 12.0 );
*
* var v = erlang.variance;
* // returns ~0.028
*/
_$setNonEnumerableReadOnlyAccessor_1601( Erlang.prototype, 'variance', function get() {
	return _$variance_864( this.k, this.lambda );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.cdf( 0.5 );
* // returns ~0.594
*/
_$setNonEnumerableReadOnly_1603( Erlang.prototype, 'cdf', erlangCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.logpdf( 2.0 );
* // returns ~-4.534
*/
_$setNonEnumerableReadOnly_1603( Erlang.prototype, 'logpdf', erlangLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.mgf( 0.5 );
* // returns ~1.306
*/
_$setNonEnumerableReadOnly_1603( Erlang.prototype, 'mgf', erlangMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Erlang.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.pdf( 2.0 );
* // returns ~0.011
*/
_$setNonEnumerableReadOnly_1603( Erlang.prototype, 'pdf', erlangPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Erlang.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var erlang = new Erlang( 2, 4.0 );
*
* var v = erlang.quantile( 0.5 );
* // returns ~0.42
*/
_$setNonEnumerableReadOnly_1603( Erlang.prototype, 'quantile', erlangQuantile );


// EXPORTS //

var _$Erlang_838 = Erlang;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Erlang distribution constructor.
*
* @module @stdlib/stats/base/dists/erlang/ctor
*
* @example
* var Erlang = require( '@stdlib/stats/base/dists/erlang/ctor' );
*
* var erlang = new Erlang( 1, 1.0 );
*
* var y = erlang.cdf( 0.8 );
* // returns ~0.551
*
* var mode = erlang.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Erlang_838 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_839 = _$Erlang_838;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.865
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_866( x, lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return 1.0 - _$exp_225( -lambda * x );
}


// EXPORTS //

var _$cdf_866 = __cdf_866;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.777
*
* y = cdf( 1.0 );
* // returns ~0.393
*/
function __factory_867( lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - _$exp_225( -lambda * x );
	}
}


// EXPORTS //

var _$factory_867 = __factory_867;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/exponential/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/exponential/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.181
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 3.0 );
* // returns ~0.777
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_866 = require( './cdf.js' ); */;
/* removed: var _$factory_867 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_866, 'factory', _$factory_867 );


// EXPORTS //

var _$cdf_868 = _$cdf_866;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the entropy of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~-1.197
*
* @example
* var v = entropy( 1.0 );
* // returns 1.0
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_871( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 - _$ln_376( lambda );
}


// EXPORTS //

var _$entropy_871 = __entropy_871;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution differential entropy.
*
* @module @stdlib/stats/base/dists/exponential/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/exponential/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~-1.398
*
* v = entropy( 4.5 );
* // returns ~-0.504
*/

// MODULES //

/* removed: var _$entropy_871 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_872 = _$entropy_871;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( 1.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_874( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 6.0;
}


// EXPORTS //

var _$kurtosis_874 = __kurtosis_874;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/exponential/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/exponential/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns 6.0
*
* v = kurtosis( 4.5 );
* // returns 6.0
*/

// MODULES //

/* removed: var _$kurtosis_874 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_873 = _$kurtosis_874;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~0.111
*
* @example
* var v = mean( 1.0 );
* // returns 1.0
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_882( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

var _$mean_882 = __mean_882;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution expected value.
*
* @module @stdlib/stats/base/dists/exponential/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/exponential/mean' );
*
* var v = mean( 11.0 );
* // returns ~0.091
*
* v = mean( 4.5 );
* // returns ~0.222
*/

// MODULES //

/* removed: var _$mean_882 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_881 = _$mean_882;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns the median of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~0.077
*
* @example
* var v = median( 1.0 );
* // returns ~0.693
*
* @example
* var v = median( -0.2 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_884( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return ( 1.0 / lambda ) * _$LN2_99;
}


// EXPORTS //

var _$median_884 = __median_884;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution median.
*
* @module @stdlib/stats/base/dists/exponential/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/exponential/median' );
*
* var v = median( 11.0 );
* // returns ~0.063
*
* v = median( 4.5 );
* // returns ~0.154
*/

// MODULES //

/* removed: var _$median_884 = require( './median.js' ); */;


// EXPORTS //

var _$median_883 = _$median_884;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
*
* @example
* var v = mode( 1.0 );
* // returns 0.0
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_889( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$mode_889 = __mode_889;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution mode.
*
* @module @stdlib/stats/base/dists/exponential/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/exponential/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$mode_889 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_888 = _$mode_889;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 2.0
*
* @example
* var v = skewness( 1.0 );
* // returns 2.0
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_897( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 2.0;
}


// EXPORTS //

var _$skewness_897 = __skewness_897;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution skewness.
*
* @module @stdlib/stats/base/dists/exponential/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/exponential/skewness' );
*
* var v = skewness( 11.0 );
* // returns 2.0
*
* v = skewness( 4.5 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$skewness_897 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_896 = _$skewness_897;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the standard deviation of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~0.11
*
* @example
* var v = stdev( 1.0 );
* // returns 1.0
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_899( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

var _$stdev_899 = __stdev_899;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution standard deviation.
*
* @module @stdlib/stats/base/dists/exponential/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/exponential/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~0.089
*
* v = stdev( 4.5 );
* // returns ~0.221
*/

// MODULES //

/* removed: var _$stdev_899 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_898 = _$stdev_899;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of an exponential distribution.
*
* @param {NonNegativeNumber} lambda - rate parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~0.012
*
* @example
* var v = variance( 1.0 );
* // returns 1.0
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_901( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return 1.0 / ( lambda*lambda );
}


// EXPORTS //

var _$variance_901 = __variance_901;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution variance.
*
* @module @stdlib/stats/base/dists/exponential/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/exponential/variance' );
*
* var v = variance( 11.0 );
* // returns ~0.008
*
* v = variance( 4.5 );
* // returns ~0.049
*/

// MODULES //

/* removed: var _$variance_901 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_900 = _$variance_901;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.708
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-0.145
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function __logcdf_877( x, lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	return _$log1p_380( -_$exp_225( -lambda * x ) );
}


// EXPORTS //

var _$logcdf_877 = __logcdf_877;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.252
*
* y = logcdf( 1.0 );
* // returns ~-0.933
*/
function __factory_875( lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$log1p_380( -_$exp_225( -lambda * x ) );
	}
}


// EXPORTS //

var _$factory_875 = __factory_875;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for an exponential distribution.
*
* @module @stdlib/stats/base/dists/exponential/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/exponential/logcdf' );
*
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.708
*
* var mylogCDF = logcdf.factory( 0.5 );
* y = mylogCDF( 3.0 );
* // returns ~-0.252
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_877 = require( './logcdf.js' ); */;
/* removed: var _$factory_875 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_877, 'factory', _$factory_875 );


// EXPORTS //

var _$logcdf_876 = _$logcdf_877;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~0.186
*
* @example
* var y = logpdf( 2.0, 0.7 );
* // returns ~-1.757
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative rate:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function __logpdf_880( x, lambda ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	return ( -x*lambda ) + _$ln_376( lambda );
}


// EXPORTS //

var _$logpdf_880 = __logpdf_880;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} logarithm of probability density function (logPDF)
*
* @example
* var logpdf = factory( 0.5 );
* var y = logpdf( 3.0 );
* // returns ~-2.193
*
* y = logpdf( 1.0 );
* // returns ~-1.193
*/
function __factory_878( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 || lambda === _$FLOAT64_PINF_110 ) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return -( x*lambda ) + _$ln_376( lambda );
	}
}


// EXPORTS //

var _$factory_878 = __factory_878;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an exponential distribution.
*
* @module @stdlib/stats/base/dists/exponential/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/exponential/logpdf' );
*
* var y = logpdf( 0.3, 4.0 );
* // returns ~0.186
*
* var mylogPDF = logpdf.factory( 0.5 );
*
* y = mylogPDF( 3.0 );
* // returns ~-2.193
*
* y = mylogPDF( 1.0 );
* // returns ~-1.193
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_880 = require( './logpdf.js' ); */;
/* removed: var _$factory_878 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_880, 'factory', _$factory_878 );


// EXPORTS //

var _$logpdf_879 = _$logpdf_880;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for an exponential distribution with rate parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var v = mgf( 2.0, 3.0 );
* // returns 3.0
*
* @example
* var v = mgf( 0.4, 1.2 );
* // returns 1.5
*
* @example
* var v = mgf( 0.8, 1.6 );
* // returns 2.0
*
* @example
* var v = mgf( 4.0, 3.0 );
* // returns NaN
*
* @example
* var v = mgf( NaN, 3.0 );
* // returns NaN
*
* @example
* var v = mgf( 2.0, NaN );
* // returns NaN
*/
function __mgf_887( t, lambda ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( lambda ) ||
		lambda <= 0.0 ||
		lambda === _$FLOAT64_PINF_110 ||
		t >= lambda
	) {
		return NaN;
	}
	return lambda / ( lambda - t );
}


// EXPORTS //

var _$mgf_887 = __mgf_887;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0 );
* var y = mgf( 3.0 );
* // returns 4.0
*
* y = mgf( 0.5 );
* // returns ~1.143
*/
function __factory_885( lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda <= 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for an exponential distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) || t >= lambda ) {
			return NaN;
		}
		return lambda / ( lambda - t );
	}
}


// EXPORTS //

var _$factory_885 = __factory_885;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for an exponential distribution.
*
* @module @stdlib/stats/base/dists/exponential/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/exponential/mgf' );
*
* var v = mgf( 2.0, 3.0 );
* // returns 3.0
*
* var mymgf = mgf.factory( 4.0 );
* v = mymgf( 3.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_887 = require( './mgf.js' ); */;
/* removed: var _$factory_885 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_887, 'factory', _$factory_885 );


// EXPORTS //

var _$mgf_886 = _$mgf_887;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for an exponential distribution with rate parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.173
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative rate:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function __pdf_892( x, lambda ) {
	var scale;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	scale = 1.0 / lambda;
	return _$exp_225( -x / scale ) / scale;
}


// EXPORTS //

var _$pdf_892 = __pdf_892;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an exponential distribution with parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} probability density function (PDF)
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 3.0 );
* // returns ~0.112
*
* y = pdf( 1.0 );
* // returns ~0.303
*/
function __factory_890( lambda ) {
	var scale;
	if ( _$isnan_130( lambda ) || lambda < 0.0 || lambda === _$FLOAT64_PINF_110 ) {
		return _$constantFunction_1600( NaN );
	}
	scale = 1.0 / lambda;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an exponential distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return _$exp_225( -x / scale ) / scale;
	}
}


// EXPORTS //

var _$factory_890 = __factory_890;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/exponential/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/exponential/pdf' );
*
* var y = pdf( 0.3, 4.0 );
* // returns ~1.205
*
* var myPDF = pdf.factory( 0.5 );
*
* y = myPDF( 3.0 );
* // returns ~0.112
*
* y = myPDF( 1.0 );
* // returns ~0.303
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_892 = require( './pdf.js' ); */;
/* removed: var _$factory_890 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_892, 'factory', _$factory_890 );


// EXPORTS //

var _$pdf_891 = _$pdf_892;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the quantile function for an exponential distribution with rate parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} lambda - rate parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.609
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns ~6.931
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative rate parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function __quantile_895( p, lambda ) {
	if (
		_$isnan_130( lambda ) ||
		lambda < 0.0 ||
		lambda === _$FLOAT64_PINF_110 ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return -_$ln_376( 1.0 - p ) / lambda;
}


// EXPORTS //

var _$quantile_895 = __quantile_895;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function of an exponential distribution with rate parameter `lambda`.
*
* @param {PositiveNumber} lambda - rate parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns ~1.277
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_893( lambda ) {
	if ( lambda < 0.0 || lambda === _$FLOAT64_PINF_110 || _$isnan_130( lambda ) ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an exponential distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return -_$ln_376( 1.0 - p ) / lambda;
	}
}


// EXPORTS //

var _$factory_893 = __factory_893;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution quantile function.
*
* @module @stdlib/stats/base/dists/exponential/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/exponential/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~0.173
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~1.277
*
* y = myQuantile( 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_895 = require( './quantile.js' ); */;
/* removed: var _$factory_893 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_895, 'factory', _$factory_893 );


// EXPORTS //

var _$quantile_894 = _$quantile_895;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_869 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_872 = require( '@stdlib/stats/base/dists/exponential/entropy' ); */;
/* removed: var _$kurtosis_873 = require( '@stdlib/stats/base/dists/exponential/kurtosis' ); */;
/* removed: var _$mean_881 = require( '@stdlib/stats/base/dists/exponential/mean' ); */;
/* removed: var _$median_883 = require( '@stdlib/stats/base/dists/exponential/median' ); */;
/* removed: var _$mode_888 = require( '@stdlib/stats/base/dists/exponential/mode' ); */;
/* removed: var _$skewness_896 = require( '@stdlib/stats/base/dists/exponential/skewness' ); */;
/* removed: var _$stdev_898 = require( '@stdlib/stats/base/dists/exponential/stdev' ); */;
/* removed: var _$variance_900 = require( '@stdlib/stats/base/dists/exponential/variance' ); */;
/* removed: var _$cdf_868 = require( '@stdlib/stats/base/dists/exponential/cdf' ); */;
/* removed: var _$logcdf_876 = require( '@stdlib/stats/base/dists/exponential/logcdf' ); */;
/* removed: var _$logpdf_879 = require( '@stdlib/stats/base/dists/exponential/logpdf' ); */;
/* removed: var _$mgf_886 = require( '@stdlib/stats/base/dists/exponential/mgf' ); */;
/* removed: var _$pdf_891 = require( '@stdlib/stats/base/dists/exponential/pdf' ); */;
/* removed: var _$quantile_894 = require( '@stdlib/stats/base/dists/exponential/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function exponentialCDF( x ) {
	return _$cdf_868( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function exponentialLogCDF( x ) {
	return _$logcdf_876( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function exponentialLogPDF( x ) {
	return _$logpdf_879( x, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function exponentialMGF( t ) {
	return _$mgf_886( t, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function exponentialPDF( x ) {
	return _$pdf_891( x, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function exponentialQuantile( p ) {
	return _$quantile_894( p, this.lambda );
}


// MAIN //

/**
* Exponential distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - rate parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Exponential} distribution instance
*
* @example
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var v = exponential.mode;
* // returns 0.0
*/
function Exponential() {
	var lambda;
	if ( !(this instanceof Exponential) ) {
		if ( arguments.length === 0 ) {
			return new Exponential();
		}
		return new Exponential( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !__isPositive_869( lambda ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	_$defineProperty_1606( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !__isPositive_869( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Exponential distribution differential entropy.
*
* @name entropy
* @memberof Exponential.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.entropy;
* // returns ~-0.386
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'entropy', function get() {
	return _$entropy_872( this.lambda );
});

/**
* Exponential distribution excess kurtosis.
*
* @name kurtosis
* @memberof Exponential.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.kurtosis;
* // returns 6.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'kurtosis', function get() {
	return _$kurtosis_873( this.lambda );
});

/**
* Exponential distribution expected value.
*
* @name mean
* @memberof Exponential.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mean;
* // returns 0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'mean', function get() {
	return _$mean_881( this.lambda );
});

/**
* Exponential distribution median.
*
* @name median
* @memberof Exponential.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.median;
* // returns ~0.173
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'median', function get() {
	return _$median_883( this.lambda );
});

/**
* Exponential distribution mode.
*
* @name mode
* @memberof Exponential.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.mode;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'mode', function get() {
	return _$mode_888( this.lambda );
});

/**
* Exponential distribution skewness.
*
* @name skewness
* @memberof Exponential.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.skewness;
* // returns 2.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'skewness', function get() {
	return _$skewness_896( this.lambda );
});

/**
* Exponential distribution standard deviation.
*
* @name stdev
* @memberof Exponential.prototype
* @type {number}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.stdev;
* // returns ~0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'stdev', function get() {
	return _$stdev_898( this.lambda );
});

/**
* Exponential distribution variance.
*
* @name variance
* @memberof Exponential.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var exponential = new Exponential( 4.0 );
*
* var v = exponential.variance;
* // returns ~0.063
*/
_$setNonEnumerableReadOnlyAccessor_1601( Exponential.prototype, 'variance', function get() {
	return _$variance_900( this.lambda );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.cdf( 0.5 );
* // returns ~0.632
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'cdf', exponentialCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.logcdf( 0.5 );
* // returns ~-0.459
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'logcdf', exponentialLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.logpdf( 0.8 );
* // returns ~-0.907
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'logpdf', exponentialLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.mgf( 0.5 );
* // returns ~1.333
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'mgf', exponentialMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Exponential.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.pdf( 0.8 );
* // returns ~0.404
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'pdf', exponentialPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Exponential.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var exponential = new Exponential( 2.0 );
*
* var v = exponential.quantile( 0.5 );
* // returns ~0.347
*/
_$setNonEnumerableReadOnly_1603( Exponential.prototype, 'quantile', exponentialQuantile );


// EXPORTS //

var _$Exponential_869 = Exponential;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Exponential distribution constructor.
*
* @module @stdlib/stats/base/dists/exponential/ctor
*
* @example
* var Exponential = require( '@stdlib/stats/base/dists/exponential/ctor' );
*
* var exponential = new Exponential( 1.0 );
*
* var y = exponential.cdf( 0.8 );
* // returns ~0.551
*
* var mode = exponential.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Exponential_869 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_870 = _$Exponential_869;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* @example
* var y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function __cdf_902( x, d1, d2 ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	if ( d1 * x > d2 ) {
		return _$betainc_164( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );
	}
	return _$betainc_164( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
}


// EXPORTS //

var _$cdf_902 = __cdf_902;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.906
*
* y = cdf( 8.0 );
* // returns ~0.884
*/
function __factory_903( d1, d2 ) {
	if (
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 10.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		if ( d1 * x > d2 ) {
			return _$betainc_164( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );
		}
		return _$betainc_164( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );
	}
}


// EXPORTS //

var _$factory_903 = __factory_903;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for an F distribution.
*
* @module @stdlib/stats/base/dists/f/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/f/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.608
*
* y = cdf( 2.0, 8.0, 4.0 );
* // returns ~0.737
*
* y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
*
* y = mycdf( 10.0 );
* // returns ~0.906
*
* y = mycdf( 8.0 );
* // returns ~0.884
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_902 = require( './cdf.js' ); */;
/* removed: var _$factory_903 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_902, 'factory', _$factory_903 );


// EXPORTS //

var _$cdf_904 = _$cdf_902;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.12
*
* @example
* var v = entropy( 8.0, 7.0 );
* // returns ~1.193
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_907( d1, d2 ) {
	var half;
	var hd1;
	var hd2;
	var out;

	if (
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	half = ( d1 + d2 ) / 2.0;
	hd1 = d1 / 2.0;
	hd2 = d2 / 2.0;
	out = _$ln_376( d2 / d1 ) + _$gammaln_305( hd1 ) + _$gammaln_305( hd2 ) - _$gammaln_305( half );
	out += ( 1.0-hd1 ) * _$digamma_185( hd1 );
	out += ( -1.0-hd2 ) * _$digamma_185( hd2 );
	out += half * _$digamma_185( half );
	return out;
}


// EXPORTS //

var _$entropy_907 = __entropy_907;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution differential entropy.
*
* @module @stdlib/stats/base/dists/f/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/f/entropy' );
*
* var v = entropy( 3.0, 7.0 );
* // returns ~1.298
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.12
*
* v = entropy( 8.0, 7.0 );
* // returns ~1.193
*/

// MODULES //

/* removed: var _$entropy_907 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_908 = _$entropy_907;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the excess kurtosis of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
*
* @example
* var v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
*
* @example
* var v = kurtosis( 1.0, 8.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_910( d1, d2 ) {
	var denom;
	var num;

	if ( d1 <= 0.0 || d2 <= 8.0 ) {
		return NaN;
	}
	num = ( d1 * ( ( 5.0*d2 ) - 22.0 ) * ( d1+d2-2.0 ) ) +
		( ( d2-4.0 ) * _$pow_396( d2-2.0, 2.0 ) );
	denom = d1 * ( d2-6.0 ) * ( d2-8.0 ) * ( d1+d2-2.0 );
	return 12.0 * num / denom;
}


// EXPORTS //

var _$kurtosis_910 = __kurtosis_910;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/f/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/f/kurtosis' );
*
* var v = kurtosis( 3.0, 9.0 );
* // returns ~124.667
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~26.143
*
* v = kurtosis( 8.0, 9.0 );
* // returns ~100.167
*/

// MODULES //

/* removed: var _$kurtosis_910 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_909 = _$kurtosis_910;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~1.2
*
* @example
* var v = mean( 8.0, 4.0 );
* // returns 2.0
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_912( d1, d2 ) {
	if (
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 2.0
	) {
		return NaN;
	}
	return d2 / ( d2 - 2.0 );
}


// EXPORTS //

var _$mean_912 = __mean_912;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution expected value.
*
* @module @stdlib/stats/base/dists/f/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/f/mean' );
*
* var v = mean( 3.0, 5.0 );
* // returns ~1.667
*
* v = mean( 4.0, 12.0 );
* // returns ~1.2
*
* v = mean( 8.0, 4.0 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$mean_912 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_911 = _$mean_912;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.429
*
* @example
* var v = mode( 8.0, 4.0 );
* // returns 0.5
*
* @example
* var v = mode( 3.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 3.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_914( d1, d2 ) {
	if ( d1 <= 2.0 || d2 <= 0.0 ) {
		return NaN;
	}
	return ( ( d1-2.0 ) / d1 ) * ( d2 / ( d2+2.0 ) );
}


// EXPORTS //

var _$mode_914 = __mode_914;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution mode.
*
* @module @stdlib/stats/base/dists/f/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/f/mode' );
*
* var v = mode( 3.0, 5.0 );
* // returns ~0.238
*
* v = mode( 4.0, 12.0 );
* // returns ~0.429
*
* v = mode( 8.0, 4.0 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$mode_914 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_913 = _$mode_914;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~3.207
*
* @example
* var v = skewness( 8.0, 7.0 );
* // returns ~10.088
*
* @example
* var v = skewness( 1.0, 4.0 );
* // returns NaN
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_924( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 6.0 ) {
		return NaN;
	}
	out = ( ( 2.0*d1 ) + d2 - 2.0 ) * _$sqrt_437( 8.0 * ( d2-4.0 ) );
	out /= ( d2-6.0 ) * _$sqrt_437( d1 * ( d1+d2-2.0 ) );
	return out;
}


// EXPORTS //

var _$skewness_924 = __skewness_924;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution skewness.
*
* @module @stdlib/stats/base/dists/f/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/f/skewness' );
*
* var v = skewness( 3.0, 7.0 );
* // returns 11.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~3.207
*
* v = skewness( 8.0, 7.0 );
* // returns ~10.088
*/

// MODULES //

/* removed: var _$skewness_924 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_923 = _$skewness_924;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns the standard deviation of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~1.122
*
* @example
* var v = stdev( 8.0, 5.0 );
* // returns ~2.764
*
* @example
* var v = stdev( 1.0, 4.0 );
* // returns NaN
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_926( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = _$SQRT2_118 * ( d2 / ( d2-2.0 ) );
	out *= _$sqrt_437( ( d1+d2-2.0 ) / ( d1*(d2-4.0) ) );
	return out;
}


// EXPORTS //

var _$stdev_926 = __stdev_926;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution standard deviation.
*
* @module @stdlib/stats/base/dists/f/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/f/stdev' );
*
* var v = stdev( 3.0, 5.0 );
* // returns ~3.333
*
* v = stdev( 4.0, 12.0 );
* // returns ~1.122
*
* v = stdev( 8.0, 5.0 );
* // returns ~2.764
*/

// MODULES //

/* removed: var _$stdev_926 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_925 = _$stdev_926;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the variance of an F distribution.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~1.26
*
* @example
* var v = variance( 8.0, 5.0 );
* // returns ~7.639
*
* @example
* var v = variance( 1.0, 4.0 );
* // returns NaN
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_928( d1, d2 ) {
	var out;
	if ( d1 <= 0.0 || d2 <= 4.0 ) {
		return NaN;
	}
	out = 2.0 * d2 * d2 * ( d1 + d2 - 2.0 );
	out /= d1 * _$pow_396( d2 - 2.0, 2.0 ) * ( d2 - 4.0 );
	return out;
}


// EXPORTS //

var _$variance_928 = __variance_928;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution variance.
*
* @module @stdlib/stats/base/dists/f/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/f/variance' );
*
* var v = variance( 3.0, 5.0 );
* // returns ~11.111
*
* v = variance( 4.0, 12.0 );
* // returns ~1.26
*
* v = variance( 8.0, 5.0 );
* // returns ~7.639
*/

// MODULES //

/* removed: var _$variance_928 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_927 = _$variance_928;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function __ibetaPowerTerms_917( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return _$pow_396( x, a ) * _$pow_396( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	result = _$gammaLanczosSumExpGScaled_241( c );
	result /= _$gammaLanczosSumExpGScaled_241( a ) * _$gammaLanczosSumExpGScaled_241( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= _$sqrt_437( bgh / _$E_86 );
	result *= _$sqrt_437( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( _$min_392( _$abs_147(l1), _$abs_147(l2) ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || _$min_392( a, b ) < 1 ) {
			if ( _$abs_147(l1) < 0.1 ) {
				result *= _$exp_225( a * _$log1p_380( l1 ) );
			} else {
				result *= _$pow_396( ( x*cgh ) / agh, a );
			}
			if ( _$abs_147(l2) < 0.1 ) {
				result *= _$exp_225( b * _$log1p_380( l2 ) );
			} else {
				result *= _$pow_396((y * cgh) / bgh, b);
			}
		}
		else if ( _$max_388( _$abs_147(l1), _$abs_147(l2) ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = _$expm1_228( ratio * _$log1p_380( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
			else {
				l3 = _$expm1_228( _$log1p_380( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
		}
		else if ( _$abs_147(l1) < _$abs_147(l2) ) {
			// First base near 1 only:
			l = ( a * _$log1p_380( l1 ) ) + ( b * _$ln_376( ( y*cgh ) / bgh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * _$log1p_380( l2 ) ) + ( a * _$ln_376( (x*cgh) / agh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * _$ln_376(b1);
		l2 = b * _$ln_376(b2);
		if (
			l1 >= _$FLOAT64_MAX_LN_102 ||
			l1 <= _$FLOAT64_MIN_LN_106 ||
			l2 >= _$FLOAT64_MAX_LN_102 ||
			l2 <= _$FLOAT64_MIN_LN_106
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = _$pow_396( b2, b / a );
				l3 = a * ( _$ln_376(b1) + _$ln_376(p1) );
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b1, a );
				} else {
					l2 += l1 + _$ln_376(result);
					if ( l2 >= _$FLOAT64_MAX_LN_102 ) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
			else {
				p1 = _$pow_396( b1, a / b );
				l3 = ( _$ln_376(p1) + _$ln_376(b2) ) * b;
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b2, b );
				} else {
					l2 += l1 + _$ln_376( result );
					if (l2 >= _$FLOAT64_MAX_LN_102) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= _$pow_396( b1, a ) * _$pow_396( b2, b );
		}
	}
	return result;
}


// EXPORTS //

var _$ibetaPowerTerms_917 = __ibetaPowerTerms_917;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ibetaPowerTerms_917 = require( './ibeta_power_terms.js' ); */;


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (not equal to 0.0 or 1.0)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter
* @returns {number} value of the partial derivative
*/
function ibetaDerivative( x, a, b ) {
	var f1;
	var y;

	f1 = _$ibetaPowerTerms_917( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
}


// EXPORTS //

var _$ibetaDerivative_916 = ibetaDerivative;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$ibetaDerivative_916 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*/
function __pdf_919( x, d1, d2 ) {
	var v1x;
	var y;
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		if ( d1 < 2.0 ) {
			return _$FLOAT64_PINF_110;
		}
		if ( d1 === 2.0 ) {
			return 1.0;
		}
		return 0.0;
	}
	v1x = d1 * x;
	if ( v1x > d2 ) {
		y = ( d2 * d1 ) / ( ( d2 + v1x ) * ( d2 + v1x ) );
		return y * _$ibetaDerivative_916( d2 / ( d2+v1x ), d2/2.0, d1/2.0 );
	}
	z = d2 + v1x;
	y = ((z * d1) - (x * d1 * d1)) / ( z * z );
	return y * _$ibetaDerivative_916( v1x / ( d2+v1x ), d1/2.0, d2/2.0 );
}


// EXPORTS //

var _$pdf_919 = __pdf_919;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$ibetaDerivative_916 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 6.0, 7.0 );
* var y = pdf( 7.0 );
* // returns ~0.004
*
* y = pdf( 2.0 );
* // returns ~0.166
*/
function __factory_915( d1, d2 ) {
	var zeroVal;
	var d1by2;
	var d2by2;
	var d1d2;
	if (
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	d1d2 = d1 * d2;
	d1by2 = d1 / 2.0;
	d2by2 = d2 / 2.0;
	zeroVal = 0.0;
	if ( d1 < 2.0 ) {
		zeroVal = _$FLOAT64_PINF_110;
	}
	else if ( d1 === 2.0 ) {
		zeroVal = 1.0;
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an F distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var v1x;
		var y;
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return zeroVal;
		}
		v1x = d1 * x;
		if ( v1x > d2 ) {
			y = d1d2 / ( ( d2 + v1x ) * ( d2 + v1x ) );
			return y * _$ibetaDerivative_916( d2 / ( d2 + v1x ), d2by2, d1by2 );
		}
		z = d2 + v1x;
		y = ((z * d1) - (x * d1 * d1)) / ( z * z );
		return y * _$ibetaDerivative_916( d1 * x / ( d2 + v1x ), d1by2, d2by2 );
	}
}


// EXPORTS //

var _$factory_915 = __factory_915;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for an F distribution.
*
* @module @stdlib/stats/base/dists/f/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/f/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.057
*
* y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.915
*
* var mypdf = pdf.factory( 6.0, 7.0 );
* y = mypdf( 7.0 );
* // returns ~0.004
*
* y = mypdf( 2.0 );
* // returns ~0.166
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_919 = require( './pdf.js' ); */;
/* removed: var _$factory_915 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_919, 'factory', _$factory_915 );


// EXPORTS //

var _$pdf_918 = _$pdf_919;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetaincinv_331 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_922( p, d1, d2 ) {
	var xs;
	if (
		_$isnan_130( p ) ||
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	xs = _$kernelBetaincinv_331( d1/2.0, d2/2.0, p, 1.0 - p );
	return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
}


// EXPORTS //

var _$quantile_922 = __quantile_922;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$kernelBetaincinv_331 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.
*
* @param {PositiveNumber} d1 - numerator degrees of freedom
* @param {PositiveNumber} d2 - denominator degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.4 );
* // returns ~0.994
*
* y = quantile( 0.8 );
* // returns ~4.382
*/
function __factory_920( d1, d2 ) {
	if (
		_$isnan_130( d1 ) ||
		_$isnan_130( d2 ) ||
		d1 <= 0.0 ||
		d2 <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an F distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var xs;
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		xs = _$kernelBetaincinv_331( d1/2.0, d2/2.0, p, 1.0 - p );
		return d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );
	}
}


// EXPORTS //

var _$factory_920 = __factory_920;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for an F distribution.
*
* @module @stdlib/stats/base/dists/f/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/f/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~9.472
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~1.207
*
* var myquantile = quantile.factory( 10.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~0.527
*
* y = myquantile( 0.8 );
* // returns ~4.382
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_922 = require( './quantile.js' ); */;
/* removed: var _$factory_920 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_922, 'factory', _$factory_920 );


// EXPORTS //

var _$quantile_921 = _$quantile_922;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_905 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_908 = require( '@stdlib/stats/base/dists/f/entropy' ); */;
/* removed: var _$kurtosis_909 = require( '@stdlib/stats/base/dists/f/kurtosis' ); */;
/* removed: var _$mean_911 = require( '@stdlib/stats/base/dists/f/mean' ); */;
/* removed: var _$mode_913 = require( '@stdlib/stats/base/dists/f/mode' ); */;
/* removed: var _$skewness_923 = require( '@stdlib/stats/base/dists/f/skewness' ); */;
/* removed: var _$stdev_925 = require( '@stdlib/stats/base/dists/f/stdev' ); */;
/* removed: var _$variance_927 = require( '@stdlib/stats/base/dists/f/variance' ); */;
/* removed: var _$cdf_904 = require( '@stdlib/stats/base/dists/f/cdf' ); */;
/* removed: var _$pdf_918 = require( '@stdlib/stats/base/dists/f/pdf' ); */;
/* removed: var _$quantile_921 = require( '@stdlib/stats/base/dists/f/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function fCDF( x ) {
	return _$cdf_904( x, this.d1, this.d2 );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function fPDF( x ) {
	return _$pdf_918( x, this.d1, this.d2 );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function fQuantile( p ) {
	return _$quantile_921( p, this.d1, this.d2 );
}


// MAIN //

/**
* F distribution constructor.
*
* @constructor
* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom
* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom
* @throws {TypeError} `d1` must be a positive number
* @throws {TypeError} `d2` must be a positive number
* @returns {F} distribution instance
*
* @example
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var v = f.mode;
* // returns NaN
*/
function __F_905() {
	var d1;
	var d2;
	if ( !(this instanceof __F_905) ) {
		if ( arguments.length === 0 ) {
			return new __F_905();
		}
		return new __F_905( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		d1 = arguments[ 0 ];
		d2 = arguments[ 1 ];
		if ( !__isPositive_905( d1 ) ) {
			throw new TypeError( 'invalid argument. Numerator degrees of freedom `d1` must be a positive number. Value: `' + d1 + '`' );
		}
		if ( !__isPositive_905( d2 ) ) {
			throw new TypeError( 'invalid argument. Denominator degrees of freedom `d2` must be a positive number. Value: `' + d2 + '`' );
		}
	} else {
		d1 = 1.0;
		d2 = 1.0;
	}
	_$defineProperty_1606( this, 'd1', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d1;
		},
		'set': function set( value ) {
			if ( !__isPositive_905( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d1 = value;
		}
	});
	_$defineProperty_1606( this, 'd2', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return d2;
		},
		'set': function set( value ) {
			if ( !__isPositive_905( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			d2 = value;
		}
	});
	return this;
}

/**
* F distribution differential entropy.
*
* @name entropy
* @memberof F.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.entropy;
* // returns ~1.12
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'entropy', function get() {
	return _$entropy_908( this.d1, this.d2 );
});

/**
* F distribution excess kurtosis.
*
* @name kurtosis
* @memberof F.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.kurtosis;
* // returns ~26.143
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'kurtosis', function get() {
	return _$kurtosis_909( this.d1, this.d2 );
});

/**
* F distribution expected value.
*
* @name mean
* @memberof F.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mean;
* // returns 1.2
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'mean', function get() {
	return _$mean_911( this.d1, this.d2 );
});

/**
* F distribution mode.
*
* @name mode
* @memberof F.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.mode;
* // returns ~0.429
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'mode', function get() {
	return _$mode_913( this.d1, this.d2 );
});

/**
* F distribution skewness.
*
* @name skewness
* @memberof F.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.skewness;
* // returns ~3.207
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'skewness', function get() {
	return _$skewness_923( this.d1, this.d2 );
});

/**
* F distribution standard deviation.
*
* @name stdev
* @memberof F.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.stdev;
* // returns ~1.122
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'stdev', function get() {
	return _$stdev_925( this.d1, this.d2 );
});

/**
* F distribution variance.
*
* @name variance
* @memberof F.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var f = new F( 4.0, 12.0 );
*
* var v = f.variance;
* // returns 1.26
*/
_$setNonEnumerableReadOnlyAccessor_1601( __F_905.prototype, 'variance', function get() {
	return _$variance_927( this.d1, this.d2 );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof F.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.cdf( 0.5 );
* // returns ~0.36
*/
_$setNonEnumerableReadOnly_1603( __F_905.prototype, 'cdf', fCDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof F.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.pdf( 2.0 );
* // returns ~0.125
*/
_$setNonEnumerableReadOnly_1603( __F_905.prototype, 'pdf', fPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof F.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var f = new F( 2.0, 4.0 );
*
* var v = f.quantile( 0.5 );
* // returns ~0.828
*/
_$setNonEnumerableReadOnly_1603( __F_905.prototype, 'quantile', fQuantile );


// EXPORTS //

var _$F_905 = __F_905;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* F distribution constructor.
*
* @module @stdlib/stats/base/dists/f/ctor
*
* @example
* var F = require( '@stdlib/stats/base/dists/f/ctor' );
*
* var f = new F( 1.0, 1.0 );
*
* var y = f.cdf( 0.8 );
* // returns ~0.465
*
* var mode = f.mode;
* // returns NaN
*/

// MODULES //

/* removed: var _$F_905 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_906 = _$F_905;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.869
*
* @example
* var y = cdf( -0.2, 1.0, 3.0, -1.0 );
* // returns ~0.024
*
* @example
* var y = cdf( 1.5, 2.0, 1.0, 1.0 );
* // returns ~0.018
*
* @example
* var y = cdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function __cdf_929( x, alpha, s, m ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return 0.0;
	}
	z = ( x - m ) / s;
	return _$exp_225( -_$pow_396( z, -alpha ) );
}


// EXPORTS //

var _$cdf_929 = __cdf_929;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 3.0, 5.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/
function __factory_930( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return 0.0;
		}
		z = ( x - m ) / s;
		return _$exp_225( -_$pow_396( z, -alpha ) );
	}
}


// EXPORTS //

var _$factory_930 = __factory_930;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/frechet/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/frechet/cdf' );
*
* var y = cdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = cdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/frechet/cdf' ).factory;
* var cdf = factory( 3.0, 3.0, 5.0 );
* var y = cdf( 10.0 );
* // returns ~0.806
*
* y = cdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_929 = require( './cdf.js' ); */;
/* removed: var _$factory_930 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_929, 'factory', _$factory_930 );


// EXPORTS //

var _$cdf_931 = _$cdf_929;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Returns the differential entropy for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} entropy
*
* @example
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
*
* @example
* var y = entropy( 5.0, 2.0, 0.0 );
* // returns ~0.776
*
* @example
* var y = entropy( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = entropy( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = entropy( 1.0, 1.0, NaN );
* // returns NaN
*/
function __entropy_934( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.0 + ( _$GAMMA_88 / alpha ) + _$GAMMA_88 + _$ln_376( s / alpha );
}


// EXPORTS //

var _$entropy_934 = __entropy_934;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution differential entropy.
*
* @module @stdlib/stats/base/dists/frechet/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/frechet/entropy' );
*
* var y = entropy( 1.0, 1.0, 0.0 );
* // returns ~2.154
*
* y = entropy( 4.0, 2.0, 0.0 );
* // returns ~1.028
*/

// MODULES //

/* removed: var _$entropy_934 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_935 = _$entropy_934;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 5.0, 2.0, 0.0 );
* // returns ~45.092
*
* @example
* var y = kurtosis( 5.0, 2.0, -5.0 );
* // returns ~45.092
*
* @example
* var y = kurtosis( 3.8, 1.0, 0.0 );
* // returns Infinity
*
* @example
* var y = kurtosis( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 1.0, 1.0, NaN );
* // returns NaN
*/
function __kurtosis_937( alpha, s, m ) {
	var out;
	var g1;
	var g2;
	var g3;
	var g4;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 4.0 ) {
		// Case: 0 < alpha <= 4
		return _$FLOAT64_PINF_110;
	}
	g1 = _$gamma_247( 1.0 - ( 1.0/alpha ) );
	g2 = _$gamma_247( 1.0 - ( 2.0/alpha ) );
	g3 = _$gamma_247( 1.0 - ( 3.0/alpha ) );
	g4 = _$gamma_247( 1.0 - ( 4.0/alpha ) );
	out = ( g4 - ( 4.0*g3*g1 ) + ( 3.0*g2*g2 ) ) / _$pow_396( g2 - ( g1*g1 ), 2.0 );
	out -= 6.0;
	return out;
}


// EXPORTS //

var _$kurtosis_937 = __kurtosis_937;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/frechet/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/frechet/kurtosis' );
*
* var y = kurtosis( 8.0, 2.0, 0.0 );
* // returns ~11.166
*
* y = kurtosis( 8.0, 16.0, 3.0 );
* // returns ~11.166
*
* y = kurtosis( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$kurtosis_937 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_936 = _$kurtosis_937;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the expected value for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mean
*
* @example
* var y = mean( 5.0, 2.0, 0.0 );
* // returns ~2.328
*
* @example
* var y = mean( 5.0, 2.0, -4.0 );
* // returns ~-1.672
*
* @example
* var y = mean( 1.0, 1.0, 0.0 );
* // returns Infinity
*
* @example
* var y = mean( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = mean( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mean( 1.0, 1.0, NaN );
* // returns NaN
*/
function __mean_945( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		// Case: 0 < alpha <= 1
		return _$FLOAT64_PINF_110;
	}
	return m + ( s * _$gamma_247( 1.0 - (1.0/alpha) ) );
}


// EXPORTS //

var _$mean_945 = __mean_945;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution expected value.
*
* @module @stdlib/stats/base/dists/frechet/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/frechet/mean' );
*
* var y = mean( 4.0, 2.0, 0.0 );
* // returns ~2.451
*
* y = mean( 1.0, 1.0, 0.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$mean_945 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_944 = _$mean_945;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns the median for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} median
*
* @example
* var y = median( 5.0, 2.0, 0.0 );
* // returns ~2.152
*
* @example
* var y = median( 5.0, 2.0, -5.0 );
* // returns ~-2.848
*
* @example
* var y = median( 1.0, 1.0, 0.0 );
* // returns ~1.443
*
* @example
* var y = median( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = median( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = median( 1.0, 1.0, NaN );
* // returns NaN
*/
function __median_947( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * _$pow_396( _$LN2_99, -1.0/alpha ) );
}


// EXPORTS //

var _$median_947 = __median_947;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution median.
*
* @module @stdlib/stats/base/dists/frechet/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/frechet/median' );
*
* var y = median( 4.0, 2.0, 0.0 );
* // returns ~2.192
*
* y = median( 1.0, 1.0, -3.0 );
* // returns ~-1.557
*/

// MODULES //

/* removed: var _$median_947 = require( './median.js' ); */;


// EXPORTS //

var _$median_946 = _$median_947;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the mode for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} mode
*
* @example
* var y = mode( 5.0, 2.0, 0.0 );
* // returns ~1.928
*
* @example
* var y = mode( 5.0, 2.0, -5.0 );
* // returns ~-3.072
*
* @example
* var y = mode( 1.0, 1.0, 0.0 );
* // returns ~0.5
*
* @example
* var y = mode( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = mode( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mode( 1.0, 1.0, NaN );
* // returns NaN
*/
function __mode_949( alpha, s, m ) {
	var ainv;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	ainv = 1.0 / alpha;
	return m + ( s * _$pow_396( 1.0+ainv, -ainv ) );
}


// EXPORTS //

var _$mode_949 = __mode_949;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution mode.
*
* @module @stdlib/stats/base/dists/frechet/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/frechet/mode' );
*
* var y = mode( 4.0, 2.0, 0.0 );
* // returns ~1.891
*
* y = mode( 1.0, 1.0, -3.0 );
* // returns ~-2.5
*/

// MODULES //

/* removed: var _$mode_949 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_948 = _$mode_949;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the skewness for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} skewness
*
* @example
* var y = skewness( 5.0, 2.0, 0.0 );
* // returns ~3.535
*
* @example
* var y = skewness( 5.0, 2.0, -5.0 );
* // returns ~3.535
*
* @example
* var y = skewness( 1.0, 1.0, 0.0 );
* // returns Infinity
*
* @example
* var y = skewness( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = skewness( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = skewness( 1.0, 1.0, NaN );
* // returns NaN
*/
function __skewness_957( alpha, s, m ) {
	var g1s;
	var g1;
	var g2;
	var g3;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 3.0 ) {
		// Case: 0 < alpha <= 3
		return _$FLOAT64_PINF_110;
	}
	g1 = _$gamma_247( 1.0 - ( 1.0/alpha ) );
	g1s = g1*g1;
	g2 = _$gamma_247( 1.0 - ( 2.0/alpha ) );
	g3 = _$gamma_247( 1.0 - ( 3.0/alpha ) );
	return ( g3 - ( 3.0*g2*g1 ) + ( 2.0*g1s*g1 ) ) / _$pow_396( g2 - g1s, 1.5 );
}


// EXPORTS //

var _$skewness_957 = __skewness_957;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution skewness.
*
* @module @stdlib/stats/base/dists/frechet/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/frechet/skewness' );
*
* var y = skewness( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = skewness( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$skewness_957 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_956 = _$skewness_957;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 5.0, 2.0, 0.0 );
* // returns ~0.731
*
* @example
* var y = stdev( 5.0, 2.0, -5.0 );
* // returns ~0.731
*
* @example
* var y = stdev( 1.0, 1.0, 0.0 );
* // returns Infinity
*
* @example
* var y = stdev( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = stdev( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = stdev( 1.0, 1.0, NaN );
* // returns NaN
*/
function __stdev_959( alpha, s, m ) {
	var g1;
	var g2;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return _$FLOAT64_PINF_110;
	}
	g1 = _$gamma_247( 1.0 - ( 1.0/alpha ) );
	g2 = _$gamma_247( 1.0 - ( 2.0/alpha ) );
	return s * _$sqrt_437( g2 - ( g1*g1 ) );
}


// EXPORTS //

var _$stdev_959 = __stdev_959;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution standard deviation.
*
* @module @stdlib/stats/base/dists/frechet/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/frechet/stdev' );
*
* var y = stdev( 4.0, 2.0, 0.0 );
* // returns ~1.041
*
* y = stdev( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$stdev_959 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_958 = _$stdev_959;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 5.0, 2.0, 0.0 );
* // returns ~0.535
*
* @example
* var y = variance( 5.0, 2.0, -5.0 );
* // returns ~0.535
*
* @example
* var y = variance( 1.0, 1.0, 0.0 );
* // returns Infinity
*
* @example
* var y = variance( NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = variance( 1.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = variance( 1.0, 1.0, NaN );
* // returns NaN
*/
function __variance_961( alpha, s, m ) {
	var g1;
	var g2;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( alpha <= 2.0 ) {
		// Case: 0 < alpha <= 2
		return _$FLOAT64_PINF_110;
	}
	g1 = _$gamma_247( 1.0 - ( 1.0/alpha ) );
	g2 = _$gamma_247( 1.0 - ( 2.0/alpha ) );
	return ( s*s ) * ( g2 - ( g1*g1 ) );
}


// EXPORTS //

var _$variance_961 = __variance_961;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution variance.
*
* @module @stdlib/stats/base/dists/frechet/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/frechet/variance' );
*
* var y = variance( 4.0, 2.0, 0.0 );
* // returns ~1.083
*
* y = variance( 1.0, 1.0, -3.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$variance_961 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_960 = _$variance_961;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~-0.141
*
* @example
* var y = logcdf( -2.5, 1.0, 3.0, -3.0 );
* // returns -6.0
*
* @example
* var y = logcdf( 0.0, 2.0, 1.0, -1.0 );
* // returns -1.0
*
* @example
* var y = logcdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function __logcdf_940( x, alpha, s, m ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return _$FLOAT64_NINF_107;
	}
	z = ( x - m ) / s;
	return -_$pow_396( z, -alpha );
}


// EXPORTS //

var _$logcdf_940 = __logcdf_940;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 3.0, 5.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.216
*
* y = logcdf( 7.0 );
* // returns ~-3.375
*/
function __factory_938( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( -2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return _$FLOAT64_NINF_107;
		}
		z = ( x - m ) / s;
		return -_$pow_396( z, -alpha );
	}
}


// EXPORTS //

var _$factory_938 = __factory_938;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution logarithm of the cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/frechet/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/frechet/logcdf' );
*
* var y = logcdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~-0.36
*
* y = logcdf( 3.8, 2.0, 3.0, 2.0 );
* // returns ~-2.778
*
* @example
* var factory = require( '@stdlib/stats/base/dists/frechet/logcdf' ).factory;
* var logcdf = factory( 3.0, 3.0, 5.0 );
* var y = logcdf( 10.0 );
* // returns ~-0.216
*
* y = logcdf( 7.0 );
* // returns ~-3.381
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_940 = require( './logcdf.js' ); */;
/* removed: var _$factory_938 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_940, 'factory', _$factory_938 );


// EXPORTS //

var _$logcdf_939 = _$logcdf_940;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~-3.489
*
* @example
* var y = logpdf( -2.0, 1.0, 3.0, -3.0 );
* // returns ~-1.901
*
* @example
* var y = logpdf( 0.0, 2.0, 1.0, 1.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function __logpdf_943( x, alpha, s, m ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	if ( x <= m ) {
		return _$FLOAT64_NINF_107;
	}
	z = ( x - m ) / s;
	return _$ln_376( alpha/s ) - ( ( 1.0+alpha ) * _$ln_376( z ) ) - _$pow_396( z, -alpha );
}


// EXPORTS //

var _$logpdf_943 = __logpdf_943;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 3.0, 5.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/
function __factory_941( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= m ) {
			return _$FLOAT64_NINF_107;
		}
		z = ( x - m ) / s;
		return _$ln_376( alpha/s ) - ( ( 1.0+alpha ) * _$ln_376( z ) ) - _$pow_396( z, -alpha );
	}
}


// EXPORTS //

var _$factory_941 = __factory_941;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution logarithm of probability density function (logpdf).
*
* @module @stdlib/stats/base/dists/frechet/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/frechet/logpdf' );
*
* var y = logpdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~-2.298
*
* y = logpdf( 0.0, 2.0, 3.0, 2.0 );
* // returns -Infinity
*
* @example
* var factory = require( '@stdlib/stats/base/dists/frechet/logpdf' ).factory;
* var logpdf = factory( 3.0, 3.0, 5.0 );
* var y = logpdf( 10.0 );
* // returns ~-2.259
*
* y = logpdf( 7.0 );
* // returns ~-1.753
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_943 = require( './logpdf.js' ); */;
/* removed: var _$factory_941 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_943, 'factory', _$factory_941 );


// EXPORTS //

var _$logpdf_942 = _$logpdf_943;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$logpdf_942 = require( '@stdlib/stats/base/dists/frechet/logpdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 10.0, 2.0, 3.0, 2.0 );
* // returns ~0.031
*
* @example
* var y = pdf( -2.0, 1.0, 3.0, -1.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, 2.0, 1.0, 1.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 0.0, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function __pdf_952( x, alpha, s, m ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( _$logpdf_942( x, alpha, s, m ) );
}


// EXPORTS //

var _$pdf_952 = __pdf_952;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var ldfrechet = _$logpdf_942.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 3.0, 5.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.104
*
* y = pdf( 7.0 );
* // returns ~0.173
*/
function __factory_950( alpha, s, m ) {
	var logpdf;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	logpdf = ldfrechet( alpha, s, m );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Fréchet distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return _$exp_225( logpdf( x, alpha, s, m ) );
	}
}


// EXPORTS //

var _$factory_950 = __factory_950;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/frechet/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/frechet/pdf' );
*
* var y = pdf( 10.0, 2.0, 3.0, 5.0 );
* // returns ~0.698
*
* y = pdf( 0.0, 2.0, 3.0, 2.0 );
* // returns 0.0
*
* @example
* var factory = require( '@stdlib/stats/base/dists/frechet/pdf' ).factory;
* var pdf = factory( 3.0, 3.0, 5.0 );
* var y = pdf( 10.0 );
* // returns ~0.806
*
* y = pdf( 7.0 );
* // returns ~0.034
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_952 = require( './pdf.js' ); */;
/* removed: var _$factory_950 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_952, 'factory', _$factory_950 );


// EXPORTS //

var _$pdf_951 = _$pdf_952;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a probability `p`.
*
* @param {number} p - input probability
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0, 3.0, 2.0 );
* // returns ~5.603
*
* @example
* var y = quantile( 0.2, 1.0, 3.0, -1.0 );
* // returns ~0.864
*
* @example
* var y = quantile( 0.3, 2.0, 1.0, 1.0 );
* // returns ~1.911
*
* @example
* var y = quantile( NaN, 2.0, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, NaN, 1.0, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, 2.0, NaN, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, 2.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, 1.0, -1.0, 0.0 );
* // returns NaN
*/
function __quantile_955( p, alpha, s, m ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		p < 0.0 ||
		p > 1.0 ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return NaN;
	}
	return m + ( s * ( _$pow_396( -_$ln_376( p ), -1.0/alpha ) ) );
}


// EXPORTS //

var _$quantile_955 = __quantile_955;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} s - scale parameter
* @param {number} m - location parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 3.0, 3.0, 5.0 );
*
* var y = quantile( 0.8 );
* // returns ~9.946
*
* y = quantile( 0.2 );
* // returns ~7.56
*/
function __factory_953( alpha, s, m ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( s ) ||
		_$isnan_130( m ) ||
		alpha <= 0.0 ||
		s <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Fréchet distribution.
	*
	* @private
	* @param {number} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( -2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return m + ( s * ( _$pow_396( -_$ln_376( p ), -1.0/alpha ) ) );
	}
}


// EXPORTS //

var _$factory_953 = __factory_953;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution quantile function.
*
* @module @stdlib/stats/base/dists/frechet/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/frechet/quantile' );
*
* var y = quantile( 0.3, 2.0, 3.0, 5.0 );
* // returns ~7.734
*
* y = quantile( 0.8, 2.0, 3.0, 2.0 );
* // returns ~8.351
*
* @example
* var factory = require( '@stdlib/stats/base/dists/frechet/quantile' ).factory;
* var quantile = factory( 3.0, 3.0, 5.0 );
* var y = quantile( 0.1 );
* // returns ~7.272
*
* y = quantile( 0.8 );
* // returns ~9.946
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_955 = require( './quantile.js' ); */;
/* removed: var _$factory_953 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_955, 'factory', _$factory_953 );


// EXPORTS //

var _$quantile_954 = _$quantile_955;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_932 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_932 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$entropy_935 = require( '@stdlib/stats/base/dists/frechet/entropy' ); */;
/* removed: var _$kurtosis_936 = require( '@stdlib/stats/base/dists/frechet/kurtosis' ); */;
/* removed: var _$mean_944 = require( '@stdlib/stats/base/dists/frechet/mean' ); */;
/* removed: var _$median_946 = require( '@stdlib/stats/base/dists/frechet/median' ); */;
/* removed: var _$mode_948 = require( '@stdlib/stats/base/dists/frechet/mode' ); */;
/* removed: var _$skewness_956 = require( '@stdlib/stats/base/dists/frechet/skewness' ); */;
/* removed: var _$stdev_958 = require( '@stdlib/stats/base/dists/frechet/stdev' ); */;
/* removed: var _$variance_960 = require( '@stdlib/stats/base/dists/frechet/variance' ); */;
/* removed: var _$cdf_931 = require( '@stdlib/stats/base/dists/frechet/cdf' ); */;
/* removed: var _$logcdf_939 = require( '@stdlib/stats/base/dists/frechet/logcdf' ); */;
/* removed: var _$logpdf_942 = require( '@stdlib/stats/base/dists/frechet/logpdf' ); */;
/* removed: var _$pdf_951 = require( '@stdlib/stats/base/dists/frechet/pdf' ); */;
/* removed: var _$quantile_954 = require( '@stdlib/stats/base/dists/frechet/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function frechetCDF( x ) {
	return _$cdf_931( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function frechetLogCDF( x ) {
	return _$logcdf_939( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function frechetLogPDF( x ) {
	return _$logpdf_942( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function frechetPDF( x ) {
	return _$pdf_951( x, this.alpha, this.s, this.m );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function frechetQuantile( p ) {
	return _$quantile_954( p, this.alpha, this.s, this.m );
}


// MAIN //

/**
* Fréchet distribution constructor.
*
* @constructor
* @param {number} [alpha=0.0] - shape parameter
* @param {number} [s=1.0] - scale parameter
* @param {number} [m=0.0] - location parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `s` must be a positive number
* @returns {Frechet} distribution instance
*
* @example
* var frechet = new Frechet( 1.0, 1.0, 0.25 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.162
*
* var mu = frechet.mean;
* // returns Infinity
*/
function Frechet() {
	var alpha;
	var s;
	var m;
	if ( !(this instanceof Frechet) ) {
		if ( arguments.length === 0 ) {
			return new Frechet();
		}
		return new Frechet( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		s = arguments[ 1 ];
		m = arguments[ 2 ];
		if ( !__isPositive_932( alpha ) ) {
			throw new TypeError( 'invalid argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !__isPositive_932( s ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `s` must be a number primitive. Value: `' + s + '`' );
		}
		if ( !__isNumber_932( m ) || _$isnan_130( m ) ) {
			throw new TypeError( 'invalid argument. Location parameter `m` must be a number primitive. Value: `' + m + '`' );
		}
	} else {
		alpha = 1.0;
		s = 1.0;
		m = 0.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !__isPositive_932( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !__isPositive_932( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	_$defineProperty_1606( this, 'm', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return m;
		},
		'set': function set( value ) {
			if ( !__isNumber_932( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			m = value;
		}
	});
	return this;
}

/**
* Fréchet distribution differential entropy.
*
* @name entropy
* @memberof Frechet.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.entropy;
* // returns ~2.82
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'entropy', function get() {
	return _$entropy_935( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution excess kurtosis.
*
* @name kurtosis
* @memberof Frechet.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.kurtosis;
* // returns Infinity
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'kurtosis', function get() {
	return _$kurtosis_936( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution expected value.
*
* @name mean
* @memberof Frechet.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mean;
* // returns ~16.705
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'mean', function get() {
	return _$mean_944( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution median.
*
* @name median
* @memberof Frechet.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.median;
* // returns ~15.151
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'median', function get() {
	return _$median_946( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution mode.
*
* @name mode
* @memberof Frechet.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.mode;
* // returns ~13.349
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'mode', function get() {
	return _$mode_948( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution skewness.
*
* @name skewness
* @memberof Frechet.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.skewness;
* // returns ~5.605
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'skewness', function get() {
	return _$skewness_956( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution standard deviation.
*
* @name stdev
* @memberof Frechet.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.stdev;
* // returns ~6.245
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'stdev', function get() {
	return _$stdev_958( this.alpha, this.s, this.m );
});

/**
* Fréchet distribution variance.
*
* @name variance
* @memberof Frechet.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var frechet = new Frechet( 4.0, 12.0, 2.0 );
*
* var v = frechet.variance;
* // returns ~38.996
*/
_$setNonEnumerableReadOnlyAccessor_1601( Frechet.prototype, 'variance', function get() {
	return _$variance_960( this.alpha, this.s, this.m );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.cdf( 12.0 );
* // returns ~0.821
*/
_$setNonEnumerableReadOnly_1603( Frechet.prototype, 'cdf', frechetCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.logcdf( 12.0 );
* // returns ~-0.1975
*/
_$setNonEnumerableReadOnly_1603( Frechet.prototype, 'logcdf', frechetLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.logpdf( 2.0 );
* // returns -Infinity
*/
_$setNonEnumerableReadOnly_1603( Frechet.prototype, 'logpdf', frechetLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Frechet.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.pdf( 5.5 );
* // returns ~0.158
*/
_$setNonEnumerableReadOnly_1603( Frechet.prototype, 'pdf', frechetPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Frechet.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var frechet = new Frechet( 2.0, 4.0, 3.0 );
*
* var v = frechet.quantile( 0.5 );
* // returns ~7.804
*/
_$setNonEnumerableReadOnly_1603( Frechet.prototype, 'quantile', frechetQuantile );


// EXPORTS //

var _$Frechet_932 = Frechet;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Fréchet distribution constructor.
*
* @module @stdlib/stats/base/dists/frechet/ctor
*
* @example
* var Frechet = require( '@stdlib/stats/base/dists/frechet/ctor' );
*
* var frechet = new Frechet( 1.0, 1.0, 0.5 );
*
* var y = frechet.cdf( 0.8 );
* // returns ~0.036
*
* var mu = frechet.mean;
* // returns Infinity
*/

// MODULES //

/* removed: var _$Frechet_932 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_933 = _$Frechet_932;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~-0.462
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~1.723
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_967( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha - _$ln_376( beta );
	out += _$gammaln_305( alpha );
	out += ( 1.0-alpha ) * _$digamma_185( alpha );
	return out;
}


// EXPORTS //

var _$entropy_967 = __entropy_967;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution differential entropy.
*
* @module @stdlib/stats/base/dists/gamma/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/gamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~-0.462
*
* v = entropy( 8.0, 2.0 );
* // returns ~1.723
*/

// MODULES //

/* removed: var _$entropy_967 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_968 = _$entropy_967;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns 1.5
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns 0.75
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_970( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 6.0 / alpha;
}


// EXPORTS //

var _$kurtosis_970 = __kurtosis_970;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/gamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/gamma/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns 1.5
*
* v = kurtosis( 8.0, 2.0 );
* // returns 0.75
*/

// MODULES //

/* removed: var _$kurtosis_970 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_969 = _$kurtosis_970;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.333
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns 4.0
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_977( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / beta;
}


// EXPORTS //

var _$mean_977 = __mean_977;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution expected value.
*
* @module @stdlib/stats/base/dists/gamma/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/gamma/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~0.333
*
* v = mean( 8.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_977 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_976 = _$mean_977;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns 0.25
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns 3.5
*
* @example
* var v = mode( 0.5, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_982( alpha, beta ) {
	if ( alpha < 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( alpha-1.0 ) / beta;
}


// EXPORTS //

var _$mode_982 = __mode_982;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution mode.
*
* @module @stdlib/stats/base/dists/gamma/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/gamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns 0.25
*
* v = mode( 8.0, 2.0 );
* // returns 3.5
*/

// MODULES //

/* removed: var _$mode_982 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_981 = _$mode_982;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 1.0
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~0.707
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_992( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 / _$sqrt_437( alpha );
}


// EXPORTS //

var _$skewness_992 = __skewness_992;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution skewness.
*
* @module @stdlib/stats/base/dists/gamma/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/gamma/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns 1.0
*
* v = skewness( 8.0, 2.0 );
* // returns ~0.707
*/

// MODULES //

/* removed: var _$skewness_992 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_991 = _$skewness_992;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.167
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~1.414
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_994( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return _$sqrt_437( alpha ) / beta;
}


// EXPORTS //

var _$stdev_994 = __stdev_994;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution standard deviation.
*
* @module @stdlib/stats/base/dists/gamma/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/gamma/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.167
*
* v = stdev( 8.0, 2.0 );
* // returns ~1.414
*/

// MODULES //

/* removed: var _$stdev_994 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_993 = _$stdev_994;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the variance of a gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.028
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns 2.0
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_996( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return alpha / ( beta*beta );
}


// EXPORTS //

var _$variance_996 = __variance_996;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution variance.
*
* @module @stdlib/stats/base/dists/gamma/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/gamma/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~0.028
*
* v = variance( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$variance_996 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_995 = _$variance_996;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a gamma distribution.
*
* @param {number} t - input value
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
*
* @example
* var y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
*
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 4.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, -0.5, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __mgf_980( t, alpha, beta ) {
	var base;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0 ||
		t >= beta
	) {
		return NaN;
	}
	base = 1.0 - (t / beta);
	return _$pow_396( base, -alpha );
}


// EXPORTS //

var _$mgf_980 = __mgf_980;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a gamma distribution with shape `alpha` and rate `beta`.
*
* @param {NonNegativeNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 3.0, 1.5 );
*
* var y = mgf( 1.0 );
* // returns ~27.0
*
* y = mgf( 0.5 );
* // returns ~3.375
*/
function __factory_978( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha < 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a gamma distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var base;
		if ( t >= beta ) {
			return NaN;
		}
		base = 1.0 - (t / beta);
		return _$pow_396( base, -alpha );
	}
}


// EXPORTS //

var _$factory_978 = __factory_978;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) of a gamma distribution.
*
* @module @stdlib/stats/base/dists/gamma/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/gamma/mgf' );
*
* var y = mgf( 0.5, 0.5, 1.0 );
* // returns ~1.414
*
* y = mgf( 0.1, 1.0, 1.0 );
* // returns ~1.111
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.198
*
* var mymgf = mgf.factory( 3.0, 1.5 );
*
* y = mymgf( 1.0 );
* // returns ~26.999
*
* y = mymgf( 0.5 );
* // returns ~3.375
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_980 = require( './mgf.js' ); */;
/* removed: var _$factory_978 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_980, 'factory', _$factory_978 );


// EXPORTS //

var _$mgf_979 = _$mgf_980;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_965 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_968 = require( '@stdlib/stats/base/dists/gamma/entropy' ); */;
/* removed: var _$kurtosis_969 = require( '@stdlib/stats/base/dists/gamma/kurtosis' ); */;
/* removed: var _$mean_976 = require( '@stdlib/stats/base/dists/gamma/mean' ); */;
/* removed: var _$mode_981 = require( '@stdlib/stats/base/dists/gamma/mode' ); */;
/* removed: var _$quantile_989 = require( '@stdlib/stats/base/dists/gamma/quantile' ); */;
/* removed: var _$skewness_991 = require( '@stdlib/stats/base/dists/gamma/skewness' ); */;
/* removed: var _$stdev_993 = require( '@stdlib/stats/base/dists/gamma/stdev' ); */;
/* removed: var _$variance_995 = require( '@stdlib/stats/base/dists/gamma/variance' ); */;
/* removed: var _$cdf_964 = require( '@stdlib/stats/base/dists/gamma/cdf' ); */;
/* removed: var _$logpdf_973 = require( '@stdlib/stats/base/dists/gamma/logpdf' ); */;
/* removed: var _$mgf_979 = require( '@stdlib/stats/base/dists/gamma/mgf' ); */;
/* removed: var _$pdf_985 = require( '@stdlib/stats/base/dists/gamma/pdf' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function __gammaCDF_965( x ) {
	return _$cdf_964( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function __gammaLogPDF_965( x ) {
	return _$logpdf_973( x, this.alpha, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gammaMGF( t ) {
	return _$mgf_979( t, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function __gammaPDF_965( x ) {
	return _$pdf_985( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function __gammaQuantile_965( p ) {
	return _$quantile_989( p, this.alpha, this.beta );
}


// MAIN //

/**
* Gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - rate parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Gamma} distribution instance
*
* @example
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var v = gamma.mode;
* // returns 0.0
*/
function Gamma() {
	var alpha;
	var beta;
	if ( !(this instanceof Gamma) ) {
		if ( arguments.length === 0 ) {
			return new Gamma();
		}
		return new Gamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !__isPositive_965( alpha ) ) {
			throw new TypeError( 'invalid argument. Shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !__isPositive_965( beta ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !__isPositive_965( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !__isPositive_965( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Gamma distribution differential entropy.
*
* @name entropy
* @memberof Gamma.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.entropy;
* // returns ~-0.462
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'entropy', function get() {
	return _$entropy_968( this.alpha, this.beta );
});

/**
* Gamma distribution excess kurtosis.
*
* @name kurtosis
* @memberof Gamma.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.kurtosis;
* // returns 1.5
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'kurtosis', function get() {
	return _$kurtosis_969( this.alpha, this.beta );
});

/**
* Gamma distribution expected value.
*
* @name mean
* @memberof Gamma.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mean;
* // returns ~0.333
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'mean', function get() {
	return _$mean_976( this.alpha, this.beta );
});

/**
* Gamma distribution mode.
*
* @name mode
* @memberof Gamma.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.mode;
* // returns 0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'mode', function get() {
	return _$mode_981( this.alpha, this.beta );
});

/**
* Gamma distribution skewness.
*
* @name skewness
* @memberof Gamma.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.skewness;
* // returns 1.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'skewness', function get() {
	return _$skewness_991( this.alpha, this.beta );
});

/**
* Gamma distribution standard deviation.
*
* @name stdev
* @memberof Gamma.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.stdev;
* // returns ~0.167
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'stdev', function get() {
	return _$stdev_993( this.alpha, this.beta );
});

/**
* Gamma distribution variance.
*
* @name variance
* @memberof Gamma.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gamma = new Gamma( 4.0, 12.0 );
*
* var v = gamma.variance;
* // returns ~0.028
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gamma.prototype, 'variance', function get() {
	return _$variance_995( this.alpha, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.cdf( 0.5 );
* // returns ~0.594
*/
_$setNonEnumerableReadOnly_1603( Gamma.prototype, 'cdf', __gammaCDF_965 );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.logpdf( 0.8 );
* // returns ~-0.651
*/
_$setNonEnumerableReadOnly_1603( Gamma.prototype, 'logpdf', __gammaLogPDF_965 );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.mgf( 0.5 );
* // returns ~1.306
*/
_$setNonEnumerableReadOnly_1603( Gamma.prototype, 'mgf', gammaMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Gamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.pdf( 0.8 );
* // returns ~0.522
*/
_$setNonEnumerableReadOnly_1603( Gamma.prototype, 'pdf', __gammaPDF_965 );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Gamma.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gamma = new Gamma( 2.0, 4.0 );
*
* var v = gamma.quantile( 0.5 );
* // returns ~0.42
*/
_$setNonEnumerableReadOnly_1603( Gamma.prototype, 'quantile', __gammaQuantile_965 );


// EXPORTS //

var _$Gamma_965 = Gamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gamma distribution constructor.
*
* @module @stdlib/stats/base/dists/gamma/ctor
*
* @example
* var Gamma = require( '@stdlib/stats/base/dists/gamma/ctor' );
*
* var gamma = new Gamma( 1.0, 1.0 );
*
* var y = gamma.cdf( 0.8 );
* // returns ~0.551
*
* var mode = gamma.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Gamma_965 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_966 = _$Gamma_965;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.271
*
* @example
* var y = cdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Invalid probability
* var y = cdf( 2.0, 1.4 );
* // returns NaN
*/
function __cdf_997( x, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	x = _$floor_236( x );
	return 1.0 - _$pow_396( 1.0 - p, x + 1.0 );
}


// EXPORTS //

var _$cdf_997 = __cdf_997;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns 0.9375
*
* y = cdf( 1.0 );
* // returns 0.75
*/
function __factory_998( p ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		x = _$floor_236( x );
		return 1.0 - _$pow_396( 1.0 - p, x + 1.0 );
	}
}


// EXPORTS //

var _$factory_998 = __factory_998;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/geometric/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/geometric/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns 0.875
*
* y = cdf( 2.0, 0.1 );
* // returns ~0.271
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns 0.9375
*
* y = mycdf( 1.0 );
* // returns 0.75
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_997 = require( './cdf.js' ); */;
/* removed: var _$factory_998 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_997, 'factory', _$factory_998 );


// EXPORTS //

var _$cdf_999 = _$cdf_997;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the entropy of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 0.1 );
* // returns ~3.251
*
* @example
* var v = entropy( 0.5 );
* // returns ~1.386
*
* @example
* var v = entropy( 0.9 );
* // returns ~0.361
*
* @example
* var v = entropy( 1.1 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_1002( p ) {
	var q;
	if (
		_$isnan_130( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	q = 1.0 - p;
	return ( -( p*_$ln_376(p) ) - ( q*_$ln_376(q) ) ) / p;
}


// EXPORTS //

var _$entropy_1002 = __entropy_1002;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution entropy.
*
* @module @stdlib/stats/base/dists/geometric/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/geometric/entropy' );
*
* var v = entropy( 0.1 );
* // returns ~3.251
*
* v = entropy( 0.5 );
* // returns ~1.386
*/

// MODULES //

/* removed: var _$entropy_1002 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1003 = _$entropy_1002;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 0.1 );
* // returns ~6.011
*
* @example
* var v = kurtosis( 0.5 );
* // returns 6.5
*
* @example
* var v = kurtosis( 1.1 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_1005( p ) {
	if (
		_$isnan_130( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return 6.0 + ( ( p*p ) / ( 1.0-p ) );
}


// EXPORTS //

var _$kurtosis_1005 = __kurtosis_1005;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/geometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/geometric/kurtosis' );
*
* var v = kurtosis( 0.1 );
* // returns ~6.011
*
* v = kurtosis( 0.5 );
* // returns 6.5
*/

// MODULES //

/* removed: var _$kurtosis_1005 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1004 = _$kurtosis_1005;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 0.1 );
* // returns 9.0
*
* @example
* var v = mean( 0.5 );
* // returns 1.0
*
* @example
* var v = mean( 1.1 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_1013( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 1.0 - p ) / p;
}


// EXPORTS //

var _$mean_1013 = __mean_1013;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution expected value.
*
* @module @stdlib/stats/base/dists/geometric/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/geometric/mean' );
*
* var v = mean( 0.1 );
* // returns 9.0
*
* v = mean( 0.5 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$mean_1013 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1012 = _$mean_1013;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_386( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_386 = __evalpoly_386;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function __evalpoly_387( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

var _$evalpoly_387 = __evalpoly_387;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_log.h}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$evalpoly_386 = require( './polyval_p.js' ); */;
/* removed: var _$evalpoly_387 = require( './polyval_q.js' ); */;


// VARIABLES //

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_384 = 0x000fffff|0; // asm type annotation

// 1/3
var __ONE_THIRD_384 = 0.33333333333333333;


// MAIN //

/**
* Return `log(x) - (x-1)` for `x` in `~[sqrt(2)/2, sqrt(2)]`.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function klog( x ) {
	var hfsq;
	var t1;
	var t2;
	var hx;
	var f;
	var s;
	var z;
	var R;
	var w;
	var i;
	var j;

	hx = _$getHighWord_460( x );
	f = x - 1.0;
	if ( ( __HIGH_SIGNIFICAND_MASK_384 & (2+hx) ) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			return 0.0;
		}
		return f * f * ( ( __ONE_THIRD_384*f )- 0.5 );
	}
	s = f / ( 2.0 + f );
	z = s * s;
	hx &= __HIGH_SIGNIFICAND_MASK_384;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * _$evalpoly_386( w );
	t2 = z * _$evalpoly_387( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		return ( s * (hfsq+R) ) - hfsq;
	}
	return s * (R-f);
}


// EXPORTS //

var _$klog_384 = klog;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$getHighWord_460 = require( '@stdlib/number/float64/base/get-high-word' ); */;
/* removed: var _$setHighWord_469 = require( '@stdlib/number/float64/base/set-high-word' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$toWords_476 = require( '@stdlib/number/float64/base/to-words' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_EXPONENT_BIAS_89 = require( '@stdlib/constants/math/float64-exponent-bias' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$klog_384 = require( './klog.js' ); */;


// VARIABLES //

var __TWO54_385 = 1.80143985094819840000e+16;   // 0x43500000, 0x00000000
var IVLN2HI = 1.44269504072144627571e+00; // 0x3ff71547, 0x65200000
var IVLN2LO = 1.67517131648865118353e-10; // 0x3de705fc, 0x2eefa200

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var __HIGH_SIGNIFICAND_MASK_385 = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var __HIGH_MAX_NORMAL_EXP_385 = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var __HIGH_MIN_NORMAL_EXP_385 = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var __HIGH_BIASED_EXP_0_385 = 0x3ff00000|0; // asm type annotation

// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
var __ABS_MASK_385 = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var __WORDS_385 = [ 0|0, 0|0 ]; // WARNING: not thread safe


// MAIN //

/**
* Evaluates the binary logarithm (base two).
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = log2( 4.0 );
* // returns 2.0
*
* @example
* var v = log2( 8.0 );
* // returns 3.0
*
* @example
* var v = log2( 0.0 );
* // returns -Infinity
*
* @example
* var v = log2( Infinity );
* // returns Infinity
*
* @example
* var v = log2( NaN );
* // returns NaN
*
* @example
* var v = log2( -4.0 );
* // returns NaN
*/
function log2( x ) {
	var hi;
	var lo;
	var hx;
	var lx;
	var f;
	var i;
	var k;

	if ( _$isnan_130( x ) || x < 0.0 ) {
		return NaN;
	}
	_$toWords_476( __WORDS_385, x );
	hx = __WORDS_385[ 0 ];
	lx = __WORDS_385[ 1 ];
	k = 0|0; // asm type annotation
	if ( hx < __HIGH_MIN_NORMAL_EXP_385 ) {
		// Case: x < 2**-1022
		if ( ( (hx&__ABS_MASK_385) | lx ) === 0 ) {
			return _$FLOAT64_NINF_107;
		}
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up x:
		x *= __TWO54_385;
		hx = _$getHighWord_460( x );
	}
	if ( hx >= __HIGH_MAX_NORMAL_EXP_385 ) {
		return x + x;
	}
	k += ( (hx>>20) - _$FLOAT64_EXPONENT_BIAS_89 )|0; // asm type annotation
	hx &= __HIGH_SIGNIFICAND_MASK_385;
	i = ( ( hx+0x95f64 ) & 0x100000 )|0; // asm type annotation

	// Normalize x or x/2...
	x = _$setHighWord_469( x, hx|(i^__HIGH_BIASED_EXP_0_385) );
	k += (i>>20)|0; // asm type annotation
	f = _$klog_384( x );
	x -= 1;
	hi = _$setLowWord_471( x, 0 );
	lo = x - hi;
	return ( (x+f)*IVLN2LO ) + ( (lo+f)*IVLN2HI ) + ( hi*IVLN2HI ) + k;
}


// EXPORTS //

var _$log2_385 = log2;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the binary logarithm (base two).
*
* @module @stdlib/math/base/special/log2
*
* @example
* var log2 = require( '@stdlib/math/base/special/log2' );
*
* var v = log2( 4.0 );
* // returns 2.0
*
* v = log2( 8.0 );
* // returns 3.0
*
* v = log2( 0.0 );
* // returns -Infinity
*
* v = log2( Infinity );
* // returns Infinity
*
* v = log2( NaN );
* // returns NaN
*
* v = log2( -4.0 );
* // returns NaN
*/

// MODULES //

/* removed: var _$log2_385 = require( './log2.js' ); */;


// EXPORTS //

var _$log2_383 = _$log2_385;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ceil_176 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$log2_383 = require( '@stdlib/math/base/special/log2' ); */;


// MAIN //

/**
* Returns the median of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 0.1 );
* // returns 6
*
* @example
* var v = median( 0.5 );
* // returns 0
*
* @example
* var v = median( 1.1 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_1015( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$ceil_176( -1.0 / ( _$log2_383( 1.0-p ) ) ) - 1.0;
}


// EXPORTS //

var _$median_1015 = __median_1015;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution median.
*
* @module @stdlib/stats/base/dists/geometric/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/geometric/median' );
*
* var v = median( 0.1 );
* // returns 6
*
* v = median( 0.5 );
* // returns 0
*/

// MODULES //

/* removed: var _$median_1015 = require( './median.js' ); */;


// EXPORTS //

var _$median_1014 = _$median_1015;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 0.1 );
* // returns 0
*
* @example
* var v = mode( 0.5 );
* // returns 0
*
* @example
* var v = mode( 1.1 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_1020( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return 0;
}


// EXPORTS //

var _$mode_1020 = __mode_1020;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution mode.
*
* @module @stdlib/stats/base/dists/geometric/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/geometric/mode' );
*
* var v = mode( 0.1 );
* // returns 0
*
* v = mode( 0.5 );
* // returns 0
*/

// MODULES //

/* removed: var _$mode_1020 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1019 = _$mode_1020;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 0.1 );
* // returns ~2.003
*
* @example
* var v = skewness( 0.5 );
* // returns ~2.121
*
* @example
* var v = skewness( 1.1 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_1028( p ) {
	if (
		_$isnan_130( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / _$sqrt_437( 1.0-p );
}


// EXPORTS //

var _$skewness_1028 = __skewness_1028;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution skewness.
*
* @module @stdlib/stats/base/dists/geometric/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/geometric/skewness' );
*
* var v = skewness( 0.1 );
* // returns ~2.003
*
* v = skewness( 0.5 );
* // returns ~2.121
*/

// MODULES //

/* removed: var _$skewness_1028 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1027 = _$skewness_1028;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.1 );
* // returns ~9.487
*
* @example
* var v = stdev( 0.5 );
* // returns ~1.414
*
* @example
* var v = stdev( 1.1 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_1030( p ) {
	if (
		_$isnan_130( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return _$sqrt_437( 1.0-p ) / p;
}


// EXPORTS //

var _$stdev_1030 = __stdev_1030;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution standard deviation.
*
* @module @stdlib/stats/base/dists/geometric/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/geometric/stdev' );
*
* var v = stdev( 0.1 );
* // returns ~9.487
*
* v = stdev( 0.5 );
* // returns ~1.414
*/

// MODULES //

/* removed: var _$stdev_1030 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1029 = _$stdev_1030;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a geometric distribution.
*
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.1 );
* // returns ~90.0
*
* @example
* var v = variance( 0.5 );
* // returns 2.0
*
* @example
* var v = variance( 1.1 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_1032( p ) {
	if (
		_$isnan_130( p ) ||
		p <= 0.0 ||
		p >= 1.0
	) {
		return NaN;
	}
	return ( 1.0-p ) / ( p*p );
}


// EXPORTS //

var _$variance_1032 = __variance_1032;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution variance.
*
* @module @stdlib/stats/base/dists/geometric/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/geometric/variance' );
*
* var v = variance( 0.1 );
* // returns ~90.0
*
* v = variance( 0.5 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$variance_1032 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1031 = _$variance_1032;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
*
* @example
* var y = logcdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Invalid probability
* var y = logcdf( 2.0, 1.4 );
* // returns NaN
*/
function __logcdf_1008( x, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	x = _$floor_236( x );
	return _$log1p_380( -_$pow_396( 1.0 - p, x + 1.0 ) );
}


// EXPORTS //

var _$logcdf_1008 = __logcdf_1008;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.065
*
* y = logcdf( 1.0 );
* // returns ~-0.288
*/
function __factory_1006( p ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 0.0;
		}
		x = _$floor_236( x );
		return _$log1p_380( -_$pow_396( 1.0 - p, x + 1.0 ) );
	}
}


// EXPORTS //

var _$factory_1006 = __factory_1006;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/geometric/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/geometric/logcdf' );
*
* var y = logcdf( 2.0, 0.5 );
* // returns ~-0.134
*
* y = logcdf( 2.0, 0.1 );
* // returns ~-1.306
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 3.0 );
* // returns ~-0.065
*
* y = mylogcdf( 1.0 );
* // returns ~-0.288
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1008 = require( './logcdf.js' ); */;
/* removed: var _$factory_1006 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1008, 'factory', _$factory_1006 );


// EXPORTS //

var _$logcdf_1007 = _$logcdf_1008;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {NonPositiveNumber} logarithm of PMF
*
* @example
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
*
* @example
* var y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
*
* @example
* var y = logpmf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = logpmf( 2.0, 1.5 );
* // returns NaN
*/
function __logpmf_1011( x, p ) {
	var q;
	if ( _$isnan_130( x ) || _$isnan_130( p ) ) {
		return NaN;
	}
	if ( p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( _$isNonNegativeInteger_136( x ) ) {
		q = 1.0 - p;
		return _$ln_376( p ) + (x * _$ln_376( q ));
	}
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpmf_1011 = __logpmf_1011;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-2.773
*
* y = logpmf( 1.0 );
* // returns ~-1.386
*/
function __factory_1009( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpmf;

	/**
	* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {NonPositiveNumber} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		var q;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) ) {
			q = 1.0 - p;
			return _$ln_376( p ) + (x * _$ln_376( q ));
		}
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_1009 = __factory_1009;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution logarithm of probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/geometric/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/geometric/logpmf' );
*
* var y = logpmf( 4.0, 0.3 );
* // returns ~-2.631
*
* y = logpmf( 2.0, 0.7 );
* // returns ~-2.765
*
* var mylogpmf = logpmf.factory( 0.5 );
* y = mylogpmf( 3.0 );
* // returns ~-2.773
*
* y = mylogpmf( 1.0 );
* // returns ~-1.386
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_1011 = require( './logpmf.js' ); */;
/* removed: var _$factory_1009 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_1011, 'factory', _$factory_1009 );


// EXPORTS //

var _$logpmf_1010 = _$logpmf_1011;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isProbability_144 = require( '@stdlib/math/base/assert/is-probability' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a geometric distribution with success probability `p` at a value `t`.
*
* @param {number} t - input value
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
*
* @example
* var y = mgf( 0.4, 0.5 );
* // returns ~2.936
*
* @example
* // Case: t >= -ln(1-p)
* var y = mgf( 0.8, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 2.0 );
* // returns NaN
*/
function __mgf_1018( t, p ) {
	var et;
	var q;
	if ( _$isnan_130( t ) || !_$isProbability_144( p ) ) {
		return NaN;
	}
	q = 1.0 - p;
	if ( t >= -_$ln_376( q ) ) {
		return NaN;
	}
	et = _$exp_225( t );
	return ( p * et ) / ( 1.0 - (q * et) );
}


// EXPORTS //

var _$mgf_1018 = __mgf_1018;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isProbability_144 = require( '@stdlib/math/base/assert/is-probability' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.8 );
* var y = mgf( -0.2 );
* // returns ~0.783
*/
function __factory_1016( p ) {
	if ( !_$isProbability_144( p ) ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a geometric distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var et;
		var q;
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		q = 1.0 - p;
		if ( t >= -_$ln_376( q ) ) {
			return NaN;
		}
		et = _$exp_225( t );
		return ( p * et ) / ( 1.0 - (q * et ));
	}
}


// EXPORTS //

var _$factory_1016 = __factory_1016;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a geometric distribution.
*
* @module @stdlib/stats/base/dists/geometric/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/geometric/mgf' );
*
* var y = mgf( 0.2, 0.5 );
* // returns ~1.569
*
* y = mgf( 0.4, 0.5 );
* // returns ~2.936
*
* var mymgf = mgf.factory( 0.8 );
* y = mymgf( -0.2 );
* // returns ~0.783
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1018 = require( './mgf.js' ); */;
/* removed: var _$factory_1016 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1018, 'factory', _$factory_1016 );


// EXPORTS //

var _$mgf_1017 = _$mgf_1018;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
*
* @example
* var y = pmf( 2.0, 0.7 );
* // returns ~0.063
*
* @example
* var y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid success probability:
* var y = pmf( 2.0, 1.5 );
* // returns NaN
*/
function __pmf_1023( x, p ) {
	var q;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( _$isNonNegativeInteger_136( x ) ) {
		q = 1.0 - p;
		return p * _$pow_396( q, x );
	}
	return 0.0;
}


// EXPORTS //

var _$pmf_1023 = __pmf_1023;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 0.5 );
* var y = pmf( 3.0 );
* // returns 0.0625
*
* y = pmf( 1.0 );
* // returns 0.25
*/
function __factory_1021( p ) {
	if (
		_$isnan_130( p ) ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a geometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var q;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) ) {
			q = 1.0 - p;
			return p * _$pow_396( q, x );
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1021 = __factory_1021;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/geometric/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/geometric/pmf' );
*
* var y = pmf( 4.0, 0.3 );
* // returns ~0.072
*
* y = pmf( 2.0, 0.7 );
* // returns ~0.063
*
* y = pmf( -1.0, 0.5 );
* // returns 0.0
*
* var mypmf = pmf.factory( 0.5 );
* y = mypmf( 3.0 );
* // returns 0.0625
*
* y = mypmf( 1.0 );
* // returns 0.25
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_1023 = require( './pmf.js' ); */;
/* removed: var _$factory_1021 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_1023, 'factory', _$factory_1021 );


// EXPORTS //

var _$pmf_1022 = _$pmf_1023;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ceil_176 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the quantile function for a geometric distribution with success probability `p` at a probability `r`.
*
* @param {Probability} r - input value
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.4 );
* // returns 3
*
* @example
* var y = quantile( 0.5, 0.4 );
* // returns 1
*
* @example
* var y = quantile( 0.9, 0.1 );
* // returns 21
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.8 );
* // returns NaN
*
* @example
* var y = quantile( 0.4, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.5 );
* // returns NaN
*/
function __quantile_1026( r, p ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( r ) ||
		p < 0.0 ||
		p > 1.0 ||
		r < 0.0 ||
		r > 1.0
	) {
		return NaN;
	}
	if ( r === 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return _$max_388( 0.0, _$ceil_176( (_$ln_376(1.0-r) / _$log1p_380(-p))- ( 1 + 1e-12 ) ) );
}


// EXPORTS //

var _$quantile_1026 = __quantile_1026;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$ceil_176 = require( '@stdlib/math/base/special/ceil' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a geometric distribution with success probability `p`.
*
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.4 );
* var y = quantile( 0.4 );
* // returns 0
*
* y = quantile( 0.8 );
* // returns 3
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_1024( p ) {
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a geometric distribution.
	*
	* @private
	* @param {Probability} r - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( r ) {
		if ( _$isnan_130( r ) || r < 0.0 || r > 1.0 ) {
			return NaN;
		}
		if ( r === 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		return _$max_388( 0.0, _$ceil_176( (_$ln_376(1.0-r) / _$log1p_380(-p)) - (1.0 + 1e-12) ) );
	}
}


// EXPORTS //

var _$factory_1024 = __factory_1024;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution quantile function.
*
* @module @stdlib/stats/base/dists/geometric/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/geometric/quantile' );
*
* var y = quantile( 0.8, 0.4 );
* // returns 3
*
* y = quantile( 0.5, 0.4 );
* // returns 1
*
* var myquantile = quantile.factory( 0.4 );
* y = myquantile( 0.4 );
* // returns 0
*
* y = myquantile( 0.8 );
* // returns 3
*
* y = myquantile( 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1026 = require( './quantile.js' ); */;
/* removed: var _$factory_1024 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1026, 'factory', _$factory_1024 );


// EXPORTS //

var _$quantile_1025 = _$quantile_1026;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isProbability_1000 = _$isProbability_74.isPrimitive;
/* removed: var _$entropy_1003 = require( '@stdlib/stats/base/dists/geometric/entropy' ); */;
/* removed: var _$kurtosis_1004 = require( '@stdlib/stats/base/dists/geometric/kurtosis' ); */;
/* removed: var _$mean_1012 = require( '@stdlib/stats/base/dists/geometric/mean' ); */;
/* removed: var _$median_1014 = require( '@stdlib/stats/base/dists/geometric/median' ); */;
/* removed: var _$mode_1019 = require( '@stdlib/stats/base/dists/geometric/mode' ); */;
/* removed: var _$skewness_1027 = require( '@stdlib/stats/base/dists/geometric/skewness' ); */;
/* removed: var _$stdev_1029 = require( '@stdlib/stats/base/dists/geometric/stdev' ); */;
/* removed: var _$variance_1031 = require( '@stdlib/stats/base/dists/geometric/variance' ); */;
/* removed: var _$cdf_999 = require( '@stdlib/stats/base/dists/geometric/cdf' ); */;
/* removed: var _$logcdf_1007 = require( '@stdlib/stats/base/dists/geometric/logcdf' ); */;
/* removed: var _$logpmf_1010 = require( '@stdlib/stats/base/dists/geometric/logpmf' ); */;
/* removed: var _$mgf_1017 = require( '@stdlib/stats/base/dists/geometric/mgf' ); */;
/* removed: var _$pmf_1022 = require( '@stdlib/stats/base/dists/geometric/pmf' ); */;
/* removed: var _$quantile_1025 = require( '@stdlib/stats/base/dists/geometric/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function geometricCDF( x ) {
	return _$cdf_999( x, this.p );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function geometricLogCDF( x ) {
	return _$logcdf_1007( x, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function geometricLogPMF( x ) {
	return _$logpmf_1010( x, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function geometricMGF( t ) {
	return _$mgf_1017( t, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function geometricPMF( x ) {
	return _$pmf_1022( x, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function geometricQuantile( p ) {
	return _$quantile_1025( p, this.p );
}


// MAIN //

/**
* Geometric distribution constructor.
*
* @constructor
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `p` must be a probability
* @returns {Geometric} distribution instance
*
* @example
* var geometric = new Geometric();
*
* var y = geometric.cdf( 1.8 );
* // returns 0.75
*
* var v = geometric.mode;
* // returns 0.0
*/
function Geometric() {
	var p;
	if ( !(this instanceof Geometric) ) {
		if ( arguments.length === 0 ) {
			return new Geometric();
		}
		return new Geometric( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		p = arguments[ 0 ];
		if ( !__isProbability_1000( p ) ) {
			throw new TypeError( 'invalid argument. Mean parameter `p` must be a probability. Value: `' + p + '`' );
		}
	} else {
		p = 0.5;
	}
	_$defineProperty_1606( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !__isProbability_1000( value ) ) {
				throw new TypeError( 'invalid value. Must be a probability. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Geometric distribution differential entropy.
*
* @name entropy
* @memberof Geometric.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.entropy;
* // returns ~1.683
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'entropy', function get() {
	return _$entropy_1003( this.p );
});

/**
* Geometric distribution excess kurtosis.
*
* @name kurtosis
* @memberof Geometric.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.kurtosis;
* // returns ~6.267
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'kurtosis', function get() {
	return _$kurtosis_1004( this.p );
});

/**
* Geometric distribution expected value.
*
* @name mean
* @memberof Geometric.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mean;
* // returns ~1.5
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'mean', function get() {
	return _$mean_1012( this.p );
});

/**
* Geometric distribution median.
*
* @name median
* @memberof Geometric.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.median;
* // returns 1.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'median', function get() {
	return _$median_1014( this.p );
});

/**
* Geometric distribution mode.
*
* @name mode
* @memberof Geometric.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.mode;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'mode', function get() {
	return _$mode_1019( this.p );
});

/**
* Geometric distribution skewness.
*
* @name skewness
* @memberof Geometric.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.skewness;
* // returns ~2.066
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'skewness', function get() {
	return _$skewness_1027( this.p );
});

/**
* Geometric distribution standard deviation.
*
* @name stdev
* @memberof Geometric.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.stdev;
* // returns ~1.936
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'stdev', function get() {
	return _$stdev_1029( this.p );
});

/**
* Geometric distribution variance.
*
* @name variance
* @memberof Geometric.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var geometric = new Geometric( 0.4 );
*
* var v = geometric.variance;
* // returns ~3.75
*/
_$setNonEnumerableReadOnlyAccessor_1601( Geometric.prototype, 'variance', function get() {
	return _$variance_1031( this.p );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.cdf( 1.5 );
* // returns ~0.36
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'cdf', geometricCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logcdf( 1.5 );
* // returns ~-1.022
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'logcdf', geometricLogCDF );

/**
* Evaluates the natural logarithm of the probability mass function (logPMF).
*
* @name logpdf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.logpmf( 2.0 );
* // returns ~-2.056
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'logpmf', geometricLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.mgf( 0.1 );
* // returns ~1.908
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'mgf', geometricMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Geometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.pmf( 2.0 );
* // returns ~0.128
*
* v = geometric.pmf( 0.8 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'pmf', geometricPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Geometric.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var geometric = new Geometric( 0.2 );
*
* var v = geometric.quantile( 0.5 );
* // returns 3.0
*/
_$setNonEnumerableReadOnly_1603( Geometric.prototype, 'quantile', geometricQuantile );


// EXPORTS //

var _$Geometric_1000 = Geometric;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Geometric distribution constructor.
*
* @module @stdlib/stats/base/dists/geometric/ctor
*
* @example
* var Geometric = require( '@stdlib/stats/base/dists/geometric/ctor' );
*
* var geometric = new Geometric( 0.3 );
*
* var y = geometric.cdf( 3.0 );
* // returns ~0.76
*
* var mode = geometric.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Geometric_1000 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1001 = _$Geometric_1000;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
*
* @example
* var y = cdf( -2.0, 0.0, 3.0 );
* // returns ~0.143
*
* @example
* var y = cdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function __cdf_1033( x, mu, beta ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return _$exp_225( -_$exp_225( -z ) );
}


// EXPORTS //

var _$cdf_1033 = __cdf_1033;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 3.0 );
*
* var y = cdf( 10.0 );
* // returns ~0.965
*
* y = cdf( -2.0 );
* // returns ~0.143
*/
function __factory_1034( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( -2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return _$exp_225( -_$exp_225( -z ) );
	}
}


// EXPORTS //

var _$factory_1034 = __factory_1034;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/gumbel/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/gumbel/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.965
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns ~0.368
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.933
*
* y = myCDF( 2.0 );
* // returns ~0.368
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1033 = require( './cdf.js' ); */;
/* removed: var _$factory_1034 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1033, 'factory', _$factory_1034 );


// EXPORTS //

var _$cdf_1035 = _$cdf_1033;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Returns the differential entropy for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.27
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1038( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( beta ) + _$GAMMA_88 + 1.0;
}


// EXPORTS //

var _$entropy_1038 = __entropy_1038;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution differential entropy.
*
* @module @stdlib/stats/base/dists/gumbel/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/gumbel/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.577
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.27
*/

// MODULES //

/* removed: var _$entropy_1038 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1039 = _$entropy_1038;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 2.4
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_1041( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 12.0 / 5.0;
}


// EXPORTS //

var _$kurtosis_1041 = __kurtosis_1041;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/gumbel/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/gumbel/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 2.4
*
* y = kurtosis( 4.0, 2.0 );
* // returns 2.4
*/

// MODULES //

/* removed: var _$kurtosis_1041 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1040 = _$kurtosis_1041;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Returns the mean for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mean
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~6.154
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1049( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu + ( beta * _$GAMMA_88 );
}


// EXPORTS //

var _$mean_1049 = __mean_1049;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution mean.
*
* @module @stdlib/stats/base/dists/gumbel/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/gumbel/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~0.577
*
* y = mean( 4.0, 2.0 );
* // returns ~5.154
*/

// MODULES //

/* removed: var _$mean_1049 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1048 = _$mean_1049;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// VARIABLES //

var LLN2 = _$ln_376( _$LN2_99 );


// MAIN //

/**
* Returns the median for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~0.367
*
* @example
* var y = median( 5.0, 2.0 );
* // returns ~5.733
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1051( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu - ( beta * LLN2 );
}


// EXPORTS //

var _$median_1051 = __median_1051;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution median.
*
* @module @stdlib/stats/base/dists/gumbel/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/gumbel/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~0.367
*
* y = median( 4.0, 2.0 );
* // returns ~4.733
*/

// MODULES //

/* removed: var _$median_1051 = require( './median.js' ); */;


// EXPORTS //

var _$median_1050 = _$median_1051;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1056( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mode_1056 = __mode_1056;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution mode.
*
* @module @stdlib/stats/base/dists/gumbel/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/gumbel/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mode_1056 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1055 = _$mode_1056;

var _$odd_positive_integers_416=[
	1.202056903159594285399738161511449990764986292340498881792,
	1.036927755143369926331365486457034168057080919501912811974,
	1.008349277381922826839797549849796759599863560565238706417,
	1.002008392826082214417852769232412060485605851394888756548,
	1.000494188604119464558702282526469936468606435758208617119,
	1.000122713347578489146751836526357395714275105895509845136,
	1.000030588236307020493551728510645062587627948706858177506,
	1.000007637197637899762273600293563029213088249090262679095,
	1.000001908212716553938925656957795101353258571144838630235,
	1.000000476932986787806463116719604373045966446694784937600,
	1.000000119219925965311073067788718882326387254997784519858,
	1.000000029803503514652280186063705069366011844730919543312,
	1.000000007450711789835429491981004170604119454719031882565,
	1.000000001862659723513049006403909945416948061665330469200,
	1.000000000465662906503378407298923325122007106269185336947,
	1.000000000116415501727005197759297383545630951652247172763,
	1.000000000029103850444970996869294252278840464106981987433,
	1.000000000007275959835057481014520869012338059264850925555,
	1.000000000001818989650307065947584832100730085030589309618,
	1.000000000000454747378304215402679911202948857033904529911,
	1.000000000000113686840768022784934910483802590643743590284,
	1.000000000000028421709768893018554550737049426620743688265,
	1.000000000000007105427395210852712877354479956800022742043,
	1.000000000000001776356843579120327473349014400279570155508,
	1.000000000000000444089210314381336419777094026812133645960,
	1.000000000000000111022302514106613372054456992138270248322,
	1.000000000000000027755575621361241725816324538540697689849,
	1.000000000000000006938893904544153697446085326249809274836,
	1.000000000000000001734723476047576572048972969937595907478,
	1.000000000000000000433680869002065048749702356590624136125,
	1.000000000000000000108420217249424140630127111654613825894,
	1.000000000000000000027105054312234688319546213119497764319,
	1.000000000000000000006776263578045189097995298741556686206,
	1.000000000000000000001694065894509799165406492747124861940,
	1.000000000000000000000423516473627283334786227048335793441,
	1.000000000000000000000105879118406802338522650015392383985,
	1.000000000000000000000026469779601698529611341166842038716,
	1.000000000000000000000006617444900424404067355245332308220,
	1.000000000000000000000001654361225106075646229923677181049,
	1.000000000000000000000000413590306276516092600938245550814,
	1.000000000000000000000000103397576569128709932840955917459,
	1.000000000000000000000000025849394142282142681277617708450,
	1.000000000000000000000000006462348535570531803438002161122,
	1.000000000000000000000000001615587133892632521206011405705,
	1.000000000000000000000000000403896783473158082562226281299,
	1.000000000000000000000000000100974195868289515336192507001,
	1.000000000000000000000000000025243548967072378244674341938,
	1.000000000000000000000000000006310887241768094495682609394,
	1.000000000000000000000000000001577721810442023616644432783,
	1.000000000000000000000000000000394430452610505903352639355,
	1.000000000000000000000000000000098607613152626475748329968,
	1.000000000000000000000000000000024651903288156618927101395,
	1.000000000000000000000000000000006162975822039154730666338,
	1.000000000000000000000000000000001540743955509788682543361,
	1.000000000000000000000000000000000385185988877447170622149,
	1.000000000000000000000000000000000096296497219361792654016
]

var _$even_nonnegative_integers_414=[
	-0.5,
	1.644934066848226436472415166646025189218949901206798437735,
	1.082323233711138191516003696541167902774750951918726907682,
	1.017343061984449139714517929790920527901817490032853561842,
	1.004077356197944339378685238508652465258960790649850020329,
	1.000994575127818085337145958900319017006019531564477517257,
	1.000246086553308048298637998047739670960416088458003404533,
	1.000061248135058704829258545105135333747481696169154549482,
	1.000015282259408651871732571487636722023237388990471531153,
	1.000003817293264999839856461644621939730454697218953331143,
	1.000000953962033872796113152038683449345943794187410595750,
	1.000000238450502727732990003648186752994935041821779658269,
	1.000000059608189051259479612440207935801227503918837302795,
	1.000000014901554828365041234658506630698628864788167885910,
	1.000000003725334024788457054819204018402423232893059295811,
	1.000000000931327432419668182871764735021219813567955136816,
	1.000000000232831183367650549200145597594049502482982284530,
	1.000000000058207720879027008892436859891063054173122604617,
	1.000000000014551921891041984235929632245318420983808894124,
	1.000000000003637979547378651190237236355873273512646028384,
	1.000000000000909494784026388928253311838694908753860000990,
	1.000000000000227373684582465251522682157797869121382982198,
	1.000000000000056843419876275856092771829675240685530571588,
	1.000000000000014210854828031606769834307141739537678698605,
	1.000000000000003552713691337113673298469534059342992145655,
	1.000000000000000888178421093081590309609138639138632560887,
	1.000000000000000222044605079804198399932009420465396423665,
	1.000000000000000055511151248454812437237365905094302816723
]

var _$bernoulli_413=[1.00000000000000000000000000000000000000000,
0.166666666666666666666666666666666666666667,
-0.0333333333333333333333333333333333333333333,
0.0238095238095238095238095238095238095238095,
-0.0333333333333333333333333333333333333333333,
0.0757575757575757575757575757575757575757576,
-0.253113553113553113553113553113553113553114,
1.16666666666666666666666666666666666666667,
-7.09215686274509803921568627450980392156863,
54.9711779448621553884711779448621553884712,
-529.124242424242424242424242424242424242424,
6192.12318840579710144927536231884057971014,
-86580.2531135531135531135531135531135531136,
1.42551716666666666666666666666666666666667e6,
-2.72982310678160919540229885057471264367816e7,
6.01580873900642368384303868174835916771401e8,
-1.51163157670921568627450980392156862745098e10,
4.29614643061166666666666666666666666666667e11,
-1.37116552050883327721590879485616327721591e13,
4.88332318973593166666666666666666666666667e14,
-1.92965793419400681486326681448632668144863e16,
8.41693047573682615000553709856035437430786e17,
-4.03380718540594554130768115942028985507246e19,
2.11507486380819916056014539007092198581560e21,
-1.20866265222965259346027311937082525317819e23,
7.50086674607696436685572007575757575757576e24,
-5.03877810148106891413789303052201257861635e26,
3.65287764848181233351104308429711779448622e28,
-2.84987693024508822262691464329106781609195e30,
2.38654274996836276446459819192192149717514e32,
-2.13999492572253336658107447651910973926742e34,
2.05009757234780975699217330956723102516667e36,
-2.09380059113463784090951852900279701847092e38,
2.27526964884635155596492603527692645814700e40,
-2.62577102862395760473030497361582020814490e42,
3.21250821027180325182047923042649852435219e44,
-4.15982781667947109139170744952623589366896e46,
5.69206954820352800238834562191210586444805e48,
-8.21836294197845756922906534686173330145509e50,
1.25029043271669930167323398297028955241772e53,
-2.00155832332483702749253291988132987687242e55,
3.36749829153643742333966769033387530162196e57,
-5.94709705031354477186604968440515408405791e59,
1.10119103236279775595641307904376916046305e62,
-2.13552595452535011886583850190410656789733e64,
4.33288969866411924196166130593792062184514e66,
-9.18855282416693282262005552155018971389604e68,
2.03468967763290744934550279902200200659751e71,
-4.70038339580357310785752555350060606545967e73,
1.13180434454842492706751862577339342678904e76,
-2.83822495706937069592641563364817647382847e78,
7.40642489796788506297508271409209841768797e80,
-2.00964548027566044834656196727153631868673e83,
5.66571700508059414457193460305193569614195e85,
-1.65845111541362169158237133743199123014950e88,
5.03688599504923774192894219151801548124424e90,
-1.58614682376581863693634015729664387827410e93,
5.17567436175456269840732406825071225612408e95,
-1.74889218402171173396900258776181591451415e98,
6.11605199949521852558245252642641677807677e100,
-2.21227769127078349422883234567129324455732e103,
8.27227767987709698542210624599845957312047e105,
-3.19589251114157095835916343691808148735263e108,
1.27500822233877929823100243029266798669572e111,
-5.25009230867741338994028246245651754469199e113,
2.23018178942416252098692981988387281437383e116,
-9.76845219309552044386335133989802393011669e118,
4.40983619784529542722726228748131691918758e121,
-2.05085708864640888397293377275830154864566e124,
9.82144332797912771075729696020975210414919e126,
-4.84126007982088805087891967099634127611305e129,
2.45530888014809826097834674040886903996737e132,
-1.28069268040847475487825132786017857218118e135,
6.86761671046685811921018885984644004360924e137,
-3.78464685819691046949789954163795568144895e140,
2.14261012506652915508713231351482720966602e143,
-1.24567271371836950070196429616376072194583e146,
7.43457875510001525436796683940520613117807e148,
-4.55357953046417048940633332233212748767721e151,
2.86121128168588683453638472510172325229190e154,
-1.84377235520338697276882026536287854875414e157,
1.21811545362210466995013165065995213558174e160,
-8.24821871853141215484818457296893447301419e162,
5.72258779378329433296516498142978615918685e165,
-4.06685305250591047267679693831158655602196e168,
2.95960920646420500628752695815851870426379e171,
-2.20495225651894575090311752273445984836379e174,
1.68125970728895998058311525151360665754464e177,
-1.31167362135569576486452806355817153004431e180,
1.04678940094780380821832853929823089643829e183,
-8.54328935788337077185982546299082774593270e185,
7.12878213224865423522884066771438224721245e188,
-6.08029314555358993000847118686477458461988e191,
5.29967764248499239300942910043247266228490e194,
-4.71942591687458626443646229013379911103761e197,
4.29284137914029810894168296541074669045521e200,
-3.98767449682322074434477655542938795106651e203,
3.78197804193588827138944181161393327898220e206,
-3.66142336836811912436858082151197348755196e209,
3.61760902723728623488554609298914089477541e212,
-3.64707726451913543621383088655499449048682e215,
3.75087554364544090983452410104814189306842e218,
-3.93458672964390282694891288533713429355657e221,
4.20882111481900820046571171111494898242731e224,
-4.59022962206179186559802940573325591059371e227,
5.10317257726295759279198185106496768539760e230,
-5.78227623036569554015377271242917142512200e233,
6.67624821678358810322637794412809363451080e236,
-7.85353076444504163225916259639312444428230e239,
9.41068940670587255245443288258762485293948e242,
-1.14849338734651839938498599206805592548354e246,
1.42729587428487856771416320087122499897180e249,
-1.80595595869093090142285728117654560926719e252,
2.32615353076608052161297985184708876161736e255,
-3.04957517154995947681942819261542593785327e258,
4.06858060764339734424012124124937318633684e261,
-5.52310313219743616252320044093186392324280e264,
7.62772793964343924869949690204961215533859e267,
-1.07155711196978863132793524001065396932667e271,
1.53102008959691884453440916153355334355847e274,
-2.22448916821798346676602348865048510824835e277,
3.28626791906901391668189736436895275365183e280,
-4.93559289559603449020711938191575963496999e283,
7.53495712008325067212266049779283956727824e286,
-1.16914851545841777278088924731655041783900e290,
1.84352614678389394126646201597702232396492e293,
-2.95368261729680829728014917350525183485207e296,
4.80793212775015697668878704043264072227967e299,
-7.95021250458852528538243631671158693036798e302,
1.33527841873546338750122832017820518292039e306]

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_417( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.2433929443359375;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len
		s2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_417 = __evalrational_417;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_418( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return 0.5772156649015329;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len
		s2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_418 = __evalrational_418;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_419( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.053725830002359504;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len
		s2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_419 = __evalrational_419;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_420( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -2.497101906022594;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len
		s2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_420 = __evalrational_420;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_421( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -4.785580284951356;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len
		s2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_421 = __evalrational_421;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_422( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -10.39489505733089;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len
		s2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_422 = __evalrational_422;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInteger_128 = require( '@stdlib/math/base/assert/is-integer' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$FLOAT64_SQRT_EPSILON_113 = require( '@stdlib/constants/math/float64-sqrt-eps' ); */;
/* removed: var _$LN_SQRT_TWO_PI_97 = require( '@stdlib/constants/math/float64-ln-sqrt-two-pi' ); */;
/* removed: var _$odd_positive_integers_416 = require( './odd_positive_integers.json' ); */;
/* removed: var _$even_nonnegative_integers_414 = require( './even_nonnegative_integers.json' ); */;
/* removed: var _$bernoulli_413 = require( './bernoulli.json' ); */;
/* removed: var _$evalrational_417 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_418 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_419 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_420 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_421 = require( './rational_p5q5.js' ); */;
/* removed: var _$evalrational_422 = require( './rational_p6q6.js' ); */;


// VARIABLES //

var MAX_BERNOULLI_2N = 129;
var __MAX_FACTORIAL_423 = 170; // TODO: consider making external constant
var __MAX_LN_423 = 709; // TODO: consider making external constant
var __Y1_423 = 1.2433929443359375;
var __Y3_423 = 0.6986598968505859375;


// MAIN //

/**
* Evaluates the Riemann zeta function.
*
* ## Method
*
* 1.  First, we use the reflection formula
*
*     ```tex
*     \zeta(1-s) = 2 \sin\biggl(\frac{\pi(1-s)}{2}\biggr)(2\pi^{-s})\Gamma(s)\zeta(s)
*     ```
*
*     to make \\(s\\) positive.
*
* 2.  For \\(s \in (0,1)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = \frac{C + \operatorname{R}(1-s) - s}{1-s}
*     ```
*
*     with rational approximation \\(\operatorname{R}(1-z)\\) and constant \\(C\\).
*
* 3.  For \\(s \in (1,4)\\), we use the approximation
*
*     ```tex
*     \zeta(s) = C + \operatorname{R}(s-n) + \frac{1}{s-1}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\), constant \\(C\\), and integer \\(n\\).
*
* 4.  For \\(s > 4\\), we use the approximation
*
*     ```tex
*     \zeta(s) = 1 + e^{\operatorname{R}(z-n)}
*     ```
*
*     with rational approximation \\(\operatorname{R}(z-n)\\) and integer \\(n\\).
*
* 5.  For negative odd integers, we use the closed form
*
*     ```tex
*     \zeta(-n) = \frac{(-1)^n}{n+1} B_{n+1}
*     ```
*
*     where \\(B_{n+1}\\) is a Bernoulli number.
*
* 6.  For negative even integers, we use the closed form
*
*     ```tex
*     \zeta(-2n) = 0
*     ```
*
* 7.  For nonnegative even integers, we could use the closed form
*
*     ```tex
*     \zeta(2n) = \frac{(-1)^{n-1}2^{2n-1}\pi^{2n}}{(2n)!} B_{2n}
*     ```
*
*     where \\(B_{2n}\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).
*
* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.
*
*
* ## Notes
*
* -   \\(\[\approx 1.5\mbox{e-}8, 1)\\)
*
*     -   max deviation: \\(2.020\mbox{e-}18\\)
*     -   expected error: \\(-2.020\mbox{e-}18\\)
*     -   max error found (double): \\(3.994987\mbox{e-}17\\)
*
* -   \\(\[1,2\]\\)
*
*     -   max deviation: \\(9.007\mbox{e-}20\\)
*     -   expected error: \\(9.007\mbox{e-}20\\)
*
* -   \\((2,4\]\\)
*
*     -   max deviation: \\(5.946\mbox{e-}22\\)
*     -   expected error: \\(-5.946\mbox{e-}22\\)
*
* -   \\((4,7\]\\)
*
*     -   max deviation: \\(2.955\mbox{e-}17\\)
*     -   expected error: \\(2.955\mbox{e-}17\\)
*     -   max error found (double): \\(2.009135\mbox{e-}16\\)
*
* -   \\((7,15)\\)
*
*     -   max deviation: \\(7.117\mbox{e-}16\\)
*     -   expected error: \\(7.117\mbox{e-}16\\)
*     -   max error found (double): \\(9.387771\mbox{e-}16\\)
*
* -   \\(\[15,36)\\)
*
*     -   max error (in interpolated form): \\(1.668\mbox{e-}17\\)
*     -   max error found (long double): \\(1.669714\mbox{e-}17\\)
*
*
* @param {number} s - input value
* @returns {number} function value
*
* @example
* var v = zeta( 1.1 );
* // returns ~10.584
*
* @example
* var v = zeta( -4.0 );
* // returns 0.0
*
* @example
* var v = zeta( 70.0 );
* // returns 1.0
*
* @example
* var v = zeta( 0.5 );
* // returns ~-1.46
*
* @example
* var v = zeta( 1.0 ); // pole
* // returns NaN
*
* @example
* var v = zeta( NaN );
* // returns NaN
*/
function zeta( s ) {
	var tmp;
	var sc;
	var as;
	var is;
	var r;
	var n;

	// Check for `NaN`:
	if ( _$isnan_130( s ) ) {
		return NaN;
	}
	// Check for a pole:
	if ( s === 1.0 ) {
		return NaN;
	}
	// Check for large value:
	if ( s >= 56.0 ) {
		return 1.0;
	}
	// Check for a closed form (integers):
	if ( _$isInteger_128( s ) ) {
		// Cast `s` to a 32-bit signed integer:
		is = s|0; // asm type annotation

		// Check that `s` does not exceed MAX_INT32:
		if ( is === s ) {
			if ( is < 0 ) {
				as = (-is)|0; // asm type annotation

				// Check if even negative integer:
				if ( (as&1) === 0 ) {
					return 0.0;
				}
				n = ( (as+1) / 2 )|0; // asm type annotation

				// Check if less than max Bernoulli number:
				if ( n <= MAX_BERNOULLI_2N ) {
					return -_$bernoulli_413[ n ] / (as+1.0);
				}
				// fall through...
			}
			// Check if even nonnegative integer:
			else if ( (is&1) === 0 ) {
				return _$even_nonnegative_integers_414[ is/2 ];
			}
			// Must be a odd positive integer:
			else {
				return _$odd_positive_integers_416[ (is-3)/2 ];
			}
		}
		// fall through...
	}
	if ( _$abs_147(s) < _$FLOAT64_SQRT_EPSILON_113 ) {
		return -0.5 - (_$LN_SQRT_TWO_PI_97 * s);
	}
	sc = 1.0 - s;
	if ( s < 0.0 ) {
		// Check if even negative integer:
		if ( _$floor_236(s/2.0) === s/2.0 ) {
			return 0.0;
		}
		// Swap `s` and `sc`:
		tmp = s;
		s = sc;
		sc = tmp;

		// Determine if computation will overflow:
		if ( s > __MAX_FACTORIAL_423 ) {
			tmp = _$sinpi_435( 0.5*sc ) * 2.0 * zeta( s );
			r = _$gammaln_305( s );
			r -= s * _$ln_376( _$TWO_PI_119 );
			if ( r > __MAX_LN_423 ) {
				return ( tmp < 0.0 ) ? _$FLOAT64_NINF_107 : _$FLOAT64_PINF_110;
			}
			return tmp * _$exp_225( r );
		}
		return _$sinpi_435( 0.5*sc ) * 2.0 * _$pow_396( _$TWO_PI_119, -s ) * _$gamma_247( s ) * zeta( s ); // eslint-disable-line max-len
	}
	if ( s < 1.0 ) {
		tmp = _$evalrational_417( sc );
		tmp -= __Y1_423;
		tmp += sc;
		tmp /= sc;
		return tmp;
	}
	if ( s <= 2.0 ) {
		sc = -sc;
		tmp = 1.0 / sc;
		return tmp + _$evalrational_418( sc );
	}
	if ( s <= 4.0 ) {
		tmp = __Y3_423 + ( 1.0 / (-sc) );
		return tmp + _$evalrational_419( s-2.0 );
	}
	if ( s <= 7.0 ) {
		tmp = _$evalrational_420( s-4.0 );
		return 1.0 + _$exp_225( tmp );
	}
	if ( s < 15.0 ) {
		tmp = _$evalrational_421( s-7.0 );
		return 1.0 + _$exp_225( tmp );
	}
	if ( s < 36.0 ) {
		tmp = _$evalrational_422( s-15.0 );
		return 1.0 + _$exp_225( tmp );
	}
	// s < 56
	return 1.0 + _$pow_396( 2.0, -s );
}


// EXPORTS //

var _$zeta_423 = zeta;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the Riemann zeta function.
*
* @module @stdlib/math/base/special/riemann-zeta
*
* @example
* var zeta = require( '@stdlib/math/base/special/riemann-zeta' );
*
* var v = zeta( 1.1 );
* // returns ~10.584
*
* v = zeta( -4.0 );
* // returns 0.0
*
* v = zeta( 70.0 );
* // returns 1.0
*
* v = zeta( 0.5 );
* // returns ~-1.46
*
* v = zeta( 1.0 ); // pole
* // returns NaN
*
* v = zeta( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$zeta_423 = require( './zeta.js' ); */;


// EXPORTS //

var _$zeta_415 = _$zeta_423;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$zeta_415 = require( '@stdlib/math/base/special/riemann-zeta' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var SKEWNESS = 12.0 * _$sqrt_437( 6.0 ) * _$zeta_415( 3.0 ) / ( _$PI_109*_$PI_109*_$PI_109 );


// MAIN //

/**
* Returns the skewness for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~1.14
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_1064( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return SKEWNESS;
}


// EXPORTS //

var _$skewness_1064 = __skewness_1064;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution skewness.
*
* @module @stdlib/stats/base/dists/gumbel/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/gumbel/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~1.14
*
* y = skewness( 4.0, 2.0 );
* // returns ~1.14
*/

// MODULES //

/* removed: var _$skewness_1064 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1063 = _$skewness_1064;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var SQRT6 = _$sqrt_437( 6.0 );


// MAIN //

/**
* Returns the standard deviation for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.565
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1066( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( _$PI_109 / SQRT6 ) * beta;
}


// EXPORTS //

var _$stdev_1066 = __stdev_1066;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution standard deviation.
*
* @module @stdlib/stats/base/dists/gumbel/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/gumbel/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.283
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.565
*/

// MODULES //

/* removed: var _$stdev_1066 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1065 = _$stdev_1066;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns the variance for a Gumbel distribution with location `mu` and scale `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~6.58
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1068( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( _$PI_SQUARED_108 / 6.0 ) * beta * beta;
}


// EXPORTS //

var _$variance_1068 = __variance_1068;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution variance.
*
* @module @stdlib/stats/base/dists/gumbel/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/gumbel/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~1.645
*
* y = variance( 4.0, 2.0 );
* // returns ~6.58
*/

// MODULES //

/* removed: var _$variance_1068 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1067 = _$variance_1068;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
*
* @example
* var y = logcdf( -2.0, 0.0, 3.0 );
* // returns ~-1.948
*
* @example
* var y = logcdf( 0.0, 0.0, 1.0 );
* // returns ~-1.0
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function __logcdf_1044( x, mu, beta ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / beta;
	return -_$exp_225( -z );
}


// EXPORTS //

var _$logcdf_1044 = __logcdf_1044;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 3.0 );
*
* var y = logcdf( 10.0 );
* // returns ~-0.036
*
* y = logcdf( -2.0 );
* // returns ~-1.948
*/
function __factory_1042( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of CDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / beta;
		return -_$exp_225( -z );
	}
}


// EXPORTS //

var _$factory_1042 = __factory_1042;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution logarithm of the cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/gumbel/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/gumbel/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.036
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-1
*
* var myLCDF = logcdf.factory( 2.0, 3.0 );
* y = myLCDF( 10.0 );
* // returns ~-0.069
*
* y = myLCDF( 2.0 );
* // returns ~-1
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1044 = require( './logcdf.js' ); */;
/* removed: var _$factory_1042 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1044, 'factory', _$factory_1042 );


// EXPORTS //

var _$logcdf_1043 = _$logcdf_1044;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logarithm of PDF
*
* @example
* var y = logpdf( 0.0, 0.0, 2.0 );
* // returns ~-1.693
*
* @example
* var y = logpdf( 0.0, 0.0, 1.0 );
* // returns ~-1.0
*
* @example
* var y = logpdf( 1.0, 3.0, 2.0 );
* // returns ~-2.411
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logpdf_1047( x, mu, beta ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return -z - _$exp_225( -z ) - _$ln_376( beta );
}


// EXPORTS //

var _$logpdf_1047 = __logpdf_1047;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 2.0 );
* var y = logpdf( 0.0 );
* // returns ~-1.693
*/
function __factory_1045( mu, beta ) {
	var lbeta;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	lbeta = _$ln_376( beta );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_107 ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return -z - _$exp_225( -z ) - lbeta;
	}
}


// EXPORTS //

var _$factory_1045 = __factory_1045;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/gumbel/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/gumbel/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.137
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-1.693
*
* y = mylogpdf( 12.0 );
* // returns ~-2.064
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1047 = require( './logpdf.js' ); */;
/* removed: var _$factory_1045 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1047, 'factory', _$factory_1045 );


// EXPORTS //

var _$logpdf_1046 = _$logpdf_1047;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Gumbel distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
*
* @example
* var y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Non-positive scale parameter:
* var y = mgf( 0.0, 0.0, -1.0 );
* // returns NaN
*/
function __mgf_1054( t, mu, beta ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0 ||
		t >= 1.0/beta
	) {
		return NaN;
	}
	return _$gamma_247( 1.0 - (beta * t) ) * _$exp_225( mu * t );
}


// EXPORTS //

var _$mgf_1054 = __mgf_1054;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Gumbel distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 3.0 );
*
* var y = mgf( 0.2 );
* // returns ~2.218
*
* y = mgf( -1.0 );
* // returns 6.0
*/
function __factory_1052( mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Gumbel distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= 1.0/beta ) {
			return NaN;
		}
		return _$gamma_247( 1.0 - (beta * t) ) * _$exp_225( mu * t );
	}
}


// EXPORTS //

var _$factory_1052 = __factory_1052;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Gumbel distribution.
*
* @module @stdlib/stats/base/dists/gumbel/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/gumbel/mgf' );
*
* var y = mgf( -1.0, 0.0, 3.0 );
* // returns 6.0
*
* y = mgf( 0.1, 0.0, 3.0 );
* // returns ~1.298
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* var myMGF = mgf.factory( 0.0, 3.0 );
*
* y = myMGF( -1.5 );
* // returns ~52.343
*
* y = myMGF( -1.0 );
* // returns 6.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1054 = require( './mgf.js' ); */;
/* removed: var _$factory_1052 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1054, 'factory', _$factory_1052 );


// EXPORTS //

var _$mgf_1053 = _$mgf_1054;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.0, 0.0, 2.0 );
* // returns ~0.184
*
* @example
* var y = pdf( 0.0, 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = pdf( 1.0, 3.0, 2.0 );
* // returns ~0.09
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __pdf_1059( x, mu, beta ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return 0.0;
	}
	z = ( x - mu ) / beta;
	return ( 1.0 / beta ) * _$exp_225( -z - _$exp_225( -z ) );
}


// EXPORTS //

var _$pdf_1059 = __pdf_1059;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns ~0.0237
*
* y = pdf( 3.0 );
* // returns ~0.159
*/
function __factory_1057( mu, beta ) {
	if ( _$isnan_130( mu ) || _$isnan_130( beta ) || beta <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Gumbel distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_107 ) {
			return 0.0;
		}
		z = ( x - mu ) / beta;
		return ( 1.0 / beta ) * _$exp_225( -z - _$exp_225( -z ) );
	}
}


// EXPORTS //

var _$factory_1057 = __factory_1057;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/gumbel/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/gumbel/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.118
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.184
*
* y = myPDF( 12.0 );
* // returns ~0.127
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1059 = require( './pdf.js' ); */;
/* removed: var _$factory_1057 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1059, 'factory', _$factory_1057 );


// EXPORTS //

var _$pdf_1058 = _$pdf_1059;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.5
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~4.733
*
* @example
* var y = quantile( 0.5, 4.0, 4.0 );
* // returns ~5.466
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1062( p, mu, beta ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( beta ) ||
		_$isnan_130( p ) ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return mu - ( beta * _$ln_376( -_$ln_376( p ) ) );
}


// EXPORTS //

var _$quantile_1062 = __quantile_1062;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.0, 1.0 );
* var y = quantile( 0.2 );
* // returns ~-0.476
*/
function __factory_1060( mu, beta ) {
	if ( _$isnan_130( mu ) || _$isnan_130( beta ) || beta <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Gumbel distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - (beta * _$ln_376( -_$ln_376( p ) ));
	}
}


// EXPORTS //

var _$factory_1060 = __factory_1060;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution quantile function.
*
* @module @stdlib/stats/base/dists/gumbel/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/gumbel/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.4999
*
* var myQuantile = quantile.factory( 8.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns ~8.733
*
* y = myQuantile( 0.7 );
* // returns ~10.062
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1062 = require( './quantile.js' ); */;
/* removed: var _$factory_1060 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1062, 'factory', _$factory_1060 );


// EXPORTS //

var _$quantile_1061 = _$quantile_1062;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1036 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1036 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1039 = require( '@stdlib/stats/base/dists/gumbel/entropy' ); */;
/* removed: var _$kurtosis_1040 = require( '@stdlib/stats/base/dists/gumbel/kurtosis' ); */;
/* removed: var _$mean_1048 = require( '@stdlib/stats/base/dists/gumbel/mean' ); */;
/* removed: var _$median_1050 = require( '@stdlib/stats/base/dists/gumbel/median' ); */;
/* removed: var _$mode_1055 = require( '@stdlib/stats/base/dists/gumbel/mode' ); */;
/* removed: var _$skewness_1063 = require( '@stdlib/stats/base/dists/gumbel/skewness' ); */;
/* removed: var _$stdev_1065 = require( '@stdlib/stats/base/dists/gumbel/stdev' ); */;
/* removed: var _$variance_1067 = require( '@stdlib/stats/base/dists/gumbel/variance' ); */;
/* removed: var _$cdf_1035 = require( '@stdlib/stats/base/dists/gumbel/cdf' ); */;
/* removed: var _$logcdf_1043 = require( '@stdlib/stats/base/dists/gumbel/logcdf' ); */;
/* removed: var _$logpdf_1046 = require( '@stdlib/stats/base/dists/gumbel/logpdf' ); */;
/* removed: var _$mgf_1053 = require( '@stdlib/stats/base/dists/gumbel/mgf' ); */;
/* removed: var _$pdf_1058 = require( '@stdlib/stats/base/dists/gumbel/pdf' ); */;
/* removed: var _$quantile_1061 = require( '@stdlib/stats/base/dists/gumbel/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function gumbelCDF( x ) {
	return _$cdf_1035( x, this.mu, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function gumbelLogCDF( x ) {
	return _$logcdf_1043( x, this.mu, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function gumbelLogPDF( x ) {
	return _$logpdf_1046( x, this.mu, this.beta );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function gumbelMGF( t ) {
	return _$mgf_1053( t, this.mu, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function gumbelPDF( x ) {
	return _$pdf_1058( x, this.mu, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function gumbelQuantile( p ) {
	return _$quantile_1061( p, this.mu, this.beta );
}


// MAIN //

/**
* Gumbel distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `beta` must be a positive number
* @returns {Gumbel} distribution instance
*
* @example
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns ~0.295
*
* var mu = gumbel.mean;
* // returns ~1.577
*/
function Gumbel() {
	var beta;
	var mu;
	if ( !(this instanceof Gumbel) ) {
		if ( arguments.length === 0 ) {
			return new Gumbel();
		}
		return new Gumbel( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !__isNumber_1036( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1036( beta ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		mu = 0.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1036( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !__isPositive_1036( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Gumbel distribution differential entropy.
*
* @name entropy
* @memberof Gumbel.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.entropy;
* // returns ~4.062
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'entropy', function get() {
	return _$entropy_1039( this.mu, this.beta );
});

/**
* Gumbel distribution excess kurtosis.
*
* @name kurtosis
* @memberof Gumbel.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.kurtosis;
* // returns 2.4
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'kurtosis', function get() {
	return _$kurtosis_1040( this.mu, this.beta );
});

/**
* Gumbel distribution expected value.
*
* @name mean
* @memberof Gumbel.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mean;
* // returns ~10.927
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'mean', function get() {
	return _$mean_1048( this.mu, this.beta );
});

/**
* Gumbel distribution median.
*
* @name median
* @memberof Gumbel.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.median;
* // returns ~8.398
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'median', function get() {
	return _$median_1050( this.mu, this.beta );
});

/**
* Gumbel distribution mode.
*
* @name mode
* @memberof Gumbel.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'mode', function get() {
	return _$mode_1055( this.mu, this.beta );
});

/**
* Gumbel distribution skewness.
*
* @name skewness
* @memberof Gumbel.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.skewness;
* // returns ~1.14
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'skewness', function get() {
	return _$skewness_1063( this.mu, this.beta );
});

/**
* Gumbel distribution standard deviation.
*
* @name stdev
* @memberof Gumbel.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.stdev;
* // returns ~15.39
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'stdev', function get() {
	return _$stdev_1065( this.mu, this.beta );
});

/**
* Gumbel distribution variance.
*
* @name variance
* @memberof Gumbel.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var gumbel = new Gumbel( 4.0, 12.0 );
*
* var v = gumbel.variance;
* // returns ~236.87
*/
_$setNonEnumerableReadOnlyAccessor_1601( Gumbel.prototype, 'variance', function get() {
	return _$variance_1067( this.mu, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.cdf( 0.5 );
* // returns ~0.233
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'cdf', gumbelCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logcdf( 0.8 );
* // returns ~-1.35
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'logcdf', gumbelLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.logpdf( 0.8 );
* // returns ~-2.436
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'logpdf', gumbelLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.mgf( 0.2 );
* // returns ~6.849
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'mgf', gumbelMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Gumbel.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.pdf( 0.8 );
* // returns ~0.087
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'pdf', gumbelPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Gumbel.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var gumbel = new Gumbel( 2.0, 4.0 );
*
* var v = gumbel.quantile( 0.5 );
* // returns ~3.466
*/
_$setNonEnumerableReadOnly_1603( Gumbel.prototype, 'quantile', gumbelQuantile );


// EXPORTS //

var _$Gumbel_1036 = Gumbel;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Gumbel distribution constructor.
*
* @module @stdlib/stats/base/dists/gumbel/ctor
*
* @example
* var Gumbel = require( '@stdlib/stats/base/dists/gumbel/ctor' );
*
* var gumbel = new Gumbel( 1.0, 1.0 );
*
* var y = gumbel.cdf( 0.8 );
* // returns ~0.295
*
* var mean = gumbel.mean;
* // returns ~1.578
*/

// MODULES //

/* removed: var _$Gumbel_1036 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1037 = _$Gumbel_1036;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Tests if a finite double-precision floating-point number is a negative integer.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is a negative integer
*
* @example
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* @example
* var bool = isNegativeInteger( 0.0 );
* // returns false
*
* @example
* var bool = isNegativeInteger( 10.0 );
* // returns false
*/
function isNegativeInteger( x ) {
	return (_$floor_236(x) === x && x < 0.0);
}


// EXPORTS //

var _$isNegativeInteger_133 = isNegativeInteger;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a finite double-precision floating-point number is a negative integer.
*
* @module @stdlib/math/base/assert/is-negative-integer
*
* @example
* var isNegativeInteger = require( '@stdlib/math/base/assert/is-negative-integer' );
*
* var bool = isNegativeInteger( -1.0 );
* // returns true
*
* bool = isNegativeInteger( 0.0 );
* // returns false
*
* bool = isNegativeInteger( 10.0 );
* // returns false
*/

// MODULES //

/* removed: var _$isNegativeInteger_133 = require( './is_negative_integer.js' ); */;


// EXPORTS //

var _$isNegativeInteger_132 = _$isNegativeInteger_133;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNegativeInteger_132 = require( '@stdlib/math/base/assert/is-negative-integer' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the factorial of `x`.
*
* @param {number} x - input value
* @returns {number} natural logarithm of factorial of `x`
*
* @example
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* @example
* var v = factorialln( 2.4 );
* // returns ~1.092
*
* @example
* var v = factorialln( -1.0 );
* // returns NaN
*
* @example
* var v = factorialln( -1.5 );
* // returns ~1.266
*
* @example
* var v = factorialln( NaN );
* // returns NaN
*/
function factorialln( x ) {
	if ( _$isNegativeInteger_132( x ) ) {
		return NaN;
	}
	return _$gammaln_305( x + 1.0 );
}


// EXPORTS //

var _$factorialln_233 = factorialln;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the factorial function.
*
* @module @stdlib/math/base/special/factorialln
*
* @example
* var factorialln = require( '@stdlib/math/base/special/factorialln' );
*
* var v = factorialln( 3.0 );
* // returns ~1.792
*
* v = factorialln( 2.4 );
* // returns ~1.092
*
* v = factorialln( -1.0 );
* // returns NaN
*
* v = factorialln( -1.5 );
* // returns ~1.266
*
* v = factorialln( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$factorialln_233 = require( './factorialln.js' ); */;


// EXPORTS //

var _$factorialln_234 = _$factorialln_233;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
*
* @example
* var y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
*
* @example
* var y = pmf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 5, 1.5, 2 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function __pmf_1086( x, N, K, n ) {
	var ldenom;
	var lnum;
	var lpmf;
	var maxs;
	var mins;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	mins = _$max_388( 0, n + K - N );
	maxs = _$min_392( K, n );
	if (
		_$isNonNegativeInteger_136( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = _$factorialln_234( n ) + _$factorialln_234( K ) + _$factorialln_234( N - n ) + _$factorialln_234( N - K );
		ldenom = _$factorialln_234( N ) + _$factorialln_234( x ) + _$factorialln_234( n - x );
		ldenom += _$factorialln_234( K - x ) + _$factorialln_234( N - K + x - n );
		lpmf = lnum - ldenom;
		return _$exp_225( lpmf );
	}
	return 0.0;
}


// EXPORTS //

var _$pmf_1086 = __pmf_1086;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} PMF
*
* @example
* var mypmf = factory( 30, 20, 5 );
* var y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/
function __factory_1084( N, K, n ) {
	var maxs;
	var mins;
	if (
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return _$constantFunction_1600( NaN );
	}

	mins = _$max_388( 0, n + K - N );
	maxs = _$min_392( K, n );
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*/
	function pmf( x ) {
		var ldenom;
		var lnum;
		var lpmf;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if (
			_$isNonNegativeInteger_136( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = _$factorialln_234( n ) + _$factorialln_234( K ) + _$factorialln_234( N - n ) + _$factorialln_234( N - K );
			ldenom = _$factorialln_234( N ) + _$factorialln_234( x ) + _$factorialln_234( n - x );
			ldenom += _$factorialln_234( K - x ) + _$factorialln_234( N - K + x - n );
			lpmf = lnum - ldenom;
			return _$exp_225( lpmf );
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1084 = __factory_1084;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/hypergeometric/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/hypergeometric/pmf' );
*
* var y = pmf( 1.0, 8, 4, 2 );
* // returns ~0.571
*
* y = pmf( 2.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* y = pmf( 1.5, 8, 4, 2 );
* // returns 0.0
*
* var mypmf = pmf.factory( 30, 20, 5 );
* y = mypmf( 4.0 );
* // returns ~0.34
*
* y = mypmf( 1.0 );
* // returns ~0.029
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_1086 = require( './pmf.js' ); */;
/* removed: var _$factory_1084 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_1086, 'factory', _$factory_1084 );


// EXPORTS //

var _$pmf_1085 = _$pmf_1086;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Computes the sum of elements in an array.
*
* @private
* @param {Array} arr - input array
* @returns {number} sum
*/
function sum( arr ) {
	var len;
	var s;
	var i;
	len = arr.length;
	s = 0;
	for ( i = 0; i < len; i++ ) {
		s += arr[ i ];
	}
	return s;
}


// EXPORTS //

var _$sum_1072 = sum;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$trunc_441 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$pmf_1085 = require( '@stdlib/stats/base/dists/hypergeometric/pmf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sum_1072 = require( './sum.js' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
*
* @example
* var y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
*
* @example
* var y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
*
* @example
* var y = cdf( 0, 8, 4, 2 );
* // returns ~0.214
*
* @example
* var y = cdf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 1.5, 2 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function __cdf_1069( x, N, K, n ) {
	var denom;
	var probs;
	var num;
	var ret;
	var i;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	x = _$trunc_441( x );
	if ( x < _$max_388( 0, n + K - N ) ) {
		return 0.0;
	}
	if ( x >= _$min_392( n, K ) ) {
		return 1.0;
	}

	probs = new Array( x + 1 );
	probs[ x ] = _$pmf_1085( x, N, K, n );

	/*
	* Use recurrence relation:
	* (x+1)( N - K - (n-x-1))P(X=x+1)=(K-x)(n-x)P(X=x)
	*/
	for ( i = x - 1; i >= 0; i-- ) {
		num = ( i + 1 ) * ( N - K - (n-i-1) );
		denom = ( K - i ) * ( n - i );
		probs[ i ] = ( num / denom ) * probs[ i + 1 ];
	}
	ret = _$sum_1072( probs );
	return _$min_392( ret, 1.0 );
}


// EXPORTS //

var _$cdf_1069 = __cdf_1069;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$trunc_441 = require( '@stdlib/math/base/special/trunc' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$pmf_1085 = require( '@stdlib/stats/base/dists/hypergeometric/pmf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$sum_1072 = require( './sum.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} CDF
*
* @example
* var mycdf = factory( 30, 20, 5 );
* var y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/
function __factory_1070( N, K, n ) {
	if (
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var denom;
		var probs;
		var num;
		var ret;
		var i;

		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		x = _$trunc_441( x );
		if ( x < _$max_388( 0, n + K - N ) ) {
			return 0.0;
		}
		if ( x >= _$min_392( n, K ) ) {
			return 1.0;
		}

		probs = new Array( x + 1 );
		probs[ x ] = _$pmf_1085( x, N, K, n );

		/*
		* Use recurrence relation:
		* (x+1)( N - K - (n-x-1) )P(X=x+1)=(K-x)(n-x)P(X=x)
		*/
		for ( i = x - 1; i >= 0; i-- ) {
			num = ( i + 1 ) * ( N - K - (n-i-1) );
			denom = ( K - i ) * ( n - i );
			probs[ i ] = ( num / denom ) * probs[ i + 1 ];
		}
		ret = _$sum_1072( probs );
		return _$min_392( ret, 1.0 );
	}
}


// EXPORTS //

var _$factory_1070 = __factory_1070;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/hypergeometric/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/hypergeometric/cdf' );
*
* var y = cdf( 1.0, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 1.5, 8, 4, 2 );
* // returns ~0.786
*
* y = cdf( 2.0, 8, 4, 2 );
* // returns 1.0
*
* y = cdf( 0.0, 8, 4, 2 );
* // returns ~0.214
*
* var mycdf = cdf.factory( 30, 20, 5 );
* y = mycdf( 4.0 );
* // returns ~0.891
*
* y = mycdf( 1.0 );
* // returns ~0.031
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1069 = require( './cdf.js' ); */;
/* removed: var _$factory_1070 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1069, 'factory', _$factory_1070 );


// EXPORTS //

var _$cdf_1071 = _$cdf_1069;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_57 = _$isInteger_42.isPrimitive;


// MAIN //

/**
* Tests if a value is a number primitive having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*/
function __isNonNegativeInteger_57( value ) {
	return (
		__isInteger_57( value ) &&
		value >= 0
	);
}


// EXPORTS //

var _$isNonNegativeInteger_57 = __isNonNegativeInteger_57;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var __isInteger_56 = _$isInteger_42.isObject;


// MAIN //

/**
* Tests if a value is a number object having a nonnegative integer value.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number object having a nonnegative integer value
*
* @example
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/
function __isNonNegativeInteger_56( value ) {
	return (
		__isInteger_56( value ) &&
		value.valueOf() >= 0
	);
}


// EXPORTS //

var _$isNonNegativeInteger_56 = __isNonNegativeInteger_56;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_57 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeInteger_56 = require( './object.js' ); */;


// MAIN //

/**
* Tests if a value is a nonnegative integer.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a nonnegative integer
*
* @example
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* @example
* var bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* @example
* var bool = isNonNegativeInteger( null );
* // returns false
*/
function __isNonNegativeInteger_55( value ) {
	return ( _$isNonNegativeInteger_57( value ) || _$isNonNegativeInteger_56( value ) );
}


// EXPORTS //

var _$isNonNegativeInteger_55 = __isNonNegativeInteger_55;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a nonnegative integer.
*
* @module @stdlib/assert/is-nonnegative-integer
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
*
* var bool = isNonNegativeInteger( 5.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 5.0 ) );
* // returns true
*
* bool = isNonNegativeInteger( -5.0 );
* // returns false
*
* bool = isNonNegativeInteger( 3.14 );
* // returns false
*
* bool = isNonNegativeInteger( null );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns true
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns false
*
* @example
* var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isObject;
*
* var bool = isNonNegativeInteger( 3.0 );
* // returns false
*
* bool = isNonNegativeInteger( new Number( 3.0 ) );
* // returns true
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$isNonNegativeInteger_55 = require( './main.js' ); */;
/* removed: var _$isNonNegativeInteger_57 = require( './primitive.js' ); */;
/* removed: var _$isNonNegativeInteger_56 = require( './object.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$isNonNegativeInteger_55, 'isPrimitive', _$isNonNegativeInteger_57 );
_$setNonEnumerableReadOnly_1603( _$isNonNegativeInteger_55, 'isObject', _$isNonNegativeInteger_56 );


// EXPORTS //

var _$isNonNegativeInteger_54 = _$isNonNegativeInteger_55;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
*
* @example
* var v = kurtosis( 4, 2, 2 );
* // returns 0.0
*
* @example
* var v = kurtosis( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = kurtosis( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = kurtosis( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = kurtosis( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, 10, NaN );
* // returns NaN
*/
function __kurtosis_1076( N, K, n ) {
	var p;
	var q;
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N-1 ) * ( N*N ) * ( ( N*(N+1) ) - ( 6*K*(N-K) ) - ( 6*n*(N-n) ) );
	p += 6 * n * K * ( N-K ) * ( N-n ) * ( (5*N) - 6 );
	q = n * K * ( N-K ) * ( N-n ) * ( N-2 ) * ( N-3 );
	return p / q;
}


// EXPORTS //

var _$kurtosis_1076 = __kurtosis_1076;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/hypergeometric/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/hypergeometric/kurtosis' );
*
* var v = kurtosis( 16, 11, 4 );
* // returns ~-0.326
*
* v = kurtosis( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$kurtosis_1076 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1075 = _$kurtosis_1076;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the expected value of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 16, 11, 4 );
* // returns 2.75
*
* @example
* var v = mean( 2, 1, 1 );
* // returns 0.5
*
* @example
* var v = mean( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = mean( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = mean( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = mean( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = mean( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = mean( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = mean( 20, 10, NaN );
* // returns NaN
*/
function __mean_1081( N, K, n ) {
	if (
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n )
	) {
		return NaN;
	}
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K / N );
}


// EXPORTS //

var _$mean_1081 = __mean_1081;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution expected value.
*
* @module @stdlib/stats/base/dists/hypergeometric/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/hypergeometric/mean' );
*
* var v = mean( 16, 11, 4 );
* // returns 2.75
*
* v = mean( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$mean_1081 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1080 = _$mean_1081;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the mode of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 16, 11, 4 );
* // returns 3
*
* @example
* var v = mode( 2, 1, 1 );
* // returns 1
*
* @example
* var v = mode( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = mode( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = mode( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = mode( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = mode( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = mode( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = mode( 20, 10, NaN );
* // returns NaN
*/
function __mode_1083( N, K, n ) {
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return _$floor_236( ( n+1 ) * ( K+1 ) / ( N+2 ) );
}


// EXPORTS //

var _$mode_1083 = __mode_1083;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution mode.
*
* @module @stdlib/stats/base/dists/hypergeometric/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/hypergeometric/mode' );
*
* var v = mode( 16, 11, 4 );
* // returns 3
*
* v = mode( 2, 1, 1 );
* // returns 1
*/

// MODULES //

/* removed: var _$mode_1083 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1082 = _$mode_1083;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the skewness of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} skewness
*
* @example
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
*
* @example
* var v = skewness( 4, 2, 2 );
* // returns 0.0
*
* @example
* var v = skewness( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = skewness( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = skewness( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = skewness( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = skewness( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = skewness( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = skewness( 20, 10, NaN );
* // returns NaN
*/
function __skewness_1091( N, K, n ) {
	var p;
	var q;
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	p = ( N - (2*K) ) * _$sqrt_437( N - 1 ) * ( N - (2*n) );
	q = _$sqrt_437( n * K * ( N-K ) * ( N-n ) ) * ( N - 2 );
	return p / q;
}


// EXPORTS //

var _$skewness_1091 = __skewness_1091;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution skewness.
*
* @module @stdlib/stats/base/dists/hypergeometric/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/hypergeometric/skewness' );
*
* var v = skewness( 16, 11, 4 );
* // returns ~-0.258
*
* v = skewness( 4, 2, 2 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1091 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1090 = _$skewness_1091;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
*
* @example
* var v = stdev( 2, 1, 1 );
* // returns 0.5
*
* @example
* var v = stdev( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = stdev( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = stdev( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = stdev( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = stdev( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = stdev( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = stdev( 20, 10, NaN );
* // returns NaN
*/
function __stdev_1093( N, K, n ) {
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return _$sqrt_437( n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) ) );
}


// EXPORTS //

var _$stdev_1093 = __stdev_1093;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution standard deviation.
*
* @module @stdlib/stats/base/dists/hypergeometric/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/hypergeometric/stdev' );
*
* var v = stdev( 16, 11, 4 );
* // returns ~0.829
*
* v = stdev( 2, 1, 1 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$stdev_1093 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1092 = _$stdev_1093;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance of a hypergeometric distribution.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 16, 11, 4 );
* // returns ~0.688
*
* @example
* var v = variance( 2, 1, 1 );
* // returns 0.25
*
* @example
* var v = variance( 10, 5, 12 );
* // returns NaN
*
* @example
* var v = variance( 10.3, 10, 4 );
* // returns NaN
*
* @example
* var v = variance( 10, 5.5, 4 );
* // returns NaN
*
* @example
* var v = variance( 10, 5, 4.5 );
* // returns NaN
*
* @example
* var v = variance( NaN, 10, 4 );
* // returns NaN
*
* @example
* var v = variance( 20, NaN, 4 );
* // returns NaN
*
* @example
* var v = variance( 20, 10, NaN );
* // returns NaN
*/
function __variance_1095( N, K, n ) {
	if (
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	return n * ( K/N ) * ( (N-K)/N ) * ( (N-n)/(N-1) );
}


// EXPORTS //

var _$variance_1095 = __variance_1095;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution variance.
*
* @module @stdlib/stats/base/dists/hypergeometric/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/hypergeometric/variance' );
*
* var v = variance( 16, 11, 4 );
* // returns ~0.688
*
* v = variance( 2, 1, 1 );
* // returns 0.25
*/

// MODULES //

/* removed: var _$variance_1095 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1094 = _$variance_1095;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {number} x - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 1.0, 8, 4, 2 );
* // returns ~-0.56
*
* @example
* var y = logpmf( 2.0, 8, 4, 2 );
* // returns ~-1.54
*
* @example
* var y = logpmf( 0.0, 8, 4, 2 );
* // returns ~-1.54
*
* @example
* var y = logpmf( 1.5, 8, 4, 2 );
* // returns -Infinity
*
* @example
* var y = logpmf( NaN, 10, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 10, NaN, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 10, 5, NaN );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10.5, 5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 5, 1.5, 2 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10, 5, -2.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 10, 5, 12 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 8, 3, 9 );
* // returns NaN
*/
function __logpmf_1079( x, N, K, n ) {
	var ldenom;
	var lnum;
	var maxs;
	var mins;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return NaN;
	}
	mins = _$max_388( 0, n + K - N );
	maxs = _$min_392( K, n );
	if (
		_$isNonNegativeInteger_136( x ) &&
		mins <= x &&
		x <= maxs
	) {
		lnum = _$factorialln_234( n ) + _$factorialln_234( K ) + _$factorialln_234( N - n ) + _$factorialln_234( N - K );
		ldenom = _$factorialln_234( N ) + _$factorialln_234( x ) + _$factorialln_234( n - x );
		ldenom += _$factorialln_234( K - x ) + _$factorialln_234( N - K + x - n );
		return lnum - ldenom;
	}
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpmf_1079 = __logpmf_1079;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K` and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} logPMF
*
* @example
* var mylogpmf = factory( 30, 20, 5 );
* var y = mylogpmf( 4.0 );
* // returns ~-1.079
*
* y = mylogpmf( 1.0 );
* // returns ~-3.524
*/
function __factory_1077( N, K, n ) {
	var maxs;
	var mins;
	if (
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return _$constantFunction_1600( NaN );
	}

	mins = _$max_388( 0, n + K - N );
	maxs = _$min_392( K, n );
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*/
	function logpmf( x ) {
		var ldenom;
		var lnum;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if (
			_$isNonNegativeInteger_136( x ) &&
			mins <= x &&
			x <= maxs
		) {
			lnum = _$factorialln_234( n ) + _$factorialln_234( K ) + _$factorialln_234( N - n ) + _$factorialln_234( N - K );
			ldenom = _$factorialln_234( N ) + _$factorialln_234( x ) + _$factorialln_234( n - x );
			ldenom += _$factorialln_234( K - x ) + _$factorialln_234( N - K + x - n );
			return lnum - ldenom;
		}
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_1077 = __factory_1077;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a hypergeometric distribution.
*
* @module @stdlib/stats/base/dists/hypergeometric/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/hypergeometric/logpmf' );
*
* var y = logpmf( 1.0, 8, 4, 2 );
* // returns ~-0.56
*
* y = logpmf( 2.0, 8, 4, 2 );
* // returns ~-1.54
*
* y = logpmf( 0.0, 8, 4, 2 );
* // returns ~-1.54
*
* y = logpmf( 1.5, 8, 4, 2 );
* // returns -Infinity
*
* var mylogpmf = logpmf.factory( 30, 20, 5 );
* y = mylogpmf( 4.0 );
* // returns ~-1.079
*
* y = mylogpmf( 1.0 );
* // returns ~-3.54
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_1079 = require( './logpmf.js' ); */;
/* removed: var _$factory_1077 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_1079, 'factory', _$factory_1077 );


// EXPORTS //

var _$logpmf_1078 = _$logpmf_1079;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$cdf_1071 = require( '@stdlib/stats/base/dists/hypergeometric/cdf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
*
* @example
* var y = quantile( 0.8, 60, 40, 20 );
* // returns 15
*
* @example
* var y = quantile( 0.5, 100, 10, 10 );
* // returns 1
*
* @example
* var y = quantile( 0.0, 100, 40, 20 );
* // returns 0
*
* @example
* var y = quantile( 1.0, 100, 40, 20 );
* // returns 20
*
* @example
* var y = quantile( NaN, 40, 20, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, NaN, 20, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 40, NaN, 10 );
* // returns NaN
*
* @example
* var y = quantile( 0.2, 40, 20, NaN );
* // returns NaN
*/
function __quantile_1089( p, N, K, n ) {
	var prob;
	var x;

	if (
		_$isnan_130( p ) ||
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( p === 0.0 ) {
		return _$max_388( 0, n + K - N );
	}
	if ( p === 1.0 ) {
		return _$min_392( n, K );
	}
	x = _$max_388( 0, n + K - N );
	while ( true ) {
		prob = _$cdf_1071( x, N, K, n );
		if ( prob > p ) {
			break;
		}
		x += 1;
	}
	return x;
}


// EXPORTS //

var _$quantile_1089 = __quantile_1089;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$cdf_1071 = require( '@stdlib/stats/base/dists/hypergeometric/cdf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.
*
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 100, 20, 10 );
* var y = quantile( 0.2 );
* // returns 1
*
* y = quantile( 0.9 );
* // returns 4
*/
function __factory_1087( N, K, n ) {
	if (
		_$isnan_130( N ) ||
		_$isnan_130( K ) ||
		_$isnan_130( n ) ||
		!_$isNonNegativeInteger_136( N ) ||
		!_$isNonNegativeInteger_136( K ) ||
		!_$isNonNegativeInteger_136( n ) ||
		N === _$FLOAT64_PINF_110 ||
		K === _$FLOAT64_PINF_110 ||
		K > N ||
		n > N
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a hypergeometric distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*/
	function quantile( p ) {
		var prob;
		var x;

		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return _$max_388( 0, n + K - N );
		}
		if ( p === 1.0 ) {
			return _$min_392( n, K );
		}
		x = _$max_388( 0, n + K - N );
		while ( true ) {
			prob = _$cdf_1071( x, N, K, n );
			if ( prob > p ) {
				break;
			}
			x += 1;
		}
		return x;
	}
}


// EXPORTS //

var _$factory_1087 = __factory_1087;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution quantile function.
*
* @module @stdlib/stats/base/dists/hypergeometric/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/hypergeometric/quantile' );
*
* var y = quantile( 0.4, 40, 20, 10 );
* // returns 5
*
* y = quantile( 0.8, 60, 40, 20 );
* // returns 15
*
* y = quantile( 0.5, 100, 10, 10 );
* // returns 1
*
* y = quantile( 0.0, 100, 40, 20 );
* // returns 0
*
* y = quantile( 1.0, 100, 40, 20 );
* // returns 20
*
* var myquantile = quantile.factory( 100, 20, 10 );
* y = myquantile( 0.2 );
* // returns 1
*
* y = myquantile( 0.9 );
* // returns 4
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1089 = require( './quantile.js' ); */;
/* removed: var _$factory_1087 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1089, 'factory', _$factory_1087 );


// EXPORTS //

var _$quantile_1088 = _$quantile_1089;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var __isNonNegativeInteger_1073 = _$isNonNegativeInteger_54.isPrimitive;
/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
/* removed: var _$kurtosis_1075 = require( '@stdlib/stats/base/dists/hypergeometric/kurtosis' ); */;
/* removed: var _$mean_1080 = require( '@stdlib/stats/base/dists/hypergeometric/mean' ); */;
/* removed: var _$mode_1082 = require( '@stdlib/stats/base/dists/hypergeometric/mode' ); */;
/* removed: var _$skewness_1090 = require( '@stdlib/stats/base/dists/hypergeometric/skewness' ); */;
/* removed: var _$stdev_1092 = require( '@stdlib/stats/base/dists/hypergeometric/stdev' ); */;
/* removed: var _$variance_1094 = require( '@stdlib/stats/base/dists/hypergeometric/variance' ); */;
/* removed: var _$cdf_1071 = require( '@stdlib/stats/base/dists/hypergeometric/cdf' ); */;
/* removed: var _$logpmf_1078 = require( '@stdlib/stats/base/dists/hypergeometric/logpmf' ); */;
/* removed: var _$pmf_1085 = require( '@stdlib/stats/base/dists/hypergeometric/pmf' ); */;
/* removed: var _$quantile_1088 = require( '@stdlib/stats/base/dists/hypergeometric/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function hypergeometricCDF( x ) {
	return _$cdf_1071( x, this.N, this.K, this.n );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricLogPMF( x ) {
	return _$logpmf_1078( x, this.N, this.K, this.n );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated PMF
*/
function hypergeometricPMF( x ) {
	return _$pmf_1085( x, this.N, this.K, this.n );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
*/
function hypergeometricQuantile( p ) {
	return _$quantile_1088( p, this.N, this.K, this.n );
}


// MAIN //

/**
* Hypergeometric distribution constructor.
*
* @constructor
* @param {NonNegativeInteger} N - population size
* @param {NonNegativeInteger} K - subpopulation size
* @param {NonNegativeInteger} n - number of draws
* @throws {TypeError} `N` must be a nonnegative integer
* @throws {TypeError} `K` must be a nonnegative integer
* @throws {TypeError} `n` must be a nonnegative integer
* @throws {RangeError} `K` must not exceed `N`
* @throws {RangeError} `n` must not exceed `N`
* @returns {Hypergeometric} distribution instance
*
* @example
* var hypergeometric = new Hypergeometric( 10, 5, 7 );
*
* var y = hypergeometric.cdf( 0.8 );
* // returns 0.0
*
* var v = hypergeometric.mode;
* // returns 4.0
*/
function Hypergeometric( N, K, n ) {
	if ( !(this instanceof Hypergeometric) ) {
		return new Hypergeometric( N, K, n );
	}
	if ( !__isNonNegativeInteger_1073( N ) ) {
		throw new TypeError( 'invalid argument. Population size `N` must be a nonnegative integer. Value: `' + N + '`' );
	}
	if ( !__isNonNegativeInteger_1073( K ) ) {
		throw new TypeError( 'invalid argument. Subpopulation size `K` must be a nonnegative integer. Value: `' + K + '`' );
	}
	if ( !__isNonNegativeInteger_1073( n ) ) {
		throw new TypeError( 'invalid argument. Number of draws `n` must be a nonnegative integer. Value: `' + n + '`' );
	}
	if ( K > N ) {
		throw new RangeError( 'invalid arguments. Subpopulation size `K` must be smaller than or equal to `N`.' );
	}
	if ( n > N ) {
		throw new RangeError( 'invalid arguments. Number of draws `n` must be smaller than or equal to `N`.' );
	}
	_$defineProperty_1606( this, 'N', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return N;
		},
		'set': function set( value ) {
			if ( !__isNonNegativeInteger_1073( value ) ) {
				throw new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );
			}
			if ( K > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `K`. Value: `' + value + '`' );
			}
			if ( n > value ) {
				throw new RangeError( 'invalid value. Must be larger than or equal to `n`. Value: `' + value + '`' );
			}
			N = value;
		}
	});
	_$defineProperty_1606( this, 'K', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return K;
		},
		'set': function set( value ) {
			if ( !__isNonNegativeInteger_1073( value ) ) {
				throw new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			K = value;
		}
	});
	_$defineProperty_1606( this, 'n', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return n;
		},
		'set': function set( value ) {
			if ( !__isNonNegativeInteger_1073( value ) ) {
				throw new TypeError( 'invalid value. Must be a nonnegative integer. Value: `' + value + '`' );
			}
			if ( value > N ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `N`. Value: `' + value + '`' );
			}
			n = value;
		}
	});
	return this;
}

/**
* Hypergeometric distribution excess kurtosis.
*
* @name kurtosis
* @memberof Hypergeometric.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.kurtosis;
* // returns ~-0.276
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'kurtosis', function get() {
	return _$kurtosis_1075( this.N, this.K, this.n );
});

/**
* Hypergeometric distribution expected value.
*
* @name mean
* @memberof Hypergeometric.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mean;
* // returns 3.75
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'mean', function get() {
	return _$mean_1080( this.N, this.K, this.n );
});

/**
* Hypergeometric distribution mode.
*
* @name mode
* @memberof Hypergeometric.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'mode', function get() {
	return _$mode_1082( this.N, this.K, this.n );
});

/**
* Hypergeometric distribution skewness.
*
* @name skewness
* @memberof Hypergeometric.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.skewness;
* // returns ~-0.323
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'skewness', function get() {
	return _$skewness_1090( this.N, this.K, this.n );
});

/**
* Hypergeometric distribution standard deviation.
*
* @name stdev
* @memberof Hypergeometric.prototype
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.stdev;
* // returns ~0.86
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'stdev', function get() {
	return _$stdev_1092( this.N, this.K, this.n );
});

/**
* Hypergeometric distribution variance.
*
* @name variance
* @memberof Hypergeometric.prototype
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var hypergeometric = new Hypergeometric( 20, 15, 5 );
*
* var v = hypergeometric.variance;
* // returns ~0.74
*/
_$setNonEnumerableReadOnlyAccessor_1601( Hypergeometric.prototype, 'variance', function get() {
	return _$variance_1094( this.N, this.K, this.n );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.cdf( 0.5 );
* // returns ~0.214
*/
_$setNonEnumerableReadOnly_1603( Hypergeometric.prototype, 'cdf', hypergeometricCDF );

/**
* Evaluates the natural logarithm of the probability density function (PMF).
*
* @name logpmf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.logpmf( 2.0 );
* // returns ~-1.54
*/
_$setNonEnumerableReadOnly_1603( Hypergeometric.prototype, 'logpmf', hypergeometricLogPMF );

/**
* Evaluates the probability density function (PMF).
*
* @name pmf
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.pmf( 2.0 );
* // returns ~0.214
*/
_$setNonEnumerableReadOnly_1603( Hypergeometric.prototype, 'pmf', hypergeometricPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Hypergeometric.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {NonNegativeInteger} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var hypergeometric = new Hypergeometric( 8, 2, 4 );
*
* var v = hypergeometric.quantile( 0.8 );
* // returns 2
*/
_$setNonEnumerableReadOnly_1603( Hypergeometric.prototype, 'quantile', hypergeometricQuantile );


// EXPORTS //

var _$Hypergeometric_1073 = Hypergeometric;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Hypergeometric distribution constructor.
*
* @module @stdlib/stats/base/dists/hypergeometric/ctor
*
* @example
* var Hypergeometric = require( '@stdlib/stats/base/dists/hypergeometric/ctor' );
*
* var hypergeometric = new Hypergeometric( 40, 10, 8 );
*
* var y = hypergeometric.cdf( 2.8 );
* // returns ~0.688
*
* var mode = hypergeometric.mode;
* // returns 2.0
*/

// MODULES //

/* removed: var _$Hypergeometric_1073 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1074 = _$Hypergeometric_1073;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.607
*
* @example
* var y = cdf( 2.0, 3.0, 1.0 );
* // returns ~0.986
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __cdf_1096( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return _$gammainc_263( beta / x, alpha, true, true );
}


// EXPORTS //

var _$cdf_1096 = __cdf_1096;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.809
*
* y = cdf( 2.0 );
* // returns ~0.96
*/
function __factory_1097( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0 ) {
			return 0;
		}
		return _$gammainc_263( beta / x, alpha, true, true );
	}
}


// EXPORTS //

var _$factory_1097 = __factory_1097;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/invgamma/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/invgamma/cdf' );
*
* var y = cdf( 1.0, 8.0, 3.0 );
* // returns ~0.988
*
* y = cdf( 0.0, 1.0, 1.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 2.0, 0.5 );
* y = mycdf( 0.5 );
* // returns ~0.736
*
* y = mycdf( 2.0 );
* // returns ~0.973
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1096 = require( './cdf.js' ); */;
/* removed: var _$factory_1097 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1096, 'factory', _$factory_1097 );


// EXPORTS //

var _$cdf_1098 = _$cdf_1096;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~1.996
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.922
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_1101( alpha, beta ) {
	var out;
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	out = alpha + _$ln_376( beta*_$gamma_247( alpha ) );
	out -= ( 1.0+alpha ) * _$digamma_185( alpha );
	return out;
}


// EXPORTS //

var _$entropy_1101 = __entropy_1101;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution differential entropy.
*
* @module @stdlib/stats/base/dists/invgamma/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/invgamma/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns ~2.154
*
* v = entropy( 4.0, 12.0 );
* // returns ~1.996
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.922
*/

// MODULES //

/* removed: var _$entropy_1101 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1102 = _$entropy_1101;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} kurtosis
*
* @example
* var v = kurtosis( 6.0, 1.0 );
* // returns 19.0
*
* @example
* var v = kurtosis( 5.0, 12.0 );
* // returns 42.0
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
*
* @example
* var v = kurtosis( 5.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( 6.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_1104( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 4.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return ( ( 30.0*alpha ) - 66.0 ) / ( ( alpha-3.0 ) * ( alpha-4.0 ) );
}


// EXPORTS //

var _$kurtosis_1104 = __kurtosis_1104;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/invgamma/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/invgamma/kurtosis' );
*
* var v = kurtosis( 7.0, 5.0 );
* // returns 12.0
*
* v = kurtosis( 6.0, 12.0 );
* // returns 19.0
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~8.7
*/

// MODULES //

/* removed: var _$kurtosis_1104 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1103 = _$kurtosis_1104;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 4.0
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~0.286
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_1109( alpha, beta ) {
	if ( alpha <= 1.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha - 1.0 );
}


// EXPORTS //

var _$mean_1109 = __mean_1109;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution expected value.
*
* @module @stdlib/stats/base/dists/invgamma/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/invgamma/mean' );
*
* var v = mean( 4.0, 12.0 );
* // returns 4.0
*
* v = mean( 8.0, 2.0 );
* // returns ~0.286
*/

// MODULES //

/* removed: var _$mean_1109 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1108 = _$mean_1109;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the mode of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns 2.4
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~0.222
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_1111( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( alpha + 1.0 );
}


// EXPORTS //

var _$mode_1111 = __mode_1111;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution mode.
*
* @module @stdlib/stats/base/dists/invgamma/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/invgamma/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.5
*
* v = mode( 4.0, 12.0 );
* // returns 2.4
*
* v = mode( 8.0, 2.0 );
* // returns ~0.222
*/

// MODULES //

/* removed: var _$mode_1111 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1110 = _$mode_1111;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammaincinv_288 = require( '@stdlib/math/base/special/gammaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~1.213
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~0.545
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Non-positive shape parameter:
* var y = quantile( 0.5, -1.0, 1.0 );
*
* @example
* // Non-positive rate parameter:
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_1117( p, alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		_$isnan_130( p ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return beta / _$gammaincinv_288( p, alpha, true );
}


// EXPORTS //

var _$quantile_1117 = __quantile_1117;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$gammaincinv_288 = require( '@stdlib/math/base/special/gammaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.2298
*
* y = quantile( 0.8 );
* // returns ~0.427
*/
function __factory_1115( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for an inverse gamma distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / _$gammaincinv_288( p, alpha, true );
	}
}


// EXPORTS //

var _$factory_1115 = __factory_1115;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution quantile function.
*
* @module @stdlib/stats/base/dists/invgamma/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/invgamma/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~4.481
*
* var myquantile = quantile.factory( 2.0, 2.0 );
* y = myquantile( 0.8 );
* // returns ~2.426
*
* y = myquantile( 0.4 );
* // returns ~0.989
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1117 = require( './quantile.js' ); */;
/* removed: var _$factory_1115 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1117, 'factory', _$factory_1115 );


// EXPORTS //

var _$quantile_1116 = _$quantile_1117;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.112
*
* @example
* var y = logpdf( 0.2, 1.0, 1.0 );
* // returns ~-1.781
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = logpdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __logpdf_1107( x, alpha, beta ) {
	var out;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	out = (alpha * _$ln_376( beta )) - _$gammaln_305( alpha );
	out -= (alpha + 1.0) * _$ln_376( x );
	out -= beta / x;
	return out;
}


// EXPORTS //

var _$logpdf_1107 = __logpdf_1107;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 3.0, 1.5 );
*
* var y = logpdf( 1.0 );
* // returns ~-0.977
*
* y = logpdf( 2.0 );
* // returns ~-3.0
*/
function __factory_1105( alpha, beta ) {
	var firstTerm;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	firstTerm = ( alpha * _$ln_376( beta ) ) - _$gammaln_305( alpha );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		out = firstTerm - ( ( alpha + 1.0 ) * _$ln_376( x ) ) - ( beta / x );
		return out;
	}
}


// EXPORTS //

var _$factory_1105 = __factory_1105;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for an inverse gamma distribution.
*
* @module @stdlib/stats/base/dists/invgamma/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/invgamma/logpdf' );
*
* var y = logpdf( 2.0, 0.5, 1.0 );
* // returns ~-2.112
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 2.0 );
* // returns ~-1.464
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1107 = require( './logpdf.js' ); */;
/* removed: var _$factory_1105 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1107, 'factory', _$factory_1105 );


// EXPORTS //

var _$logpdf_1106 = _$logpdf_1107;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~1.96
*
* @example
* var v = skewness( 2.0, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 4.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 4.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_1119( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 3.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 4.0 * _$sqrt_437( alpha - 2.0 ) / ( alpha - 3.0 );
}


// EXPORTS //

var _$skewness_1119 = __skewness_1119;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution skewness.
*
* @module @stdlib/stats/base/dists/invgamma/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/invgamma/skewness' );
*
* var v = skewness( 4.0, 12.0 );
* // returns ~5.657
*
* v = skewness( 8.0, 2.0 );
* // returns ~1.96
*/

// MODULES //

/* removed: var _$skewness_1119 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1118 = _$skewness_1119;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 3.0, 5.0 );
* // returns ~2.5
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.117
*
* @example
* var v = stdev( 3.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( 1.5, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 3.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_1121( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta / ( ( alpha-1.0 ) * _$sqrt_437( alpha-2.0 ) );
}


// EXPORTS //

var _$stdev_1121 = __stdev_1121;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution standard deviation.
*
* @module @stdlib/stats/base/dists/invgamma/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/invgamma/stdev' );
*
* var v = stdev( 5.0, 7.0 );
* // returns ~1.01
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.828
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.118
*/

// MODULES //

/* removed: var _$stdev_1121 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1120 = _$stdev_1121;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the variance of an inverse gamma distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - rate parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 3.0, 5.0 );
* // returns ~6.25
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.014
*
* @example
* var v = variance( 3.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( 1.5, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 3.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_1123( alpha, beta ) {
	if ( alpha <= 2.0 || beta <= 0.0 ) {
		return NaN;
	}
	return ( beta*beta ) / ( _$pow_396( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
}


// EXPORTS //

var _$variance_1123 = __variance_1123;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution variance.
*
* @module @stdlib/stats/base/dists/invgamma/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/invgamma/variance' );
*
* var v = variance( 5.0, 7.0 );
* // returns ~1.021
*
* v = variance( 4.0, 12.0 );
* // returns 8.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.014
*/

// MODULES //

/* removed: var _$variance_1123 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1122 = _$variance_1123;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
*
* @example
* var y = pdf( 0.2, 1.0, 1.0 );
* // returns ~0.168
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative shape parameter:
* var y = pdf( 2.0, -1.0, 1.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 1.0, -1.0 );
* // returns NaN
*/
function __pdf_1114( x, alpha, beta ) {
	var lnl;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	lnl = (alpha * _$ln_376( beta )) - _$gammaln_305( alpha );
	lnl -= (alpha + 1.0) * _$ln_376( x );
	lnl -= beta / x;
	return _$exp_225( lnl );
}


// EXPORTS //

var _$pdf_1114 = __pdf_1114;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$gammaln_305 = require( '@stdlib/math/base/special/gammaln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 3.0, 1.5 );
*
* var y = pdf( 1.0 );
* // returns ~0.377
*
* y = pdf( 2.0 );
* // returns ~0.05
*/
function __factory_1112( alpha, beta ) {
	var firstTerm;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	firstTerm = ( alpha * _$ln_376( beta ) ) - _$gammaln_305( alpha );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for an inverse gamma distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var lnl;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		lnl = firstTerm - (( alpha + 1.0 ) * _$ln_376( x )) - (beta / x);
		return _$exp_225( lnl );
	}
}


// EXPORTS //

var _$factory_1112 = __factory_1112;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/invgamma/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/invgamma/pdf' );
*
* var y = pdf( 2.0, 0.5, 1.0 );
* // returns ~0.121
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 2.0 );
* // returns ~0.231
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1114 = require( './pdf.js' ); */;
/* removed: var _$factory_1112 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1114, 'factory', _$factory_1112 );


// EXPORTS //

var _$pdf_1113 = _$pdf_1114;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1099 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1102 = require( '@stdlib/stats/base/dists/invgamma/entropy' ); */;
/* removed: var _$kurtosis_1103 = require( '@stdlib/stats/base/dists/invgamma/kurtosis' ); */;
/* removed: var _$mean_1108 = require( '@stdlib/stats/base/dists/invgamma/mean' ); */;
/* removed: var _$mode_1110 = require( '@stdlib/stats/base/dists/invgamma/mode' ); */;
/* removed: var _$quantile_1116 = require( '@stdlib/stats/base/dists/invgamma/quantile' ); */;
/* removed: var _$logpdf_1106 = require( '@stdlib/stats/base/dists/invgamma/logpdf' ); */;
/* removed: var _$skewness_1118 = require( '@stdlib/stats/base/dists/invgamma/skewness' ); */;
/* removed: var _$stdev_1120 = require( '@stdlib/stats/base/dists/invgamma/stdev' ); */;
/* removed: var _$variance_1122 = require( '@stdlib/stats/base/dists/invgamma/variance' ); */;
/* removed: var _$cdf_1098 = require( '@stdlib/stats/base/dists/invgamma/cdf' ); */;
/* removed: var _$pdf_1113 = require( '@stdlib/stats/base/dists/invgamma/pdf' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function invgammaCDF( x ) {
	return _$cdf_1098( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function invgammaLogPDF( x ) {
	return _$logpdf_1106( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function invgammaPDF( x ) {
	return _$pdf_1113( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function invgammaQuantile( p ) {
	return _$quantile_1116( p, this.alpha, this.beta );
}


// MAIN //

/**
* Inverse gamma distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {InvGamma} distribution instance
*
* @example
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var v = invgamma.mode;
* // returns 0.5
*/
function InvGamma() {
	var alpha;
	var beta;
	if ( !(this instanceof InvGamma) ) {
		if ( arguments.length === 0 ) {
			return new InvGamma();
		}
		return new InvGamma( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !__isPositive_1099( alpha ) ) {
			throw new TypeError( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !__isPositive_1099( beta ) ) {
			throw new TypeError( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !__isPositive_1099( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !__isPositive_1099( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Inverse gamma distribution differential entropy.
*
* @name entropy
* @memberof InvGamma.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.entropy;
* // returns ~1.996
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'entropy', function get() {
	return _$entropy_1102( this.alpha, this.beta );
});

/**
* Inverse gamma distribution excess kurtosis.
*
* @name kurtosis
* @memberof InvGamma.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var invgamma = new InvGamma( 6.0, 12.0 );
*
* var v = invgamma.kurtosis;
* // returns 19.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'kurtosis', function get() {
	return _$kurtosis_1103( this.alpha, this.beta );
});

/**
* Inverse gamma distribution expected value.
*
* @name mean
* @memberof InvGamma.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'mean', function get() {
	return _$mean_1108( this.alpha, this.beta );
});

/**
* Inverse gamma distribution mode.
*
* @name mode
* @memberof InvGamma.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.mode;
* // returns 2.4
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'mode', function get() {
	return _$mode_1110( this.alpha, this.beta );
});

/**
* Inverse gamma distribution skewness.
*
* @name skewness
* @memberof InvGamma.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.skewness;
* // returns ~5.657
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'skewness', function get() {
	return _$skewness_1118( this.alpha, this.beta );
});

/**
* Inverse gamma distribution standard deviation.
*
* @name stdev
* @memberof InvGamma.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.stdev;
* // returns ~2.828
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'stdev', function get() {
	return _$stdev_1120( this.alpha, this.beta );
});

/**
* Inverse gamma distribution variance.
*
* @name variance
* @memberof InvGamma.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var invgamma = new InvGamma( 4.0, 12.0 );
*
* var v = invgamma.variance;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( InvGamma.prototype, 'variance', function get() {
	return _$variance_1122( this.alpha, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.cdf( 0.5 );
* // returns ~0.003
*/
_$setNonEnumerableReadOnly_1603( InvGamma.prototype, 'cdf', invgammaCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.logpdf( 0.8 );
* // returns ~-1.558
*/
_$setNonEnumerableReadOnly_1603( InvGamma.prototype, 'logpdf', invgammaLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof InvGamma.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.pdf( 0.8 );
* // returns ~0.211
*/
_$setNonEnumerableReadOnly_1603( InvGamma.prototype, 'pdf', invgammaPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof InvGamma.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var invgamma = new InvGamma( 2.0, 4.0 );
*
* var v = invgamma.quantile( 0.5 );
* // returns ~2.383
*/
_$setNonEnumerableReadOnly_1603( InvGamma.prototype, 'quantile', invgammaQuantile );


// EXPORTS //

var _$InvGamma_1099 = InvGamma;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Inverse gamma distribution constructor.
*
* @module @stdlib/stats/base/dists/invgamma/ctor
*
* @example
* var InvGamma = require( '@stdlib/stats/base/dists/invgamma/ctor' );
*
* var invgamma = new InvGamma( 1.0, 1.0 );
*
* var y = invgamma.cdf( 0.8 );
* // returns ~0.287
*
* var mode = invgamma.mode;
* // returns 0.5
*/

// MODULES //

/* removed: var _$InvGamma_1099 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1100 = _$InvGamma_1099;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns ~0.5
*
* @example
* var y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
*
* @example
* var y = cdf( 0.2, 2.0, 2.0 );
* // returns ~0.078
*
* @example
* var y = cdf( 0.8, 4.0, 4.0 );
* // returns ~0.878
*
* @example
* var y = cdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( 1.5, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __cdf_1124( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	if ( x >= 1.0 ) {
		return 1.0;
	}
	return 1.0 - _$pow_396( 1.0 - _$pow_396( x, a ), b );
}


// EXPORTS //

var _$cdf_1124 = __cdf_1124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/
function __factory_1125( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		if ( x >= 1.0 ) {
			return 1.0;
		}
		return 1.0 - _$pow_396( 1.0 - _$pow_396( x, a ), b );
	}
}


// EXPORTS //

var _$factory_1125 = __factory_1125;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/stats/base/dists/kumaraswamy/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/kumaraswamy/cdf' );
*
* var y = cdf( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 0.5, 2.0, 4.0 );
* // returns ~0.684
*
* @example
* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/cdf' ).factory;
*
* var cdf = factory( 0.5, 0.5 );
*
* var y = cdf( 0.8 );
* // returns ~0.675
*
* y = cdf( 0.3 );
* // returns ~0.327
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1124 = require( './cdf.js' ); */;
/* removed: var _$factory_1125 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1124, 'factory', _$factory_1125 );


// EXPORTS //

var _$cdf_1126 = _$cdf_1124;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.5, 1.0 );
* // returns ~2.143
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
*
* @example
* var v = kurtosis( 12.0, 2.0 );
* // returns ~4.817
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_1130( a, b ) {
	var sigma2;
	var out;
	var mu2;
	var m1;
	var m2;
	var m3;
	var m4;
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * _$beta_161( 1.0 + ( 1.0/a ), b );
	m2 = b * _$beta_161( 1.0 + ( 2.0/a ), b );
	m3 = b * _$beta_161( 1.0 + ( 3.0/a ), b );
	m4 = b * _$beta_161( 1.0 + ( 4.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	mu2 = m1 * m1;
	out = ( m4 - ( 4.0*m3*m1 ) + ( 6.0*m2*mu2 ) - ( 3.0*mu2*mu2 ) );
	out /= sigma2*sigma2;
	return out;
}


// EXPORTS //

var _$kurtosis_1130 = __kurtosis_1130;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/kumaraswamy/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/kumaraswamy/kurtosis' );
*
* var v = kurtosis( 2.0, 1.0 );
* // returns ~2.4
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~2.704
*
* v = kurtosis( 16.0, 8.0 );
* // returns ~4.311
*/

// MODULES //

/* removed: var _$kurtosis_1130 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1129 = _$kurtosis_1130;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;


// MAIN //

/**
* Returns the expected value of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.5, 1.5 );
* // returns ~0.512
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~0.481
*
* @example
* var v = mean( 12.0, 2.0 );
* // returns ~0.886
*
* @example
* var v = mean( 1.5, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.5 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_1138( a, b ) {
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return b * _$beta_161( 1.0 + ( 1.0/a ), b );
}


// EXPORTS //

var _$mean_1138 = __mean_1138;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution mean.
*
* @module @stdlib/stats/base/dists/kumaraswamy/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/kumaraswamy/mean' );
*
* var v = mean( 2.0, 1.5 );
* // returns ~0.589
*
* v = mean( 4.0, 12.0 );
* // returns ~0.481
*
* v = mean( 16.0, 8.0 );
* // returns ~0.846
*/

// MODULES //

/* removed: var _$mean_1138 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1137 = _$mean_1138;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the mode of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.5, 1.5 );
* // returns ~0.543
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~0.503
*
* @example
* var v = mode( 12.0, 2.0 );
* // returns ~0.94
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 1.5, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.5 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_1142( a, b ) {
	if (
		_$isnan_130( a ) ||
		a < 1.0 ||
		_$isnan_130( b ) ||
		b < 1.0 ||
		( a === 1.0 && b === 1.0 )
	) {
		return NaN;
	}
	return _$pow_396( ( a-1.0 ) / ( (a*b) - 1.0 ), 1.0/a );
}


// EXPORTS //

var _$mode_1142 = __mode_1142;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution mode.
*
* @module @stdlib/stats/base/dists/kumaraswamy/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/kumaraswamy/mode' );
*
* var v = mode( 2.0, 1.5 );
* // returns ~0.707
*
* v = mode( 4.0, 12.0 );
* // returns ~0.503
*
* v = mode( 16.0, 8.0 );
* // returns ~0.875
*/

// MODULES //

/* removed: var _$mode_1142 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1141 = _$mode_1142;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the skewness of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 0.5, 1.0 );
* // returns ~0.639
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.201
*
* @example
* var v = skewness( 12.0, 2.0 );
* // returns ~-1.2
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_1150( a, b ) {
	var sigma2;
	var m1;
	var m2;
	var m3;
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * _$beta_161( 1.0 + ( 1.0/a ), b );
	m2 = b * _$beta_161( 1.0 + ( 2.0/a ), b );
	m3 = b * _$beta_161( 1.0 + ( 3.0/a ), b );
	sigma2 = m2 - ( m1*m1 );
	return ( m3 - ( 3.0*m1*sigma2 ) - ( m1*m1*m1 ) ) / _$pow_396( sigma2, 1.5 );
}


// EXPORTS //

var _$skewness_1150 = __skewness_1150;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @module @stdlib/stats/base/dists/kumaraswamy/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/kumaraswamy/skewness' );
*
* var v = skewness( 2.0, 1.0 );
* // returns ~-0.566
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.201
*
* v = skewness( 16.0, 8.0 );
* // returns ~-0.94
*/

// MODULES //

/* removed: var _$skewness_1150 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1149 = _$skewness_1150;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.5, 1.0 );
* // returns ~0.298
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~0.13
*
* @example
* var v = stdev( 12.0, 2.0 );
* // returns ~0.077
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_1152( a, b ) {
	var m1;
	var m2;
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * _$beta_161( 1.0 + ( 1.0/a ), b );
	m2 = b * _$beta_161( 1.0 + ( 2.0/a ), b );
	return _$sqrt_437( m2 - ( m1*m1 ) );
}


// EXPORTS //

var _$stdev_1152 = __stdev_1152;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @module @stdlib/stats/base/dists/kumaraswamy/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/kumaraswamy/stdev' );
*
* var v = stdev( 2.0, 1.0 );
* // returns ~0.237
*
* v = stdev( 4.0, 12.0 );
* // returns ~0.13
*
* v = stdev( 16.0, 8.0 );
* // returns ~0.063
*/

// MODULES //

/* removed: var _$stdev_1152 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1151 = _$stdev_1152;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;


// MAIN //

/**
* Returns the variance of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.5, 1.0 );
* // returns ~0.089
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~0.017
*
* @example
* var v = variance( 12.0, 2.0 );
* // returns ~0.006
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_1154( a, b ) {
	var m1;
	var m2;
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	m1 = b * _$beta_161( 1.0 + ( 1.0/a ), b );
	m2 = b * _$beta_161( 1.0 + ( 2.0/a ), b );
	return m2 - ( m1*m1 );
}


// EXPORTS //

var _$variance_1154 = __variance_1154;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution variance.
*
* @module @stdlib/stats/base/dists/kumaraswamy/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/kumaraswamy/variance' );
*
* var v = variance( 2.0, 1.0 );
* // returns ~0.056
*
* v = variance( 4.0, 12.0 );
* // returns ~0.017
*
* v = variance( 16.0, 8.0 );
* // returns ~0.004
*/

// MODULES //

/* removed: var _$variance_1154 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1153 = _$variance_1154;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.38
*
* @example
* var y = logcdf( 0.2, 2.0, 2.0 );
* // returns ~-2.546
*
* @example
* var y = logcdf( 0.8, 4.0, 4.0 );
* // returns ~-0.13
*
* @example
* var y = logcdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __logcdf_1133( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x >= 1.0 ) {
		return 0.0;
	}
	return _$ln_376( 1.0 - _$pow_396( 1.0 - _$pow_396( x, a ), b ) );
}


// EXPORTS //

var _$logcdf_1133 = __logcdf_1133;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} CDF
*
* @example
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.393
*
* y = logcdf( 0.3 );
* // returns ~-1.116
*/
function __factory_1131( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x >= 1.0 ) {
			return 0.0;
		}
		return _$ln_376( 1.0 - _$pow_396( 1.0 - _$pow_396( x, a ), b ) );
	}
}


// EXPORTS //

var _$factory_1131 = __factory_1131;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/stats/base/dists/kumaraswamy/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/kumaraswamy/logcdf' );
*
* var y = logcdf( 0.5, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 0.5, 2.0, 4.0 );
* // returns ~-0.38
*
* @example
* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/logcdf' ).factory;
*
* var logcdf = factory( 0.5, 0.5 );
*
* var y = logcdf( 0.8 );
* // returns ~-0.393
*
* y = logcdf( 0.3 );
* // returns ~-1.118
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1133 = require( './logcdf.js' ); */;
/* removed: var _$factory_1131 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1133, 'factory', _$factory_1131 );


// EXPORTS //

var _$logcdf_1132 = _$logcdf_1133;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.523
*
* @example
* var y = logpdf( 0.2, 2.0, 2.0 );
* // returns ~-0.264
*
* @example
* var y = logpdf( 0.8, 4.0, 4.0 );
* // returns ~0.522
*
* @example
* var y = logpdf( -0.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __logpdf_1136( x, a, b ) {
	var out;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 || x >= 1.0 ) {
		return _$FLOAT64_NINF_107;
	}
	out = _$ln_376( a*b );
	out += ( a - 1.0 ) * _$ln_376( x );
	out += ( b - 1.0 ) * _$ln_376( 1.0 - _$pow_396( x, a ) );
	return out;
}


// EXPORTS //

var _$logpdf_1136 = __logpdf_1136;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.151
*
* y = logpdf( 0.3 );
* // returns ~-0.388
*/
function __factory_1134( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var out;

		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 || x >= 1.0 ) {
			return _$FLOAT64_NINF_107;
		}
		out = _$ln_376( a*b );
		out += ( a - 1.0 ) * _$ln_376( x );
		out += ( b - 1.0 ) * _$ln_376( 1.0 - _$pow_396( x, a ) );
		return out;
	}
}


// EXPORTS //

var _$factory_1134 = __factory_1134;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/stats/base/dists/kumaraswamy/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/kumaraswamy/logpdf' );
*
* var y = logpdf( 0.5, 1.0, 1.0 );
* // returns 0.0
*
* y = logpdf( 0.5, 2.0, 4.0 );
* // returns ~0.523
*
* @example
* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/logpdf' ).factory;
*
* var logpdf = factory( 0.5, 0.5 );
*
* var y = logpdf( 0.8 );
* // returns ~-0.151
*
* y = logpdf( 0.3 );
* // returns ~-0.387
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1136 = require( './logpdf.js' ); */;
/* removed: var _$factory_1134 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1136, 'factory', _$factory_1134 );


// EXPORTS //

var _$logpdf_1135 = _$logpdf_1136;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
*
* @example
* var y = pdf( 0.2, 2.0, 2.0 );
* // returns ~0.768
*
* @example
* var y = pdf( 0.8, 4.0, 4.0 );
* // returns ~1.686
*
* @example
* var y = pdf( -0.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __pdf_1145( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 || x >= 1.0 ) {
		return 0.0;
	}
	return ( a*b ) * _$pow_396( x, a - 1.0 ) * _$pow_396( 1.0 - _$pow_396( x, a ), b - 1.0 );
}


// EXPORTS //

var _$pdf_1145 = __pdf_1145;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/
function __factory_1143( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 || x >= 1.0 ) {
			return 0.0;
		}
		return ( a*b ) * _$pow_396( x, a - 1.0 ) * _$pow_396( 1.0 - _$pow_396( x, a ), b - 1.0 );
	}
}


// EXPORTS //

var _$factory_1143 = __factory_1143;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/stats/base/dists/kumaraswamy/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/kumaraswamy/pdf' );
*
* var y = pdf( 0.5, 1.0, 1.0 );
* // returns 1.0
*
* y = pdf( 0.5, 2.0, 4.0 );
* // returns ~1.688
*
* @example
* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/pdf' ).factory;
*
* var pdf = factory( 0.5, 0.5 );
*
* var y = pdf( 0.8 );
* // returns ~0.86
*
* y = pdf( 0.3 );
* // returns ~0.679
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1145 = require( './pdf.js' ); */;
/* removed: var _$factory_1143 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1145, 'factory', _$factory_1143 );


// EXPORTS //

var _$pdf_1144 = _$pdf_1145;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a probability `p`.
*
* @param {Probability} p - input probability
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
*
* @example
* var y = quantile( 0.2, 2.0, 2.0 );
* // returns ~0.325
*
* @example
* var y = quantile( 0.8, 4.0, 4.0 );
* // returns ~0.759
*
* @example
* var y = quantile( -0.5, 4.0, 2.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.8, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.8, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.1, 1.0, NaN );
* // returns NaN
*/
function __quantile_1148( p, a, b ) {
	if (
		_$isnan_130( p ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$pow_396( 1.0 - _$pow_396( 1.0-p, 1.0/b ), 1.0/a );
}


// EXPORTS //

var _$quantile_1148 = __quantile_1148;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.922
*
* y = quantile( 0.3 );
* // returns ~0.26
*/
function __factory_1146( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a <= 0.0 ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Kumaraswamy's double bounded distribution.
	*
	* @private
	* @param {Probability} p - input probability
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 2.0 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return _$pow_396( 1.0 - _$pow_396( 1.0-p, 1.0/b ), 1.0/a );
	}
}


// EXPORTS //

var _$factory_1146 = __factory_1146;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for a Kumaraswamy's double bounded distribution.
*
* @module @stdlib/stats/base/dists/kumaraswamy/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/kumaraswamy/quantile' );
*
* var y = quantile( 0.5, 1.0, 1.0 );
* // returns 0.5
*
* y = quantile( 0.5, 2.0, 4.0 );
* // returns ~0.399
*
* @example
* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/quantile' ).factory;
*
* var quantile = factory( 0.5, 0.5 );
*
* var y = quantile( 0.8 );
* // returns ~0.922
*
* y = quantile( 0.3 );
* // returns ~0.26
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1148 = require( './quantile.js' ); */;
/* removed: var _$factory_1146 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1148, 'factory', _$factory_1146 );


// EXPORTS //

var _$quantile_1147 = _$quantile_1148;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1127 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$kurtosis_1129 = require( '@stdlib/stats/base/dists/kumaraswamy/kurtosis' ); */;
/* removed: var _$mean_1137 = require( '@stdlib/stats/base/dists/kumaraswamy/mean' ); */;
/* removed: var _$mode_1141 = require( '@stdlib/stats/base/dists/kumaraswamy/mode' ); */;
/* removed: var _$skewness_1149 = require( '@stdlib/stats/base/dists/kumaraswamy/skewness' ); */;
/* removed: var _$stdev_1151 = require( '@stdlib/stats/base/dists/kumaraswamy/stdev' ); */;
/* removed: var _$variance_1153 = require( '@stdlib/stats/base/dists/kumaraswamy/variance' ); */;
/* removed: var _$cdf_1126 = require( '@stdlib/stats/base/dists/kumaraswamy/cdf' ); */;
/* removed: var _$logcdf_1132 = require( '@stdlib/stats/base/dists/kumaraswamy/logcdf' ); */;
/* removed: var _$logpdf_1135 = require( '@stdlib/stats/base/dists/kumaraswamy/logpdf' ); */;
/* removed: var _$pdf_1144 = require( '@stdlib/stats/base/dists/kumaraswamy/pdf' ); */;
/* removed: var _$quantile_1147 = require( '@stdlib/stats/base/dists/kumaraswamy/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function kumaraswamyCDF( x ) {
	return _$cdf_1126( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function kumaraswamyLogCDF( x ) {
	return _$logcdf_1132( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function kumaraswamyLogPDF( x ) {
	return _$logpdf_1135( x, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function kumaraswamyPDF( x ) {
	return _$pdf_1144( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function kumaraswamyQuantile( p ) {
	return _$quantile_1147( p, this.a, this.b );
}


// MAIN //

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @constructor
* @param {PositiveNumber} [a=1.0] - first shape parameter
* @param {PositiveNumber} [b=1.0] - second shape parameter
* @throws {TypeError} `a` must be a positive number
* @throws {TypeError} `b` must be a positive number
* @returns {Kumaraswamy} distribution instance
*
* @example
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var v = kumaraswamy.mode;
* // returns NaN
*/
function Kumaraswamy() {
	var a;
	var b;
	if ( !(this instanceof Kumaraswamy) ) {
		if ( arguments.length === 0 ) {
			return new Kumaraswamy();
		}
		return new Kumaraswamy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !__isPositive_1127( a ) ) {
			throw new TypeError( 'invalid argument. First shape parameter `a` must be a positive number. Value: `' + a + '`' );
		}
		if ( !__isPositive_1127( b ) ) {
			throw new TypeError( 'invalid argument. Second shape parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		a = 1.0;
		b = 1.0;
	}
	_$defineProperty_1606( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !__isPositive_1127( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			a = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isPositive_1127( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Kumaraswamy's double bounded distribution excess kurtosis.
*
* @name kurtosis
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.kurtosis;
* // returns ~2.704
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'kurtosis', function get() {
	return _$kurtosis_1129( this.a, this.b );
});

/**
* Kumaraswamy's double bounded distribution expected value.
*
* @name mean
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mean;
* // returns ~0.481
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'mean', function get() {
	return _$mean_1137( this.a, this.b );
});

/**
* Kumaraswamy's double bounded distribution mode.
*
* @name mode
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.mode;
* // returns ~0.503
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'mode', function get() {
	return _$mode_1141( this.a, this.b );
});

/**
* Kumaraswamy's double bounded distribution skewness.
*
* @name skewness
* @memberof Kumaraswamy.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.skewness;
* // returns ~-0.201
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'skewness', function get() {
	return _$skewness_1149( this.a, this.b );
});

/**
* Kumaraswamy's double bounded distribution standard deviation.
*
* @name stdev
* @memberof Kumaraswamy.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.stdev;
* // returns ~0.13
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'stdev', function get() {
	return _$stdev_1151( this.a, this.b );
});

/**
* Kumaraswamy's double bounded distribution variance.
*
* @name variance
* @memberof Kumaraswamy.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var kumaraswamy = new Kumaraswamy( 4.0, 12.0 );
*
* var v = kumaraswamy.variance;
* // returns ~0.017
*/
_$setNonEnumerableReadOnlyAccessor_1601( Kumaraswamy.prototype, 'variance', function get() {
	return _$variance_1153( this.a, this.b );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.cdf( 0.5 );
* // returns ~0.684
*/
_$setNonEnumerableReadOnly_1603( Kumaraswamy.prototype, 'cdf', kumaraswamyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.logcdf( 0.5 );
* // returns ~-0.38
*/
_$setNonEnumerableReadOnly_1603( Kumaraswamy.prototype, 'logcdf', kumaraswamyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.logpdf( 0.9 );
* // returns ~-3.008
*/
_$setNonEnumerableReadOnly_1603( Kumaraswamy.prototype, 'logpdf', kumaraswamyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.pdf( 0.9 );
* // returns ~0.049
*/
_$setNonEnumerableReadOnly_1603( Kumaraswamy.prototype, 'pdf', kumaraswamyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Kumaraswamy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var kumaraswamy = new Kumaraswamy( 2.0, 4.0 );
*
* var v = kumaraswamy.quantile( 0.5 );
* // returns ~0.399
*/
_$setNonEnumerableReadOnly_1603( Kumaraswamy.prototype, 'quantile', kumaraswamyQuantile );


// EXPORTS //

var _$Kumaraswamy_1127 = Kumaraswamy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution constructor.
*
* @module @stdlib/stats/base/dists/kumaraswamy/ctor
*
* @example
* var Kumaraswamy = require( '@stdlib/stats/base/dists/kumaraswamy/ctor' );
*
* var kumaraswamy = new Kumaraswamy( 1.0, 1.0 );
*
* var y = kumaraswamy.cdf( 0.8 );
* // returns 0.8
*
* var mode = kumaraswamy.mode;
* // returns NaN
*/

// MODULES //

/* removed: var _$Kumaraswamy_1127 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1128 = _$Kumaraswamy_1127;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the median of a Kumaraswamy's double bounded distribution.
*
* @param {PositiveNumber} a - first shape parameter
* @param {PositiveNumber} b - second shape parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 0.5, 1.0 );
* // returns 0.25
*
* @example
* var v = median( 4.0, 12.0 );
* // returns ~0.487
*
* @example
* var v = median( 12.0, 2.0 );
* // returns ~0.903
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function __median_1140( a, b ) {
	if (
		_$isnan_130( a ) ||
		a <= 0.0 ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return _$pow_396( 1.0 - _$pow_396( 2.0, -1.0/b ), 1.0/a );
}


// EXPORTS //

var _$median_1140 = __median_1140;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Kumaraswamy's double bounded distribution median.
*
* @module @stdlib/stats/base/dists/kumaraswamy/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/kumaraswamy/median' );
*
* var v = median( 2.0, 1.0 );
* // returns ~0.707
*
* v = median( 4.0, 12.0 );
* // returns ~0.487
*
* v = median( 16.0, 8.0 );
* // returns ~0.856
*/

// MODULES //

/* removed: var _$median_1140 = require( './median.js' ); */;


// EXPORTS //

var _$median_1139 = _$median_1140;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.932
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.094
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __cdf_1155( x, mu, b ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return 0.5 * _$exp_225( z );
	}
	return 1.0 - ( 0.5 * _$exp_225( -z ) );
}


// EXPORTS //

var _$cdf_1155 = __cdf_1155;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.132
*
* y = cdf( 4.0 );
* // returns ~0.743
*/
function __factory_1156( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return 0.5 * _$exp_225( z );
		}
		return 1.0 - (0.5 * _$exp_225( -z ));
	}
}


// EXPORTS //

var _$factory_1156 = __factory_1156;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/laplace/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/laplace/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.982
*
* y = cdf( 0.0, 0.0, 3.0 );
* // returns 0.5
*
* var myCDF = cdf.factory( 2.0, 3.0 );
* y = myCDF( 10.0 );
* // returns ~0.965
*
* y = myCDF( 2.0 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1155 = require( './cdf.js' ); */;
/* removed: var _$factory_1156 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1155, 'factory', _$factory_1156 );


// EXPORTS //

var _$cdf_1157 = _$cdf_1155;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Returns the differential entropy for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.386
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1160( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( 2.0 * b * _$E_86 );
}


// EXPORTS //

var _$entropy_1160 = __entropy_1160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution differential entropy.
*
* @module @stdlib/stats/base/dists/laplace/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/laplace/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.693
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.386
*/

// MODULES //

/* removed: var _$entropy_1160 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1161 = _$entropy_1160;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 3.0
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_1163( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 3.0;
}


// EXPORTS //

var _$kurtosis_1163 = __kurtosis_1163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/laplace/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/laplace/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 3.0
*
* y = kurtosis( 4.0, 2.0 );
* // returns 3.0
*/

// MODULES //

/* removed: var _$kurtosis_1163 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1162 = _$kurtosis_1163;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1171( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mean_1171 = __mean_1171;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution expected value.
*
* @module @stdlib/stats/base/dists/laplace/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/laplace/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_1171 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1170 = _$mean_1171;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1173( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$median_1173 = __median_1173;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution median.
*
* @module @stdlib/stats/base/dists/laplace/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/laplace/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$median_1173 = require( './median.js' ); */;


// EXPORTS //

var _$median_1172 = _$median_1173;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1178( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mode_1178 = __mode_1178;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution mode.
*
* @module @stdlib/stats/base/dists/laplace/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/laplace/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mode_1178 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1177 = _$mode_1178;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_1186( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_1186 = __skewness_1186;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution skewness.
*
* @module @stdlib/stats/base/dists/laplace/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/laplace/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1186 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1185 = _$skewness_1186;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns the standard deviation for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~2.828
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1188( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return _$SQRT2_118 * b;
}


// EXPORTS //

var _$stdev_1188 = __stdev_1188;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution standard deviation.
*
* @module @stdlib/stats/base/dists/laplace/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/laplace/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.414
*
* y = stdev( 4.0, 2.0 );
* // returns ~2.828
*/

// MODULES //

/* removed: var _$stdev_1188 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1187 = _$stdev_1188;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance for a Laplace distribution with location `mu` and scale `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 2.0
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns 8.0
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1190( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	return 2.0 * b * b;
}


// EXPORTS //

var _$variance_1190 = __variance_1190;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution variance.
*
* @module @stdlib/stats/base/dists/laplace/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/laplace/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 2.0
*
* y = variance( 4.0, 2.0 );
* // returns 8.0
*/

// MODULES //

/* removed: var _$variance_1190 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1189 = _$variance_1190;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of `1/2`.
*
* @module @stdlib/constants/math/float64-ln-half
* @type {number}
*
* @example
* var LN_HALF = require( '@stdlib/constants/math/float64-ln-half' );
* // returns -0.6931471805599453
*/


// MAIN //

/**
* Natural logarithm of `1/2`.
*
* ```tex
* \ln (1/2)
* ```
*
* @constant
* @type {number}
* @default -0.6931471805599453
*/
var LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;


// EXPORTS //

var _$LN_HALF_95 = LN_HALF;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logarithm of CDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.07
*
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-2.36
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logcdf_1166( x, mu, b ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	if ( x < mu ) {
		return _$LN_HALF_95 + z;
	}
	return _$LN_HALF_95 + _$log1p_380( -_$expm1_228( -z ) );
}


// EXPORTS //

var _$logcdf_1166 = __logcdf_1166;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-2.026
*
* y = logcdf( 4.0 );
* // returns ~-0.297
*/
function __factory_1164( mu, b ) {
	if ( _$isnan_130( mu ) || _$isnan_130( b ) || b <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		if ( x < mu ) {
			return _$LN_HALF_95 + z;
		}
		return _$LN_HALF_95 + _$log1p_380( -_$expm1_228( -z ) );
	}
}


// EXPORTS //

var _$factory_1164 = __factory_1164;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/laplace/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/laplace/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.018
*
* y = logcdf( 0.0, 0.0, 3.0 );
* // returns ~-0.693
*
* var mylogcdf = logcdf.factory( 2.0, 3.0 );
* y = mylogcdf( 10.0 );
* // returns ~-0.036
*
* y = mylogcdf( 2.0 );
* // returns ~-0.693
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1166 = require( './logcdf.js' ); */;
/* removed: var _$factory_1164 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1166, 'factory', _$factory_1164 );


// EXPORTS //

var _$logcdf_1165 = _$logcdf_1166;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.693
*
* @example
* var y = logpdf( -1.0, 2.0, 3.0 );
* // returns ~-2.792
*
* @example
* var y = logpdf( 2.5, 2.0, 3.0 );
* // returns ~-1.958
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logpdf_1169( x, mu, b ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return -( _$abs_147( z ) + _$ln_376( 2.0 * b ) );
}


// EXPORTS //

var _$logpdf_1169 = __logpdf_1169;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
*
* var y = logpdf( 10.0 );
* // returns ~-1.386
*
* y = logpdf( 5.0 );
* // returns ~-3.886
*
* y = logpdf( 12.0 );
* // returns ~-2.386
*/
function __factory_1167( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logarithm of PDF
	*
	* @example
	* var y = logpdf( -3.14 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return -( _$abs_147( z ) + _$ln_376( 2.0 * b ) );
	}
}


// EXPORTS //

var _$factory_1167 = __factory_1167;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/laplace/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/laplace/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.688
*
* var mylogPDF = logpdf.factory( 10.0, 2.0 );
* y = mylogPDF( 10.0 );
* // returns -1.386
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1169 = require( './logpdf.js' ); */;
/* removed: var _$factory_1167 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1169, 'factory', _$factory_1167 );


// EXPORTS //

var _$logpdf_1168 = _$logpdf_1169;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 1.0, 0.0, 2.0 );
* // returns NaN
*
* @example
* var y = mgf( -0.5, 0.0, 4.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __mgf_1176( t, mu, b ) {
	var bt;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0 ||
		_$abs_147( t ) >= 1.0/b
	) {
		return NaN;
	}
	bt = b * t;
	return _$exp_225( mu * t ) / ( 1.0 - _$pow_396( bt, 2.0 ) );
}


// EXPORTS //

var _$mgf_1176 = __mgf_1176;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Laplace (double exponential) distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} b - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 0.2 );
* // returns ~2.649
*
* y = mgf( 0.4 );
* // returns ~13.758
*/
function __factory_1174( mu, b ) {
	if ( _$isnan_130( mu ) || _$isnan_130( b ) || b <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Laplace (double exponential) distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var bt;
		if ( _$abs_147( t ) >= 1.0/b ) {
			return NaN;
		}
		bt = b * t;
		return _$exp_225( mu * t ) / ( 1.0 - _$pow_396( bt, 2.0 ) );
	}
}


// EXPORTS //

var _$factory_1174 = __factory_1174;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Laplace (double exponential) distribution.
*
* @module @stdlib/stats/base/dists/laplace/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/laplace/mgf' );
*
* var y = mgf( 0.5, 0.0, 1.0 );
* // returns ~1.333
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 0.2 );
* // returns ~0.019
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 0.2 );
* // returns ~2.649
*
* y = mymgf( 0.4 );
* // returns ~13.758
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1176 = require( './mgf.js' ); */;
/* removed: var _$factory_1174 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1176, 'factory', _$factory_1174 );


// EXPORTS //

var _$mgf_1175 = _$mgf_1176;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
*
* @example
* var y = pdf( -1.0, 2.0, 3.0 );
* // returns ~0.061
*
* @example
* var y = pdf( 2.5, 2.0, 3.0 );
* // returns ~0.141
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __pdf_1181( x, mu, b ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return NaN;
	}
	z = ( x - mu ) / b;
	return 0.5 * _$exp_225( -_$abs_147( z ) ) / b;
}


// EXPORTS //

var _$pdf_1181 = __pdf_1181;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
*
* var y = pdf( 10.0 );
* // returns 0.25
*
* y = pdf( 5.0 );
* // returns ~0.021
*
* y = pdf( 12.0 );
* // returns ~0.092
*/
function __factory_1179( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Laplace distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / b;
		return 0.5 * _$exp_225( -_$abs_147( z ) ) / b;
	}
}


// EXPORTS //

var _$factory_1179 = __factory_1179;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/laplace/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/laplace/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.068
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.25
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1181 = require( './pdf.js' ); */;
/* removed: var _$factory_1179 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1181, 'factory', _$factory_1179 );


// EXPORTS //

var _$pdf_1180 = _$pdf_1181;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1184( p, mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		_$isnan_130( p ) ||
		b <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return mu - ( b * _$signum_426( p-0.5 ) * _$ln_376( 1.0 - ( 2.0 * _$abs_147( p-0.5 ) ) ) );
}


// EXPORTS //

var _$quantile_1184 = __quantile_1184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Laplace distribution with location parameter `mu` and scale parameter `b`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} b - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.833
*/
function __factory_1182( mu, b ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( b ) ||
		b <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Laplace distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu - ( b * _$signum_426( p-0.5 ) * _$ln_376( 1.0 - (2.0 * _$abs_147( p-0.5 )) ) );
	}
}


// EXPORTS //

var _$factory_1182 = __factory_1182;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution quantile function.
*
* @module @stdlib/stats/base/dists/laplace/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/laplace/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.916
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*
* y = myQuantile( 0.8 );
* // returns ~11.833
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1184 = require( './quantile.js' ); */;
/* removed: var _$factory_1182 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1184, 'factory', _$factory_1182 );


// EXPORTS //

var _$quantile_1183 = _$quantile_1184;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1158 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1158 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1161 = require( '@stdlib/stats/base/dists/laplace/entropy' ); */;
/* removed: var _$kurtosis_1162 = require( '@stdlib/stats/base/dists/laplace/kurtosis' ); */;
/* removed: var _$mean_1170 = require( '@stdlib/stats/base/dists/laplace/mean' ); */;
/* removed: var _$median_1172 = require( '@stdlib/stats/base/dists/laplace/median' ); */;
/* removed: var _$mode_1177 = require( '@stdlib/stats/base/dists/laplace/mode' ); */;
/* removed: var _$skewness_1185 = require( '@stdlib/stats/base/dists/laplace/skewness' ); */;
/* removed: var _$stdev_1187 = require( '@stdlib/stats/base/dists/laplace/stdev' ); */;
/* removed: var _$variance_1189 = require( '@stdlib/stats/base/dists/laplace/variance' ); */;
/* removed: var _$cdf_1157 = require( '@stdlib/stats/base/dists/laplace/cdf' ); */;
/* removed: var _$logcdf_1165 = require( '@stdlib/stats/base/dists/laplace/logcdf' ); */;
/* removed: var _$logpdf_1168 = require( '@stdlib/stats/base/dists/laplace/logpdf' ); */;
/* removed: var _$mgf_1175 = require( '@stdlib/stats/base/dists/laplace/mgf' ); */;
/* removed: var _$pdf_1180 = require( '@stdlib/stats/base/dists/laplace/pdf' ); */;
/* removed: var _$quantile_1183 = require( '@stdlib/stats/base/dists/laplace/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function laplaceCDF( x ) {
	return _$cdf_1157( x, this.mu, this.b );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function laplaceLogCDF( x ) {
	return _$logcdf_1165( x, this.mu, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function laplaceLogPDF( x ) {
	return _$logpdf_1168( x, this.mu, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function laplaceMGF( t ) {
	return _$mgf_1175( t, this.mu, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function laplacePDF( x ) {
	return _$pdf_1180( x, this.mu, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function laplaceQuantile( p ) {
	return _$quantile_1183( p, this.mu, this.b );
}


// MAIN //

/**
* Laplace distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [b=1.0] - scale parameter
* @throws {TypeError} `b` must be a positive number
* @returns {Laplace} distribution instance
*
* @example
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/
function Laplace() {
	var mu;
	var b;
	if ( !(this instanceof Laplace) ) {
		if ( arguments.length === 0 ) {
			return new Laplace();
		}
		return new Laplace( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !__isNumber_1158( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1158( b ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `b` must be a positive number. Value: `' + b + '`' );
		}
	} else {
		mu = 0.0;
		b = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1158( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isPositive_1158( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Laplace distribution differential entropy.
*
* @name entropy
* @memberof Laplace.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.entropy;
* // returns ~4.178
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'entropy', function get() {
	return _$entropy_1161( this.mu, this.b );
});

/**
* Laplace distribution excess kurtosis.
*
* @name kurtosis
* @memberof Laplace.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.kurtosis;
* // returns 3.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'kurtosis', function get() {
	return _$kurtosis_1162( this.mu, this.b );
});

/**
* Laplace distribution expected value.
*
* @name mean
* @memberof Laplace.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'mean', function get() {
	return _$mean_1170( this.mu, this.b );
});

/**
* Laplace distribution median.
*
* @name median
* @memberof Laplace.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'median', function get() {
	return _$median_1172( this.mu, this.b );
});

/**
* Laplace distribution mode.
*
* @name mode
* @memberof Laplace.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'mode', function get() {
	return _$mode_1177( this.mu, this.b );
});

/**
* Laplace distribution skewness.
*
* @name skewness
* @memberof Laplace.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'skewness', function get() {
	return _$skewness_1185( this.mu, this.b );
});

/**
* Laplace distribution standard deviation.
*
* @name stdev
* @memberof Laplace.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.stdev;
* // returns ~16.971
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'stdev', function get() {
	return _$stdev_1187( this.mu, this.b );
});

/**
* Laplace distribution variance.
*
* @name variance
* @memberof Laplace.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var laplace = new Laplace( 4.0, 12.0 );
*
* var v = laplace.variance;
* // returns 288.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Laplace.prototype, 'variance', function get() {
	return _$variance_1189( this.mu, this.b );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.cdf( 0.5 );
* // returns ~0.344
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'cdf', laplaceCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logcdf( 0.9 );
* // returns ~-0.968
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'logcdf', laplaceLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.logpdf( 0.8 );
* // returns ~-2.379
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'logpdf', laplaceLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.mgf( 0.01 );
* // returns ~1.022
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'mgf', laplaceMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Laplace.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.pdf( 0.8 );
* // returns ~0.093
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'pdf', laplacePDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Laplace.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var laplace = new Laplace( 2.0, 4.0 );
*
* var v = laplace.quantile( 0.5 );
* // returns 2.0
*/
_$setNonEnumerableReadOnly_1603( Laplace.prototype, 'quantile', laplaceQuantile );


// EXPORTS //

var _$Laplace_1158 = Laplace;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Laplace distribution constructor.
*
* @module @stdlib/stats/base/dists/laplace/ctor
*
* @example
* var Laplace = require( '@stdlib/stats/base/dists/laplace/ctor' );
*
* var laplace = new Laplace( 1.0, 1.0 );
*
* var y = laplace.cdf( 1.5 );
* // returns ~0.697
*
* var mu = laplace.mean;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Laplace_1158 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1159 = _$Laplace_1158;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.48
*
* @example
* var y = cdf( 12.0, 10.0, 3.0 );
* // returns ~0.221
*
* @example
* var y = cdf( 9.0, 10.0, 3.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __cdf_1191( x, mu, c ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x < mu ) {
		return 0.0;
	}
	z = _$sqrt_437( c / ( 2.0 * ( x-mu ) ) );
	return _$erfc_200( z );
}


// EXPORTS //

var _$cdf_1191 = __cdf_1191;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 4.0 );
* // returns ~0.22
*
* y = cdf( 2.0 );
* // returns 0.0
*/
function __factory_1192( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < mu ) {
			return 0.0;
		}
		z = _$sqrt_437( c / ( 2.0 * ( x-mu ) ) );
		return _$erfc_200( z );
	}
}


// EXPORTS //

var _$factory_1192 = __factory_1192;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/levy/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/levy/cdf' );
*
* var y = cdf( 10.0, 0.0, 3.0 );
* // returns ~0.584
*
* y = cdf( 0.3, 0.0, 3.0 );
* // returns ~0.002
*
* @example
* var factory = require( '@stdlib/stats/base/dists/levy/cdf' ).factory;
*
* var myCDF = factory( 2.0, 3.0 );
* var y = myCDF( 100.0 );
* // returns ~0.861
*
* y = myCDF( 10.0 );
* // returns ~0.54
*
* y = myCDF( 2.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1191 = require( './cdf.js' ); */;
/* removed: var _$factory_1192 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1191, 'factory', _$factory_1192 );


// EXPORTS //

var _$cdf_1193 = _$cdf_1191;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var THREE_GAMMA = 3.0 * _$GAMMA_88;


// MAIN //

/**
* Returns the differential entropy for a Lévy distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~4.018
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1196( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return ( 1.0 + THREE_GAMMA + _$ln_376( 16.0*c*c*_$PI_109 ) ) / 2.0;
}


// EXPORTS //

var _$entropy_1196 = __entropy_1196;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution differential entropy.
*
* @module @stdlib/stats/base/dists/levy/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/levy/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~3.324
*
* y = entropy( 4.0, 2.0 );
* // returns ~4.018
*/

// MODULES //

/* removed: var _$entropy_1196 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1197 = _$entropy_1196;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the expected value for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns Infinity
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns Infinity
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1205( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return _$FLOAT64_PINF_110;
}


// EXPORTS //

var _$mean_1205 = __mean_1205;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution expected value.
*
* @module @stdlib/stats/base/dists/levy/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/levy/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns Infinity
*
* y = mean( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$mean_1205 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1204 = _$mean_1205;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// VARIABLES //

var DENOM = 2.0 * _$pow_396( _$erfcinv_210( 0.5 ), 2.0 );


// MAIN //

/**
* Returns the median for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns ~2.198
*
* @example
* var y = median( 5.0, 2.0 );
* // returns ~9.396
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1207( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / DENOM );
}


// EXPORTS //

var _$median_1207 = __median_1207;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution median.
*
* @module @stdlib/stats/base/dists/levy/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/levy/median' );
*
* var y = median( 0.0, 1.0 );
* // returns ~2.198
*
* y = median( 4.0, 2.0 );
* // returns ~8.396
*/

// MODULES //

/* removed: var _$median_1207 = require( './median.js' ); */;


// EXPORTS //

var _$median_1206 = _$median_1207;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~5.667
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1209( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return mu + ( c / 3.0 );
}


// EXPORTS //

var _$mode_1209 = __mode_1209;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution mode.
*
* @module @stdlib/stats/base/dists/levy/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/levy/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.333
*
* y = mode( 4.0, 2.0 );
* // returns ~4.667
*/

// MODULES //

/* removed: var _$mode_1209 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1208 = _$mode_1209;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns Infinity
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns Infinity
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1217( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return _$FLOAT64_PINF_110;
}


// EXPORTS //

var _$stdev_1217 = __stdev_1217;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution standard deviation.
*
* @module @stdlib/stats/base/dists/levy/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/levy/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns Infinity
*
* y = stdev( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$stdev_1217 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1216 = _$stdev_1217;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance for a Lévy distribution with location `mu` and scale `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns Infinity
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns Infinity
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1219( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	return _$FLOAT64_PINF_110;
}


// EXPORTS //

var _$variance_1219 = __variance_1219;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution variance.
*
* @module @stdlib/stats/base/dists/levy/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/levy/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns Infinity
*
* y = variance( 4.0, 2.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$variance_1219 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1218 = _$variance_1219;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.735
*
* @example
* var y = logcdf( 12.0, 10.0, 3.0 );
* // returns ~-1.51
*
* @example
* var y = logcdf( 9.0, 10.0, 3.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logcdf_1200( x, mu, c ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x < mu ) {
		return _$FLOAT64_NINF_107;
	}
	z = _$sqrt_437( c / ( 2.0 * ( x-mu ) ) );
	return _$ln_376( _$erfc_200( z ) );
}


// EXPORTS //

var _$logcdf_1200 = __logcdf_1200;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 4.0 );
* // returns ~-1.511
*
* y = logcdf( 2.0 );
* // returns -Infinity
*/
function __factory_1198( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < mu ) {
			return _$FLOAT64_NINF_107;
		}
		z = _$sqrt_437( c / ( 2.0 * ( x-mu ) ) );
		return _$ln_376( _$erfc_200( z ) );
	}
}


// EXPORTS //

var _$factory_1198 = __factory_1198;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/levy/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/levy/logcdf' );
*
* var y = logcdf( 10.0, 0.0, 3.0 );
* // returns ~-0.538
*
* y = logcdf( 0.3, 0.0, 3.0 );
* // returns ~-6.215
*
* @example
* var factory = require( '@stdlib/stats/base/dists/levy/logcdf' ).factory;
*
* var mylogcdf = factory( 2.0, 3.0 );
* var y = mylogcdf( 100.0 );
* // returns ~-0.15
*
* y = mylogcdf( 10.0 );
* // returns ~-0.616
*
* y = mylogcdf( 2.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1200 = require( './logcdf.js' ); */;
/* removed: var _$factory_1198 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1200, 'factory', _$factory_1198 );


// EXPORTS //

var _$logcdf_1199 = _$logcdf_1200;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of `2π`.
*
* @module @stdlib/constants/math/float64-ln-two-pi
* @type {number}
*
* @example
* var LN_TWO_PI = require( '@stdlib/constants/math/float64-ln-two-pi' );
* // returns 1.8378770664093456
*/


// MAIN //

/**
* Natural logarithm of `2π`.
*
* ```tex
* \ln 2\pi
* ```
*
* @constant
* @type {number}
* @default 1.8378770664093456
*/
var LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634;


// EXPORTS //

var _$LN_TWO_PI_98 = LN_TWO_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_TWO_PI_98 = require( '@stdlib/constants/math/float64-ln-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logpdf_1203( x, mu, c ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return _$FLOAT64_NINF_107;
	}
	z = x - mu;
	return 0.5 * ( _$ln_376( c ) - _$LN_TWO_PI_98 - ( c/z ) - ( 3.0*_$ln_376( z ) ) );
}


// EXPORTS //

var _$logpdf_1203 = __logpdf_1203;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_TWO_PI_98 = require( '@stdlib/constants/math/float64-ln-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 11.0 );
* // returns ~-1.572
*
* y = logpdf( 10.0 );
* // returns -Infinity
*/
function __factory_1201( mu, c ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return _$FLOAT64_NINF_107;
		}
		z = x - mu;
		return 0.5 * ( _$ln_376( c ) - _$LN_TWO_PI_98 - ( c/z ) - ( 3.0*_$ln_376( z ) ) );
	}
}


// EXPORTS //

var _$factory_1201 = __factory_1201;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/levy/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/levy/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.209
*
* @example
* var factory = require( '@stdlib/stats/base/dists/levy/logpdf' ).factory;
*
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 11.0 );
* // returns ~-1.572
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1203 = require( './logpdf.js' ); */;
/* removed: var _$factory_1201 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1203, 'factory', _$factory_1201 );


// EXPORTS //

var _$logpdf_1202 = _$logpdf_1203;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __pdf_1212( x, mu, c ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		c <= 0.0
	) {
		return NaN;
	}
	if ( x <= mu ) {
		return 0.0;
	}
	return _$sqrt_437( c/_$TWO_PI_119 ) * _$exp_225( -c / ( 2.0*(x-mu) ) ) / _$pow_396( x-mu, 1.5 );
}


// EXPORTS //

var _$pdf_1212 = __pdf_1212;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} c - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 11.0 );
* // returns ~0.208
*
* y = pdf( 10.0 );
* // returns 0.0
*/
function __factory_1210( mu, c ) {
	if ( _$isnan_130( mu ) || _$isnan_130( c ) || c <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Lévy distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= mu ) {
			return 0.0;
		}
		return _$sqrt_437( c/_$TWO_PI_119 ) * _$exp_225( -c / ( 2.0*(x-mu) ) ) / _$pow_396( x-mu, 1.5 );
	}
}


// EXPORTS //

var _$factory_1210 = __factory_1210;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/levy/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/levy/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.11
*
* @example
* var factory = require( '@stdlib/stats/base/dists/levy/pdf' ).factory;
*
* var pdf = factory( 10.0, 2.0 );
* y = pdf( 11.0 );
* // returns ~0.208
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1212 = require( './pdf.js' ); */;
/* removed: var _$factory_1210 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1212, 'factory', _$factory_1210 );


// EXPORTS //

var _$pdf_1211 = _$pdf_1212;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Lévy distribution with location parameter `mu` and scale parameter `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~15.58
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~8.396
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1215( p, mu, c ) {
	var fval;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( c ) ||
		_$isnan_130( p ) ||
		c <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	fval = _$erfcinv_210( p );
	return mu + ( c / ( 2.0*fval*fval ) );
}


// EXPORTS //

var _$quantile_1215 = __quantile_1215;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Lévy distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} c - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~14.396
*
* y = quantile( 0.8 );
* // returns ~41.16
*/
function __factory_1213( mu, c ) {
	if ( _$isnan_130( mu ) || _$isnan_130( c ) || c <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Lévy distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var fval;
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		fval = _$erfcinv_210( p );
		return mu + ( c / ( 2.0*fval*fval ) );
	}
}


// EXPORTS //

var _$factory_1213 = __factory_1213;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution quantile function.
*
* @module @stdlib/stats/base/dists/levy/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/levy/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* @example
* var factory = require( '@stdlib/stats/base/dists/levy/quantile' ).factory;
* var quantile = factory( 10.0, 2.0 );
*
* var y = quantile( 0.5 );
* // returns ~14.396
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1215 = require( './quantile.js' ); */;
/* removed: var _$factory_1213 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1215, 'factory', _$factory_1213 );


// EXPORTS //

var _$quantile_1214 = _$quantile_1215;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1194 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1194 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1197 = require( '@stdlib/stats/base/dists/levy/entropy' ); */;
/* removed: var _$mean_1204 = require( '@stdlib/stats/base/dists/levy/mean' ); */;
/* removed: var _$median_1206 = require( '@stdlib/stats/base/dists/levy/median' ); */;
/* removed: var _$mode_1208 = require( '@stdlib/stats/base/dists/levy/mode' ); */;
/* removed: var _$stdev_1216 = require( '@stdlib/stats/base/dists/levy/stdev' ); */;
/* removed: var _$variance_1218 = require( '@stdlib/stats/base/dists/levy/variance' ); */;
/* removed: var _$cdf_1193 = require( '@stdlib/stats/base/dists/levy/cdf' ); */;
/* removed: var _$logcdf_1199 = require( '@stdlib/stats/base/dists/levy/logcdf' ); */;
/* removed: var _$logpdf_1202 = require( '@stdlib/stats/base/dists/levy/logpdf' ); */;
/* removed: var _$pdf_1211 = require( '@stdlib/stats/base/dists/levy/pdf' ); */;
/* removed: var _$quantile_1214 = require( '@stdlib/stats/base/dists/levy/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function levyCDF( x ) {
	return _$cdf_1193( x, this.mu, this.c );
}

/**
* Evaluates the logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function levyLogCDF( x ) {
	return _$logcdf_1199( x, this.mu, this.c );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function levyLogPDF( x ) {
	return _$logpdf_1202( x, this.mu, this.c );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function levyPDF( x ) {
	return _$pdf_1211( x, this.mu, this.c );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function levyQuantile( p ) {
	return _$quantile_1214( p, this.mu, this.c );
}


// MAIN //

/**
* Lévy distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [c=1.0] - scale parameter
* @throws {TypeError} `c` must be a positive number
* @returns {Levy} distribution instance
*
* @example
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 3.0 );
* // returns ~0.48
*
* var v = levy.mode;
* // returns ~1.333
*/
function Levy() {
	var mu;
	var c;
	if ( !(this instanceof Levy) ) {
		if ( arguments.length === 0 ) {
			return new Levy();
		}
		return new Levy( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		c = arguments[ 1 ];
		if ( !__isNumber_1194( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1194( c ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `c` must be a positive number. Value: `' + c + '`' );
		}
	} else {
		mu = 0.0;
		c = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1194( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !__isPositive_1194( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			c = value;
		}
	});
	return this;
}

/**
* Lévy distribution differential entropy.
*
* @name entropy
* @memberof Levy.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.entropy;
* // returns ~5.809
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'entropy', function get() {
	return _$entropy_1197( this.mu, this.c );
});

/**
* Lévy distribution expected value.
*
* @name mean
* @memberof Levy.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mean;
* // returns Infinity
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'mean', function get() {
	return _$mean_1204( this.mu, this.c );
});

/**
* Lévy distribution median.
*
* @name median
* @memberof Levy.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.median;
* // returns ~30.377
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'median', function get() {
	return _$median_1206( this.mu, this.c );
});

/**
* Lévy distribution mode.
*
* @name mode
* @memberof Levy.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.mode;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'mode', function get() {
	return _$mode_1208( this.mu, this.c );
});

/**
* Lévy distribution standard deviation.
*
* @name stdev
* @memberof Levy.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.stdev;
* // returns Infinity
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'stdev', function get() {
	return _$stdev_1216( this.mu, this.c );
});

/**
* Lévy distribution variance.
*
* @name variance
* @memberof Levy.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var levy = new Levy( 4.0, 12.0 );
*
* var v = levy.variance;
* // returns Infinity
*/
_$setNonEnumerableReadOnlyAccessor_1601( Levy.prototype, 'variance', function get() {
	return _$variance_1218( this.mu, this.c );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.cdf( 2.5 );
* // returns ~0.005
*/
_$setNonEnumerableReadOnly_1603( Levy.prototype, 'cdf', levyCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.logcdf( 2.5 );
* // returns ~-5.365
*/
_$setNonEnumerableReadOnly_1603( Levy.prototype, 'logcdf', levyLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.logpdf( 2.5 );
* // returns ~-3.186
*/
_$setNonEnumerableReadOnly_1603( Levy.prototype, 'logpdf', levyLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Levy.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.pdf( 2.5 );
* // returns ~0.041
*/
_$setNonEnumerableReadOnly_1603( Levy.prototype, 'pdf', levyPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Levy.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var levy = new Levy( 2.0, 4.0 );
*
* var v = levy.quantile( 0.5 );
* // returns ~10.792
*/
_$setNonEnumerableReadOnly_1603( Levy.prototype, 'quantile', levyQuantile );


// EXPORTS //

var _$Levy_1194 = Levy;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lévy distribution constructor.
*
* @module @stdlib/stats/base/dists/levy/ctor
*
* @example
* var Levy = require( '@stdlib/stats/base/dists/levy/ctor' );
*
* var levy = new Levy( 1.0, 1.0 );
*
* var y = levy.cdf( 1.0 );
* // returns 0.0
*
* var mean = levy.mean;
* // returns Infinity
*/

// MODULES //

/* removed: var _$Levy_1194 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1195 = _$Levy_1194;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.159
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __cdf_1220( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x < mu ) ? 0.0 : 1.0;
	}
	z = ( x - mu ) / s;
	return 1.0 / ( 1.0 + _$exp_225( -z ) );
}


// EXPORTS //

var _$cdf_1220 = __cdf_1220;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1221 = _$cdf_765.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.209
*
* y = cdf( 4.0 );
* // returns ~0.661
*/
function __factory_1221( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1221( mu );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return 1.0 / ( 1.0 + _$exp_225( -z ) );
	}
}


// EXPORTS //

var _$factory_1221 = __factory_1221;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/logistic/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/logistic/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.881
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.209
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1220 = require( './cdf.js' ); */;
/* removed: var _$factory_1221 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1220, 'factory', _$factory_1221 );


// EXPORTS //

var _$cdf_1222 = _$cdf_1220;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~2.693
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1225( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( s ) + 2.0;
}


// EXPORTS //

var _$entropy_1225 = __entropy_1225;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution differential entropy.
*
* @module @stdlib/stats/base/dists/logistic/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/logistic/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns 2.0
*
* y = entropy( 4.0, 2.0 );
* // returns ~2.693
*/

// MODULES //

/* removed: var _$entropy_1225 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1226 = _$entropy_1225;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns 1.2
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_1228( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 1.2;
}


// EXPORTS //

var _$kurtosis_1228 = __kurtosis_1228;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/logistic/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/logistic/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 1.2
*
* y = kurtosis( 4.0, 2.0 );
* // returns 1.2
*/

// MODULES //

/* removed: var _$kurtosis_1228 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1227 = _$kurtosis_1228;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1237( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mean_1237 = __mean_1237;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution expected value.
*
* @module @stdlib/stats/base/dists/logistic/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/logistic/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_1237 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1236 = _$mean_1237;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1239( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$median_1239 = __median_1239;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution median.
*
* @module @stdlib/stats/base/dists/logistic/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/logistic/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$median_1239 = require( './median.js' ); */;


// EXPORTS //

var _$median_1238 = _$median_1239;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1244( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mode_1244 = __mode_1244;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution mode.
*
* @module @stdlib/stats/base/dists/logistic/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/logistic/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mode_1244 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1243 = _$mode_1244;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns 0.0
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_1252( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_1252 = __skewness_1252;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution skewness.
*
* @module @stdlib/stats/base/dists/logistic/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/logistic/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 2.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1252 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1251 = _$skewness_1252;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of `3`.
*
* @module @stdlib/constants/math/float64-sqrt-three
* @type {number}
*
* @example
* var SQRT3 = require( '@stdlib/constants/math/float64-sqrt-three' );
* // returns 1.7320508075688772
*/


// MAIN //

/**
* Square root of `3`.
*
* ```tex
* \sqrt{3}
* ```
*
* @constant
* @type {number}
* @default 1.7320508075688772
*/
var SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00;


// EXPORTS //

var _$SQRT3_116 = SQRT3;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$SQRT3_116 = require( '@stdlib/constants/math/float64-sqrt-three' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns the standard deviation for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~3.628
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1254( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return s * _$PI_109 / _$SQRT3_116;
}


// EXPORTS //

var _$stdev_1254 = __stdev_1254;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution standard deviation.
*
* @module @stdlib/stats/base/dists/logistic/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/logistic/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~1.814
*
* y = stdev( 4.0, 2.0 );
* // returns ~3.628
*/

// MODULES //

/* removed: var _$stdev_1254 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1253 = _$stdev_1254;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$PI_SQUARED_108 = require( '@stdlib/constants/math/float64-pi-squared' ); */;


// MAIN //

/**
* Returns the variance for a logistic distribution with location `mu` and scale `s`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} s - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~13.159
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1256( mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s <= 0.0
	) {
		return NaN;
	}
	return ( s*s ) * _$PI_SQUARED_108 / 3.0;
}


// EXPORTS //

var _$variance_1256 = __variance_1256;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution variance.
*
* @module @stdlib/stats/base/dists/logistic/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/logistic/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~3.29
*
* y = variance( 4.0, 2.0 );
* // returns ~13.159
*/

// MODULES //

/* removed: var _$variance_1256 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1255 = _$variance_1256;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of the [StatsFuns.jl]{@link https://github.com/JuliaStats/StatsFuns.jl/blob/master/src/basicfuns.jl} Julia package. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (c) 2015: Dahua Lin.
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Compute ln( 1 + exp(x) ) without overflow.
*
* @private
* @param {number} x - input value
* @returns {number} function value
*/
function log1pexp( x ) {
	if ( x <= 18.0 ) {
		return _$log1p_380( _$exp_225(x) );
	}
	if ( x > 33.3 ) {
		return x;
	}
	// Case: 18.0 < x <= 33.3
	return x + _$exp_225( -x );
}


// EXPORTS //

var _$log1pexp_1231 = log1pexp;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$log1pexp_1231 = require( './log1pexp.js' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
*
* @example
* var y = logcdf( 5.0, 10.0, 3.0 );
* // returns ~-1.84
*
* @example
* var y = logcdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __logcdf_1232( x, mu, s ) {
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return ( x < mu ) ? _$FLOAT64_NINF_107 : 0.0;
	}
	z = ( x - mu ) / s;
	return -_$log1pexp_1231( -z );
}


// EXPORTS //

var _$logcdf_1232 = __logcdf_1232;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1229 = _$logcdf_771.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1pexp_1231 = require( './log1pexp.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 3.0, 1.5 );
*
* var y = logcdf( 1.0 );
* // returns ~-1.567
*
* y = logcdf( 4.0 );
* // returns ~-0.414
*/
function __factory_1229( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1229( mu );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		z = ( x - mu ) / s;
		return -_$log1pexp_1231( -z );
	}
}


// EXPORTS //

var _$factory_1229 = __factory_1229;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/logistic/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/logistic/logcdf' );
*
* var y = logcdf( 2.0, 0.0, 1.0 );
* // returns ~-0.127
*
* var mylogcdf = logcdf.factory( 3.0, 1.5 );
*
* var y = mylogcdf( 1.0 );
* // returns ~-1.565
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1232 = require( './logcdf.js' ); */;
/* removed: var _$factory_1229 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1232, 'factory', _$factory_1229 );


// EXPORTS //

var _$logcdf_1230 = _$logcdf_1232;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns ~-3.351
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __logpdf_1235( x, mu, s ) {
	var az;
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( s === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	z = ( x - mu ) / s;
	az = -_$abs_147( z );
	return az - (2.0 * _$log1p_380( _$exp_225( az ) )) - _$ln_376( s );
}


// EXPORTS //

var _$logpdf_1235 = __logpdf_1235;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1233 = _$logpdf_774.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-2.079
*
* y = logpdf( 5.0 );
* // returns ~-3.351
*/
function __factory_1233( mu, s ) {
	var ls;
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1233( mu );
	}
	ls = _$ln_376( s );
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -1.2 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var az;
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_107 ) {
			return _$FLOAT64_NINF_107;
		}
		z = ( x - mu ) / s;
		az = -_$abs_147( z );
		return az - (2.0 * _$log1p_380( _$exp_225( az ) )) - ls;
	}
}


// EXPORTS //

var _$factory_1233 = __factory_1233;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/logistic/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/logistic/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.254
*
* var mylogpdf = logpdf.factory( 10.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns -2.079
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1235 = require( './logpdf.js' ); */;
/* removed: var _$factory_1233 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1235, 'factory', _$factory_1233 );


// EXPORTS //

var _$logpdf_1234 = _$logpdf_1235;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sinpi_435 = require( '@stdlib/math/base/special/sinpi' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isInfinite_126 = require( '@stdlib/math/base/assert/is-infinite' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Computes the normalized cardinal sine of a number.
*
* ## Method
*
* For \\( x \neq 0 \\), the normalized cardinal sine is calculated as
*
* ```tex
* \operatorname{sinc}(x) = \frac{\operatorname{sin}(\pi x)}{\pi x}.
* ```
*
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{sinc}(0) &= 1 & \\
* \operatorname{sinc}(\infty) &= 0 & \\
* \operatorname{sinc}(-\infty) &= 0 & \\
* \operatorname{sinc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* @param {number} x - input value
* @returns {number} cardinal sine
*
* @example
* var v = sinc( 0.5 );
* // returns ~0.637
*
* @example
* var v = sinc( -1.2 );
* // returns ~-0.156
*
* @example
* var v = sinc( 0.0 );
* // returns 1.0
*
* @example
* var v = sinc( NaN );
* // returns NaN
*/
function sinc( x ) {
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	if ( _$isInfinite_126( x ) ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return 1.0;
	}
	return _$sinpi_435( x ) / ( _$PI_109*x );
}


// EXPORTS //

var _$sinc_431 = sinc;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the normalized cardinal sine of a number.
*
* @module @stdlib/math/base/special/sinc
*
* @example
* var sinc = require( '@stdlib/math/base/special/sinc' );
*
* var v = sinc( 0.5 );
* // returns ~0.637
*
* v = sinc( -1.2 );
* // returns ~-0.156
*
* v = sinc( 0.0 );
* // returns 1.0
*
* v = sinc( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$sinc_431 = require( './sinc.js' ); */;


// EXPORTS //

var _$sinc_430 = _$sinc_431;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinc_430 = require( '@stdlib/math/base/special/sinc' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a logistic distribution with mean `mu` and scale parameter `s` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
*
* @example
* var y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
*
* @example
* var y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
*
* @example
* var y = mgf( 0.5, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 0.0, 4.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function __mgf_1242( t, mu, s ) {
	var st;
	st = s * t;
	if (
		_$isnan_130( st ) ||
		_$isnan_130( mu ) ||
		s < 0.0 ||
		_$abs_147( st ) > 1.0
	) {
		return NaN;
	}
	return _$exp_225( mu * t ) / _$sinc_430( st );
}


// EXPORTS //

var _$mgf_1242 = __mgf_1242;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1240 = _$mgf_784.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sinc_430 = require( '@stdlib/math/base/special/sinc' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a logistic distribution with mean `mu` and scale parameter `s`.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 10.0, 0.5 );
*
* var y = mgf( 0.5 );
* // returns ~164.846
*
* y = mgf( 2.0 );
* // returns Infinity
*/
function __factory_1240( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1240( mu );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a logistic distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var st = s * t;
		if ( _$abs_147( st ) > 1.0 ) {
			return NaN;
		}
		return _$exp_225( mu * t ) / _$sinc_430( st );
	}
}


// EXPORTS //

var _$factory_1240 = __factory_1240;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a logistic distribution.
*
* @module @stdlib/stats/base/dists/logistic/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/logistic/mgf' );
*
* var y = mgf( 0.9, 0.0, 1.0 );
* // returns ~9.15
*
* y = mgf( 0.1, 4.0, 4.0 );
* // returns ~1.971
*
* y = mgf( -0.2, 4.0, 4.0 );
* // returns ~1.921
*
* var mymgf = mgf.factory( 10.0, 0.5 );
*
* y = mymgf( 0.5 );
* // returns ~164.846
*
* y = mymgf( 2.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1242 = require( './mgf.js' ); */;
/* removed: var _$factory_1240 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1242, 'factory', _$factory_1240 );


// EXPORTS //

var _$mgf_1241 = _$mgf_1242;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.035
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __pdf_1247( x, mu, s ) {
	var ez;
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		s < 0.0
	) {
		return NaN;
	}
	if ( x === _$FLOAT64_NINF_107 ) {
		return 0.0;
	}
	if ( s === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	z = _$abs_147( ( x - mu ) / s );
	ez = _$exp_225( -z );
	return ez / ( s * _$pow_396( 1.0 + ez, 2.0 ) );
}


// EXPORTS //

var _$pdf_1247 = __pdf_1247;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1245 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns 0.125
*
* y = pdf( 5.0 );
* // returns ~0.035
*/
function __factory_1245( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1245( mu );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a logistic distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( -1.2 );
	* // returns <number>
	*/
	function pdf( x ) {
		var ez;
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === _$FLOAT64_NINF_107 ) {
			return 0.0;
		}
		z = _$abs_147( ( x - mu ) / s );
		ez = _$exp_225( -z );
		return ez / ( s * _$pow_396( 1.0 + ez, 2.0 ) );
	}
}


// EXPORTS //

var _$factory_1245 = __factory_1245;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/logistic/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/logistic/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.105
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns 0.125
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1247 = require( './pdf.js' ); */;
/* removed: var _$factory_1245 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1247, 'factory', _$factory_1245 );


// EXPORTS //

var _$pdf_1246 = _$pdf_1247;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the quantile function for a logistic distribution with location parameter `mu` and scale parameter `s` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1250( p, mu, s ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( s ) ||
		_$isnan_130( p ) ||
		s < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( s === 0.0 ) {
		return mu;
	}
	return mu + ( s * _$ln_376( p / ( 1.0-p ) ) );
}


// EXPORTS //

var _$quantile_1250 = __quantile_1250;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1248 = _$quantile_795.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a logistic distribution.
*
* @param {number} mu - location parameter
* @param {NonNegativeNumber} s - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~12.773
*/
function __factory_1248( mu, s ) {
	if ( _$isnan_130( mu ) || _$isnan_130( s ) || s < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( s === 0.0 ) {
		return __degenerate_1248( mu );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a logistic distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return mu + (s * _$ln_376( p / ( 1.0 - p ) ));
	}
}


// EXPORTS //

var _$factory_1248 = __factory_1248;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution quantile function.
*
* @module @stdlib/stats/base/dists/logistic/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/logistic/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~1.386
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1250 = require( './quantile.js' ); */;
/* removed: var _$factory_1248 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1250, 'factory', _$factory_1248 );


// EXPORTS //

var _$quantile_1249 = _$quantile_1250;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1223 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1223 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1226 = require( '@stdlib/stats/base/dists/logistic/entropy' ); */;
/* removed: var _$kurtosis_1227 = require( '@stdlib/stats/base/dists/logistic/kurtosis' ); */;
/* removed: var _$mean_1236 = require( '@stdlib/stats/base/dists/logistic/mean' ); */;
/* removed: var _$median_1238 = require( '@stdlib/stats/base/dists/logistic/median' ); */;
/* removed: var _$mode_1243 = require( '@stdlib/stats/base/dists/logistic/mode' ); */;
/* removed: var _$skewness_1251 = require( '@stdlib/stats/base/dists/logistic/skewness' ); */;
/* removed: var _$stdev_1253 = require( '@stdlib/stats/base/dists/logistic/stdev' ); */;
/* removed: var _$variance_1255 = require( '@stdlib/stats/base/dists/logistic/variance' ); */;
/* removed: var _$cdf_1222 = require( '@stdlib/stats/base/dists/logistic/cdf' ); */;
/* removed: var _$logcdf_1230 = require( '@stdlib/stats/base/dists/logistic/logcdf' ); */;
/* removed: var _$logpdf_1234 = require( '@stdlib/stats/base/dists/logistic/logpdf' ); */;
/* removed: var _$mgf_1241 = require( '@stdlib/stats/base/dists/logistic/mgf' ); */;
/* removed: var _$pdf_1246 = require( '@stdlib/stats/base/dists/logistic/pdf' ); */;
/* removed: var _$quantile_1249 = require( '@stdlib/stats/base/dists/logistic/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function logisticCDF( x ) {
	return _$cdf_1222( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function logisticLogCDF( x ) {
	return _$logcdf_1230( x, this.mu, this.s );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function logisticLogPDF( x ) {
	return _$logpdf_1234( x, this.mu, this.s );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function logisticMGF( t ) {
	return _$mgf_1241( t, this.mu, this.s );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function logisticPDF( x ) {
	return _$pdf_1246( x, this.mu, this.s );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function logisticQuantile( p ) {
	return _$quantile_1249( p, this.mu, this.s );
}


// MAIN //

/**
* Logistic distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [s=1.0] - scale parameter
* @throws {TypeError} `s` must be a positive number
* @returns {Logistic} distribution instance
*
* @example
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/
function Logistic() {
	var mu;
	var s;
	if ( !(this instanceof Logistic) ) {
		if ( arguments.length === 0 ) {
			return new Logistic();
		}
		return new Logistic( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		s = arguments[ 1 ];
		if ( !__isNumber_1223( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1223( s ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `s` must be a positive number. Value: `' + s + '`' );
		}
	} else {
		mu = 0.0;
		s = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1223( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 's', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return s;
		},
		'set': function set( value ) {
			if ( !__isPositive_1223( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			s = value;
		}
	});
	return this;
}

/**
* Logistic distribution differential entropy.
*
* @name entropy
* @memberof Logistic.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.entropy;
* // returns ~4.485
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'entropy', function get() {
	return _$entropy_1226( this.mu, this.s );
});

/**
* Logistic distribution excess kurtosis.
*
* @name kurtosis
* @memberof Logistic.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.kurtosis;
* // returns 1.2
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'kurtosis', function get() {
	return _$kurtosis_1227( this.mu, this.s );
});

/**
* Logistic distribution expected value.
*
* @name mean
* @memberof Logistic.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'mean', function get() {
	return _$mean_1236( this.mu, this.s );
});

/**
* Logistic distribution median.
*
* @name median
* @memberof Logistic.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'median', function get() {
	return _$median_1238( this.mu, this.s );
});

/**
* Logistic distribution mode.
*
* @name mode
* @memberof Logistic.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'mode', function get() {
	return _$mode_1243( this.mu, this.s );
});

/**
* Logistic distribution skewness.
*
* @name skewness
* @memberof Logistic.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'skewness', function get() {
	return _$skewness_1251( this.mu, this.s );
});

/**
* Logistic distribution standard deviation.
*
* @name stdev
* @memberof Logistic.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.stdev;
* // returns ~21.766
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'stdev', function get() {
	return _$stdev_1253( this.mu, this.s );
});

/**
* Logistic distribution variance.
*
* @name variance
* @memberof Logistic.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var logistic = new Logistic( 4.0, 12.0 );
*
* var v = logistic.variance;
* // returns ~473.741
*/
_$setNonEnumerableReadOnlyAccessor_1601( Logistic.prototype, 'variance', function get() {
	return _$variance_1255( this.mu, this.s );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.cdf( 0.5 );
* // returns ~0.407
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'cdf', logisticCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logcdf( 0.5 );
* // returns ~-0.898
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'logcdf', logisticLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.logpdf( 0.8 );
* // returns ~-2.795
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'logpdf', logisticLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.mgf( 0.2 );
* // returns ~6.379
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'mgf', logisticMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Logistic.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.pdf( 0.8 );
* // returns ~0.061
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'pdf', logisticPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Logistic.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var logistic = new Logistic( 2.0, 4.0 );
*
* var v = logistic.quantile( 0.5 );
* // returns 2.0
*/
_$setNonEnumerableReadOnly_1603( Logistic.prototype, 'quantile', logisticQuantile );


// EXPORTS //

var _$Logistic_1223 = Logistic;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Logistic distribution constructor.
*
* @module @stdlib/stats/base/dists/logistic/ctor
*
* @example
* var Logistic = require( '@stdlib/stats/base/dists/logistic/ctor' );
*
* var logistic = new Logistic( 1.0, 1.0 );
*
* var y = logistic.cdf( 1.5 );
* // returns ~0.622
*
* var mu = logistic.mean;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Logistic_1223 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1224 = _$Logistic_1223;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Probability} evaluated cumulative distribution function
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* @example
* var y = cdf( -1.0, -1.0, 2.0 );
* // returns 0.5
*
* @example
* var y = cdf( -1.0, 4.0, 2.0 );
* // returns ~0.006
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __cdf_1321( x, mu, sigma ) {
	var denom;
	var xc;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return (x < mu) ? 0.0 : 1.0;
	}
	denom = sigma * _$sqrt_437( 2.0 );
	xc = x - mu;
	return 0.5 * _$erfc_200( -xc/denom );
}


// EXPORTS //

var _$cdf_1321 = __cdf_1321;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1322 = _$cdf_765.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$erfc_200 = require( '@stdlib/math/base/special/erfc' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the cumulative distribution function
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 10.0 );
* // returns 0.5
*
* y = cdf( 12.0 );
* // returns ~0.841
*/
function __factory_1322( mu, sigma ) {
	var denom;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1322( mu );
	}
	denom = sigma * _$sqrt_437( 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var xc;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		xc = x - mu;
		return 0.5 * _$erfc_200( -xc / denom );
	}
}


// EXPORTS //

var _$factory_1322 = __factory_1322;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/normal/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/normal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.977
*
* var myCDF = cdf.factory( 10.0, 2.0 );
* y = myCDF( 10.0 );
* // returns 0.5
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1321 = require( './cdf.js' ); */;
/* removed: var _$factory_1322 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1321, 'factory', _$factory_1322 );


// EXPORTS //

var _$cdf_1323 = _$cdf_1321;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_1323 = require( '@stdlib/stats/base/dists/normal/cdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* @example
* var y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* @example
* var y = cdf( 2.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*/
function __cdf_1257( x, mu, sigma ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	return _$cdf_1323( _$ln_376(x), mu, sigma );
}


// EXPORTS //

var _$cdf_1257 = __cdf_1257;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$cdf_1323 = require( '@stdlib/stats/base/dists/normal/cdf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 3.0, 1.5 );
*
* var y = cdf( 1.0 );
* // returns ~0.023
*
* y = cdf( 4.0 );
* // returns ~0.141
*/
function __factory_1258( mu, sigma ) {
	if ( _$isnan_130( mu ) || _$isnan_130( sigma ) || sigma <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		return _$cdf_1323( _$ln_376(x), mu, sigma );
	}
}


// EXPORTS //

var _$factory_1258 = __factory_1258;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the lognormal distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/lognormal/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/lognormal/cdf' );
*
* var y = cdf( 2.0, 0.0, 1.0 );
* // returns ~0.756
*
* y = cdf( 5.0, 10.0, 3.0 );
* // returns ~0.003
*
* var mycdf = cdf.factory( 3.0, 1.5 );
*
* y = mycdf( 1.0 );
* // returns ~0.023
*
* y = mycdf( 4.0 );
* // returns ~0.141
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1257 = require( './cdf.js' ); */;
/* removed: var _$factory_1258 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1257, 'factory', _$factory_1258 );


// EXPORTS //

var _$cdf_1259 = _$cdf_1257;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$SQRT_TWO_PI_117 = require( '@stdlib/constants/math/float64-sqrt-two-pi' ); */;


// MAIN //

/**
* Returns the differential entropy for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* @example
* var y = entropy( 5.0, 2.0 );
* // returns ~7.112
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1262( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( sigma * _$exp_225( mu + 0.5 ) * _$SQRT_TWO_PI_117 );
}


// EXPORTS //

var _$entropy_1262 = __entropy_1262;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution entropy.
*
* @module @stdlib/stats/base/dists/lognormal/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/lognormal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 2.0 );
* // returns ~6.112
*/

// MODULES //

/* removed: var _$entropy_1262 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1263 = _$entropy_1262;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* @example
* var y = kurtosis( 5.0, 2.0 );
* // returns ~9220556.977
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_1265( mu, sigma ) {
	var out;
	var s2;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma * sigma;
	out = _$exp_225( 4.0*s2 );
	out += 2.0 * _$exp_225( 3.0*s2 );
	out += 3.0 * _$exp_225( 2.0*s2 );
	out -= 6.0;
	return out;
}


// EXPORTS //

var _$kurtosis_1265 = __kurtosis_1265;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/lognormal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/lognormal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns ~110.936
*
* y = kurtosis( 4.0, 2.0 );
* // returns ~9220556.977
*/

// MODULES //

/* removed: var _$kurtosis_1265 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1264 = _$kurtosis_1265;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the expected value for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns ~1096.633
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1270( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( mu + ( ( sigma*sigma ) / 2.0 ) );
}


// EXPORTS //

var _$mean_1270 = __mean_1270;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution expected value.
*
* @module @stdlib/stats/base/dists/lognormal/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/lognormal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns ~1.649
*
* y = mean( 4.0, 2.0 );
* // returns ~403.429
*/

// MODULES //

/* removed: var _$mean_1270 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1269 = _$mean_1270;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the median for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns ~148.413
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1272( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( mu );
}


// EXPORTS //

var _$median_1272 = __median_1272;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution median.
*
* @module @stdlib/stats/base/dists/lognormal/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/lognormal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 1.0
*
* y = median( 4.0, 2.0 );
* // returns ~54.598
*/

// MODULES //

/* removed: var _$median_1272 = require( './median.js' ); */;


// EXPORTS //

var _$median_1271 = _$median_1272;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the mode for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns ~2.718
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1274( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( mu - ( sigma*sigma ) );
}


// EXPORTS //

var _$mode_1274 = __mode_1274;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution mode.
*
* @module @stdlib/stats/base/dists/lognormal/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/lognormal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns ~0.368
*
* y = mode( 4.0, 2.0 );
* // returns 1.0
*/

// MODULES //

/* removed: var _$mode_1274 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1273 = _$mode_1274;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the skewness for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* @example
* var y = skewness( 5.0, 2.0 );
* // returns ~414.359
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_1282( mu, sigma ) {
	var es2;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	es2 = _$exp_225( sigma*sigma );
	return ( es2 + 2.0 ) * _$sqrt_437( es2 - 1.0 );
}


// EXPORTS //

var _$skewness_1282 = __skewness_1282;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution skewness.
*
* @module @stdlib/stats/base/dists/lognormal/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/lognormal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns ~6.185
*
* y = skewness( 4.0, 2.0 );
* // returns ~414.359
*/

// MODULES //

/* removed: var _$skewness_1282 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1281 = _$skewness_1282;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the standard deviation for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* @example
* var y = stdev( 5.0, 2.0 );
* // returns ~8028.534
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1284( mu, sigma ) {
	var s2;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return _$sqrt_437( ( _$exp_225( s2 ) - 1.0 ) * _$exp_225( ( 2.0*mu ) + s2 ) );
}


// EXPORTS //

var _$stdev_1284 = __stdev_1284;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution standard deviation.
*
* @module @stdlib/stats/base/dists/lognormal/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/lognormal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns ~2.161
*
* y = stdev( 4.0, 2.0 );
* // returns ~2953.533
*/

// MODULES //

/* removed: var _$stdev_1284 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1283 = _$stdev_1284;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns the variance for a lognormal distribution with location `mu` and scale `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* @example
* var y = variance( 5.0, 2.0 );
* // returns ~64457364.853
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1286( mu, sigma ) {
	var s2;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	s2 = sigma*sigma;
	return ( _$exp_225( s2 ) - 1.0 ) * _$exp_225( ( 2.0*mu ) + s2 );
}


// EXPORTS //

var _$variance_1286 = __variance_1286;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution variance.
*
* @module @stdlib/stats/base/dists/lognormal/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/lognormal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns ~4.671
*
* y = variance( 4.0, 2.0 );
* // returns ~8723355.729
*/

// MODULES //

/* removed: var _$variance_1286 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1285 = _$variance_1286;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* @example
* var y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* @example
* var y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logpdf_1268( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = -0.5 * _$ln_376( 2.0 * s2 * _$PI_109 );
	B = -1.0 / ( 2.0 * s2 );
	return A - _$ln_376( x ) + ( B * _$pow_396( _$ln_376(x) - mu, 2.0 ) );
}


// EXPORTS //

var _$logpdf_1268 = __logpdf_1268;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 4.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-4.275
*
* y = logpdf( 2.0 );
* // returns ~-3.672
*/
function __factory_1266( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = -0.5 * _$ln_376( 2.0 * s2 * _$PI_109 );
	B = -1.0 / ( 2.0 * s2 );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.5 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		return A - _$ln_376( x ) + ( B * _$pow_396( _$ln_376(x) - mu, 2.0 ) );
	}
}


// EXPORTS //

var _$factory_1266 = __factory_1266;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/lognormal/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-1.852
*
* y = logpdf( 1.0, 0.0, 1.0 );
* // returns ~-0.919
*
* y = logpdf( 1.0, 3.0, 1.0 );
* // returns ~-5.419
*
* var mylogpdf = logpdf.factory( 4.0, 2.0 );
* y = mylogpdf( 10.0 );
* // returns ~-4.269
*
* y = mylogpdf( 2.0 );
* // returns ~-3.689
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1268 = require( './logpdf.js' ); */;
/* removed: var _$factory_1266 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1268, 'factory', _$factory_1266 );


// EXPORTS //

var _$logpdf_1267 = _$logpdf_1268;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* @example
* var y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* @example
* var y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __pdf_1277( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	if ( x <= 0.0 ) {
		return 0.0;
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = 1.0 / ( _$sqrt_437( 2.0 * s2 * _$PI_109 ) );
	B = -1.0 / ( 2.0 * s2 );
	return (1.0/x) * A * _$exp_225( B * _$pow_396( _$ln_376(x) - mu, 2.0 ) );
}


// EXPORTS //

var _$pdf_1277 = __pdf_1277;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 4.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.014
*
* y = pdf( 2.0 );
* // returns ~0.025
*/
function __factory_1275( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = 1.0 / ( _$sqrt_437( 2.0 * s2 * _$PI_109 ) );
	B = -1.0 / ( 2.0 * s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a lognormal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.5 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= 0.0 ) {
			return 0.0;
		}
		return (1.0/x) * A * _$exp_225( B * _$pow_396( _$ln_376(x) - mu, 2.0 ) );
	}
}


// EXPORTS //

var _$factory_1275 = __factory_1275;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/lognormal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.157
*
* y = pdf( 1.0, 0.0, 1.0 );
* // returns ~0.399
*
* y = pdf( 1.0, 3.0, 1.0 );
* // returns ~0.004
*
* var mypdf = pdf.factory( 4.0, 2.0 );
* y = mypdf( 10.0 );
* // returns ~0.014
*
* y = mypdf( 2.0 );
* // returns ~0.025
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1277 = require( './pdf.js' ); */;
/* removed: var _$factory_1275 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1277, 'factory', _$factory_1275 );


// EXPORTS //

var _$pdf_1276 = _$pdf_1277;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_218( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0005087819496582806;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0005087819496582806 + (x * (-0.008368748197417368 + (x * (0.03348066254097446 + (x * (-0.012692614766297404 + (x * (-0.03656379714117627 + (x * (0.02198786811111689 + (x * (0.008226878746769157 + (x * (-0.005387729650712429 + (x * (0.0 + (x * 0.0))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (-0.9700050433032906 + (x * (-1.5657455823417585 + (x * (1.5622155839842302 + (x * (0.662328840472003 + (x * (-0.7122890234154284 + (x * (-0.05273963823400997 + (x * (0.07952836873415717 + (x * (-0.0023339375937419 + (x * 0.0008862163904564247))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 0.0 + (x * (0.0 + (x * (-0.005387729650712429 + (x * (0.008226878746769157 + (x * (0.02198786811111689 + (x * (-0.03656379714117627 + (x * (-0.012692614766297404 + (x * (0.03348066254097446 + (x * (-0.008368748197417368 + (x * -0.0005087819496582806))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0008862163904564247 + (x * (-0.0023339375937419 + (x * (0.07952836873415717 + (x * (-0.05273963823400997 + (x * (-0.7122890234154284 + (x * (0.662328840472003 + (x * (1.5622155839842302 + (x * (-1.5657455823417585 + (x * (-0.9700050433032906 + (x * 1.0))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_218 = __evalrational_218;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_219( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.20243350835593876;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.20243350835593876 + (x * (0.10526468069939171 + (x * (8.3705032834312 + (x * (17.644729840837403 + (x * (-18.851064805871424 + (x * (-44.6382324441787 + (x * (17.445385985570866 + (x * (21.12946554483405 + (x * -3.6719225470772936))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (6.242641248542475 + (x * (3.971343795334387 + (x * (-28.66081804998 + (x * (-20.14326346804852 + (x * (48.560921310873994 + (x * (10.826866735546016 + (x * (-22.643693341313973 + (x * 1.7211476576120028))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -3.6719225470772936 + (x * (21.12946554483405 + (x * (17.445385985570866 + (x * (-44.6382324441787 + (x * (-18.851064805871424 + (x * (17.644729840837403 + (x * (8.3705032834312 + (x * (0.10526468069939171 + (x * -0.20243350835593876))))))))))))))); // eslint-disable-line max-len
		s2 = 1.7211476576120028 + (x * (-22.643693341313973 + (x * (10.826866735546016 + (x * (48.560921310873994 + (x * (-20.14326346804852 + (x * (-28.66081804998 + (x * (3.971343795334387 + (x * (6.242641248542475 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_219 = __evalrational_219;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_220( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.1311027816799519;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.1311027816799519 + (x * (-0.16379404719331705 + (x * (0.11703015634199525 + (x * (0.38707973897260434 + (x * (0.3377855389120359 + (x * (0.14286953440815717 + (x * (0.029015791000532906 + (x * (0.0021455899538880526 + (x * (-6.794655751811263e-7 + (x * (2.8522533178221704e-8 + (x * -6.81149956853777e-10))))))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (3.4662540724256723 + (x * (5.381683457070069 + (x * (4.778465929458438 + (x * (2.5930192162362027 + (x * (0.848854343457902 + (x * (0.15226433829533179 + (x * (0.011059242293464892 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = -6.81149956853777e-10 + (x * (2.8522533178221704e-8 + (x * (-6.794655751811263e-7 + (x * (0.0021455899538880526 + (x * (0.029015791000532906 + (x * (0.14286953440815717 + (x * (0.3377855389120359 + (x * (0.38707973897260434 + (x * (0.11703015634199525 + (x * (-0.16379404719331705 + (x * -0.1311027816799519))))))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (0.011059242293464892 + (x * (0.15226433829533179 + (x * (0.848854343457902 + (x * (2.5930192162362027 + (x * (4.778465929458438 + (x * (5.381683457070069 + (x * (3.4662540724256723 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_220 = __evalrational_220;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_221( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.0350353787183178;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.0350353787183178 + (x * (-0.0022242652921344794 + (x * (0.018557330651423107 + (x * (0.009508047013259196 + (x * (0.0018712349281955923 + (x * (0.00015754461742496055 + (x * (0.00000460469890584318 + (x * (-2.304047769118826e-10 + (x * 2.6633922742578204e-12))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (1.3653349817554064 + (x * (0.7620591645536234 + (x * (0.22009110576413124 + (x * (0.03415891436709477 + (x * (0.00263861676657016 + (x * (0.00007646752923027944 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 2.6633922742578204e-12 + (x * (-2.304047769118826e-10 + (x * (0.00000460469890584318 + (x * (0.00015754461742496055 + (x * (0.0018712349281955923 + (x * (0.009508047013259196 + (x * (0.018557330651423107 + (x * (-0.0022242652921344794 + (x * -0.0350353787183178))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (0.00007646752923027944 + (x * (0.00263861676657016 + (x * (0.03415891436709477 + (x * (0.22009110576413124 + (x * (0.7620591645536234 + (x * (1.3653349817554064 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_221 = __evalrational_221;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
*
* ## Notes
*
* -   Coefficients should be sorted in ascending degree.
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the rational function
* @returns {number} evaluated rational function
*/
function __evalrational_222( x ) {
	var ax;
	var s1;
	var s2;
	if ( x === 0.0 ) {
		return -0.016743100507663373;
	}
	if ( x < 0.0 ) {
		ax = -x;
	} else {
		ax = x;
	}
	if ( ax <= 1.0 ) {
		s1 = -0.016743100507663373 + (x * (-0.0011295143874558028 + (x * (0.001056288621524929 + (x * (0.00020938631748758808 + (x * (0.000014962478375834237 + (x * (4.4969678992770644e-7 + (x * (4.625961635228786e-9 + (x * (-2.811287356288318e-14 + (x * 9.905570997331033e-17))))))))))))))); // eslint-disable-line max-len
		s2 = 1.0 + (x * (0.5914293448864175 + (x * (0.1381518657490833 + (x * (0.016074608709367652 + (x * (0.0009640118070051656 + (x * (0.000027533547476472603 + (x * (2.82243172016108e-7 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len
	} else {
		x = 1.0 / x;
		s1 = 9.905570997331033e-17 + (x * (-2.811287356288318e-14 + (x * (4.625961635228786e-9 + (x * (4.4969678992770644e-7 + (x * (0.000014962478375834237 + (x * (0.00020938631748758808 + (x * (0.001056288621524929 + (x * (-0.0011295143874558028 + (x * -0.016743100507663373))))))))))))))); // eslint-disable-line max-len
		s2 = 0.0 + (x * (0.0 + (x * (2.82243172016108e-7 + (x * (0.000027533547476472603 + (x * (0.0009640118070051656 + (x * (0.016074608709367652 + (x * (0.1381518657490833 + (x * (0.5914293448864175 + (x * 1.0))))))))))))))); // eslint-disable-line max-len
	}
	return s1 / s2;
}


// EXPORTS //

var _$evalrational_222 = __evalrational_222;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_48_0/boost/math/special_functions/detail/erf_inv.hpp}. This implementation follows the original, but has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalrational_218 = require( './rational_p1q1.js' ); */;
/* removed: var _$evalrational_219 = require( './rational_p2q2.js' ); */;
/* removed: var _$evalrational_220 = require( './rational_p3q3.js' ); */;
/* removed: var _$evalrational_221 = require( './rational_p4q4.js' ); */;
/* removed: var _$evalrational_222 = require( './rational_p5q5.js' ); */;


// VARIABLES //

var __Y1_216 = 8.91314744949340820313e-2;
var __Y2_216 = 2.249481201171875;
var __Y3_216 = 8.07220458984375e-1;
var __Y4_216 = 9.3995571136474609375e-1;
var __Y5_216 = 9.8362827301025390625e-1;


// MAIN //

/**
* Evaluates the inverse error function.
*
* ## Method
*
* 1.  For \\(|x| \leq 0.5\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = x(x+10)(\mathrm{Y} + \operatorname{R}(x))
*     ```
*
*     where \\(Y\\) is a constant and \\(\operatorname{R}(x)\\) is optimized for a low absolute error compared to \\(|Y|\\).
*
*     <!-- <note> -->
*
*     Max error \\(2.001849\mbox{e-}18\\). Maximum deviation found (error term at infinite precision) \\(8.030\mbox{e-}21\\).
*
*     <!-- </note> -->
*
* 2.  For \\(0.5 > 1-|x| \geq 0\\), we evaluate the inverse error function using the rational approximation
*
*     ```tex
*     \operatorname{erf^{-1}} = \frac{\sqrt{-2 \cdot \ln(1-x)}}{\mathrm{Y} + \operatorname{R}(1-x)}
*     ```
*
*     where \\(Y\\) is a constant, and \\(\operatorname{R}(q)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Max error \\(7.403372\mbox{e-}17\\). Maximum deviation found (error term at infinite precision) \\(4.811\mbox{e-}20\\).
*
*     <!-- </note> -->
*
* 3.  For \\(1-|x| < 0.25\\), we have a series of rational approximations all of the general form
*
*     ```tex
*     p = \sqrt{-\ln(1-x)}
*     ```
*
*     Accordingly, the result is given by
*
*     ```tex
*     \operatorname{erf^{-1}}(x) = p(\mathrm{Y} + \operatorname{R}(p-B))
*     ```
*
*     where \\(Y\\) is a constant, \\(B\\) is the lowest value of \\(p\\) for which the approximation is valid, and \\(\operatorname{R}(x-B)\\) is optimized for a low absolute error compared to \\(Y\\).
*
*     <!-- <note> -->
*
*     Almost all code will only go through the first or maybe second approximation.  After that we are dealing with very small input values.
*
*     -   If \\(p < 3\\), max error \\(1.089051\mbox{e-}20\\).
*     -   If \\(p < 6\\), max error \\(8.389174\mbox{e-}21\\).
*     -   If \\(p < 18\\), max error \\(1.481312\mbox{e-}19\\).
*     -   If \\(p < 44\\), max error \\(5.697761\mbox{e-}20\\).
*     -   If \\(p \geq 44\\), max error \\(1.279746\mbox{e-}20\\).
*
*     <!-- </note> -->
*
*     <!-- <note> -->
*
*     The Boost library can accommodate \\(80\\) and \\(128\\) bit long doubles. JavaScript only supports a \\(64\\) bit double (IEEE 754). Accordingly, the smallest \\(p\\) (in JavaScript at the time of this writing) is \\(\sqrt{-\ln(\sim5\mbox{e-}324)} = 27.284429111150214\\).
*
*     <!-- </note> -->
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* @example
* var y = erfinv( 0.8 );
* // returns ~0.9062
*
* @example
* var y = erfinv( 0.0 );
* // returns 0.0
*
* @example
* var y = erfinv( -0.0 );
* // returns -0.0
*
* @example
* var y = erfinv( -1.0 );
* // returns -Infinity
*
* @example
* var y = erfinv( 1.0 );
* // returns Infinity
*
* @example
* var y = erfinv( NaN );
* // returns NaN
*/
function erfinv( x ) {
	var sign;
	var ax;
	var qs;
	var q;
	var g;
	var r;

	// Special case: NaN
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	// Special case: 1
	if ( x === 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	// Special case: -1
	if ( x === -1.0 ) {
		return _$FLOAT64_NINF_107;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	// Special case: |x| > 1 (range error)
	if ( x > 1.0 || x < -1.0 ) {
		return NaN;
	}
	// Argument reduction (reduce to interval [0,1]). If `x` is negative, we can safely negate the value, taking advantage of the error function being an odd function; i.e., `erf(-x) = -erf(x)`.
	if ( x < 0.0 ) {
		sign = -1.0;
		ax = -x;
	} else {
		sign = 1.0;
		ax = x;
	}
	q = 1.0 - ax;

	// |x| <= 0.5
	if ( ax <= 0.5 ) {
		g = ax * ( ax + 10.0 );
		r = _$evalrational_218( ax );
		return sign * ( (g*__Y1_216) + (g*r) );
	}
	// 1-|x| >= 0.25
	if ( q >= 0.25 ) {
		g = _$sqrt_437( -2.0 * _$ln_376(q) );
		q -= 0.25;
		r = _$evalrational_219( q );
		return sign * ( g / (__Y2_216+r) );
	}
	q = _$sqrt_437( -_$ln_376( q ) );

	// q < 3
	if ( q < 3.0 ) {
		qs = q - 1.125;
		r = _$evalrational_220( qs );
		return sign * ( (__Y3_216*q) + (r*q) );
	}
	// q < 6
	if ( q < 6.0 ) {
		qs = q - 3.0;
		r = _$evalrational_221( qs );
		return sign * ( (__Y4_216*q) + (r*q) );
	}
	// q < 18
	qs = q - 6.0;
	r = _$evalrational_222( qs );
	return sign * ( (__Y5_216*q) + (r*q) );
}


// EXPORTS //

var _$erfinv_216 = erfinv;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the inverse error function.
*
* @module @stdlib/math/base/special/erfinv
*
* @example
* var erfinv = require( '@stdlib/math/base/special/erfinv' );
*
* var y = erfinv( 0.5 );
* // returns ~0.4769
*
* y = erfinv( 0.8 );
* // returns ~0.9062
*
* y = erfinv( 0.0 );
* // returns 0.0
*
* y = erfinv( -0.0 );
* // returns -0.0
*
* y = erfinv( -1.0 );
* // returns -Infinity
*
* y = erfinv( 1.0 );
* // returns Infinity
*
* y = erfinv( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erfinv_216 = require( './erfinv.js' ); */;


// EXPORTS //

var _$erfinv_217 = _$erfinv_216;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$erfinv_217 = require( '@stdlib/math/base/special/erfinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns 4.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1347( p, mu, sigma ) {
	var A;
	var B;

	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		_$isnan_130( p ) ||
		sigma < 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return mu;
	}
	A = mu;
	B = sigma * _$sqrt_437( 2.0 );
	return A + (B * _$erfinv_217( (2.0*p) - 1.0 ));
}


// EXPORTS //

var _$quantile_1347 = __quantile_1347;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1345 = _$quantile_795.factory;
/* removed: var _$erfinv_217 = require( '@stdlib/math/base/special/erfinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function of a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 2.0 );
* var y = quantile( 0.5 );
* // returns 10.0
*
* y = quantile( 0.8 );
* // returns ~11.683
*/
function __factory_1345( mu, sigma ) {
	var A;
	var B;
	if ( _$isnan_130( mu ) || _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		__degenerate_1345( mu );
	}
	A = mu;
	B = sigma * _$sqrt_437( 2.0 );
	return quantile;

	/**
	* Evaluates the quantile function for a normal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return A + ( B * _$erfinv_217( (2.0*p) - 1.0 ) );
	}
}


// EXPORTS //

var _$factory_1345 = __factory_1345;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution quantile function.
*
* @module @stdlib/stats/base/dists/normal/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/normal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~0.842
*
* var myQuantile = quantile.factory( 10.0, 2.0 );
* y = myQuantile( 0.5 );
* // returns 10.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1347 = require( './quantile.js' ); */;
/* removed: var _$factory_1345 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1347, 'factory', _$factory_1345 );


// EXPORTS //

var _$quantile_1346 = _$quantile_1347;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$quantile_1346 = require( '@stdlib/stats/base/dists/normal/quantile' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* @example
* var y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, 0.0, -1.0 );
* // returns NaN
*/
function __quantile_1280( p, mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		_$isnan_130( p ) ||
		sigma <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$exp_225( mu + (sigma * _$quantile_1346( p, 0.0, 1.0 )) );
}


// EXPORTS //

var _$quantile_1280 = __quantile_1280;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$quantile_1346 = require( '@stdlib/stats/base/dists/normal/quantile' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.
*
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 4.0, 2.0 );
* var y = quantile( 0.5 );
* // returns ~54.598
*
* y = quantile( 0.8 );
* // returns ~293.901
*/
function __factory_1278( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a lognormal distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return _$exp_225( mu + (sigma * _$quantile_1346( p, 0.0, 1.0 )) );
	}
}


// EXPORTS //

var _$factory_1278 = __factory_1278;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for a lognormal distribution.
*
* @module @stdlib/stats/base/dists/lognormal/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/lognormal/quantile' );
*
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns ~2.32
*
* y = quantile( 0.5, 4.0, 2.0 );
* // returns ~54.598
*
* var myquantile = quantile.factory( 4.0, 2.0 );
*
* y = myquantile( 0.2 );
* // returns ~10.143
*
* y = myquantile( 0.8 );
* // returns ~293.901
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1280 = require( './quantile.js' ); */;
/* removed: var _$factory_1278 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1280, 'factory', _$factory_1278 );


// EXPORTS //

var _$quantile_1279 = _$quantile_1280;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1260 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1260 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1263 = require( '@stdlib/stats/base/dists/lognormal/entropy' ); */;
/* removed: var _$kurtosis_1264 = require( '@stdlib/stats/base/dists/lognormal/kurtosis' ); */;
/* removed: var _$mean_1269 = require( '@stdlib/stats/base/dists/lognormal/mean' ); */;
/* removed: var _$median_1271 = require( '@stdlib/stats/base/dists/lognormal/median' ); */;
/* removed: var _$mode_1273 = require( '@stdlib/stats/base/dists/lognormal/mode' ); */;
/* removed: var _$skewness_1281 = require( '@stdlib/stats/base/dists/lognormal/skewness' ); */;
/* removed: var _$stdev_1283 = require( '@stdlib/stats/base/dists/lognormal/stdev' ); */;
/* removed: var _$variance_1285 = require( '@stdlib/stats/base/dists/lognormal/variance' ); */;
/* removed: var _$cdf_1259 = require( '@stdlib/stats/base/dists/lognormal/cdf' ); */;
/* removed: var _$logpdf_1267 = require( '@stdlib/stats/base/dists/lognormal/logpdf' ); */;
/* removed: var _$pdf_1276 = require( '@stdlib/stats/base/dists/lognormal/pdf' ); */;
/* removed: var _$quantile_1279 = require( '@stdlib/stats/base/dists/lognormal/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function lognormalCDF( x ) {
	return _$cdf_1259( x, this.mu, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalLogPDF( x ) {
	return _$logpdf_1267( x, this.mu, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function lognormalPDF( x ) {
	return _$pdf_1276( x, this.mu, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function lognormalQuantile( p ) {
	return _$quantile_1279( p, this.mu, this.sigma );
}


// MAIN //

/**
* Lognormal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {LogNormal} distribution instance
*
* @example
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var v = lognormal.mean;
* // returns ~4.482
*/
function LogNormal() {
	var sigma;
	var mu;
	if ( !(this instanceof LogNormal) ) {
		if ( arguments.length === 0 ) {
			return new LogNormal();
		}
		return new LogNormal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !__isNumber_1260( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1260( sigma ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1260( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !__isPositive_1260( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Lognormal distribution differential entropy.
*
* @name entropy
* @memberof LogNormal.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.entropy;
* // returns ~7.904
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'entropy', function get() {
	return _$entropy_1263( this.mu, this.sigma );
});

/**
* Lognormal distribution excess kurtosis.
*
* @name kurtosis
* @memberof LogNormal.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.kurtosis;
* // returns 1.4243659274306933e+250
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'kurtosis', function get() {
	return _$kurtosis_1264( this.mu, this.sigma );
});

/**
* Lognormal distribution expected value.
*
* @name mean
* @memberof LogNormal.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mean;
* // returns 1.0148003881138887e+33
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'mean', function get() {
	return _$mean_1269( this.mu, this.sigma );
});

/**
* Lognormal distribution median.
*
* @name median
* @memberof LogNormal.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.median;
* // returns ~54.598
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'median', function get() {
	return _$median_1271( this.mu, this.sigma );
});

/**
* Lognormal distribution mode.
*
* @name mode
* @memberof LogNormal.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.mode;
* // returns 1.580420060273613e-61
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'mode', function get() {
	return _$mode_1273( this.mu, this.sigma );
});

/**
* Lognormal distribution skewness.
*
* @name skewness
* @memberof LogNormal.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.skewness;
* // returns 6.421080152185613e+93
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'skewness', function get() {
	return _$skewness_1281( this.mu, this.sigma );
});

/**
* Lognormal distribution standard deviation.
*
* @name stdev
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.stdev;
* // returns 1.886180808490652e+64
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'stdev', function get() {
	return _$stdev_1283( this.mu, this.sigma );
});

/**
* Lognormal distribution variance.
*
* @name variance
* @memberof LogNormal.prototype
* @type {NonNegativeNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var lognormal = new LogNormal( 4.0, 12.0 );
*
* var v = lognormal.variance;
* // returns 3.55767804231845e+128
*/
_$setNonEnumerableReadOnlyAccessor_1601( LogNormal.prototype, 'variance', function get() {
	return _$variance_1285( this.mu, this.sigma );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.cdf( 0.5 );
* // returns ~0.25
*/
_$setNonEnumerableReadOnly_1603( LogNormal.prototype, 'cdf', lognormalCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.logpdf( 0.8 );
* // returns ~-2.237
*/
_$setNonEnumerableReadOnly_1603( LogNormal.prototype, 'logpdf', lognormalLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof LogNormal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.pdf( 0.8 );
* // returns ~0.107
*/
_$setNonEnumerableReadOnly_1603( LogNormal.prototype, 'pdf', lognormalPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof LogNormal.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var lognormal = new LogNormal( 2.0, 4.0 );
*
* var v = lognormal.quantile( 0.5 );
* // returns ~7.389
*/
_$setNonEnumerableReadOnly_1603( LogNormal.prototype, 'quantile', lognormalQuantile );


// EXPORTS //

var _$LogNormal_1260 = LogNormal;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Lognormal distribution constructor.
*
* @module @stdlib/stats/base/dists/lognormal/ctor
*
* @example
* var LogNormal = require( '@stdlib/stats/base/dists/lognormal/ctor' );
*
* var lognormal = new LogNormal( 1.0, 1.0 );
*
* var y = lognormal.cdf( 1.5 );
* // returns ~0.276
*
* var mean = lognormal.mean;
* // returns ~4.482
*/

// MODULES //

/* removed: var _$LogNormal_1260 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1261 = _$LogNormal_1260;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
*
* @example
* var y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
*
* @example
* var y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
*
* @example
* var y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* @example
* var y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
*
* @example
* var y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
*
* @example
* var y = cdf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 20.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 20, 1.5 );
* // returns NaN
*/
function __cdf_1287( x, r, p ) {
	var xint;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	// Ensure left-continuity:
	xint = _$floor_236( x + 1e-7 );
	return _$betainc_164( p, r, xint + 1.0 );
}


// EXPORTS //

var _$cdf_1287 = __cdf_1287;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10, 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.046
*
* y = cdf( 11.0 );
* // returns ~0.668
*/
function __factory_1288( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		var xint;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		// Ensure left-continuity:
		xint = _$floor_236( x + 1e-7 );
		return _$betainc_164( p, r, xint + 1.0 );
	}
}


// EXPORTS //

var _$factory_1288 = __factory_1288;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/negative-binomial/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/negative-binomial/cdf' );
*
* var y = cdf( 5.0, 20.0, 0.8 );
* // returns ~0.617
*
* y = cdf( 21.0, 20.0, 0.5 );
* // returns ~0.622
*
* y = cdf( 5.0, 10.0, 0.4 );
* // returns ~0.034
*
* y = cdf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* y = cdf( 21.0, 15.5, 0.5 );
* // returns ~0.859
*
* y = cdf( 5.0, 7.4, 0.4 );
* // returns ~0.131
*
* var mycdf = cdf.factory( 10, 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.046
*
* y = mycdf( 11.0 );
* // returns ~0.668
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1287 = require( './cdf.js' ); */;
/* removed: var _$factory_1288 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1287, 'factory', _$factory_1288 );


// EXPORTS //

var _$cdf_1289 = _$cdf_1287;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
*
* @example
* var v = kurtosis( 20, 0.5 );
* // returns ~0.325
*
* @example
* var v = kurtosis( 10.3, 0.8 );
* // returns ~0.893
*
* @example
* var v = kurtosis( -2, 0.5 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, 1.1 );
* // returns NaN
*
* @example
* var v = kurtosis( 20, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 0.5 );
* // returns NaN
*/
function __kurtosis_1293( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 6.0/r ) + ( ( p*p ) / ( ( 1.0-p ) * r ) );
}


// EXPORTS //

var _$kurtosis_1293 = __kurtosis_1293;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/negative-binomial/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/negative-binomial/kurtosis' );
*
* var v = kurtosis( 100, 0.2 );
* // returns ~0.061
*
* v = kurtosis( 20, 0.5 );
* // returns ~0.325
*/

// MODULES //

/* removed: var _$kurtosis_1293 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1292 = _$kurtosis_1293;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 100, 0.2 );
* // returns 400.0
*
* @example
* var v = mean( 20, 0.5 );
* // returns 20.0
*
* @example
* var v = mean( 10.3, 0.8 );
* // returns ~2.575
*
* @example
* var v = mean( -2, 0.5 );
* // returns NaN
*
* @example
* var v = mean( 20, 1.1 );
* // returns NaN
*
* @example
* var v = mean( 20, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 0.5 );
* // returns NaN
*/
function __mean_1300( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p )
	) {
		return NaN;
	}
	if (
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( (1.0-p) * r ) / p;
}


// EXPORTS //

var _$mean_1300 = __mean_1300;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution expected value.
*
* @module @stdlib/stats/base/dists/negative-binomial/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/negative-binomial/mean' );
*
* var v = mean( 100, 0.2 );
* // returns 400
*
* v = mean( 20, 0.5 );
* // returns 20
*/

// MODULES //

/* removed: var _$mean_1300 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1299 = _$mean_1300;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns the mode of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 100, 0.2 );
* // returns 396
*
* @example
* var v = mode( 20, 0.5 );
* // returns 19
*
* @example
* var v = mode( 10.3, 0.8 );
* // returns 2
*
* @example
* var v = mode( -2, 0.5 );
* // returns NaN
*
* @example
* var v = mode( 20, 1.1 );
* // returns NaN
*
* @example
* var v = mode( 20, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 0.5 );
* // returns NaN
*/
function __mode_1305( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$floor_236( ( 1.0-p ) * ( r-1.0 ) / p );
}


// EXPORTS //

var _$mode_1305 = __mode_1305;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution mode.
*
* @module @stdlib/stats/base/dists/negative-binomial/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/negative-binomial/mode' );
*
* var v = mode( 100, 0.2 );
* // returns 396
*
* v = mode( 20, 0.5 );
* // returns 19
*/

// MODULES //

/* removed: var _$mode_1305 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1304 = _$mode_1305;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 100, 0.2 );
* // returns ~0.201
*
* @example
* var v = skewness( 20, 0.5 );
* // returns ~0.474
*
* @example
* var v = skewness( 10.3, 0.8 );
* // returns ~0.836
*
* @example
* var v = skewness( -2, 0.5 );
* // returns NaN
*
* @example
* var v = skewness( 20, 1.1 );
* // returns NaN
*
* @example
* var v = skewness( 20, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 0.5 );
* // returns NaN
*/
function __skewness_1316( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( 2.0-p ) / _$sqrt_437( ( 1.0-p ) * r );
}


// EXPORTS //

var _$skewness_1316 = __skewness_1316;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution skewness.
*
* @module @stdlib/stats/base/dists/negative-binomial/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/negative-binomial/skewness' );
*
* var v = skewness( 100, 0.2 );
* // returns ~0.201
*
* v = skewness( 20, 0.5 );
* // returns ~0.474
*/

// MODULES //

/* removed: var _$skewness_1316 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1315 = _$skewness_1316;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 100, 0.2 );
* // returns ~44.721
*
* @example
* var v = stdev( 20, 0.5 );
* // returns ~6.325
*
* @example
* var v = stdev( 10.3, 0.8 );
* // returns ~1.794
*
* @example
* var v = stdev( -2, 0.5 );
* // returns NaN
*
* @example
* var v = stdev( 20, 1.1 );
* // returns NaN
*
* @example
* var v = stdev( 20, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 0.5 );
* // returns NaN
*/
function __stdev_1318( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return _$sqrt_437( ( 1.0-p ) * r ) / p;
}


// EXPORTS //

var _$stdev_1318 = __stdev_1318;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution standard deviation.
*
* @module @stdlib/stats/base/dists/negative-binomial/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/negative-binomial/stdev' );
*
* var v = stdev( 100, 0.2 );
* // returns ~44.721
*
* v = stdev( 20, 0.5 );
* // returns ~6.325
*/

// MODULES //

/* removed: var _$stdev_1318 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1317 = _$stdev_1318;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 100, 0.2 );
* // returns 2000.0
*
* @example
* var v = variance( 20, 0.5 );
* // returns 40.0
*
* @example
* var v = variance( 10.3, 0.8 );
* // returns ~3.219
*
* @example
* var v = variance( -2, 0.5 );
* // returns NaN
*
* @example
* var v = variance( 20, 1.1 );
* // returns NaN
*
* @example
* var v = variance( 20, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 0.5 );
* // returns NaN
*/
function __variance_1320( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return ( ( 1.0-p ) * r ) / ( p*p );
}


// EXPORTS //

var _$variance_1320 = __variance_1320;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution variance.
*
* @module @stdlib/stats/base/dists/negative-binomial/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/negative-binomial/variance' );
*
* var v = variance( 100, 0.2 );
* // returns 2000.0
*
* v = variance( 20, 0.5 );
* // returns 40.0
*/

// MODULES //

/* removed: var _$variance_1320 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1319 = _$variance_1320;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function __ibetaPowerTerms_1296( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return _$pow_396( x, a ) * _$pow_396( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	result = _$gammaLanczosSumExpGScaled_241( c );
	result /= _$gammaLanczosSumExpGScaled_241( a ) * _$gammaLanczosSumExpGScaled_241( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= _$sqrt_437( bgh / _$E_86 );
	result *= _$sqrt_437( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( _$min_392( _$abs_147(l1), _$abs_147(l2) ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || _$min_392( a, b ) < 1 ) {
			if ( _$abs_147(l1) < 0.1 ) {
				result *= _$exp_225( a * _$log1p_380( l1 ) );
			} else {
				result *= _$pow_396( ( x*cgh ) / agh, a );
			}
			if ( _$abs_147(l2) < 0.1 ) {
				result *= _$exp_225( b * _$log1p_380( l2 ) );
			} else {
				result *= _$pow_396((y * cgh) / bgh, b);
			}
		}
		else if ( _$max_388( _$abs_147(l1), _$abs_147(l2) ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = _$expm1_228( ratio * _$log1p_380( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
			else {
				l3 = _$expm1_228( _$log1p_380( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
		}
		else if ( _$abs_147(l1) < _$abs_147(l2) ) {
			// First base near 1 only:
			l = ( a * _$log1p_380( l1 ) ) + ( b * _$ln_376( ( y*cgh ) / bgh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * _$log1p_380( l2 ) ) + ( a * _$ln_376( (x*cgh) / agh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * _$ln_376(b1);
		l2 = b * _$ln_376(b2);
		if (
			l1 >= _$FLOAT64_MAX_LN_102 ||
			l1 <= _$FLOAT64_MIN_LN_106 ||
			l2 >= _$FLOAT64_MAX_LN_102 ||
			l2 <= _$FLOAT64_MIN_LN_106
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = _$pow_396( b2, b / a );
				l3 = a * ( _$ln_376(b1) + _$ln_376(p1) );
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b1, a );
				} else {
					l2 += l1 + _$ln_376(result);
					if ( l2 >= _$FLOAT64_MAX_LN_102 ) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
			else {
				p1 = _$pow_396( b1, a / b );
				l3 = ( _$ln_376(p1) + _$ln_376(b2) ) * b;
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b2, b );
				} else {
					l2 += l1 + _$ln_376( result );
					if (l2 >= _$FLOAT64_MAX_LN_102) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= _$pow_396( b1, a ) * _$pow_396( b2, b );
		}
	}
	return result;
}


// EXPORTS //

var _$ibetaPowerTerms_1296 = __ibetaPowerTerms_1296;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ibetaPowerTerms_1296 = require( './ibeta_power_terms.js' ); */;


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (0 < x <= 1)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter (must be greater than 1)
* @returns {number} value of the partial derivative
*/
function __ibetaDerivative_1295( x, a, b ) {
	var f1;
	var y;
	if ( x === 1.0 ) {
		return 0.0;
	}
	// Regular cases:
	f1 = _$ibetaPowerTerms_1296( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
}


// EXPORTS //

var _$ibetaDerivative_1295 = __ibetaDerivative_1295;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$ibetaDerivative_1295 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 5.0, 20.0, 0.8 );
* // returns ~-1.853
*
* @example
* var y = logpmf( 21.0, 20.0, 0.5 );
* // returns ~-2.818
*
* @example
* var y = logpmf( 5.0, 10.0, 0.4 );
* // returns ~-4.115
*
* @example
* var y = logpmf( 0.0, 10.0, 0.9 );
* // returns ~-1.054
*
* @example
* var y = logpmf( 21.0, 15.5, 0.5 );
* // returns ~-3.292
*
* @example
* var y = logpmf( 5.0, 7.4, 0.4 );
* // returns ~-2.976
*
* @example
* var y = logpmf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = logpmf( 2.0, 20, 1.5 );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpmf( 0.0, 20.0, NaN );
* // returns NaN
*/
function __logpmf_1298( x, r, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !_$isNonNegativeInteger_136( x ) || p === 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	return _$ln_376( p ) - _$ln_376( r + x ) + _$ln_376( _$ibetaDerivative_1295( p, r, x + 1.0 ) );
}


// EXPORTS //

var _$logpmf_1298 = __logpmf_1298;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$ibetaDerivative_1295 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 10, 0.5 );
* var y = logpmf( 3.0 );
* // returns ~-3.617
*
* y = logpmf( 5.0 );
* // returns ~-2.795
*/
function __factory_1294( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( !_$isNonNegativeInteger_136( x ) ) {
			return _$FLOAT64_NINF_107;
		}
		return _$ln_376( p ) - _$ln_376( r + x ) + _$ln_376( _$ibetaDerivative_1295( p, r, x + 1.0 ) );
	}
}


// EXPORTS //

var _$factory_1294 = __factory_1294;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a negative binomial distribution.
*
* @module @stdlib/stats/base/dists/negative-binomial/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/negative-binomial/logpmf' );
*
* var y = logpmf( 5.0, 20.0, 0.8 );
* // returns ~-1.853
*
* y = logpmf( 21.0, 20.0, 0.5 );
* // returns ~-2.818
*
* y = logpmf( 5.0, 10.0, 0.4 );
* // returns ~-4.115
*
* y = logpmf( 0.0, 10.0, 0.9 );
* // returns ~-1.054
*
* y = logpmf( 21.0, 15.5, 0.5 );
* // returns ~-3.292
*
* y = logpmf( 5.0, 7.4, 0.4 );
* // returns ~-2.976
*
* var mylogpmf = logpmf.factory( 10, 0.5 );
* y = mylogpmf( 3.0 );
* // returns ~-3.612
*
* y = mylogpmf( 5.0 );
* // returns ~-2.797
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_1298 = require( './logpmf.js' ); */;
/* removed: var _$factory_1294 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_1298, 'factory', _$factory_1294 );


// EXPORTS //

var _$logpmf_1297 = _$logpmf_1298;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
*
* @param {number} t - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
*
* @example
* var y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
*
* @example
* var y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
*
* @example
* var y = mgf( 0.1, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.1, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 20.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 20, 1.5 );
* // returns NaN
*/
function __mgf_1303( t, r, p ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0 ||
		t >= -_$ln_376( p )
	) {
		return NaN;
	}
	return _$pow_396( ( (1.0 - p) * _$exp_225( t ) ) / ( 1.0 - (p * _$exp_225( t )) ), r );
}


// EXPORTS //

var _$mgf_1303 = __mgf_1303;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a negative binomial distribution.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.3, 0.4 );
* var y = mgf( 0.2 );
* // returns ~4.696
*/
function __factory_1301( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a negative binomial distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( t >= -_$ln_376( p ) ) {
			return NaN;
		}
		return _$pow_396( ( (1.0 - p) * _$exp_225( t ) ) / ( 1.0 - (p * _$exp_225( t )) ), r );
	}
}


// EXPORTS //

var _$factory_1301 = __factory_1301;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a negative binomial distribution.
*
* @module @stdlib/stats/base/dists/negative-binomial/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/negative-binomial/mgf' );
*
* var y = mgf( 0.05, 20.0, 0.8 );
* // returns ~267.839
*
* y = mgf( 0.1, 20.0, 0.1 );
* // returns ~9.347
*
* y = mgf( 0.5, 10.0, 0.4 );
* // returns ~42822.023
*
* var myMGF = mgf.factory( 4.3, 0.4 );
* y = myMGF( 0.2 );
* // returns ~4.696
*
* y = myMGF( 0.4 );
* // returns ~30.83
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1303 = require( './mgf.js' ); */;
/* removed: var _$factory_1301 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1303, 'factory', _$factory_1301 );


// EXPORTS //

var _$mgf_1302 = _$mgf_1303;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
*
* ```text
* (C) Copyright John Maddock 2006.
*
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
* ```
*/

'use strict';

// MODULES //

/* removed: var _$gammaLanczosSumExpGScaled_241 = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$abs_147 = require( '@stdlib/math/base/special/abs' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$max_388 = require( '@stdlib/math/base/special/max' ); */;
/* removed: var _$min_392 = require( '@stdlib/math/base/special/min' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_MAX_LN_102 = require( '@stdlib/constants/math/float64-max-ln' ); */;
/* removed: var _$FLOAT64_MIN_LN_106 = require( '@stdlib/constants/math/float64-min-ln' ); */;
/* removed: var _$FLOAT64_GAMMA_LANCZOS_G_91 = require( '@stdlib/constants/math/float64-gamma-lanczos-g' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Computes the leading power terms in the incomplete beta function.
*
* When normalized,
*
* ```tex
* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
* ```
*
* and otherwise
*
* ```tex
* x^a y^b
* ```
*
* ## Notes
*
* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
*
* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
*
* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
*
*     ```tex
*     (1 + l_1)^a \cdot (1 + l_2)^b \\
*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
*     = (1 + l_1 + l_3 + l_1*l_3)^a
*     ```
*
*     and
*
*     ```tex
*     l_3 = (1 + l_2)^(b/a) - 1 \\
*     = \exp((b/a) * \ln(1 + l_2)) - 1
*     ```
*
*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
*
* @private
* @param {NonNegativeNumber} a - function parameter
* @param {NonNegativeNumber} b - function parameter
* @param {Probability} x - function parameter
* @param {Probability} y - probability equal to `1-x`
* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
* @returns {number} power terms
*/
function __ibetaPowerTerms_1308( a, b, x, y, normalized ) {
	var result;
	var smallA;
	var ratio;
	var agh;
	var bgh;
	var cgh;
	var l1;
	var l2;
	var l3;
	var p1;
	var b1;
	var b2;
	var c;
	var l;

	if ( !normalized ) {
		// Can we do better here?
		return _$pow_396( x, a ) * _$pow_396( y, b );
	}
	c = a + b;

	// Combine power terms with Lanczos approximation:
	agh = a + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	bgh = b + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	cgh = c + _$FLOAT64_GAMMA_LANCZOS_G_91 - 0.5;
	result = _$gammaLanczosSumExpGScaled_241( c );
	result /= _$gammaLanczosSumExpGScaled_241( a ) * _$gammaLanczosSumExpGScaled_241( b );

	// Combine with the leftover terms from the Lanczos approximation:
	result *= _$sqrt_437( bgh / _$E_86 );
	result *= _$sqrt_437( agh / cgh );

	// `l1` and `l2` are the base of the exponents minus one:
	l1 = ( ( x * b ) - ( y * agh ) ) / agh;
	l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
	if ( _$min_392( _$abs_147(l1), _$abs_147(l2) ) < 0.2 ) {
		// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
		if ( l1 * l2 > 0 || _$min_392( a, b ) < 1 ) {
			if ( _$abs_147(l1) < 0.1 ) {
				result *= _$exp_225( a * _$log1p_380( l1 ) );
			} else {
				result *= _$pow_396( ( x*cgh ) / agh, a );
			}
			if ( _$abs_147(l2) < 0.1 ) {
				result *= _$exp_225( b * _$log1p_380( l2 ) );
			} else {
				result *= _$pow_396((y * cgh) / bgh, b);
			}
		}
		else if ( _$max_388( _$abs_147(l1), _$abs_147(l2) ) < 0.5 ) {
			smallA = a < b;
			ratio = b / a;
			if (
				(smallA && (ratio * l2 < 0.1)) ||
				(!smallA && (l1 / ratio > 0.1))
			) {
				l3 = _$expm1_228( ratio * _$log1p_380( l2 ) );
				l3 = l1 + l3 + ( l3 * l1 );
				l3 = a * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
			else {
				l3 = _$expm1_228( _$log1p_380( l1 ) / ratio );
				l3 = l2 + l3 + ( l3 * l2 );
				l3 = b * _$log1p_380( l3 );
				result *= _$exp_225( l3 );
			}
		}
		else if ( _$abs_147(l1) < _$abs_147(l2) ) {
			// First base near 1 only:
			l = ( a * _$log1p_380( l1 ) ) + ( b * _$ln_376( ( y*cgh ) / bgh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
		else {
			// Second base near 1 only:
			l = ( b * _$log1p_380( l2 ) ) + ( a * _$ln_376( (x*cgh) / agh ) );
			if ( l <= _$FLOAT64_MIN_LN_106 || l >= _$FLOAT64_MAX_LN_102 ) {
				l += _$ln_376(result);
				if ( l >= _$FLOAT64_MAX_LN_102 ) {
					return NaN;
				}
				result = _$exp_225( l );
			} else {
				result *= _$exp_225( l );
			}
		}
	}
	else {
		// General case:
		b1 = (x * cgh) / agh;
		b2 = (y * cgh) / bgh;
		l1 = a * _$ln_376(b1);
		l2 = b * _$ln_376(b2);
		if (
			l1 >= _$FLOAT64_MAX_LN_102 ||
			l1 <= _$FLOAT64_MIN_LN_106 ||
			l2 >= _$FLOAT64_MAX_LN_102 ||
			l2 <= _$FLOAT64_MIN_LN_106
		) {
			// Oops, under/overflow, sidestep if we can:
			if ( a < b ) {
				p1 = _$pow_396( b2, b / a );
				l3 = a * ( _$ln_376(b1) + _$ln_376(p1) );
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b1, a );
				} else {
					l2 += l1 + _$ln_376(result);
					if ( l2 >= _$FLOAT64_MAX_LN_102 ) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
			else {
				p1 = _$pow_396( b1, a / b );
				l3 = ( _$ln_376(p1) + _$ln_376(b2) ) * b;
				if ( l3 < _$FLOAT64_MAX_LN_102 && l3 > _$FLOAT64_MIN_LN_106 ) {
					result *= _$pow_396( p1 * b2, b );
				} else {
					l2 += l1 + _$ln_376( result );
					if (l2 >= _$FLOAT64_MAX_LN_102) {
						return NaN;
					}
					result = _$exp_225( l2 );
				}
			}
		}
		else {
			// Finally the normal case:
			result *= _$pow_396( b1, a ) * _$pow_396( b2, b );
		}
	}
	return result;
}


// EXPORTS //

var _$ibetaPowerTerms_1308 = __ibetaPowerTerms_1308;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ibetaPowerTerms_1308 = require( './ibeta_power_terms.js' ); */;


// MAIN //

/**
* Computes the partial derivative with respect to x of the incomplete beta function.
*
* @private
* @param {Probability} x - input value (0 < x <= 1)
* @param {PositiveNumber} a - first parameter
* @param {PositiveNumber} b - second parameter (must be greater than 1)
* @returns {number} value of the partial derivative
*/
function __ibetaDerivative_1307( x, a, b ) {
	var f1;
	var y;
	if ( x === 1.0 ) {
		return 0.0;
	}
	// Regular cases:
	f1 = _$ibetaPowerTerms_1308( a, b, x, 1.0 - x, true );
	y = ( 1.0 - x ) * x;
	f1 /= y;
	return f1;
}


// EXPORTS //

var _$ibetaDerivative_1307 = __ibetaDerivative_1307;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$ibetaDerivative_1307 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {number} x - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
*
* @example
* var y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
*
* @example
* var y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
*
* @example
* var y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* @example
* var y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
*
* @example
* var y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
*
* @example
* var y = pmf( 2.0, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, -1.0 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 20, 1.5 );
* // returns NaN
*
* @example
* var y = pmf( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pmf( 0.0, 20.0, NaN );
* // returns NaN
*/
function __pmf_1310( x, r, p ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	if ( !_$isNonNegativeInteger_136( x ) || p === 0.0 ) {
		return 0.0;
	}
	return ( p / ( r + x ) ) * _$ibetaDerivative_1307( p, r, x + 1.0 );
}


// EXPORTS //

var _$pmf_1310 = __pmf_1310;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ibetaDerivative_1307 = require( './ibeta_derivative.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} PMF
*
* @example
* var pmf = factory( 10, 0.5 );
* var y = pmf( 3.0 );
* // returns ~0.027
*
* y = pmf( 5.0 );
* // returns ~0.061
*/
function __factory_1306( r, p ) {
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p <= 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a negative binomial distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( !_$isNonNegativeInteger_136( x ) ) {
			return 0.0;
		}
		return ( p / ( r + x ) ) * _$ibetaDerivative_1307( p, r, x + 1.0 );
	}
}


// EXPORTS //

var _$factory_1306 = __factory_1306;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/negative-binomial/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/negative-binomial/pmf' );
*
* var y = pmf( 5.0, 20.0, 0.8 );
* // returns ~0.157
*
* y = pmf( 21.0, 20.0, 0.5 );
* // returns ~0.06
*
* y = pmf( 5.0, 10.0, 0.4 );
* // returns ~0.016
*
* y = pmf( 0.0, 10.0, 0.9 );
* // returns ~0.349
*
* y = pmf( 21.0, 15.5, 0.5 );
* // returns ~0.037
*
* y = pmf( 5.0, 7.4, 0.4 );
* // returns ~0.051
*
* var mypmf = pmf.factory( 10, 0.5 );
* y = mypmf( 3.0 );
* // returns ~0.027
*
* y = mypmf( 5.0 );
* // returns ~0.061
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_1310 = require( './pmf.js' ); */;
/* removed: var _$factory_1306 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_1310, 'factory', _$factory_1306 );


// EXPORTS //

var _$pmf_1309 = _$pmf_1310;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_1289 = require( '@stdlib/stats/base/dists/negative-binomial/cdf' ); */;


// VARIABLES //

var methods;


// FUNCTIONS //

/**
* Performs a search to the left.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function __searchLeft_1314( x, k, r, p ) {
	while ( true ) {
		if ( x === 0 || _$cdf_1289( x - 1.0, r, p ) < k ) {
			return x;
		}
		x -= 1;
	}
}

/**
* Performs a search to the right.
*
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} k - probability
* @param {PositiveNumber} r - number of failures until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} `k` quantile of the specified distribution
*/
function __searchRight_1314( x, k, r, p ) {
	while ( true ) {
		x += 1;
		if ( _$cdf_1289( x, r, p ) >= k ) {
			return x;
		}
	}
}


// MAIN //

methods = {
	'left': __searchLeft_1314,
	'right': __searchRight_1314
};


// EXPORTS //

var _$methods_1314 = methods;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_1289 = require( '@stdlib/stats/base/dists/negative-binomial/cdf' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$methods_1314 = require( './search.js' ); */;


// MAIN //

/**
* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.
*
* @param {Probability} k - input value
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
*
* @example
* var y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
*
* @example
* var y = quantile( 0.5, 10.0, 0.4 );
* // returns 14
*
* @example
* var y = quantile( 0.0, 10.0, 0.9 );
* // returns 0
*
* @example
* var y = quantile( 1.1, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( -0.1, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -2.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, -1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, 1.5 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 20.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 20.0, NaN );
* // returns NaN
*/
function __quantile_1313( k, r, p ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var mu;
	var x2;
	var x;
	var q;

	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		_$isnan_130( k ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0 ||
		k < 0.0 ||
		k > 1.0
	) {
		return NaN;
	}
	if ( k === 0.0 ) {
		return 0.0;
	}
	if ( k === 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = _$sqrt_437( r * q ) / p;
	sigmaInv = 1.0 / sigma;

	// Cornish-Fisher expansion:
	if ( k < 0.5 ) {
		x = -_$erfcinv_210( 2.0 * k ) * _$SQRT2_118;
	} else {
		x = _$erfcinv_210( 2.0 * (1.0-k) ) * _$SQRT2_118;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = _$round_424( mu + (sigma * corr) );
	return ( _$cdf_1289( guess, r, p ) >= k ) ?
		_$methods_1314.left( guess, k, r, p ) :
		_$methods_1314.right( guess, k, r, p );
}


// EXPORTS //

var _$quantile_1313 = __quantile_1313;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$cdf_1289 = require( '@stdlib/stats/base/dists/negative-binomial/cdf' ); */;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$methods_1314 = require( './search.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.
*
* @param {PositiveNumber} r - number of successes until experiment is stopped
* @param {Probability} p - success probability
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0, 0.5 );
* var y = quantile( 0.1 );
* // returns 5
*
* y = quantile( 0.9 );
* // returns 16
*/
function __factory_1311( r, p ) {
	var sigmaInv;
	var sigma;
	var mu;
	var q;
	if (
		_$isnan_130( r ) ||
		_$isnan_130( p ) ||
		r <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return _$constantFunction_1600( NaN );
	}
	q = 1.0 - p;
	mu = ( r * q ) / p;
	sigma = _$sqrt_437( r * q ) / p;
	sigmaInv = ( (2.0/p) - 1.0 ) / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a negative binomial distribution.
	*
	* @private
	* @param {Probability} k - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( k ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( _$isnan_130( k ) || k < 0.0 || k > 1.0 ) {
			return NaN;
		}
		if ( k === 0.0 ) {
			return 0.0;
		}
		if ( k === 1.0 ) {
			return _$FLOAT64_PINF_110;
		}

		// Cornish-Fisher expansion:
		if ( k < 0.5 ) {
			x = -_$erfcinv_210( 2.0 * k ) * _$SQRT2_118;
		} else {
			x = _$erfcinv_210( 2.0 * (1.0-k) ) * _$SQRT2_118;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = _$round_424( mu + (sigma * corr) );
		return ( _$cdf_1289( guess, r, p ) >= k ) ?
			_$methods_1314.left( guess, k, r, p ) :
			_$methods_1314.right( guess, k, r, p );
	}
}


// EXPORTS //

var _$factory_1311 = __factory_1311;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution quantile function.
*
* @module @stdlib/stats/base/dists/negative-binomial/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/negative-binomial/quantile' );
*
* var y = quantile( 0.9, 20.0, 0.2 );
* // returns 106
*
* y = quantile( 0.9, 20.0, 0.8 );
* // returns 8
*
* var myquantile = quantile.factory( 10.0, 0.5 );
* y = myquantile( 0.1 );
* // returns 5
*
* y = myquantile( 0.9 );
* // returns 16
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1313 = require( './quantile.js' ); */;
/* removed: var _$factory_1311 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1313, 'factory', _$factory_1311 );


// EXPORTS //

var _$quantile_1312 = _$quantile_1313;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var __isProbability_1290 = _$isProbability_74.isPrimitive;
/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1290 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$kurtosis_1292 = require( '@stdlib/stats/base/dists/negative-binomial/kurtosis' ); */;
/* removed: var _$mean_1299 = require( '@stdlib/stats/base/dists/negative-binomial/mean' ); */;
/* removed: var _$mode_1304 = require( '@stdlib/stats/base/dists/negative-binomial/mode' ); */;
/* removed: var _$skewness_1315 = require( '@stdlib/stats/base/dists/negative-binomial/skewness' ); */;
/* removed: var _$stdev_1317 = require( '@stdlib/stats/base/dists/negative-binomial/stdev' ); */;
/* removed: var _$variance_1319 = require( '@stdlib/stats/base/dists/negative-binomial/variance' ); */;
/* removed: var _$cdf_1289 = require( '@stdlib/stats/base/dists/negative-binomial/cdf' ); */;
/* removed: var _$logpmf_1297 = require( '@stdlib/stats/base/dists/negative-binomial/logpmf' ); */;
/* removed: var _$mgf_1302 = require( '@stdlib/stats/base/dists/negative-binomial/mgf' ); */;
/* removed: var _$pmf_1309 = require( '@stdlib/stats/base/dists/negative-binomial/pmf' ); */;
/* removed: var _$quantile_1312 = require( '@stdlib/stats/base/dists/negative-binomial/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function negativeBinomialCDF( x ) {
	return _$cdf_1289( x, this.r, this.p );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function negativeBinomialLogPMF( x ) {
	return _$logpmf_1297( x, this.r, this.p );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function negativeBinomialMGF( t ) {
	return _$mgf_1302( t, this.r, this.p );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function negativeBinomialPMF( x ) {
	return _$pmf_1309( x, this.r, this.p );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function negativeBinomialQuantile( p ) {
	return _$quantile_1312( p, this.r, this.p );
}


// MAIN //

/**
* Negative binomial distribution constructor.
*
* @constructor
* @param {PositiveNumber} [r=1.0] - number of successes until experiment is stopped
* @param {Probability} [p=0.5] - success probability
* @throws {TypeError} `r` must be a positive number
* @throws {TypeError} `p` must be a number between 0 and 1
* @returns {NegativeBinomial} distribution instance
*
* @example
* var nbinomial = new NegativeBinomial( 5.0, 0.1 );
*
* var y = nbinomial.cdf( 10.0 );
* // returns ~0.013
*
* var v = nbinomial.mode;
* // returns 36.0
*/
function NegativeBinomial() {
	var r;
	var p;
	if ( !(this instanceof NegativeBinomial) ) {
		if ( arguments.length === 0 ) {
			return new NegativeBinomial();
		}
		return new NegativeBinomial( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		r = arguments[ 0 ];
		p = arguments[ 1 ];
		if ( !__isPositive_1290( r ) ) {
			throw new TypeError( 'invalid argument. Number of trials until experiment is stopped `r` must be a positive number. Value: `' + r + '`' );
		}
		if ( !__isProbability_1290( p ) ) {
			throw new TypeError( 'invalid argument. Success probability `p` must be a number between 0 and 1. Value: `' + p + '`' );
		}
	} else {
		r = 1.0;
		p = 0.5;
	}
	_$defineProperty_1606( this, 'r', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return r;
		},
		'set': function set( value ) {
			if ( !__isPositive_1290( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			r = value;
		}
	});
	_$defineProperty_1606( this, 'p', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return p;
		},
		'set': function set( value ) {
			if ( !__isProbability_1290( value ) ) {
				throw new TypeError( 'invalid value. Must be a number between 0 and 1. Value: `' + value + '`' );
			}
			p = value;
		}
	});
	return this;
}

/**
* Negative binomial distribution excess kurtosis.
*
* @name kurtosis
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.kurtosis;
* // returns ~0.522
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'kurtosis', function get() {
	return _$kurtosis_1292( this.r, this.p );
});

/**
* Negative binomial distribution expected value.
*
* @name mean
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mean;
* // returns ~18.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'mean', function get() {
	return _$mean_1299( this.r, this.p );
});

/**
* Negative binomial distribution mode.
*
* @name mode
* @memberof NegativeBinomial.prototype
* @type {NonNegativeInteger}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.mode;
* // returns 16.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'mode', function get() {
	return _$mode_1304( this.r, this.p );
});

/**
* Negative binomial distribution skewness.
*
* @name skewness
* @memberof NegativeBinomial.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.skewness;
* // returns ~0.596
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'skewness', function get() {
	return _$skewness_1315( this.r, this.p );
});

/**
* Negative binomial distribution standard deviation.
*
* @name stdev
* @memberof NegativeBinomial.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.stdev;
* // returns ~6.708
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'stdev', function get() {
	return _$stdev_1317( this.r, this.p );
});

/**
* Negative binomial distribution variance.
*
* @name variance
* @memberof NegativeBinomial.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var nbinomial = new NegativeBinomial( 12.0, 0.4 );
*
* var v = nbinomial.variance;
* // returns ~45.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( NegativeBinomial.prototype, 'variance', function get() {
	return _$variance_1319( this.r, this.p );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.cdf( 3.0 );
* // returns ~0.033
*/
_$setNonEnumerableReadOnly_1603( NegativeBinomial.prototype, 'cdf', negativeBinomialCDF );

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @name logpmf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.logpmf( 9.0 );
* // returns ~-3.052
*/
_$setNonEnumerableReadOnly_1603( NegativeBinomial.prototype, 'logpmf', negativeBinomialLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.mgf( 0.1 );
* // returns ~1.66
*/
_$setNonEnumerableReadOnly_1603( NegativeBinomial.prototype, 'mgf', negativeBinomialMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.pmf( 9.0 );
* // returns ~0.047
*/
_$setNonEnumerableReadOnly_1603( NegativeBinomial.prototype, 'pmf', negativeBinomialPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof NegativeBinomial.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var nbinomial = new NegativeBinomial( 4.0, 0.2 );
*
* var v = nbinomial.quantile( 0.5 );
* // returns 15.0
*/
_$setNonEnumerableReadOnly_1603( NegativeBinomial.prototype, 'quantile', negativeBinomialQuantile );


// EXPORTS //

var _$NegativeBinomial_1290 = NegativeBinomial;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Negative binomial distribution constructor.
*
* @module @stdlib/stats/base/dists/negative-binomial/ctor
*
* @example
* var NegativeBinomial = require( '@stdlib/stats/base/dists/negative-binomial/ctor' );
*
* var nbinomial = new NegativeBinomial( 7.5, 0.2 );
*
* var y = nbinomial.cdf( 12.0 );
* // returns ~0.047
*
* var mode = nbinomial.mode;
* // returns 26.0
*/

// MODULES //

/* removed: var _$NegativeBinomial_1290 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1291 = _$NegativeBinomial_1290;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$E_86 = require( '@stdlib/constants/math/float64-e' ); */;


// MAIN //

/**
* Returns the differential entropy for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} entropy
*
* @example
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* @example
* var y = entropy( 5.0, 3.0 );
* // returns ~2.518
*
* @example
* var y = entropy( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = entropy( 0.0, NaN );
* // returns NaN
*
* @example
* var y = entropy( 0.0, 0.0 );
* // returns NaN
*/
function __entropy_1326( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.5 * _$ln_376( _$TWO_PI_119 * _$E_86 * sigma*sigma );
}


// EXPORTS //

var _$entropy_1326 = __entropy_1326;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution differential entropy.
*
* @module @stdlib/stats/base/dists/normal/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/normal/entropy' );
*
* var y = entropy( 0.0, 1.0 );
* // returns ~1.419
*
* y = entropy( 4.0, 3.0 );
* // returns ~2.518
*/

// MODULES //

/* removed: var _$entropy_1326 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1327 = _$entropy_1326;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} excess kurtosis
*
* @example
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = kurtosis( 5.0, 3.0 );
* // returns 0.0
*
* @example
* var y = kurtosis( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, NaN );
* // returns NaN
*
* @example
* var y = kurtosis( 0.0, 0.0 );
* // returns NaN
*/
function __kurtosis_1329( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$kurtosis_1329 = __kurtosis_1329;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution kurtosis.
*
* @module @stdlib/stats/base/dists/normal/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/normal/kurtosis' );
*
* var y = kurtosis( 0.0, 1.0 );
* // returns 0.0
*
* y = kurtosis( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$kurtosis_1329 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1328 = _$kurtosis_1329;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} expected value
*
* @example
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mean( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mean( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mean( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mean( 0.0, 0.0 );
* // returns NaN
*/
function __mean_1334( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mean_1334 = __mean_1334;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution expected value.
*
* @module @stdlib/stats/base/dists/normal/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/normal/mean' );
*
* var y = mean( 0.0, 1.0 );
* // returns 0.0
*
* y = mean( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mean_1334 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1333 = _$mean_1334;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} median
*
* @example
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = median( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = median( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = median( 0.0, NaN );
* // returns NaN
*
* @example
* var y = median( 0.0, 0.0 );
* // returns NaN
*/
function __median_1336( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$median_1336 = __median_1336;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution median.
*
* @module @stdlib/stats/base/dists/normal/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/normal/median' );
*
* var y = median( 0.0, 1.0 );
* // returns 0.0
*
* y = median( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$median_1336 = require( './median.js' ); */;


// EXPORTS //

var _$median_1335 = _$median_1336;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} mode
*
* @example
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = mode( 5.0, 2.0 );
* // returns 5.0
*
* @example
* var y = mode( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mode( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mode( 0.0, 0.0 );
* // returns NaN
*/
function __mode_1341( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return mu;
}


// EXPORTS //

var _$mode_1341 = __mode_1341;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution mode.
*
* @module @stdlib/stats/base/dists/normal/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/normal/mode' );
*
* var y = mode( 0.0, 1.0 );
* // returns 0.0
*
* y = mode( 4.0, 2.0 );
* // returns 4.0
*/

// MODULES //

/* removed: var _$mode_1341 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1340 = _$mode_1341;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} skewness
*
* @example
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = skewness( 5.0, 3.0 );
* // returns 0.0
*
* @example
* var y = skewness( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = skewness( 0.0, NaN );
* // returns NaN
*
* @example
* var y = skewness( 0.0, 0.0 );
* // returns NaN
*/
function __skewness_1349( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_1349 = __skewness_1349;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution skewness.
*
* @module @stdlib/stats/base/dists/normal/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/normal/skewness' );
*
* var y = skewness( 0.0, 1.0 );
* // returns 0.0
*
* y = skewness( 4.0, 3.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1349 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1348 = _$skewness_1349;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the standard deviation for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} standard deviation
*
* @example
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = stdev( 5.0, 3.0 );
* // returns 3.0
*
* @example
* var y = stdev( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = stdev( 0.0, NaN );
* // returns NaN
*
* @example
* var y = stdev( 0.0, 0.0 );
* // returns NaN
*/
function __stdev_1351( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma;
}


// EXPORTS //

var _$stdev_1351 = __stdev_1351;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution standard deviation.
*
* @module @stdlib/stats/base/dists/normal/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/normal/stdev' );
*
* var y = stdev( 0.0, 1.0 );
* // returns 1.0
*
* y = stdev( 4.0, 3.0 );
* // returns 3.0
*/

// MODULES //

/* removed: var _$stdev_1351 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1350 = _$stdev_1351;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance for a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {PositiveNumber} variance
*
* @example
* var y = variance( 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = variance( 5.0, 3.0 );
* // returns 9.0
*
* @example
* var y = variance( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = variance( 0.0, NaN );
* // returns NaN
*
* @example
* var y = variance( 0.0, 0.0 );
* // returns NaN
*/
function __variance_1353( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return sigma*sigma;
}


// EXPORTS //

var _$variance_1353 = __variance_1353;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution variance.
*
* @module @stdlib/stats/base/dists/normal/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/normal/variance' );
*
* var y = variance( 0.0, 1.0 );
* // returns 1.0
*
* y = variance( 4.0, 3.0 );
* // returns 9.0
*/

// MODULES //

/* removed: var _$variance_1353 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1352 = _$variance_1353;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$LN_TWO_PI_98 = require( '@stdlib/constants/math/float64-ln-two-pi' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.919
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns ~-4.737
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 8.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __logpdf_1332( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = (-0.5) * ( ( 2.0*_$ln_376( sigma ) ) + _$LN_TWO_PI_98 );
	B = -1.0 / ( 2.0*s2 );
	return A + ( B * _$pow_396( x-mu, 2.0 ) );
}


// EXPORTS //

var _$logpdf_1332 = __logpdf_1332;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1330 = _$logpdf_774.factory;
/* removed: var _$LN_TWO_PI_98 = require( '@stdlib/constants/math/float64-ln-two-pi' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 10.0, 2.0 );
* var y = logpdf( 10.0 );
* // returns ~-1.612
*
* y = logpdf( 5.0 );
* // returns ~-4.737
*/
function __factory_1330( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1330( mu );
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = (-0.5) * ( ( 2.0*_$ln_376( sigma ) ) + _$LN_TWO_PI_98 );
	B = -1.0 / ( 2.0*s2 );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( -3.14 );
	* // returns <number>
	*/
	function logpdf( x ) {
		return A + ( B * _$pow_396( x-mu, 2.0 ) );
	}
}


// EXPORTS //

var _$factory_1330 = __factory_1330;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a normal distribution.
*
* @module @stdlib/stats/base/dists/normal/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/normal/logpdf' );
*
* var y = logpdf( 2.0, 0.0, 1.0 );
* // returns ~-2.919
*
* var myLogPDF = logpdf.factory( 10.0, 2.0 );
* y = myLogPDF( 10.0 );
* // returns ~-1.612
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1332 = require( './logpdf.js' ); */;
/* removed: var _$factory_1330 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1332, 'factory', _$factory_1330 );


// EXPORTS //

var _$logpdf_1331 = _$logpdf_1332;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
*
* @example
* var y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 2.0, 0.0, 0.0 );
* // returns NaN
*/
function __mgf_1339( t, mu, sigma ) {
	if (
		_$isnan_130( t ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return NaN;
	}
	return _$exp_225( (mu * t) + (0.5 * _$pow_396( sigma * t, 2.0 )) );
}


// EXPORTS //

var _$mgf_1339 = __mgf_1339;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a normal distribution with mean `mu` and standard deviation `sigma`.
*
* @param {number} mu - mean
* @param {PositiveNumber} sigma - standard deviation
* @returns {Function} MGF
*
* @example
* var mgf = factory( 4.0, 2.0 );
*
* var y = mgf( 1.0 );
* // returns ~403.429
*
* y = mgf( 0.5 );
* // returns ~12.182
*/
function __factory_1337( mu, sigma ) {
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a normal distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		return _$exp_225( (mu * t) + (0.5 * _$pow_396( sigma * t, 2.0 )) );
	}
}


// EXPORTS //

var _$factory_1337 = __factory_1337;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a normal distribution.
*
* @module @stdlib/stats/base/dists/normal/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/normal/mgf' );
*
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~7.389
*
* y = mgf( 0.0, 0.0, 1.0 );
* // returns 1.0
*
* y = mgf( -1.0, 4.0, 2.0 );
* // returns ~0.1353
*
* var mymgf = mgf.factory( 4.0, 2.0 );
*
* y = mymgf( 1.0 );
* // returns ~403.429
*
* y = mymgf( 0.5 );
* // returns ~12.182
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1339 = require( './mgf.js' ); */;
/* removed: var _$factory_1337 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1339, 'factory', _$factory_1337 );


// EXPORTS //

var _$mgf_1338 = _$mgf_1339;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns ~0.009
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 8.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0 );
* // returns Infinity
*/
function __pdf_1344( x, mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x === mu ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = 1.0 / _$sqrt_437( s2*_$TWO_PI_119 );
	B = -1.0 / ( 2.0*s2 );
	return A * _$exp_225( B * _$pow_396(x-mu, 2.0) );
}


// EXPORTS //

var _$pdf_1344 = __pdf_1344;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1342 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$TWO_PI_119 = require( '@stdlib/constants/math/float64-two-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a normal distribution.
*
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 10.0, 2.0 );
* var y = pdf( 10.0 );
* // returns ~0.199
*
* y = pdf( 5.0 );
* // returns ~0.009
*/
function __factory_1342( mu, sigma ) {
	var s2;
	var A;
	var B;
	if (
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1342( mu );
	}
	s2 = _$pow_396( sigma, 2.0 );
	A = 1.0 / _$sqrt_437( s2*_$TWO_PI_119 );
	B = -1.0 / ( 2.0*s2 );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated probability density function
	*
	* @example
	* var y = pdf( -3.14 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return A * _$exp_225( B * _$pow_396(x-mu, 2.0) );
	}
}


// EXPORTS //

var _$factory_1342 = __factory_1342;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/normal/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/normal/pdf' );
*
* var y = pdf( 2.0, 0.0, 1.0 );
* // returns ~0.054
*
* var myPDF = pdf.factory( 10.0, 2.0 );
* y = myPDF( 10.0 );
* // returns ~0.199
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1344 = require( './pdf.js' ); */;
/* removed: var _$factory_1342 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1344, 'factory', _$factory_1342 );


// EXPORTS //

var _$pdf_1343 = _$pdf_1344;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1324 = _$isPositiveNumber_70.isPrimitive;
var __isNumber_1324 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_50 = require( '@stdlib/assert/is-nan' ); */;
/* removed: var _$entropy_1327 = require( '@stdlib/stats/base/dists/normal/entropy' ); */;
/* removed: var _$kurtosis_1328 = require( '@stdlib/stats/base/dists/normal/kurtosis' ); */;
/* removed: var _$mean_1333 = require( '@stdlib/stats/base/dists/normal/mean' ); */;
/* removed: var _$median_1335 = require( '@stdlib/stats/base/dists/normal/median' ); */;
/* removed: var _$mode_1340 = require( '@stdlib/stats/base/dists/normal/mode' ); */;
/* removed: var _$skewness_1348 = require( '@stdlib/stats/base/dists/normal/skewness' ); */;
/* removed: var _$stdev_1350 = require( '@stdlib/stats/base/dists/normal/stdev' ); */;
/* removed: var _$variance_1352 = require( '@stdlib/stats/base/dists/normal/variance' ); */;
/* removed: var _$cdf_1323 = require( '@stdlib/stats/base/dists/normal/cdf' ); */;
/* removed: var _$logpdf_1331 = require( '@stdlib/stats/base/dists/normal/logpdf' ); */;
/* removed: var _$mgf_1338 = require( '@stdlib/stats/base/dists/normal/mgf' ); */;
/* removed: var _$pdf_1343 = require( '@stdlib/stats/base/dists/normal/pdf' ); */;
/* removed: var _$quantile_1346 = require( '@stdlib/stats/base/dists/normal/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function __normalCDF_1324( x ) {
	return _$cdf_1323( x, this.mu, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function normalLogPDF( x ) {
	return _$logpdf_1331( x, this.mu, this.sigma );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function normalMGF( t ) {
	return _$mgf_1338( t, this.mu, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function normalPDF( x ) {
	return _$pdf_1343( x, this.mu, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function normalQuantile( p ) {
	return _$quantile_1346( p, this.mu, this.sigma );
}


// MAIN //

/**
* Normal distribution constructor.
*
* @constructor
* @param {number} [mu=0.0] - location parameter
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Normal} distribution instance
*
* @example
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/
function Normal() {
	var sigma;
	var mu;
	if ( !(this instanceof Normal) ) {
		if ( arguments.length === 0 ) {
			return new Normal();
		}
		return new Normal( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		mu = arguments[ 0 ];
		sigma = arguments[ 1 ];
		if ( !__isNumber_1324( mu ) || _$isnan_50( mu ) ) {
			throw new TypeError( 'invalid argument. Location parameter `mu` must be a number primitive. Value: `' + mu + '`' );
		}
		if ( !__isPositive_1324( sigma ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		mu = 0.0;
		sigma = 1.0;
	}
	_$defineProperty_1606( this, 'mu', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return mu;
		},
		'set': function set( value ) {
			if ( !__isNumber_1324( value ) || _$isnan_50( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			mu = value;
		}
	});
	_$defineProperty_1606( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !__isPositive_1324( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Normal distribution differential entropy.
*
* @name entropy
* @memberof Normal.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.entropy;
* // returns ~3.904
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'entropy', function get() {
	return _$entropy_1327( this.mu, this.sigma );
});

/**
* Normal distribution excess kurtosis.
*
* @name kurtosis
* @memberof Normal.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.kurtosis;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'kurtosis', function get() {
	return _$kurtosis_1328( this.mu, this.sigma );
});

/**
* Normal distribution expected value.
*
* @name mean
* @memberof Normal.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'mean', function get() {
	return _$mean_1333( this.mu, this.sigma );
});

/**
* Normal distribution median.
*
* @name median
* @memberof Normal.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'median', function get() {
	return _$median_1335( this.mu, this.sigma );
});

/**
* Normal distribution mode.
*
* @name mode
* @memberof Normal.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'mode', function get() {
	return _$mode_1340( this.mu, this.sigma );
});

/**
* Normal distribution skewness.
*
* @name skewness
* @memberof Normal.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'skewness', function get() {
	return _$skewness_1348( this.mu, this.sigma );
});

/**
* Normal distribution standard deviation.
*
* @name stdev
* @memberof Normal.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.stdev;
* // returns 12.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'stdev', function get() {
	return _$stdev_1350( this.mu, this.sigma );
});

/**
* Normal distribution variance.
*
* @name variance
* @memberof Normal.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var normal = new Normal( 4.0, 12.0 );
*
* var v = normal.variance;
* // returns 144.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Normal.prototype, 'variance', function get() {
	return _$variance_1352( this.mu, this.sigma );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.cdf( 0.5 );
* // returns ~0.354
*/
_$setNonEnumerableReadOnly_1603( Normal.prototype, 'cdf', __normalCDF_1324 );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.logpdf( 0.8 );
* // returns ~-2.35
*/
_$setNonEnumerableReadOnly_1603( Normal.prototype, 'logpdf', normalLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Normal.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.mgf( 0.01 );
* // returns ~1.021
*/
_$setNonEnumerableReadOnly_1603( Normal.prototype, 'mgf', normalMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Normal.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.pdf( 0.8 );
* // returns ~0.095
*/
_$setNonEnumerableReadOnly_1603( Normal.prototype, 'pdf', normalPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Normal.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var normal = new Normal( 2.0, 4.0 );
*
* var v = normal.quantile( 0.5 );
* // returns 2.0
*/
_$setNonEnumerableReadOnly_1603( Normal.prototype, 'quantile', normalQuantile );


// EXPORTS //

var _$Normal_1324 = Normal;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Normal distribution constructor.
*
* @module @stdlib/stats/base/dists/normal/ctor
*
* @example
* var Normal = require( '@stdlib/stats/base/dists/normal/ctor' );
*
* var normal = new Normal( 1.0, 1.0 );
*
* var y = normal.cdf( 1.5 );
* // returns ~0.691
*
* var mu = normal.mean;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Normal_1324 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1325 = _$Normal_1324;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
*
* @example
* var y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
*
* @example
* var y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
*
* @example
* var y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = cdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __cdf_1354( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < beta ) {
		return 0.0;
	}
	return 1.0 - _$pow_396( beta / x, alpha );
}


// EXPORTS //

var _$cdf_1354 = __cdf_1354;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 10.0, 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.983
*
* y = cdf( 2.5 );
* // returns ~0.893
*/
function __factory_1355( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < beta ) {
			return 0.0;
		}
		return 1.0 - _$pow_396( beta / x, alpha );
	}
}


// EXPORTS //

var _$factory_1355 = __factory_1355;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/pareto-type1/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/pareto-type1/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns 0.5
*
* y = cdf( 5.0, 2.0, 4.0 );
* // returns ~0.36
*
* y = cdf( 4.0, 2.0, 2.0 );
* // returns 0.75
*
* y = cdf( 1.9, 2.0, 2.0 );
* // returns 0.0
*
* y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 10.0, 2.0 );
* y = mycdf( 3.0 );
* // returns ~0.983
*
* y = mycdf( 2.5 );
* // returns ~0.893
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1354 = require( './cdf.js' ); */;
/* removed: var _$factory_1355 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1354, 'factory', _$factory_1355 );


// EXPORTS //

var _$cdf_1356 = _$cdf_1354;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} differential entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 2.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.349
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~-0.261
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_1359( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return _$ln_376( ( beta/alpha ) * _$exp_225( 1.0 + ( 1.0/alpha ) ) );
}


// EXPORTS //

var _$entropy_1359 = __entropy_1359;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution differential entropy.
*
* @module @stdlib/stats/base/dists/pareto-type1/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/pareto-type1/entropy' );
*
* var v = entropy( 0.8, 1.0 );
* // returns ~2.473
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.349
*
* v = entropy( 8.0, 2.0 );
* // returns ~-0.261
*/

// MODULES //

/* removed: var _$entropy_1359 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1360 = _$entropy_1359;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
*
* @example
* var v = kurtosis( 7.0, 12.0 );
* // returns ~24.857
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_1362( alpha, beta ) {
	var out;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 4.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	out = 6.0 * ( _$pow_396( alpha, 3.0 ) + _$pow_396( alpha, 2.0 ) - ( 6.0*alpha ) - 2.0 );
	out /= alpha * ( alpha-3.0 ) * ( alpha-4.0 );
	return out;
}


// EXPORTS //

var _$kurtosis_1362 = __kurtosis_1362;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/pareto-type1/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/pareto-type1/kurtosis' );
*
* var v = kurtosis( 5.0, 1.0 );
* // returns ~70.8
*
* v = kurtosis( 4.2, 12.0 );
* // returns ~384.095
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~19.725
*/

// MODULES //

/* removed: var _$kurtosis_1362 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1361 = _$kurtosis_1362;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the expected value of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns Infinity
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 16.0
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~2.286
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_1370( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	if ( alpha <= 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return ( alpha*beta ) / ( alpha-1.0 );
}


// EXPORTS //

var _$mean_1370 = __mean_1370;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution expected value.
*
* @module @stdlib/stats/base/dists/pareto-type1/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/pareto-type1/mean' );
*
* var v = mean( 0.8, 1.0 );
* // returns Infinity
*
* v = mean( 4.0, 12.0 );
* // returns 16.0
*
* v = mean( 8.0, 2.0 );
* // returns ~2.286
*/

// MODULES //

/* removed: var _$mean_1370 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1369 = _$mean_1370;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the median of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns 2.0
*
* @example
* var v = median( 4.0, 12.0 );
* // returns ~14.27
*
* @example
* var v = median( 8.0, 2.0 );
* // returns ~2.181
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function __median_1372( alpha, beta ) {
	if ( alpha <= 0.0 || beta <= 0.0 ) {
		return NaN;
	}
	return beta * _$pow_396( 2.0, 1.0/alpha );
}


// EXPORTS //

var _$median_1372 = __median_1372;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution median.
*
* @module @stdlib/stats/base/dists/pareto-type1/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/pareto-type1/median' );
*
* var v = median( 0.8, 1.0 );
* // returns ~2.378
*
* v = median( 4.0, 12.0 );
* // returns ~14.27
*
* v = median( 8.0, 2.0 );
* // returns ~2.181
*/

// MODULES //

/* removed: var _$median_1372 = require( './median.js' ); */;


// EXPORTS //

var _$median_1371 = _$median_1372;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns 12.0
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns 2.0
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_1374( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return beta;
}


// EXPORTS //

var _$mode_1374 = __mode_1374;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution mode.
*
* @module @stdlib/stats/base/dists/pareto-type1/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/pareto-type1/mode' );
*
* var v = mode( 0.8, 1.0 );
* // returns 1.0
*
* v = mode( 4.0, 12.0 );
* // returns 12.0
*
* v = mode( 8.0, 2.0 );
* // returns 2.0
*/

// MODULES //

/* removed: var _$mode_1374 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1373 = _$mode_1374;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~7.071
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~3.118
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_1382( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		alpha <= 3.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	return 2.0 * ( 1.0+alpha ) / ( alpha-3.0 ) * _$sqrt_437( ( alpha-2.0 ) / alpha );
}


// EXPORTS //

var _$skewness_1382 = __skewness_1382;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution skewness.
*
* @module @stdlib/stats/base/dists/pareto-type1/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/pareto-type1/skewness' );
*
* var v = skewness( 3.5, 1.0 );
* // returns ~11.784
*
* v = skewness( 4.0, 12.0 );
* // returns ~7.071
*
* v = skewness( 8.0, 2.0 );
* // returns ~3.118
*/

// MODULES //

/* removed: var _$skewness_1382 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1381 = _$skewness_1382;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns 32.0
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.109
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns Infinity
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_1386( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha < 2.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return ( beta*beta * alpha ) / ( _$pow_396( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
}


// EXPORTS //

var _$variance_1386 = __variance_1386;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution variance.
*
* @module @stdlib/stats/base/dists/pareto-type1/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/pareto-type1/variance' );
*
* var v = variance( 4.0, 12.0 );
* // returns 32.0
*
* v = variance( 8.0, 2.0 );
* // returns ~0.109
*
* v = variance( 0.8, 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$variance_1386 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1385 = _$variance_1386;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.693
*
* @example
* var y = logcdf( 5.0, 2.0, 4.0 );
* // returns ~-1.022
*
* @example
* var y = logcdf( 4.0, 2.0, 2.0 );
* // returns ~-0.288
*
* @example
* var y = logcdf( 1.9, 2.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( 2.0, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logcdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 1.0, NaN );
* // returns NaN
*/
function __logcdf_1365( x, alpha, beta ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x < beta ) {
		return _$FLOAT64_NINF_107;
	}
	return _$log1p_380( -_$pow_396( beta / x, alpha ) );
}


// EXPORTS //

var _$logcdf_1365 = __logcdf_1365;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 10.0, 2.0 );
* var y = logcdf( 3.0 );
* // returns ~-0.017
*
* y = logcdf( 2.5 );
* // returns ~-0.114
*/
function __factory_1363( alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < beta ) {
			return _$FLOAT64_NINF_107;
		}
		return _$log1p_380( -_$pow_396( beta / x, alpha ) );
	}
}


// EXPORTS //

var _$factory_1363 = __factory_1363;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/stats/base/dists/pareto-type1/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/pareto-type1/logcdf' );
*
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.693
*
* y = logcdf( 5.0, 2.0, 4.0 );
* // returns ~-1.022
*
* y = logcdf( 4.0, 2.0, 2.0 );
* // returns ~-0.288
*
* y = logcdf( 1.9, 2.0, 2.0 );
* // returns -Infinity
*
* y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 10.0, 2.0 );
* y = mylogcdf( 3.0 );
* // returns ~-0.017
*
* y = mylogcdf( 2.5 );
* // returns ~-0.113
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1365 = require( './logcdf.js' ); */;
/* removed: var _$factory_1363 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1365, 'factory', _$factory_1363 );


// EXPORTS //

var _$logcdf_1364 = _$logcdf_1365;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 4.0, 1.0, 1.0 );
* // returns ~-2.773
*
* @example
* var y = logpdf( 20.0, 1.0, 10.0 );
* // returns ~-3.689
*
* @example
* var y = logpdf( 7.0, 2.0, 6.0 );
* // returns ~-1.561
*
* @example
* var y = logpdf( 7.0, 6.0, 3.0 );
* // returns ~-5.238
*
* @example
* var y = logpdf( 1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 1.5, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __logpdf_1368( x, alpha, beta ) {
	var denom;
	var num;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x >= beta ) {
		num = _$ln_376( alpha ) + ( alpha * _$ln_376( beta ) );
		denom = ( alpha + 1.0 ) * _$ln_376( x );
		return num - denom;
	}
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpdf_1368 = __logpdf_1368;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} logPDF
*
* @example
* var mylogpdf = factory( 0.5, 0.5 );
*
* var y = mylogpdf( 0.8 );
* // returns ~-0.705
*
* y = mylogpdf( 2.0 );
* // returns ~-2.079
*/
function __factory_1366( alpha, beta ) {
	var num;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	num = _$ln_376( alpha ) + ( alpha * _$ln_376( beta ) );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 4.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x >= beta ) {
			return num - ( ( alpha + 1.0 ) * _$ln_376( x ) );
		}
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_1366 = __factory_1366;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm of the probability density function (PDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/stats/base/dists/pareto-type1/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/pareto-type1/logpdf' );
*
* var y = logpdf( 4.0, 1.0, 1.0 );
* // returns ~-2.773
*
* y = logpdf( 20.0, 1.0, 10.0 );
* // returns ~-3.689
*
* y = logpdf( 7.0, 2.0, 6.0 );
* // returns ~-1.561
*
* var mylogpdf = logpdf.factory( 0.5, 0.5 );
*
* y = mylogpdf( 0.8 );
* // returns ~-0.705
*
* y = mylogpdf( 2.0 );
* // returns ~-2.079
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1368 = require( './logpdf.js' ); */;
/* removed: var _$factory_1366 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1368, 'factory', _$factory_1366 );


// EXPORTS //

var _$logpdf_1367 = _$logpdf_1368;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.063
*
* @example
* var y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
*
* @example
* var y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
*
* @example
* var y = pdf( 7.0, 6.0, 3.0 );
* // returns ~0.005
*
* @example
* var y = pdf( 1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 1.5, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.5, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = pdf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.5, 1.0, NaN );
* // returns NaN
*/
function __pdf_1377( x, alpha, beta ) {
	var denom;
	var num;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( x >= beta ) {
		num = alpha * _$pow_396( beta, alpha );
		denom = _$pow_396( x, alpha + 1.0 );
		return num / denom;
	}
	return 0.0;
}


// EXPORTS //

var _$pdf_1377 = __pdf_1377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} PDF
*
* @example
* var mypdf = factory( 0.5, 0.5 );
*
* var y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/
function __factory_1375( alpha, beta ) {
	var num;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	num = alpha * _$pow_396( beta, alpha );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Pareto (Type I) distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 4.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		var denom;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x >= beta ) {
			denom = _$pow_396( x, alpha + 1.0 );
			return num / denom;
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1375 = __factory_1375;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the probability density function (PDF) for a Pareto (Type I) distribution.
*
* @module @stdlib/stats/base/dists/pareto-type1/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/pareto-type1/pdf' );
*
* var y = pdf( 4.0, 1.0, 1.0 );
* // returns ~0.044
*
* y = pdf( 20.0, 1.0, 10.0 );
* // returns 0.025
*
* y = pdf( 7.0, 2.0, 6.0 );
* // returns ~0.21
*
* var mypdf = pdf.factory( 0.5, 0.5 );
*
* y = mypdf( 0.8 );
* // returns ~0.494
*
* y = mypdf( 2.0 );
* // returns ~0.125
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1377 = require( './pdf.js' ); */;
/* removed: var _$factory_1375 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1377, 'factory', _$factory_1375 );


// EXPORTS //

var _$pdf_1376 = _$pdf_1377;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
*
* @example
* var y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
*
* @example
* var y = quantile( 0.1, 1.0, 10.0 );
* // returns ~11.111
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_1380( p, alpha, beta ) {
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		_$isnan_130( p ) ||
		alpha <= 0.0 ||
		beta <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return beta / _$pow_396( 1.0 - p, 1.0/alpha );
}


// EXPORTS //

var _$quantile_1380 = __quantile_1380;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.5, 0.5 );
* var y = quantile( 0.5 );
* // returns ~0.66
*
* y = quantile( 0.8 );
* // returns ~0.952
*/
function __factory_1378( alpha, beta ) {
	var alphaInv;
	if (
		_$isnan_130( alpha ) ||
		_$isnan_130( beta ) ||
		alpha <= 0.0 ||
		beta <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	alphaInv = 1.0 / alpha;
	return quantile;

	/**
	* Evaluates the quantile function for a Pareto (Type I) distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return beta / _$pow_396( 1.0 - p, alphaInv );
	}
}


// EXPORTS //

var _$factory_1378 = __factory_1378;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution quantile function.
*
* @module @stdlib/stats/base/dists/pareto-type1/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/pareto-type1/quantile' );
*
* var y = quantile( 0.8, 2.0, 1.0 );
* // returns ~2.236
*
* y = quantile( 0.8, 1.0, 10.0 );
* // returns ~50.0
*
* y = quantile( 0.1, 1.0, 10.0 );
* // returns ~10.541
*
* var myquantile = quantile.factory( 2.5, 0.5 );
* y = myquantile( 0.5 );
* // returns ~0.66
*
* y = myquantile( 0.8 );
* // returns ~0.952
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1380 = require( './quantile.js' ); */;
/* removed: var _$factory_1378 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1380, 'factory', _$factory_1378 );


// EXPORTS //

var _$quantile_1379 = _$quantile_1380;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1357 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1360 = require( '@stdlib/stats/base/dists/pareto-type1/entropy' ); */;
/* removed: var _$kurtosis_1361 = require( '@stdlib/stats/base/dists/pareto-type1/kurtosis' ); */;
/* removed: var _$mean_1369 = require( '@stdlib/stats/base/dists/pareto-type1/mean' ); */;
/* removed: var _$median_1371 = require( '@stdlib/stats/base/dists/pareto-type1/median' ); */;
/* removed: var _$mode_1373 = require( '@stdlib/stats/base/dists/pareto-type1/mode' ); */;
/* removed: var _$skewness_1381 = require( '@stdlib/stats/base/dists/pareto-type1/skewness' ); */;
/* removed: var _$variance_1385 = require( '@stdlib/stats/base/dists/pareto-type1/variance' ); */;
/* removed: var _$cdf_1356 = require( '@stdlib/stats/base/dists/pareto-type1/cdf' ); */;
/* removed: var _$logcdf_1364 = require( '@stdlib/stats/base/dists/pareto-type1/logcdf' ); */;
/* removed: var _$logpdf_1367 = require( '@stdlib/stats/base/dists/pareto-type1/logpdf' ); */;
/* removed: var _$pdf_1376 = require( '@stdlib/stats/base/dists/pareto-type1/pdf' ); */;
/* removed: var _$quantile_1379 = require( '@stdlib/stats/base/dists/pareto-type1/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function paretoCDF( x ) {
	return _$cdf_1356( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function paretoLogCDF( x ) {
	return _$logcdf_1364( x, this.alpha, this.beta );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function paretoLogPDF( x ) {
	return _$logpdf_1367( x, this.alpha, this.beta );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function paretoPDF( x ) {
	return _$pdf_1376( x, this.alpha, this.beta );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function paretoQuantile( p ) {
	return _$quantile_1379( p, this.alpha, this.beta );
}


// MAIN //

/**
* Pareto (Type I) distribution constructor.
*
* @constructor
* @param {PositiveNumber} [alpha=1.0] - shape parameter
* @param {PositiveNumber} [beta=1.0] - scale parameter
* @throws {TypeError} `alpha` must be a positive number
* @throws {TypeError} `beta` must be a positive number
* @returns {Pareto1} distribution instance
*
* @example
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 0.8 );
* // returns 0.0
*
* var mu = pareto1.mean;
* // returns Infinity
*/
function Pareto1() {
	var alpha;
	var beta;
	if ( !(this instanceof Pareto1) ) {
		if ( arguments.length === 0 ) {
			return new Pareto1();
		}
		return new Pareto1( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		alpha = arguments[ 0 ];
		beta = arguments[ 1 ];
		if ( !__isPositive_1357( alpha ) ) {
			throw new TypeError( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `' + alpha + '`' );
		}
		if ( !__isPositive_1357( beta ) ) {
			throw new TypeError( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `' + beta + '`' );
		}
	} else {
		alpha = 1.0;
		beta = 1.0;
	}
	_$defineProperty_1606( this, 'alpha', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return alpha;
		},
		'set': function set( value ) {
			if ( !__isPositive_1357( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			alpha = value;
		}
	});
	_$defineProperty_1606( this, 'beta', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return beta;
		},
		'set': function set( value ) {
			if ( !__isPositive_1357( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			beta = value;
		}
	});
	return this;
}

/**
* Pareto (Type I) distribution differential entropy.
*
* @name entropy
* @memberof Pareto1.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.entropy;
* // returns ~2.349
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'entropy', function get() {
	return _$entropy_1360( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution excess kurtosis.
*
* @name kurtosis
* @memberof Pareto1.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.kurtosis;
* // returns NaN
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'kurtosis', function get() {
	return _$kurtosis_1361( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution expected value.
*
* @name mean
* @memberof Pareto1.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mean;
* // returns 16.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'mean', function get() {
	return _$mean_1369( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution median.
*
* @name median
* @memberof Pareto1.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.median;
* // returns ~14.27
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'median', function get() {
	return _$median_1371( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution mode.
*
* @name mode
* @memberof Pareto1.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.mode;
* // returns 12.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'mode', function get() {
	return _$mode_1373( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution skewness.
*
* @name skewness
* @memberof Pareto1.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.skewness;
* // returns ~7.071
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'skewness', function get() {
	return _$skewness_1381( this.alpha, this.beta );
});

/**
* Pareto (Type I) distribution variance.
*
* @name variance
* @memberof Pareto1.prototype
* @type {number}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var pareto1 = new Pareto1( 4.0, 12.0 );
*
* var v = pareto1.variance;
* // returns 32.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Pareto1.prototype, 'variance', function get() {
	return _$variance_1385( this.alpha, this.beta );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.cdf( 4.0 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Pareto1.prototype, 'cdf', paretoCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.logcdf( 4.0 );
* // returns -Infinity
*/
_$setNonEnumerableReadOnly_1603( Pareto1.prototype, 'logcdf', paretoLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.logpdf( 5.0 );
* // returns ~-1.363
*/
_$setNonEnumerableReadOnly_1603( Pareto1.prototype, 'logpdf', paretoLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Pareto1.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.pdf( 5.0 );
* // returns ~0.256
*/
_$setNonEnumerableReadOnly_1603( Pareto1.prototype, 'pdf', paretoPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Pareto1.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var pareto1 = new Pareto1( 2.0, 4.0 );
*
* var v = pareto1.quantile( 0.5 );
* // returns ~5.657
*/
_$setNonEnumerableReadOnly_1603( Pareto1.prototype, 'quantile', paretoQuantile );


// EXPORTS //

var _$Pareto1_1357 = Pareto1;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution constructor.
*
* @module @stdlib/stats/base/dists/pareto-type1/ctor
*
* @example
* var Pareto1 = require( '@stdlib/stats/base/dists/pareto-type1/ctor' );
*
* var pareto1 = new Pareto1( 1.0, 1.0 );
*
* var y = pareto1.cdf( 10.0 );
* // returns 0.9
*
* var mu = pareto1.mean;
* // returns Infinity
*/

// MODULES //

/* removed: var _$Pareto1_1357 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1358 = _$Pareto1_1357;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation of a Pareto (Type I) distribution.
*
* @param {PositiveNumber} alpha - shape parameter
* @param {PositiveNumber} beta - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~5.657
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.33
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns Infinity
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_1384( alpha, beta ) {
	var out;
	if (
		_$isnan_130( alpha ) ||
		alpha <= 0.0 ||
		_$isnan_130( beta ) ||
		beta <= 0.0
	) {
		return NaN;
	}
	if ( alpha < 2.0 ) {
		return _$FLOAT64_PINF_110;
	}
	out = ( (beta*beta) * alpha ) / ( _$pow_396( alpha-1.0, 2.0 ) * ( alpha-2.0 ) );
	return _$sqrt_437( out );
}


// EXPORTS //

var _$stdev_1384 = __stdev_1384;

/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Pareto (Type I) distribution standard deviation.
*
* @module @stdlib/stats/base/dists/pareto-type1/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/pareto-type1/stdev' );
*
* var v = stdev( 4.0, 12.0 );
* // returns 32.0
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.109
*
* v = stdev( 0.8, 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$stdev_1384 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1383 = _$stdev_1384;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
*
* @example
* var y = cdf( 2.0, 10.0 );
* // returns ~0.003
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative mean parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_1387( x, lambda ) {
	if ( _$isnan_130( x ) || _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( lambda === 0.0 ) {
		return 1.0;
	}
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	return _$gammainc_263( lambda, _$floor_236( x ) + 1.0, true, true );
}


// EXPORTS //

var _$cdf_1387 = __cdf_1387;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1388 = _$cdf_765.factory;
/* removed: var _$gammainc_263 = require( '@stdlib/math/base/special/gammainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 5.0 );
* var y = cdf( 3.0 );
* // returns ~0.265
*
* y = cdf( 8.0 );
* // returns ~0.932
*/
function __factory_1388( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( lambda === 0.0 ) {
		return __degenerate_1388( 0.0 );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 ) {
			return 1.0;
		}
		return _$gammainc_263( lambda, _$floor_236( x ) + 1.0, true, true );
	}
}


// EXPORTS //

var _$factory_1388 = __factory_1388;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/poisson/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/poisson/cdf' );
*
* var y = cdf( 2.0, 0.5 );
* // returns ~0.986
*
* y = cdf( 2.0, 10.0 );
* // returns ~0.003
*
* y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 5.0 );
* y = mycdf( 3.0 );
* // returns ~0.265
*
* y = mycdf( 8.0 );
* // returns ~0.932
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1387 = require( './cdf.js' ); */;
/* removed: var _$factory_1388 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1387, 'factory', _$factory_1388 );


// EXPORTS //

var _$cdf_1389 = _$cdf_1387;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sumSeries_451 = require( '@stdlib/math/base/tools/sum-series' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$factorial_232 = require( '@stdlib/math/base/special/factorial' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// FUNCTIONS //

/**
* Returns a function to retrieve elements of the series \\( \sum_{k=0}^{\infty} \frac{ \lambda^k \log(k!) }{ k! } \\).
*
* @private
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} function to retrieve series elements
*/
function seriesClosure( lambda ) {
	var lk;
	var k;
	k = 1;
	lk = lambda;
	return seriesElement;

	/**
	* Returns the current series element.
	*
	* @private
	* @returns {number} series element
	*/
	function seriesElement() {
		k += 1;
		lk *= lambda;
		return lk * _$factorialln_234( k ) / _$factorial_232( k );
	}
}


// MAIN //

/**
* Returns the entropy of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {PositiveNumber} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~2.508
*
* @example
* var v = entropy( 1.0 );
* // returns ~1.305
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_1392( lambda ) {
	var gen;
	var out;
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	gen = seriesClosure( lambda );
	out = lambda * ( 1.0-_$ln_376(lambda) );
	out += _$exp_225( -lambda ) * _$sumSeries_451( gen );
	return out;
}


// EXPORTS //

var _$entropy_1392 = __entropy_1392;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution entropy.
*
* @module @stdlib/stats/base/dists/poisson/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/poisson/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~2.61
*
* v = entropy( 4.5 );
* // returns ~2.149
*/

// MODULES //

/* removed: var _$entropy_1392 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1393 = _$entropy_1392;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.111
*
* @example
* var v = kurtosis( 1.0 );
* // returns 1.0
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_1395( lambda ) {
	if ( _$isnan_130( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / lambda;
}


// EXPORTS //

var _$kurtosis_1395 = __kurtosis_1395;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/poisson/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/poisson/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.091
*
* v = kurtosis( 4.5 );
* // returns ~0.222
*/

// MODULES //

/* removed: var _$kurtosis_1395 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1394 = _$kurtosis_1395;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 9.0
*
* @example
* var v = mean( 1.0 );
* // returns 1.0
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_1400( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return lambda;
}


// EXPORTS //

var _$mean_1400 = __mean_1400;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution expected value.
*
* @module @stdlib/stats/base/dists/poisson/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/poisson/mean' );
*
* var v = mean( 11.0 );
* // returns 11.0
*
* v = mean( 4.5 );
* // returns 4.5
*/

// MODULES //

/* removed: var _$mean_1400 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1399 = _$mean_1400;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns the median of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} median
*
* @example
* var v = median( 9.0 );
* // returns 9
*
* @example
* var v = median( 1.0 );
* // returns 1
*
* @example
* var v = median( -0.2 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_1402( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	return _$floor_236( lambda + ( 1.0/3.0 ) - ( 0.02/lambda ) );
}


// EXPORTS //

var _$median_1402 = __median_1402;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution median.
*
* @module @stdlib/stats/base/dists/poisson/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/poisson/median' );
*
* var v = median( 11.0 );
* // returns 11
*
* v = median( 4.5 );
* // returns 4
*/

// MODULES //

/* removed: var _$median_1402 = require( './median.js' ); */;


// EXPORTS //

var _$median_1401 = _$median_1402;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$floor_236 = require( '@stdlib/math/base/special/floor' ); */;


// MAIN //

/**
* Returns the mode of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9
*
* @example
* var v = mode( 1.0 );
* // returns 1
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_1407( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return _$floor_236( lambda );
}


// EXPORTS //

var _$mode_1407 = __mode_1407;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution mode.
*
* @module @stdlib/stats/base/dists/poisson/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/poisson/mode' );
*
* var v = mode( 11.0 );
* // returns 11
*
* v = mode( 4.5 );
* // returns 4
*/

// MODULES //

/* removed: var _$mode_1407 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1406 = _$mode_1407;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the skewness of a Poisson distribution.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {PositiveNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.33
*
* @example
* var v = skewness( 1.0 );
* // returns 1.0
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_1416( lambda ) {
	if ( _$isnan_130( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return 1.0 / _$sqrt_437( lambda );
}


// EXPORTS //

var _$skewness_1416 = __skewness_1416;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution skewness.
*
* @module @stdlib/stats/base/dists/poisson/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/poisson/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.302
*
* v = skewness( 4.5 );
* // returns ~0.471
*/

// MODULES //

/* removed: var _$skewness_1416 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1415 = _$skewness_1416;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns 3.0
*
* @example
* var v = stdev( 1.0 );
* // returns 1.0
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_1418( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return _$sqrt_437( lambda );
}


// EXPORTS //

var _$stdev_1418 = __stdev_1418;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution standard deviation.
*
* @module @stdlib/stats/base/dists/poisson/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/poisson/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~3.317
*
* v = stdev( 4.5 );
* // returns ~2.121
*/

// MODULES //

/* removed: var _$stdev_1418 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1417 = _$stdev_1418;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a Poisson distribution.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns 9.0
*
* @example
* var v = variance( 1.0 );
* // returns 1.0
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_1420( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	return lambda;
}


// EXPORTS //

var _$variance_1420 = __variance_1420;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution variance.
*
* @module @stdlib/stats/base/dists/poisson/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/poisson/variance' );
*
* var v = variance( 11.0 );
* // returns 11.0
*
* v = variance( 4.5 );
* // returns 4.5
*/

// MODULES //

/* removed: var _$variance_1420 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1419 = _$variance_1420;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {number} evaluated logPMF
*
* @example
* var y = logpmf( 4.0, 3.0 );
* // returns ~-1.784
*
* @example
* var y = logpmf( 1.0, 3.0 );
* // returns ~-1.901
*
* @example
* var y = logpmf( -1.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid mean parameter:
* var y = logpmf( 2.0, -0.5 );
* // returns NaN
*/
function __logpmf_1398( x, lambda ) {
	if ( _$isnan_130( x ) || _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return ( x === 0.0 ) ? 0.0 : _$FLOAT64_NINF_107;
	}
	if ( _$isNonNegativeInteger_136( x ) && x !== _$FLOAT64_PINF_110 ) {
		return ( x * _$ln_376( lambda ) ) - lambda - _$factorialln_234( x );
	}
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpmf_1398 = __logpmf_1398;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
var __degenerate_1396 = _$logpmf_777.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} logPMF
*
* @example
* var logpmf = factory( 1.0 );
* var y = logpmf( 3.0 );
* // returns ~-2.792
*
* y = logpmf( 1.0 );
* // returns ~-1.0
*/
function __factory_1396( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( lambda === 0.0 ) {
		return __degenerate_1396( 0.0 );
	}
	return logpmf;

	/**
	* Evaluates the natural logarithm of the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPMF
	*
	* @example
	* var y = logpmf( 2.0 );
	* // returns <number>
	*/
	function logpmf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) && x !== _$FLOAT64_PINF_110 ) {
			return ( x * _$ln_376( lambda ) ) - lambda - _$factorialln_234( x );
		}
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_1396 = __factory_1396;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability mass function (PMF) for a Poisson distribution.
*
* @module @stdlib/stats/base/dists/poisson/logpmf
*
* @example
* var logpmf = require( '@stdlib/stats/base/dists/poisson/logpmf' );
*
* var y = logpmf( 4.0, 3.0 );
* // returns ~-1.784
*
* y = logpmf( 1.0, 3.0 );
* // returns ~-1.901
*
* y = logpmf( -1.0, 2.0 );
* // returns -Infinity
*
* var mylogpmf = logpmf.factory( 1.0 );
* y = mylogpmf( 3.0 );
* // returns ~-2.797
*
* y = mylogpmf( 1.0 );
* // returns ~-1.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpmf_1398 = require( './logpmf.js' ); */;
/* removed: var _$factory_1396 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpmf_1398, 'factory', _$factory_1396 );


// EXPORTS //

var _$logpmf_1397 = _$logpmf_1398;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Poisson distribution with mean parameter `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} lambda - mean parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.5 );
* // returns ~13.163
*
* @example
* var y = mgf( 0.5, 0.5 );
* // returns ~1.383
*
* @example
* var y = mgf( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( -2.0, -1.0 );
* // returns NaN
*/
function __mgf_1405( t, lambda ) {
	if ( _$isnan_130( t ) || _$isnan_130( lambda ) || lambda <= 0.0 ) {
		return NaN;
	}
	return _$exp_225( lambda * ( _$exp_225(t) - 1.0 ) );
}


// EXPORTS //

var _$mgf_1405 = __mgf_1405;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Poisson distribution with mean parameter `lambda`.
*
* @param {PositiveNumber} lambda - mean parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 2.0 );
* var y = mgf( 0.1 );
* // returns ~1.234
*/
function __factory_1403( lambda ) {
	if ( _$isnan_130( lambda ) || lambda <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Poisson distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		return _$exp_225( lambda * ( _$exp_225(t) - 1.0 ) );
	}
}


// EXPORTS //

var _$factory_1403 = __factory_1403;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Poisson distribution.
*
* @module @stdlib/stats/base/dists/poisson/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/poisson/mgf' );
*
* var v = mgf( 0.5, 0.5 );
* // returns ~1.383
*
* var mymgf = mgf.factory( 2.0 );
* y = mymgf( 0.1 );
* // returns ~1.234
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1405 = require( './mgf.js' ); */;
/* removed: var _$factory_1403 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1405, 'factory', _$factory_1403 );


// EXPORTS //

var _$mgf_1404 = _$mgf_1405;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Probability} evaluated PMF
*
* @example
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
*
* @example
* var y = pmf( 1.0, 3.0 );
* // returns ~0.149
*
* @example
* var y = pmf( -1.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pmf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pmf( NaN, 0.5 );
* // returns NaN
*
* @example
* // Invalid mean parameter:
* var y = pmf( 2.0, -0.5 );
* // returns NaN
*/
function __pmf_1410( x, lambda ) {
	var lnl;
	if ( _$isnan_130( x ) || _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return ( x === 0.0 ) ? 1.0 : 0.0;
	}
	if ( _$isNonNegativeInteger_136( x ) && x !== _$FLOAT64_PINF_110 ) {
		lnl = (x * _$ln_376( lambda )) - lambda - _$factorialln_234( x );
		return _$exp_225( lnl );
	}
	return 0.0;
}


// EXPORTS //

var _$pmf_1410 = __pmf_1410;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isNonNegativeInteger_136 = require( '@stdlib/math/base/assert/is-nonnegative-integer' ); */;
/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$factorialln_234 = require( '@stdlib/math/base/special/factorialln' ); */;
var __degenerate_1408 = _$pmf_792.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} PMF
*
* @example
* var pmf = factory( 1.0 );
* var y = pmf( 3.0 );
* // returns ~0.061
*
* y = pmf( 1.0 );
* // returns ~0.368
*/
function __factory_1408( lambda ) {
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( lambda === 0.0 ) {
		return __degenerate_1408( 0.0 );
	}
	return pmf;

	/**
	* Evaluates the probability mass function (PMF) for a Poisson distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated PMF
	*
	* @example
	* var y = pmf( 2.0 );
	* // returns <number>
	*/
	function pmf( x ) {
		var lnl;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( _$isNonNegativeInteger_136( x ) && x !== _$FLOAT64_PINF_110 ) {
			lnl = (x * _$ln_376( lambda )) - lambda - _$factorialln_234( x );
			return _$exp_225( lnl );
		}
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1408 = __factory_1408;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution probability mass function (PMF).
*
* @module @stdlib/stats/base/dists/poisson/pmf
*
* @example
* var pmf = require( '@stdlib/stats/base/dists/poisson/pmf' );
*
* var y = pmf( 4.0, 3.0 );
* // returns ~0.168
*
* y = pmf( 1.0, 3.0 );
* // returns ~0.149
*
* y = pmf( -1.0, 2.0 );
* // returns 0.0
*
* var mypmf = pmf.factory( 1.0 );
* y = mypmf( 3.0 );
* // returns ~0.061
*
* y = mypmf( 1.0 );
* // returns ~0.368
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pmf_1410 = require( './pmf.js' ); */;
/* removed: var _$factory_1408 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pmf_1410, 'factory', _$factory_1408 );


// EXPORTS //

var _$pmf_1409 = _$pmf_1410;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$cdf_1389 = require( '@stdlib/stats/base/dists/poisson/cdf' ); */;


// VARIABLES //

var __methods_1414;


// FUNCTIONS //

/**
* Performs a search to the left.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function __searchLeft_1414( x, p, lambda ) {
	while ( true ) {
		if ( x === 0 || _$cdf_1389( x - 1.0, lambda ) < p ) {
			return x;
		}
		x -= 1;
	}
}

/**
* Performs a search to the right.
*
* @private
* @param {NonNegativeInteger} x - starting guess
* @param {Probability} p - probability
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} `p` quantile of the specified distribution
*/
function __searchRight_1414( x, p, lambda ) {
	while ( true ) {
		x += 1;
		if ( _$cdf_1389( x, lambda ) >= p ) {
			return x;
		}
	}
}


// MAIN //

__methods_1414 = {
	'left': __searchLeft_1414,
	'right': __searchRight_1414
};


// EXPORTS //

var _$methods_1414 = __methods_1414;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$cdf_1389 = require( '@stdlib/stats/base/dists/poisson/cdf' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$methods_1414 = require( './search.js' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Poisson distribution with mean parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {NonNegativeInteger} evaluated quantile function
*
* @example
* var y = quantile( 0.5, 2.0 );
* // returns 2
*
* @example
* var y = quantile( 0.9, 4.0 );
* // returns 7
*
* @example
* var y = quantile( 0.1, 200.0 );
* // returns 182
*
* @example
* var y = quantile( 1.1, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*/
function __quantile_1413( p, lambda ) {
	var sigmaInv;
	var guess;
	var sigma;
	var corr;
	var x2;
	var x;
	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return NaN;
	}
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( lambda === 0.0 ) {
		return 0.0;
	}
	if ( p === 0.0 ) {
		return 0.0;
	}
	if ( p === 1.0 ) {
		return _$FLOAT64_PINF_110;
	}
	// Cornish-Fisher expansion:
	sigma = _$sqrt_437( lambda );
	sigmaInv = 1.0 / sigma;
	if ( p < 0.5 ) {
		x = -_$erfcinv_210( 2.0 * p ) * _$SQRT2_118;
	} else {
		x = _$erfcinv_210( 2.0 * ( 1.0 - p ) ) * _$SQRT2_118;
	}
	x2 = x * x;

	// Skewness correction:
	corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
	guess = _$round_424( lambda + (sigma * corr) );
	return ( _$cdf_1389( guess, lambda ) >= p ) ?
		_$methods_1414.left( guess, p, lambda ) :
		_$methods_1414.right( guess, p, lambda );
}


// EXPORTS //

var _$quantile_1413 = __quantile_1413;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1411 = _$quantile_795.factory;
/* removed: var _$erfcinv_210 = require( '@stdlib/math/base/special/erfcinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$round_424 = require( '@stdlib/math/base/special/round' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$cdf_1389 = require( '@stdlib/stats/base/dists/poisson/cdf' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$methods_1414 = require( './search.js' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Poisson distribution with mean parameter `lambda`.
*
* @param {NonNegativeNumber} lambda - mean parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 5.0 );
* var y = quantile( 0.4 );
* // returns 4
*
* y = quantile( 0.8 );
* // returns 7
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_1411( lambda ) {
	var sigmaInv;
	var sigma;

	if ( _$isnan_130( lambda ) || lambda < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( lambda === 0.0 ) {
		return __degenerate_1411( 0.0 );
	}
	sigma = _$sqrt_437( lambda );
	sigmaInv = 1.0 / sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Poisson distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {NonNegativeInteger} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var guess;
		var corr;
		var x2;
		var x;

		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p === 0.0 ) {
			return 0.0;
		}
		if ( p === 1.0 ) {
			return _$FLOAT64_PINF_110;
		}
		// Cornish-Fisher expansion:
		if ( p < 0.5 ) {
			x = -_$erfcinv_210( 2.0 * p ) * _$SQRT2_118;
		} else {
			x = _$erfcinv_210( 2.0 * ( 1.0 - p ) ) * _$SQRT2_118;
		}
		x2 = x * x;

		// Skewness correction:
		corr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);
		guess = _$round_424( lambda + (sigma * corr) );
		return ( _$cdf_1389( guess, lambda ) >= p ) ?
			_$methods_1414.left( guess, p, lambda ) :
			_$methods_1414.right( guess, p, lambda );
	}
}


// EXPORTS //

var _$factory_1411 = __factory_1411;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution quantile function.
*
* @module @stdlib/stats/base/dists/poisson/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/poisson/quantile' );
*
* var y = quantile( 0.5, 2.0 );
* // returns 2
*
* y = quantile( 0.9, 4.0 );
* // returns 7
*
* y = quantile( 0.1, 200.0 );
* // returns 182
*
* var myquantile = quantile.factory( 5.0 );
* y = myquantile( 0.4 );
* // returns 4
*
* y = myquantile( 0.8 );
* // returns 7
*
* y = myquantile( 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1413 = require( './quantile.js' ); */;
/* removed: var _$factory_1411 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1413, 'factory', _$factory_1411 );


// EXPORTS //

var _$quantile_1412 = _$quantile_1413;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1390 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1393 = require( '@stdlib/stats/base/dists/poisson/entropy' ); */;
/* removed: var _$kurtosis_1394 = require( '@stdlib/stats/base/dists/poisson/kurtosis' ); */;
/* removed: var _$mean_1399 = require( '@stdlib/stats/base/dists/poisson/mean' ); */;
/* removed: var _$median_1401 = require( '@stdlib/stats/base/dists/poisson/median' ); */;
/* removed: var _$mode_1406 = require( '@stdlib/stats/base/dists/poisson/mode' ); */;
/* removed: var _$skewness_1415 = require( '@stdlib/stats/base/dists/poisson/skewness' ); */;
/* removed: var _$stdev_1417 = require( '@stdlib/stats/base/dists/poisson/stdev' ); */;
/* removed: var _$variance_1419 = require( '@stdlib/stats/base/dists/poisson/variance' ); */;
/* removed: var _$cdf_1389 = require( '@stdlib/stats/base/dists/poisson/cdf' ); */;
/* removed: var _$logpmf_1397 = require( '@stdlib/stats/base/dists/poisson/logpmf' ); */;
/* removed: var _$mgf_1404 = require( '@stdlib/stats/base/dists/poisson/mgf' ); */;
/* removed: var _$pmf_1409 = require( '@stdlib/stats/base/dists/poisson/pmf' ); */;
/* removed: var _$quantile_1412 = require( '@stdlib/stats/base/dists/poisson/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function poissonCDF( x ) {
	return _$cdf_1389( x, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPMF
*/
function poissonLogPMF( x ) {
	return _$logpmf_1397( x, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function poissonMGF( t ) {
	return _$mgf_1404( t, this.lambda );
}

/**
* Evaluates the probability mass function (PMF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PMF
*/
function poissonPMF( x ) {
	return _$pmf_1409( x, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function poissonQuantile( p ) {
	return _$quantile_1412( p, this.lambda );
}


// MAIN //

/**
* Poisson distribution constructor.
*
* @constructor
* @param {PositiveNumber} [lambda=1.0] - mean parameter
* @throws {TypeError} `lambda` must be a positive number
* @returns {Poisson} distribution instance
*
* @example
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 0.8 );
* // returns ~0.368
*
* var v = poisson.mode;
* // returns 1.0
*/
function Poisson() {
	var lambda;
	if ( !(this instanceof Poisson) ) {
		if ( arguments.length === 0 ) {
			return new Poisson();
		}
		return new Poisson( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		lambda = arguments[ 0 ];
		if ( !__isPositive_1390( lambda ) ) {
			throw new TypeError( 'invalid argument. Mean parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		lambda = 1.0;
	}
	_$defineProperty_1606( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !__isPositive_1390( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Poisson distribution differential entropy.
*
* @name entropy
* @memberof Poisson.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.entropy;
* // returns ~2.087
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'entropy', function get() {
	return _$entropy_1393( this.lambda );
});

/**
* Poisson distribution excess kurtosis.
*
* @name kurtosis
* @memberof Poisson.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.kurtosis;
* // returns 0.25
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'kurtosis', function get() {
	return _$kurtosis_1394( this.lambda );
});

/**
* Poisson distribution expected value.
*
* @name mean
* @memberof Poisson.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mean;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'mean', function get() {
	return _$mean_1399( this.lambda );
});

/**
* Poisson distribution median.
*
* @name median
* @memberof Poisson.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.median;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'median', function get() {
	return _$median_1401( this.lambda );
});

/**
* Poisson distribution mode.
*
* @name mode
* @memberof Poisson.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'mode', function get() {
	return _$mode_1406( this.lambda );
});

/**
* Poisson distribution skewness.
*
* @name skewness
* @memberof Poisson.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.skewness;
* // returns 0.5
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'skewness', function get() {
	return _$skewness_1415( this.lambda );
});

/**
* Poisson distribution standard deviation.
*
* @name stdev
* @memberof Poisson.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.stdev;
* // returns 2.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'stdev', function get() {
	return _$stdev_1417( this.lambda );
});

/**
* Poisson distribution variance.
*
* @name variance
* @memberof Poisson.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var poisson = new Poisson( 4.0 );
*
* var v = poisson.variance;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Poisson.prototype, 'variance', function get() {
	return _$variance_1419( this.lambda );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.cdf( 1.5 );
* // returns ~0.406
*/
_$setNonEnumerableReadOnly_1603( Poisson.prototype, 'cdf', poissonCDF );

/**
* Evaluates the natural logarithm of the probability mass function (PMF).
*
* @name logpmf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.logpmf( 2.0 );
* // returns ~-1.307
*
* v = poisson.logpmf( 0.8 );
* // returns -Infinity
*/
_$setNonEnumerableReadOnly_1603( Poisson.prototype, 'logpmf', poissonLogPMF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.mgf( 0.5 );
* // returns ~3.66
*/
_$setNonEnumerableReadOnly_1603( Poisson.prototype, 'mgf', poissonMGF );

/**
* Evaluates the probability mass function (PMF).
*
* @name pmf
* @memberof Poisson.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PMF
* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.pmf( 2.0 );
* // returns ~0.271
*
* v = poisson.pmf( 0.8 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( Poisson.prototype, 'pmf', poissonPMF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Poisson.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var poisson = new Poisson( 2.0 );
*
* var v = poisson.quantile( 0.5 );
* // returns 2.0
*/
_$setNonEnumerableReadOnly_1603( Poisson.prototype, 'quantile', poissonQuantile );


// EXPORTS //

var _$Poisson_1390 = Poisson;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Poisson distribution constructor.
*
* @module @stdlib/stats/base/dists/poisson/ctor
*
* @example
* var Poisson = require( '@stdlib/stats/base/dists/poisson/ctor' );
*
* var poisson = new Poisson( 1.0 );
*
* var y = poisson.cdf( 1.5 );
* // returns ~0.736
*
* var mode = poisson.mode;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Poisson_1390 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1391 = _$Poisson_1390;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 3.0 );
* // returns ~0.199
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.118
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_1421( x, sigma ) {
	var s2;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x < 0.0 ) ? 0.0 : 1.0;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	s2 = _$pow_396( sigma, 2.0 );
	return 1.0 - _$exp_225( -_$pow_396( x, 2.0 ) / ( 2.0 * s2 ) );
}


// EXPORTS //

var _$cdf_1421 = __cdf_1421;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1422 = _$cdf_765.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0 );
* var y = cdf( 3.0 );
* // returns ~0.675
*
* y = cdf( 1.0 );
* // returns ~0.118
*/
function __factory_1422( sigma ) {
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1422( 0.0 );
	}
	s2 = _$pow_396( sigma, 2.0 );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return 1.0 - _$exp_225( -_$pow_396( x, 2.0 ) / ( 2.0 * s2 ) );
	}
}


// EXPORTS //

var _$factory_1422 = __factory_1422;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/rayleigh/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/rayleigh/cdf' );
*
* var y = cdf( 2.0, 5.0 );
* // returns ~0.077
*
* var myCDF = cdf.factory( 0.5 );
* y = myCDF( 1.0 );
* // returns ~0.865
*
* y = myCDF( 0.5 );
* // returns ~0.393
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1421 = require( './cdf.js' ); */;
/* removed: var _$factory_1422 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1421, 'factory', _$factory_1422 );


// EXPORTS //

var _$cdf_1423 = _$cdf_1421;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns the differential entropy of a Rayleigh distribution.
*
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~3.139
*
* @example
* var v = entropy( 2.0 );
* // returns ~1.635
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_1426( sigma ) {
	if ( _$isnan_130( sigma ) || sigma <= 0.0 ) {
		return NaN;
	}
	return 1.0 + _$ln_376( sigma / _$SQRT2_118 ) + ( 0.5 * _$GAMMA_88 );
}


// EXPORTS //

var _$entropy_1426 = __entropy_1426;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution differential entropy.
*
* @module @stdlib/stats/base/dists/rayleigh/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/rayleigh/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~3.34
*
* v = entropy( 4.5 );
* // returns ~2.446
*/

// MODULES //

/* removed: var _$entropy_1426 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1427 = _$entropy_1426;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var KURTOSIS = -( ( 6.0*_$PI_109*_$PI_109 ) - ( 24.0*_$PI_109 ) + 16.0 ) / ( (4.0-_$PI_109)*(4.0-_$PI_109) );


// MAIN //

/**
* Returns the excess kurtosis of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns ~0.245
*
* @example
* var v = kurtosis( 5.0 );
* // returns ~0.245
*
* @example
* var v = kurtosis( 3.0 );
* // returns ~0.245
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_1429( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return KURTOSIS;
}


// EXPORTS //

var _$kurtosis_1429 = __kurtosis_1429;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/rayleigh/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/rayleigh/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.245
*
* v = kurtosis( 4.5 );
* // returns ~0.245
*/

// MODULES //

/* removed: var _$kurtosis_1429 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1428 = _$kurtosis_1429;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @module @stdlib/constants/math/float64-sqrt-half-pi
* @type {number}
*
* @example
* var SQRT_HALF_PI = require( '@stdlib/constants/math/float64-sqrt-half-pi' );
* // returns 1.2533141373155003
*/


// MAIN //

/**
* Square root of the mathematical constant `π` divided by `2`.
*
* @constant
* @type {number}
* @default 1.2533141373155003
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;


// EXPORTS //

var _$SQRT_HALF_PI_114 = SQRT_HALF_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$SQRT_HALF_PI_114 = require( '@stdlib/constants/math/float64-sqrt-half-pi' ); */;


// MAIN //

/**
* Returns the expected value of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns ~11.28
*
* @example
* var v = mean( 2.0 );
* // returns ~2.507
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_1437( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * _$SQRT_HALF_PI_114;
}


// EXPORTS //

var _$mean_1437 = __mean_1437;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution expected value.
*
* @module @stdlib/stats/base/dists/rayleigh/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/rayleigh/mean' );
*
* var v = mean( 11.0 );
* // returns ~13.786
*
* v = mean( 4.5 );
* // returns ~5.64
*/

// MODULES //

/* removed: var _$mean_1437 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1436 = _$mean_1437;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// VARIABLES //

var SQRT2LN2 = _$sqrt_437( 2.0 * _$LN2_99 );


// MAIN //

/**
* Returns the median of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns ~10.597
*
* @example
* var v = median( 2.0 );
* // returns ~2.355
*
* @example
* var v = median( -0.2 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_1439( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma * SQRT2LN2;
}


// EXPORTS //

var _$median_1439 = __median_1439;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution median.
*
* @module @stdlib/stats/base/dists/rayleigh/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/rayleigh/median' );
*
* var v = median( 11.0 );
* // returns ~12.952
*
* v = median( 4.5 );
* // returns ~5.298
*/

// MODULES //

/* removed: var _$median_1439 = require( './median.js' ); */;


// EXPORTS //

var _$median_1438 = _$median_1439;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 9.0
*
* @example
* var v = mode( 2.0 );
* // returns 2.0
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_1444( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return sigma;
}


// EXPORTS //

var _$mode_1444 = __mode_1444;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution mode.
*
* @module @stdlib/stats/base/dists/rayleigh/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/rayleigh/mode' );
*
* var v = mode( 11.0 );
* // returns 11.0
*
* v = mode( 4.5 );
* // returns 4.5
*/

// MODULES //

/* removed: var _$mode_1444 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1443 = _$mode_1444;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Square root of the mathematical constant `π`.
*
* @module @stdlib/constants/math/float64-sqrt-pi
* @type {number}
*
* @example
* var SQRT_PI = require( '@stdlib/constants/math/float64-sqrt-pi' );
* // returns 1.7724538509055160
*/


// MAIN //

/**
* Square root of the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.7724538509055160
* @see [OEIS]{@link https://oeis.org/A002161}
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;


// EXPORTS //

var _$SQRT_PI_115 = SQRT_PI;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$SQRT_PI_115 = require( '@stdlib/constants/math/float64-sqrt-pi' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var __SKEWNESS_1452 = 2.0 * _$SQRT_PI_115 * ( _$PI_109-3.0 ) / _$pow_396( 4.0-_$PI_109, 1.5 );


// MAIN //

/**
* Returns the skewness of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns ~0.631
*
* @example
* var v = skewness( 2.0 );
* // returns ~0.631
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_1452( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	return __SKEWNESS_1452;
}


// EXPORTS //

var _$skewness_1452 = __skewness_1452;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution skewness.
*
* @module @stdlib/stats/base/dists/rayleigh/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/rayleigh/skewness' );
*
* var v = skewness( 11.0 );
* // returns ~0.631
*
* v = skewness( 4.5 );
* // returns ~0.631
*/

// MODULES //

/* removed: var _$skewness_1452 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1451 = _$skewness_1452;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// VARIABLES //

var SQRT4MPI = _$sqrt_437( 4.0-_$PI_109 );


// MAIN //

/**
* Returns the standard deviation of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~5.896
*
* @example
* var v = stdev( 2.0 );
* // returns ~1.31
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_1454( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return SQRT4MPI * sigma / _$SQRT2_118;
}


// EXPORTS //

var _$stdev_1454 = __stdev_1454;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution standard deviation.
*
* @module @stdlib/stats/base/dists/rayleigh/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/rayleigh/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~7.207
*
* v = stdev( 4.5 );
* // returns ~2.948
*/

// MODULES //

/* removed: var _$stdev_1454 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1453 = _$stdev_1454;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns the variance of a Rayleigh distribution.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {NonNegativeNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~34.765
*
* @example
* var v = variance( 2.0 );
* // returns ~1.717
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_1456( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0 ) {
		return NaN;
	}
	return ( 4.0-_$PI_109 ) * sigma*sigma / 2.0;
}


// EXPORTS //

var _$variance_1456 = __variance_1456;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution variance.
*
* @module @stdlib/stats/base/dists/rayleigh/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/rayleigh/variance' );
*
* var v = variance( 11.0 );
* // returns ~51.934
*
* v = variance( 4.5 );
* // returns ~8.691
*/

// MODULES //

/* removed: var _$variance_1456 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1455 = _$variance_1456;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 3.0 );
* // returns ~-1.613
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-2.141
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function __logcdf_1432( x, sigma ) {
	var s2;
	var p;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x < 0.0 ) ? _$FLOAT64_NINF_107 : 0.0;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	s2 = _$pow_396( sigma, 2.0 );
	p = -_$pow_396( x, 2.0 ) / ( 2.0 * s2 );
	return ( p < _$LN_HALF_95 ) ? _$log1p_380( -_$exp_225( p ) ) : _$ln_376( -_$expm1_228( p ) );
}


// EXPORTS //

var _$logcdf_1432 = __logcdf_1432;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1430 = _$logcdf_771.factory;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 2.0 );
* var y = logcdf( 3.0 );
* // returns ~-0.393
*
* y = logcdf( 1.0 );
* // returns ~-2.141
*/
function __factory_1430( sigma ) {
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1430( 0.0 );
	}
	s2 = _$pow_396( sigma, 2.0 );
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		p = -_$pow_396( x, 2.0 ) / ( 2.0 * s2 );
		return ( p < _$LN_HALF_95 ) ? _$log1p_380( -_$exp_225( p ) ) : _$ln_376( -_$expm1_228( p ) );
	}
}


// EXPORTS //

var _$factory_1430 = __factory_1430;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/rayleigh/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/rayleigh/logcdf' );
*
* var y = logcdf( 2.0, 5.0 );
* // returns ~-2.564
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 1.0 );
* // returns ~-0.145
*
* y = mylogcdf( 0.5 );
* // returns ~-0.934
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1432 = require( './logcdf.js' ); */;
/* removed: var _$factory_1430 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1432, 'factory', _$factory_1430 );


// EXPORTS //

var _$logcdf_1431 = _$logcdf_1432;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 1.0 );
* // returns ~-1.249
*
* @example
* var y = logpdf( 2.0, 0.8 );
* // returns ~-1.986
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function __logpdf_1435( x, sigma ) {
	var s2i;
	var s2;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : _$FLOAT64_NINF_107;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return _$FLOAT64_NINF_107;
	}
	s2 = _$pow_396( sigma, 2.0 );
	s2i = 1.0 / s2;
	return _$ln_376( s2i * x ) - (_$pow_396( x, 2.0 ) / ( 2.0 * s2 ));
}


// EXPORTS //

var _$logpdf_1435 = __logpdf_1435;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1433 = _$logpdf_774.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.5 );
* var y = logpdf( 1.0 );
* // returns ~-0.614
*
* y = logpdf( 0.1 );
* // returns ~-0.936
*/
function __factory_1433( sigma ) {
	var s2i;
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1433( 0.0 );
	}
	s2 = _$pow_396( sigma, 2.0 );
	s2i = 1.0 / s2;
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return _$FLOAT64_NINF_107;
		}
		return _$ln_376( s2i * x ) - (_$pow_396( x, 2.0 ) / ( 2.0 * s2 ));
	}
}


// EXPORTS //

var _$factory_1433 = __factory_1433;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/rayleigh/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/rayleigh/logpdf' );
*
* var y = logpdf( 2.0, 4.0 );
* // returns ~-2.207
*
* var mylogpdf = logpdf.factory( 4.0 );
*
* y = mylogpdf( 6.0 );
* // returns ~-2.104
*
* y = mylogpdf( 4.0 );
* // returns ~-1.884
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1435 = require( './logpdf.js' ); */;
/* removed: var _$factory_1433 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1435, 'factory', _$factory_1433 );


// EXPORTS //

var _$logpdf_1434 = _$logpdf_1435;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$setLowWord_471 = require( '@stdlib/number/float64/base/set-low-word' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$evalpoly_192 = require( './polyval_pp.js' ); */;
/* removed: var _$evalpoly_194 = require( './polyval_qq.js' ); */;
/* removed: var _$evalpoly_191 = require( './polyval_pa.js' ); */;
/* removed: var _$evalpoly_193 = require( './polyval_qa.js' ); */;
/* removed: var _$evalpoly_195 = require( './polyval_ra.js' ); */;
/* removed: var _$evalpoly_197 = require( './polyval_sa.js' ); */;
/* removed: var _$evalpoly_196 = require( './polyval_rb.js' ); */;
/* removed: var _$evalpoly_198 = require( './polyval_sb.js' ); */;


// VARIABLES //

var __TINY_189 = 1.0e-300;
var VERY_TINY = 2.848094538889218e-306; // 0x00800000, 0x00000000

// 2**-28 = 1/(1<<28) = 1/268435456
var __SMALL_189 = 3.725290298461914e-9;

var __ERX_189 = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

var EFX = 1.28379167095512586316e-1;  // 0x3FC06EBA, 0x8214DB69
var EFX8 = 1.02703333676410069053;    // 0x3FF06EBA, 0x8214DB69

var __PPC_189 = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
var __QQC_189 = 1.0;

var __PAC_189 = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
var __QAC_189 = 1.0;

var __RAC_189 = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
var __SAC_189 = 1.0;

var __RBC_189 = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
var __SBC_189 = 1.0;


// MAIN //

/**
* Evaluates the error function.
*
* ```tex
* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
* ```
*
* Note that
*
* ```tex
* \begin{align*}
* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
* \end{align*}
* ```
*
* ## Method
*
* 1.  For \\(|x| \in [0, 0.84375)\\),
*
*     ```tex
*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
*     \end{cases}
*     ```
*
*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
*
*     ```tex
*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
*     ```
*
*     <!-- <note> -->
*
*     The formula is derived by noting
*
*     ```tex
*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
*     ```
*
*     and that
*
*     ```tex
*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
*     ```
*
*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
*
*     <!-- </note> -->
*
* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
*
*     ```tex
*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
*     where
*
*     ```tex
*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
*     ```
*
*     <!-- <note> -->
*
*     Here, we use the Taylor series expansion at \\(x = 1\\)
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
*     \end{align*}
*     ```
*
*     using a rational approximation to approximate
*
*     ```tex
*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
*     ```
*
*     <!-- </note> -->
*
*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
*
*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
*
* 3.  For \\(x \in [1.25,1/0.35)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
*     \end{align*}
*     ```
*
*     where
*
*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
*
* 4.  For \\(x \in [1/0.35,28)\\),
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
*     \end{cases}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erf}(x) = \begin{cases}
*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
*     \end{cases}
*     ```
*
*     where
*
*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
*
* 5.  For \\(x \in [28, \infty)\\),
*
*     ```tex
*     \begin{align*}
*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
*     \end{align*}
*     ```
*
*     and
*
*     ```tex
*     \operatorname{erfc}(x) = \begin{cases}
*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
*     \end{cases}
*     ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{erf}(0) &= 0 \\
* \operatorname{erf}(-0) &= -0 \\
* \operatorname{erf}(\infty) &= 1 \\
* \operatorname{erf}(-\infty) &= -1 \\
* \operatorname{erfc}(0) &= 1 \\
* \operatorname{erfc}(\infty) &= 0 \\
* \operatorname{erfc}(-\infty) &= 2 \\
* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
* \end{align*}
* ```
*
*
* ## Notes
*
* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
*
*     ```tex
*     -x^2 = -s^2 + (s-x)(s+x)
*     ```
*
*     and
*
*     ```tex
*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
*     ```
*
* -   `#4` and `#5` make use of the asymptotic series
*
*     ```tex
*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
*     ```
*
*     We use a rational approximation to approximate
*
*     ```tex
*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
*     ```
*
* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
*
*     ```tex
*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
*     ```
*
*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
*
*     ```tex
*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
*     ```
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var y = erf( 2.0 );
* // returns ~0.9953
*
* @example
* var y = erf( -1.0 );
* // returns ~-0.8427
*
* @example
* var y = erf( -0.0 );
* // returns -0.0
*
* @example
* var y = erf( NaN );
* // returns NaN
*/
function erf( x ) {
	var sign;
	var ax;
	var z;
	var r;
	var s;
	var y;
	var p;
	var q;

	// Special case: NaN
	if ( _$isnan_130( x ) ) {
		return NaN;
	}
	// Special case: +infinity
	if ( x === _$FLOAT64_PINF_110 ) {
		return 1.0;
	}
	// Special case: -infinity
	if ( x === _$FLOAT64_NINF_107 ) {
		return -1.0;
	}
	// Special case: +-0
	if ( x === 0.0 ) {
		return x;
	}
	if ( x < 0.0 ) {
		sign = true;
		ax = -x;
	} else {
		sign = false;
		ax = x;
	}
	// |x| < 0.84375
	if ( ax < 0.84375 ) {
		if ( ax < __SMALL_189 ) {
			if ( ax < VERY_TINY ) {
				// Avoid underflow:
				return 0.125 * ( (8.0*x) + (EFX8*x) );
			}
			return x + (EFX*x);
		}
		z = x * x;
		r = __PPC_189 + ( z*_$evalpoly_192( z ) );
		s = __QQC_189 + ( z*_$evalpoly_194( z ) );
		y = r / s;
		return x + (x*y);
	}
	// 0.84375 <= |x| < 1.25
	if ( ax < 1.25 ) {
		s = ax - 1.0;
		p = __PAC_189 + ( s*_$evalpoly_191( s ) );
		q = __QAC_189 + ( s*_$evalpoly_193( s ) );
		if ( sign ) {
			return -__ERX_189 - (p/q);
		}
		return __ERX_189 + (p/q);
	}
	// +inf > |x| >= 6
	if ( ax >= 6.0 ) {
		if ( sign ) {
			return __TINY_189 - 1.0; // raise inexact
		}
		return 1.0 - __TINY_189; // raise inexact
	}
	s = 1.0 / (ax*ax);

	// |x| < 1/0.35 ~ 2.857143
	if ( ax < 2.857142857142857 ) {
		r = __RAC_189 + ( s*_$evalpoly_195( s ) );
		s = __SAC_189 + ( s*_$evalpoly_197( s ) );
	}
	// |x| >= 1/0.35 ~ 2.857143
	else {
		r = __RBC_189 + ( s*_$evalpoly_196( s ) );
		s = __SBC_189 + ( s*_$evalpoly_198( s ) );
	}
	z = _$setLowWord_471( ax, 0 ); // pseudo-single (20-bit) precision x
	r = _$exp_225( -(z*z) - 0.5625 ) * _$exp_225( ( (z-ax) * (z+ax) ) + (r/s) );
	if ( sign ) {
		return (r/ax) - 1.0;
	}
	return 1.0 - (r/ax);
}


// EXPORTS //

var _$erf_189 = erf;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the error function.
*
* @module @stdlib/math/base/special/erf
*
* @example
* var erf = require( '@stdlib/math/base/special/erf' );
*
* var y = erf( 2.0 );
* // returns ~0.9953
*
* y = erf( -1.0 );
* // returns ~-0.8427
*
* y = erf( -0.0 );
* // returns -0.0
*
* y = erf( NaN );
* // returns NaN
*/

// MODULES //

/* removed: var _$erf_189 = require( './erf.js' ); */;


// EXPORTS //

var _$erf_190 = _$erf_189;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$erf_190 = require( '@stdlib/math/base/special/erf' ); */;
/* removed: var _$SQRT_HALF_PI_114 = require( '@stdlib/constants/math/float64-sqrt-half-pi' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Rayleigh distribution with scale parameter `sigma` at a value `t`.
*
* @param {number} t - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
*
* @example
* var y = mgf( 1.0, 2.0 );
* // returns ~38.65
*
* @example
* var y = mgf( -1.0, 4.0 );
* // returns ~-0.947
*
* @example
* var y = mgf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.5, -1.0 );
* // returns NaN
*/
function __mgf_1442( t, sigma ) {
	var sigmat;
	var out;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	sigmat = t * sigma;
	out = 1.0 + (sigmat * _$exp_225( sigmat*sigmat / 2.0 ));
	out *= _$SQRT_HALF_PI_114 * ( _$erf_190( sigmat / _$SQRT2_118 ) + 1.0 );
	return out;
}


// EXPORTS //

var _$mgf_1442 = __mgf_1442;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$erf_190 = require( '@stdlib/math/base/special/erf' ); */;
/* removed: var _$SQRT_HALF_PI_114 = require( '@stdlib/constants/math/float64-sqrt-half-pi' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.5 );
* var y = mgf( 1.0 );
* // returns ~2.715
*
* y = mgf( 0.5 );
* // returns ~1.888
*/
function __factory_1440( sigma ) {
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var sigmat;
		var ret;

		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		sigmat = t * sigma;
		ret = 1.0 + (sigmat * _$exp_225( sigmat*sigmat / 2.0 ));
		ret *= _$SQRT_HALF_PI_114 * ( _$erf_190( sigmat / _$SQRT2_118 ) + 1.0 );
		return ret;
	}
}


// EXPORTS //

var _$factory_1440 = __factory_1440;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Rayleigh distribution.
*
* @module @stdlib/stats/base/dists/rayleigh/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/rayleigh/mgf' );
*
* var y = mgf( 1.0, 3.0 );
* // returns ~678.508
*
* y = mgf( 1.0, 2.0 );
* // returns ~38.65
*
* y = mgf( -1.0, 4.0 );
* // returns ~-0.947
*
* var myMGF = mgf.factory( 0.5 );
*
* y = myMGF( 1.0 );
* // returns ~2.715
*
* y = myMGF( 0.5 );
* // returns ~1.888
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1442 = require( './mgf.js' ); */;
/* removed: var _$factory_1440 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1442, 'factory', _$factory_1440 );


// EXPORTS //

var _$mgf_1441 = _$mgf_1442;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 1.0 );
* // returns ~0.287
*
* @example
* var y = pdf( 2.0, 0.8 );
* // returns ~0.137
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function __pdf_1447( x, sigma ) {
	var s2i;
	var s2;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( sigma ) ||
		sigma < 0.0
	) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return ( x === 0.0 ) ? _$FLOAT64_PINF_110 : 0.0;
	}
	if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
		return 0.0;
	}
	s2 = _$pow_396( sigma, 2.0 );
	s2i = 1.0 / s2;
	return s2i * x * _$exp_225( -_$pow_396( x, 2.0 ) / ( 2.0 * s2 ) );
}


// EXPORTS //

var _$pdf_1447 = __pdf_1447;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1445 = _$pdf_789.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.5 );
* var y = pdf( 1.0 );
* // returns ~0.541
*
* y = pdf( 0.1 );
* // returns ~0.392
*/
function __factory_1445( sigma ) {
	var s2i;
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1445( 0.0 );
	}
	s2 = _$pow_396( sigma, 2.0 );
	s2i = 1.0 / s2;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Rayleigh distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 || x === _$FLOAT64_PINF_110 ) {
			return 0.0;
		}
		return s2i * x * _$exp_225( -_$pow_396( x, 2.0 ) / ( 2.0 * s2 ) );
	}
}


// EXPORTS //

var _$factory_1445 = __factory_1445;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/rayleigh/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/rayleigh/pdf' );
*
* var y = pdf( 2.0, 4.0 );
* // returns ~0.11
*
* var myPDF = pdf.factory( 4.0 );
*
* y = myPDF( 6.0 );
* // returns ~0.122
*
* y = myPDF( 4.0 );
* // returns ~0.152
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1447 = require( './pdf.js' ); */;
/* removed: var _$factory_1445 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1447, 'factory', _$factory_1445 );


// EXPORTS //

var _$pdf_1446 = _$pdf_1447;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Rayleigh distribution with scale parameter `sigma` at a probability `p`.
*
* @param {Probability} p - input value
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.794
*
* @example
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
*
* @example
* var y = quantile( 1.1, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* // Negative scale parameter:
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function __quantile_1450( p, sigma ) {
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return NaN;
	}
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	if ( sigma === 0.0 ) {
		return 0.0;
	}
	s2 = sigma * sigma;
	return _$sqrt_437( -2.0 * s2 * _$log1p_380( -p ) );
}


// EXPORTS //

var _$quantile_1450 = __quantile_1450;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
var __degenerate_1448 = _$quantile_795.factory;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Rayleigh distribution with scale parameter `sigma`.
*
* @param {NonNegativeNumber} sigma - scale parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 10.0 );
* var y = quantile( 0.5 );
* // returns ~11.774
*
* y = quantile( 0.8 );
* // returns ~17.941
*/
function __factory_1448( sigma ) {
	var s2;
	if ( _$isnan_130( sigma ) || sigma < 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	if ( sigma === 0.0 ) {
		return __degenerate_1448( 0.0 );
	}
	s2 = sigma * sigma;
	return quantile;

	/**
	* Evaluates the quantile function for a Rayleigh distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return _$sqrt_437( -2.0 * s2 * _$log1p_380( -p ) );
	}
}


// EXPORTS //

var _$factory_1448 = __factory_1448;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution quantile function.
*
* @module @stdlib/stats/base/dists/rayleigh/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/rayleigh/quantile' );
*
* var y = quantile( 0.5, 4.0 );
* // returns ~4.71
*
* var myQuantile = quantile.factory( 0.4 );
*
* y = myQuantile( 0.4 );
* // returns ~0.404
*
* y = myQuantile( 1.0 );
* // returns Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1450 = require( './quantile.js' ); */;
/* removed: var _$factory_1448 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1450, 'factory', _$factory_1448 );


// EXPORTS //

var _$quantile_1449 = _$quantile_1450;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1424 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1427 = require( '@stdlib/stats/base/dists/rayleigh/entropy' ); */;
/* removed: var _$kurtosis_1428 = require( '@stdlib/stats/base/dists/rayleigh/kurtosis' ); */;
/* removed: var _$mean_1436 = require( '@stdlib/stats/base/dists/rayleigh/mean' ); */;
/* removed: var _$median_1438 = require( '@stdlib/stats/base/dists/rayleigh/median' ); */;
/* removed: var _$mode_1443 = require( '@stdlib/stats/base/dists/rayleigh/mode' ); */;
/* removed: var _$skewness_1451 = require( '@stdlib/stats/base/dists/rayleigh/skewness' ); */;
/* removed: var _$stdev_1453 = require( '@stdlib/stats/base/dists/rayleigh/stdev' ); */;
/* removed: var _$variance_1455 = require( '@stdlib/stats/base/dists/rayleigh/variance' ); */;
/* removed: var _$cdf_1423 = require( '@stdlib/stats/base/dists/rayleigh/cdf' ); */;
/* removed: var _$logcdf_1431 = require( '@stdlib/stats/base/dists/rayleigh/logcdf' ); */;
/* removed: var _$logpdf_1434 = require( '@stdlib/stats/base/dists/rayleigh/logpdf' ); */;
/* removed: var _$mgf_1441 = require( '@stdlib/stats/base/dists/rayleigh/mgf' ); */;
/* removed: var _$pdf_1446 = require( '@stdlib/stats/base/dists/rayleigh/pdf' ); */;
/* removed: var _$quantile_1449 = require( '@stdlib/stats/base/dists/rayleigh/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function rayleighCDF( x ) {
	return _$cdf_1423( x, this.sigma );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function rayleighLogCDF( x ) {
	return _$logcdf_1431( x, this.sigma );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function rayleighLogPDF( x ) {
	return _$logpdf_1434( x, this.sigma );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function rayleighMGF( t ) {
	return _$mgf_1441( t, this.sigma );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function rayleighPDF( x ) {
	return _$pdf_1446( x, this.sigma );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function rayleighQuantile( p ) {
	return _$quantile_1449( p, this.sigma );
}


// MAIN //

/**
* Rayleigh distribution constructor.
*
* @constructor
* @param {PositiveNumber} [sigma=1.0] - scale parameter
* @throws {TypeError} `sigma` must be a positive number
* @returns {Rayleigh} distribution instance
*
* @example
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var v = rayleigh.mode;
* // returns 1.0
*/
function Rayleigh() {
	var sigma;
	if ( !(this instanceof Rayleigh) ) {
		if ( arguments.length === 0 ) {
			return new Rayleigh();
		}
		return new Rayleigh( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		sigma = arguments[ 0 ];
		if ( !__isPositive_1424( sigma ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `sigma` must be a positive number. Value: `' + sigma + '`' );
		}
	} else {
		sigma = 1.0;
	}
	_$defineProperty_1606( this, 'sigma', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return sigma;
		},
		'set': function set( value ) {
			if ( !__isPositive_1424( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			sigma = value;
		}
	});
	return this;
}

/**
* Rayleigh distribution differential entropy.
*
* @name entropy
* @memberof Rayleigh.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.entropy;
* // returns ~2.328
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'entropy', function get() {
	return _$entropy_1427( this.sigma );
});

/**
* Rayleigh distribution excess kurtosis.
*
* @name kurtosis
* @memberof Rayleigh.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.kurtosis;
* // returns ~0.245
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'kurtosis', function get() {
	return _$kurtosis_1428( this.sigma );
});

/**
* Rayleigh distribution expected value.
*
* @name mean
* @memberof Rayleigh.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mean;
* // returns ~5.013
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'mean', function get() {
	return _$mean_1436( this.sigma );
});

/**
* Rayleigh distribution median.
*
* @name median
* @memberof Rayleigh.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.median;
* // returns ~4.71
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'median', function get() {
	return _$median_1438( this.sigma );
});

/**
* Rayleigh distribution mode.
*
* @name mode
* @memberof Rayleigh.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.mode;
* // returns 4.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'mode', function get() {
	return _$mode_1443( this.sigma );
});

/**
* Rayleigh distribution skewness.
*
* @name skewness
* @memberof Rayleigh.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.skewness;
* // returns ~0.631
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'skewness', function get() {
	return _$skewness_1451( this.k, this.sigma );
});

/**
* Rayleigh distribution standard deviation.
*
* @name stdev
* @memberof Rayleigh.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.stdev;
* // returns ~2.62
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'stdev', function get() {
	return _$stdev_1453( this.sigma );
});

/**
* Rayleigh distribution variance.
*
* @name variance
* @memberof Rayleigh.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var rayleigh = new Rayleigh( 4.0 );
*
* var v = rayleigh.variance;
* // returns ~6.867
*/
_$setNonEnumerableReadOnlyAccessor_1601( Rayleigh.prototype, 'variance', function get() {
	return _$variance_1455( this.sigma );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.cdf( 0.5 );
* // returns ~0.031
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'cdf', rayleighCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logcdf( 0.5 );
* // returns ~-3.481
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'logcdf', rayleighLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name pdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.logpdf( 0.8 );
* // returns ~-1.689
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'logpdf', rayleighLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.mgf( 0.5 );
* // returns ~5.586
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'mgf', rayleighMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Rayleigh.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.pdf( 4.0 );
* // returns ~0.135
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'pdf', rayleighPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Rayleigh.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var rayleigh = new Rayleigh( 2.0 );
*
* var v = rayleigh.quantile( 0.5 );
* // returns ~2.355
*/
_$setNonEnumerableReadOnly_1603( Rayleigh.prototype, 'quantile', rayleighQuantile );


// EXPORTS //

var _$Rayleigh_1424 = Rayleigh;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Rayleigh distribution constructor.
*
* @module @stdlib/stats/base/dists/rayleigh/ctor
*
* @example
* var Rayleigh = require( '@stdlib/stats/base/dists/rayleigh/ctor' );
*
* var rayleigh = new Rayleigh( 1.0 );
*
* var y = rayleigh.cdf( 0.8 );
* // returns ~0.274
*
* var mode = rayleigh.mode;
* // returns 1.0
*/

// MODULES //

/* removed: var _$Rayleigh_1424 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1425 = _$Rayleigh_1424;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* @example
* var y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* @example
* var y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* @example
* var y = cdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, -1.0 );
* // returns NaN
*/
function __cdf_1457( x, v ) {
	var x2;
	var p;
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return 0.5;
	}
	x2 = _$pow_396( x, 2.0 );
	if ( v > 2.0*x2 ) {
		z = x2 / ( v + x2 );
		p = _$betainc_164( z, 0.5, v/2.0, true, true ) / 2.0;
	} else {
		z = v / ( v + x2 );
		p = _$betainc_164( z, v/2.0, 0.5, true, false ) / 2.0;
	}
	return ( x > 0.0 ) ? 1.0 - p : p;
}


// EXPORTS //

var _$cdf_1457 = __cdf_1457;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.5 );
* var y = cdf( 3.0 );
* // returns ~0.816
*
* y = cdf( 1.0 );
* // returns ~0.699
*/
function __factory_1458( v ) {
	if ( _$isnan_130( v ) || v <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		var x2;
		var p;
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return 0.5;
		}
		x2 = _$pow_396( x, 2.0 );
		if ( v > 2.0*x2 ) {
			z = x2 / ( v + x2 );
			p = _$betainc_164( z, 0.5, v/2.0, true, true ) / 2.0;
		} else {
			z = v / ( v + x2 );
			p = _$betainc_164( z, v/2.0, 0.5, true, false ) / 2.0;
		}
		return ( x > 0.0 ) ? 1.0 - p : p;
	}
}


// EXPORTS //

var _$factory_1458 = __factory_1458;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/t/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/t/cdf' );
*
* var y = cdf( 2.0, 0.1 );
* // returns ~0.611
*
* y = cdf( 1.0, 2.0 );
* // returns ~0.789
*
* y = cdf( -1.0, 4.0 );
* // returns ~0.187
*
* var mycdf = cdf.factory( 0.5 );
* y = mycdf( 3.0 );
* // returns ~0.816
*
* y = mycdf( 1.0 );
* // returns ~0.699
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1457 = require( './cdf.js' ); */;
/* removed: var _$factory_1458 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1457, 'factory', _$factory_1458 );


// EXPORTS //

var _$cdf_1459 = _$cdf_1457;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$digamma_185 = require( '@stdlib/math/base/special/digamma' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} entropy
*
* @example
* var v = entropy( 9.0 );
* // returns ~1.533
*
* @example
* var v = entropy( 2.0 );
* // returns ~1.96
*
* @example
* var v = entropy( -0.2 );
* // returns NaN
*
* @example
* var v = entropy( NaN );
* // returns NaN
*/
function __entropy_1462( v ) {
	var out;
	var vh;
	if ( _$isnan_130( v ) || v <= 0.0 ) {
		return NaN;
	}
	vh = v / 2.0;
	out = ( v + 1.0 ) / 2.0;
	out *= _$digamma_185( ( 1.0+v ) / 2.0 ) - _$digamma_185( vh );
	out += _$ln_376( _$sqrt_437( v ) * _$beta_161( vh, 0.5 ) );
	return out;
}


// EXPORTS //

var _$entropy_1462 = __entropy_1462;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution differential entropy.
*
* @module @stdlib/stats/base/dists/t/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/t/entropy' );
*
* var v = entropy( 11.0 );
* // returns ~1.512
*
* v = entropy( 4.5 );
* // returns ~1.652
*/

// MODULES //

/* removed: var _$entropy_1462 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1463 = _$entropy_1462;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} excess kurtosis
*
* @example
* var v = kurtosis( 9.0 );
* // returns 1.2
*
* @example
* var v = kurtosis( 5.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( 3.0 );
* // returns Infinity
*
* @example
* var v = kurtosis( 0.5 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.2 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN );
* // returns NaN
*/
function __kurtosis_1465( v ) {
	if ( _$isnan_130( v ) || v <= 2.0 ) {
		return NaN;
	}
	if ( v <= 4.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return 6.0 / ( v - 4.0 );
}


// EXPORTS //

var _$kurtosis_1465 = __kurtosis_1465;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/t/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/t/kurtosis' );
*
* var v = kurtosis( 11.0 );
* // returns ~0.857
*
* v = kurtosis( 4.5 );
* // returns 12.0
*/

// MODULES //

/* removed: var _$kurtosis_1465 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1464 = _$kurtosis_1465;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} expected value
*
* @example
* var v = mean( 9.0 );
* // returns 0.0
*
* @example
* var v = mean( 2.0 );
* // returns 0.0
*
* @example
* var v = mean( 0.5 );
* // returns NaN
*
* @example
* var v = mean( -0.2 );
* // returns NaN
*
* @example
* var v = mean( NaN );
* // returns NaN
*/
function __mean_1473( v ) {
	if ( _$isnan_130( v ) || v <= 1.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$mean_1473 = __mean_1473;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution expected value.
*
* @module @stdlib/stats/base/dists/t/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/t/mean' );
*
* var v = mean( 11.0 );
* // returns 0.0
*
* v = mean( 4.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$mean_1473 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1472 = _$mean_1473;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the median of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} median
*
* @example
* var v = median( 9.0 );
* // returns 0.0
*
* @example
* var v = median( 2.0 );
* // returns 0.0
*
* @example
* var v = median( -0.2 );
* // returns NaN
*
* @example
* var v = median( NaN );
* // returns NaN
*/
function __median_1475( v ) {
	if ( _$isnan_130( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$median_1475 = __median_1475;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution median.
*
* @module @stdlib/stats/base/dists/t/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/t/median' );
*
* var v = median( 11.0 );
* // returns 0.0
*
* v = median( 4.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$median_1475 = require( './median.js' ); */;


// EXPORTS //

var _$median_1474 = _$median_1475;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 9.0 );
* // returns 0.0
*
* @example
* var v = mode( 2.0 );
* // returns 0.0
*
* @example
* var v = mode( -0.2 );
* // returns NaN
*
* @example
* var v = mode( NaN );
* // returns NaN
*/
function __mode_1477( v ) {
	if ( _$isnan_130( v ) || v < 0.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$mode_1477 = __mode_1477;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution mode.
*
* @module @stdlib/stats/base/dists/t/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/t/mode' );
*
* var v = mode( 11.0 );
* // returns 0.0
*
* v = mode( 4.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$mode_1477 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1476 = _$mode_1477;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness of a Student's t distribution.
*
* @param {NonNegativeNumber} v - degrees of freedom
* @returns {NonNegativeNumber} skewness
*
* @example
* var v = skewness( 9.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0 );
* // returns 0.0
*
* @example
* var v = skewness( 0.5 );
* // returns NaN
*
* @example
* var v = skewness( -0.2 );
* // returns NaN
*
* @example
* var v = skewness( NaN );
* // returns NaN
*/
function __skewness_1485( v ) {
	if ( _$isnan_130( v ) || v <= 3.0 ) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_1485 = __skewness_1485;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution skewness.
*
* @module @stdlib/stats/base/dists/t/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/t/skewness' );
*
* var v = skewness( 11.0 );
* // returns 0.0
*
* v = skewness( 4.5 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1485 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1484 = _$skewness_1485;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the standard deviation of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 9.0 );
* // returns ~1.134
*
* @example
* var v = stdev( 2.0 );
* // returns Infinity
*
* @example
* var v = stdev( 0.5 );
* // returns NaN
*
* @example
* var v = stdev( -0.2 );
* // returns NaN
*
* @example
* var v = stdev( NaN );
* // returns NaN
*/
function __stdev_1487( v ) {
	if ( _$isnan_130( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return _$sqrt_437( v / ( v - 2.0 ) );
}


// EXPORTS //

var _$stdev_1487 = __stdev_1487;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution standard deviation.
*
* @module @stdlib/stats/base/dists/t/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/t/stdev' );
*
* var v = stdev( 11.0 );
* // returns ~1.105
*
* v = stdev( 4.5 );
* // returns ~1.342
*/

// MODULES //

/* removed: var _$stdev_1487 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1486 = _$stdev_1487;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;


// MAIN //

/**
* Returns the variance of a Student's t distribution.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 9.0 );
* // returns ~1.286
*
* @example
* var v = variance( 2.0 );
* // returns Infinity
*
* @example
* var v = variance( 0.5 );
* // returns NaN
*
* @example
* var v = variance( -0.2 );
* // returns NaN
*
* @example
* var v = variance( NaN );
* // returns NaN
*/
function __variance_1489( v ) {
	if ( _$isnan_130( v ) || v <= 1.0 ) {
		return NaN;
	}
	if ( v <= 2.0 ) {
		return _$FLOAT64_PINF_110;
	}
	return v / ( v - 2.0 );
}


// EXPORTS //

var _$variance_1489 = __variance_1489;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution variance.
*
* @module @stdlib/stats/base/dists/t/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/t/variance' );
*
* var v = variance( 11.0 );
* // returns ~1.222
*
* v = variance( 4.5 );
* // returns ~1.8
*/

// MODULES //

/* removed: var _$variance_1489 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1488 = _$variance_1489;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 2.0, 0.1 );
* // returns ~-0.493
*
* @example
* var y = logcdf( 1.0, 2.0 );
* // returns ~-0.237
*
* @example
* var y = logcdf( -1.0, 4.0 );
* // returns ~-1.677
*
* @example
* var y = logcdf( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, -1.0 );
* // returns NaN
*/
function __logcdf_1468( x, v ) {
	var x2;
	var p;
	var z;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return _$LN_HALF_95;
	}
	x2 = _$pow_396( x, 2.0 );
	if ( v > 2.0*x2 ) {
		z = x2 / ( v + x2 );
		p = _$betainc_164( z, 0.5, v/2.0, true, true ) / 2.0;
	} else {
		z = v / ( v + x2 );
		p = _$betainc_164( z, v/2.0, 0.5, true, false ) / 2.0;
	}
	return ( x > 0.0 ) ? _$log1p_380( -p ) : _$ln_376( p );
}


// EXPORTS //

var _$logcdf_1468 = __logcdf_1468;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$betainc_164 = require( '@stdlib/math/base/special/betainc' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.5 );
* var y = logcdf( 3.0 );
* // returns ~-0.203
*
* y = logcdf( 1.0 );
* // returns ~-0.358
*/
function __factory_1466( v ) {
	if ( _$isnan_130( v ) || v <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var x2;
		var p;
		var z;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x === 0.0 ) {
			return _$LN_HALF_95;
		}
		x2 = _$pow_396( x, 2.0 );
		if ( v > 2.0*x2 ) {
			z = x2 / ( v + x2 );
			p = _$betainc_164( z, 0.5, v/2.0, true, true ) / 2.0;
		} else {
			z = v / ( v + x2 );
			p = _$betainc_164( z, v/2.0, 0.5, true, false ) / 2.0;
		}
		return ( x > 0.0 ) ? _$log1p_380( -p ) : _$ln_376( p );
	}
}


// EXPORTS //

var _$factory_1466 = __factory_1466;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the cumulative distribution function (CDF) for a Student's t distribution.
*
* @module @stdlib/stats/base/dists/t/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/t/logcdf' );
*
* var y = logcdf( 2.0, 0.1 );
* // returns ~-0.493
*
* y = logcdf( 1.0, 2.0 );
* // returns ~-0.237
*
* y = logcdf( -1.0, 4.0 );
* // returns ~-1.677
*
* var mylogcdf = logcdf.factory( 0.5 );
* y = mylogcdf( 3.0 );
* // returns ~-0.203
*
* y = mylogcdf( 1.0 );
* // returns ~-0.358
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1468 = require( './logcdf.js' ); */;
/* removed: var _$factory_1466 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1468, 'factory', _$factory_1466 );


// EXPORTS //

var _$logcdf_1467 = _$logcdf_1468;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.3, 4.0 );
* // returns ~-1.036
*
* @example
* var y = logpdf( 2.0, 0.7 );
* // returns ~-2.841
*
* @example
* var y = logpdf( -1.0, 0.5 );
* // returns ~-2.134
*
* @example
* var y = logpdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( NaN, 2.0 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, -1.0 );
* // returns NaN
*/
function __logpdf_1471( x, v ) {
	var betaTerm;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	betaTerm = _$ln_376( _$sqrt_437( v ) ) + _$betaln_170( v/2.0, 0.5 );
	return ( ( (1.0+v) / 2.0 ) * _$ln_376( v / ( v + _$pow_396( x, 2.0 ) ) ) ) - betaTerm;
}


// EXPORTS //

var _$logpdf_1471 = __logpdf_1471;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$betaln_170 = require( '@stdlib/math/base/special/betaln' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 1.0 );
* var y = logpdf( 3.0 );
* // returns ~-3.447
*
* y = logpdf( 1.0 );
* // returns ~-1.838
*/
function __factory_1469( v ) {
	var exponent;
	var betaTerm;

	if ( _$isnan_130( v ) || v <= 0 ) {
		return _$constantFunction_1600( NaN );
	}
	betaTerm = _$ln_376( _$sqrt_437( v ) ) + _$betaln_170( v/2.0, 0.5 );
	exponent = ( 1.0 + v ) / 2.0;
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return ( exponent * _$ln_376( v / ( v + _$pow_396( x, 2.0 ) ) ) ) - betaTerm;
	}
}


// EXPORTS //

var _$factory_1469 = __factory_1469;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Natural logarithm of the probability density function (PDF) for a Student's t distribution.
*
* @module @stdlib/stats/base/dists/t/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/t/logpdf' );
*
* var y = logpdf( 3.0, 1.0 );
* // returns ~-3.442
*
* var mylogPDF = logpdf.factory( 3.0 );
* y = mylogPDF( 1.0 );
* // returns ~-1.575
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1471 = require( './logpdf.js' ); */;
/* removed: var _$factory_1469 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1471, 'factory', _$factory_1469 );


// EXPORTS //

var _$logpdf_1470 = _$logpdf_1471;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.3, 4.0 );
* // returns ~0.355
*
* @example
* var y = pdf( 2.0, 0.7 );
* // returns ~0.058
*
* @example
* var y = pdf( -1.0, 0.5 );
* // returns ~0.118
*
* @example
* var y = pdf( 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( NaN, 2.0 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, -1.0 );
* // returns NaN
*/
function __pdf_1480( x, v ) {
	var betaTerm;
	if (
		_$isnan_130( x ) ||
		_$isnan_130( v ) ||
		v <= 0.0
	) {
		return NaN;
	}
	betaTerm = _$sqrt_437( v ) * _$beta_161( v/2.0, 0.5 );
	return _$pow_396( v / ( v + _$pow_396( x, 2.0 ) ), (1.0+v) / 2.0 ) / betaTerm;
}


// EXPORTS //

var _$pdf_1480 = __pdf_1480;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$beta_161 = require( '@stdlib/math/base/special/beta' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Student's t distribution with `v` degrees of freedom.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} PDF
*
* @example
* var pdf = factory( 1.0 );
* var y = pdf( 3.0 );
* // returns ~0.032
*
* y = pdf( 1.0 );
* // returns ~0.159
*/
function __factory_1478( v ) {
	var exponent;
	var betaTerm;

	if ( _$isnan_130( v ) || v <= 0 ) {
		return _$constantFunction_1600( NaN );
	}
	betaTerm = _$sqrt_437( v ) * _$beta_161( v/2.0, 0.5 );
	exponent = ( 1.0 + v ) / 2.0;
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Student's t distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		return _$pow_396( v / ( v + _$pow_396( x, 2.0 ) ), exponent ) / betaTerm;
	}
}


// EXPORTS //

var _$factory_1478 = __factory_1478;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/t/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/t/pdf' );
*
* var y = pdf( 3.0, 1.0 );
* // returns ~0.032
*
* var myPDF = pdf.factory( 3.0 );
* y = myPDF( 1.0 );
* // returns ~0.207
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1480 = require( './pdf.js' ); */;
/* removed: var _$factory_1478 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1480, 'factory', _$factory_1478 );


// EXPORTS //

var _$pdf_1479 = _$pdf_1480;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$kernelBetaincinv_331 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} v - degrees of freedom
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* @example
* var y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* @example
* var y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* @example
* var y = quantile( -0.2, 0.1 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, -1.0 );
* // returns NaN
*/
function __quantile_1483( p, v ) {
	var prob;
	var xs;
	if (
		_$isnan_130( v ) ||
		_$isnan_130( p ) ||
		v <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	prob = ( p > 0.5 ) ? 1.0 - p : p;
	xs = _$kernelBetaincinv_331( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
	return _$signum_426( p - 0.5 ) * _$sqrt_437( v * xs[ 1 ] / xs[ 0 ] );
}


// EXPORTS //

var _$quantile_1483 = __quantile_1483;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$kernelBetaincinv_331 = require( '@stdlib/math/base/special/kernel-betaincinv' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$signum_426 = require( '@stdlib/math/base/special/signum' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.
*
* @param {PositiveNumber} v - degrees of freedom
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 0.5 );
* var y = quantile( 0.5 );
* // returns 0.0
*
* y = quantile( 0.8 );
* // returns ~2.513
*
* y = quantile( 1.0 );
* // returns Infinity
*/
function __factory_1481( v ) {
	if ( _$isnan_130( v ) || v <= 0.0 ) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Student's t distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		var prob;
		var xs;

		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		prob = ( p > 0.5 ) ? 1.0 - p : p;
		xs = _$kernelBetaincinv_331( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );
		return _$signum_426( p - 0.5 ) * _$sqrt_437( v * xs[ 1 ] / xs[ 0 ] );
	}
}


// EXPORTS //

var _$factory_1481 = __factory_1481;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the quantile function for a Student's t distribution.
*
* @module @stdlib/stats/base/dists/t/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/t/quantile' );
*
* var y = quantile( 0.8, 1.0 );
* // returns ~1.376
*
* y = quantile( 0.1, 1.0 );
* // returns ~-3.078
*
* y = quantile( 0.5, 0.1 );
* // returns 0.0
*
* var myquantile = quantile.factory( 4.0 );
*
* y = myquantile( 0.2 );
* // returns ~-0.941
*
* y = myquantile( 0.9 );
* // returns ~1.533
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1483 = require( './quantile.js' ); */;
/* removed: var _$factory_1481 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1483, 'factory', _$factory_1481 );


// EXPORTS //

var _$quantile_1482 = _$quantile_1483;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1460 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1463 = require( '@stdlib/stats/base/dists/t/entropy' ); */;
/* removed: var _$kurtosis_1464 = require( '@stdlib/stats/base/dists/t/kurtosis' ); */;
/* removed: var _$mean_1472 = require( '@stdlib/stats/base/dists/t/mean' ); */;
/* removed: var _$median_1474 = require( '@stdlib/stats/base/dists/t/median' ); */;
/* removed: var _$mode_1476 = require( '@stdlib/stats/base/dists/t/mode' ); */;
/* removed: var _$skewness_1484 = require( '@stdlib/stats/base/dists/t/skewness' ); */;
/* removed: var _$stdev_1486 = require( '@stdlib/stats/base/dists/t/stdev' ); */;
/* removed: var _$variance_1488 = require( '@stdlib/stats/base/dists/t/variance' ); */;
/* removed: var _$cdf_1459 = require( '@stdlib/stats/base/dists/t/cdf' ); */;
/* removed: var _$logcdf_1467 = require( '@stdlib/stats/base/dists/t/logcdf' ); */;
/* removed: var _$logpdf_1470 = require( '@stdlib/stats/base/dists/t/logpdf' ); */;
/* removed: var _$pdf_1479 = require( '@stdlib/stats/base/dists/t/pdf' ); */;
/* removed: var _$quantile_1482 = require( '@stdlib/stats/base/dists/t/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function tCDF( x ) {
	return _$cdf_1459( x, this.v );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function tLogCDF( x ) {
	return _$logcdf_1467( x, this.v );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function tLogPDF( x ) {
	return _$logpdf_1470( x, this.v );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function tPDF( x ) {
	return _$pdf_1479( x, this.v );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function tQuantile( p ) {
	return _$quantile_1482( p, this.v );
}


// MAIN //

/**
* Student's t distribution constructor.
*
* @constructor
* @param {PositiveNumber} [v=1.0] - degrees of freedom
* @throws {TypeError} `v` must be a positive number
* @returns {T} distribution instance
*
* @example
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var v = t.mode;
* // returns 0.0
*/
function T() {
	var v;
	if ( !(this instanceof T) ) {
		if ( arguments.length === 0 ) {
			return new T();
		}
		return new T( arguments[ 0 ] );
	}
	if ( arguments.length ) {
		v = arguments[ 0 ];
		if ( !__isPositive_1460( v ) ) {
			throw new TypeError( 'invalid argument. Rate parameter `v` must be a positive number. Value: `' + v + '`' );
		}
	} else {
		v = 1.0;
	}
	_$defineProperty_1606( this, 'v', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return v;
		},
		'set': function set( value ) {
			if ( !__isPositive_1460( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			v = value;
		}
	});
	return this;
}

/**
* Student's t distribution differential entropy.
*
* @name entropy
* @memberof T.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.entropy;
* // returns ~1.682
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'entropy', function get() {
	return _$entropy_1463( this.v );
});

/**
* Student's t distribution excess kurtosis.
*
* @name kurtosis
* @memberof T.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.kurtosis;
* // returns Infinity
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'kurtosis', function get() {
	return _$kurtosis_1464( this.v );
});

/**
* Student's t distribution expected value.
*
* @name mean
* @memberof T.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mean;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'mean', function get() {
	return _$mean_1472( this.v );
});

/**
* Student's t distribution median.
*
* @name median
* @memberof T.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.median;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'median', function get() {
	return _$median_1474( this.v );
});

/**
* Student's t distribution mode.
*
* @name mode
* @memberof T.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.mode;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'mode', function get() {
	return _$mode_1476( this.v );
});

/**
* Student's t distribution skewness.
*
* @name skewness
* @memberof T.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'skewness', function get() {
	return _$skewness_1484( this.v );
});

/**
* Student's t distribution standard deviation.
*
* @name stdev
* @memberof T.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.stdev;
* // returns ~1.414
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'stdev', function get() {
	return _$stdev_1486( this.v );
});

/**
* Student's t distribution variance.
*
* @name variance
* @memberof T.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var t = new T( 4.0 );
*
* var v = t.variance;
* // returns 2.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( T.prototype, 'variance', function get() {
	return _$variance_1488( this.v );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.cdf( 0.5 );
* // returns ~0.667
*/
_$setNonEnumerableReadOnly_1603( T.prototype, 'cdf', tCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.logcdf( 0.5 );
* // returns ~-0.405
*/
_$setNonEnumerableReadOnly_1603( T.prototype, 'logcdf', tLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.logpdf( 0.8 );
* // returns ~-1.456
*/
_$setNonEnumerableReadOnly_1603( T.prototype, 'logpdf', tLogPDF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof T.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.pdf( 0.8 );
* // returns ~0.233
*/
_$setNonEnumerableReadOnly_1603( T.prototype, 'pdf', tPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof T.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var t = new T( 2.0 );
*
* var v = t.quantile( 0.5 );
* // returns 0.0
*/
_$setNonEnumerableReadOnly_1603( T.prototype, 'quantile', tQuantile );


// EXPORTS //

var _$T_1460 = T;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Student's t distribution constructor.
*
* @module @stdlib/stats/base/dists/t/ctor
*
* @example
* var T = require( '@stdlib/stats/base/dists/t/ctor' );
*
* var t = new T( 1.0 );
*
* var y = t.cdf( 0.8 );
* // returns ~0.715
*
* var mode = t.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$T_1460 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1461 = _$T_1460;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
*
* @example
* var y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
*
* @example
* var y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* @example
* var y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __cdf_1490( x, a, b, c ) {
	var denom1;
	var denom2;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x <= a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );

	// Case: x > a
	if ( x <= c ) {
		return _$pow_396( x - a, 2.0 ) / denom1;
	}
	// Case: x > c
	if ( x < b ) {
		return 1.0 - ( _$pow_396( b - x, 2.0 ) / denom2 );
	}
	// Case: x >= b
	return 1.0;
}


// EXPORTS //

var _$cdf_1490 = __cdf_1490;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0, 2.0 );
* var y = cdf( 0.5 );
* // returns 0.0125
*
* y = cdf( 8.0 );
* // returns 0.95
*/
function __factory_1491( a, b, c ) {
	var denom1;
	var denom2;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c )
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( !( a <= c && c <= b ) ) {
		return _$constantFunction_1600( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= a ) {
			return 0.0;
		}
		// Case: x > a
		if ( x <= c ) {
			return _$pow_396( x - a, 2.0 ) / denom1;
		}
		// Case: x > c
		if ( x < b ) {
			return 1 - ( _$pow_396( b - x, 2.0 ) / denom2 );
		}
		// Case: x >= b
		return 1.0;
	}
}


// EXPORTS //

var _$factory_1491 = __factory_1491;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/triangular/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/triangular/cdf' );
*
* var y = cdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.875
*
* y = cdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.75
*
* y = cdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.278
*
* y = cdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );
* y = mycdf( 0.5 );
* // returns 0.0125
*
* y = mycdf( 8.0 );
* // returns 0.95
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1490 = require( './cdf.js' ); */;
/* removed: var _$factory_1491 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1490, 'factory', _$factory_1491 );


// EXPORTS //

var _$cdf_1492 = _$cdf_1490;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} entropy
*
* @example
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
*
* @example
* var v = entropy( 4.0, 12.0, 9.0 );
* // returns ~1.886
*
* @example
* var v = entropy( -4.0, 4.0, -1.0 );
* // returns ~1.886
*
* @example
* var v = entropy( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = entropy( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = entropy( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = entropy( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = entropy( 0.0, 4.0, NaN );
* // returns NaN
*/
function __entropy_1495( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return 0.5 + _$ln_376( 0.5 * ( b-a ) );
}


// EXPORTS //

var _$entropy_1495 = __entropy_1495;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution differential entropy.
*
* @module @stdlib/stats/base/dists/triangular/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/triangular/entropy' );
*
* var v = entropy( 0.0, 1.0, 0.5 );
* // returns ~-0.193
*
* v = entropy( 4.0, 12.0, 5.0 );
* // returns ~1.886
*
* v = entropy( 2.0, 8.0, 7.0 );
* // returns ~1.599
*/

// MODULES //

/* removed: var _$entropy_1495 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1496 = _$entropy_1495;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
*
* @example
* var v = kurtosis( 4.0, 12.0, 9.0 );
* // returns -0.6
*
* @example
* var v = kurtosis( -4.0, 4.0, -1.0 );
* // returns -0.6
*
* @example
* var v = kurtosis( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = kurtosis( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 0.0, 4.0, NaN );
* // returns NaN
*/
function __kurtosis_1498( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return -0.6;
}


// EXPORTS //

var _$kurtosis_1498 = __kurtosis_1498;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/triangular/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/triangular/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0, 0.5 );
* // returns -0.6
*
* v = kurtosis( 4.0, 12.0, 5.0 );
* // returns -0.6
*
* v = kurtosis( 2.0, 8.0, 7.0 );
* // returns -0.6
*/

// MODULES //

/* removed: var _$kurtosis_1498 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1497 = _$kurtosis_1498;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the expected value of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
*
* @example
* var v = mean( 4.0, 12.0, 9.0 );
* // returns ~8.333
*
* @example
* var v = mean( -4.0, 4.0, -1.0 );
* // returns ~-0.333
*
* @example
* var v = mean( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = mean( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = mean( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = mean( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = mean( 0.0, 4.0, NaN );
* // returns NaN
*/
function __mean_1506( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( a + b + c ) / 3.0;
}


// EXPORTS //

var _$mean_1506 = __mean_1506;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution expected value.
*
* @module @stdlib/stats/base/dists/triangular/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/triangular/mean' );
*
* var v = mean( 0.0, 1.0, 0.5 );
* // returns ~0.5
*
* v = mean( 4.0, 12.0, 5.0 );
* // returns 7.0
*
* v = mean( 2.0, 8.0, 7.0 );
* // returns ~5.667
*/

// MODULES //

/* removed: var _$mean_1506 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1505 = _$mean_1506;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the median of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0, 9.0 );
* // returns ~8.472
*
* @example
* var v = median( -4.0, 4.0, -1.0 );
* // returns ~-0.472
*
* @example
* var v = median( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = median( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = median( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = median( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = median( 0.0, 4.0, NaN );
* // returns NaN
*/
function __median_1508( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	if ( c >= ( a+b ) / 2.0 ) {
		return a + _$sqrt_437( 0.5 * ( b-a ) * ( c-a ) );
	}
	return b - _$sqrt_437( 0.5 * ( b-a ) * ( b-c ) );
}


// EXPORTS //

var _$median_1508 = __median_1508;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution median.
*
* @module @stdlib/stats/base/dists/triangular/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/triangular/median' );
*
* var v = median( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = median( 4.0, 12.0, 5.0 );
* // returns ~6.708
*
* v = median( 2.0, 8.0, 7.0 );
* // returns ~5.873
*/

// MODULES //

/* removed: var _$median_1508 = require( './median.js' ); */;


// EXPORTS //

var _$median_1507 = _$median_1508;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the mode of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} mode
*
* @example
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* @example
* var v = mode( 4.0, 12.0, 9.0 );
* // returns 9.0
*
* @example
* var v = mode( -4.0, 4.0, -1.0 );
* // returns -1.0
*
* @example
* var v = mode( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = mode( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = mode( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = mode( 0.0, 4.0, NaN );
* // returns NaN
*/
function __mode_1513( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return c;
}


// EXPORTS //

var _$mode_1513 = __mode_1513;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution mode.
*
* @module @stdlib/stats/base/dists/triangular/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/triangular/mode' );
*
* var v = mode( 0.0, 1.0, 0.5 );
* // returns 0.5
*
* v = mode( 4.0, 12.0, 5.0 );
* // returns 5.0
*
* v = mode( 2.0, 8.0, 7.0 );
* // returns 7.0
*/

// MODULES //

/* removed: var _$mode_1513 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1512 = _$mode_1513;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$SQRT2_118 = require( '@stdlib/constants/math/float64-sqrt-two' ); */;


// MAIN //

/**
* Returns the skewness of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0, 9.0 );
* // returns ~-0.236
*
* @example
* var v = skewness( -4.0, 4.0, -1.0 );
* // returns ~0.236
*
* @example
* var v = skewness( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = skewness( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = skewness( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = skewness( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = skewness( 0.0, 4.0, NaN );
* // returns NaN
*/
function __skewness_1521( a, b, c ) {
	var out;
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	out = _$SQRT2_118 * ( a + b - (2*c) ) * ( (2*a) - b - c ) * ( a - (2*b) + c );
	out /= 5.0 * _$pow_396( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c), 1.5 );
	return out;
}


// EXPORTS //

var _$skewness_1521 = __skewness_1521;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution skewness.
*
* @module @stdlib/stats/base/dists/triangular/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/triangular/skewness' );
*
* var v = skewness( 0.0, 1.0, 0.5 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0, 5.0 );
* // returns ~0.532
*
* v = skewness( 2.0, 8.0, 7.0 );
* // returns ~-0.505
*/

// MODULES //

/* removed: var _$skewness_1521 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1520 = _$skewness_1521;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.204
*
* @example
* var v = stdev( 4.0, 12.0, 9.0 );
* // returns ~1.65
*
* @example
* var v = stdev( -4.0, 4.0, -1.0 );
* // returns ~1.65
*
* @example
* var v = stdev( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = stdev( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = stdev( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = stdev( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = stdev( 0.0, 4.0, NaN );
* // returns NaN
*/
function __stdev_1523( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return _$sqrt_437( ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0 );
}


// EXPORTS //

var _$stdev_1523 = __stdev_1523;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution standard deviation.
*
* @module @stdlib/stats/base/dists/triangular/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/triangular/stdev' );
*
* var v = stdev( 0.0, 1.0, 0.5 );
* // returns ~0.205
*
* v = stdev( 4.0, 12.0, 5.0 );
* // returns ~1.78
*
* v = stdev( 2.0, 8.0, 7.0 );
* // returns ~1.312
*/

// MODULES //

/* removed: var _$stdev_1523 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1522 = _$stdev_1523;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the variance of a triangular distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} c - mode
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
*
* @example
* var v = variance( 4.0, 12.0, 9.0 );
* // returns ~2.722
*
* @example
* var v = variance( -4.0, 4.0, -1.0 );
* // returns ~2.722
*
* @example
* var v = variance( 1.0, -0.1, 0.5 );
* // returns NaN
*
* @example
* var v = variance( 0.0, 1.0, 2.0 );
* // returns NaN
*
* @example
* var v = variance( NaN, 4.0, 2.0 );
* // returns NaN
*
* @example
* var v = variance( 0.0, NaN, 2.0 );
* // returns NaN
*
* @example
* var v = variance( 0.0, 4.0, NaN );
* // returns NaN
*/
function __variance_1525( a, b, c ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		!( a <= c && c <= b )
	) {
		return NaN;
	}
	return ( (a*a) + (b*b) + (c*c) - (a*b) - (a*c) - (b*c) ) / 18.0;
}


// EXPORTS //

var _$variance_1525 = __variance_1525;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution variance.
*
* @module @stdlib/stats/base/dists/triangular/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/triangular/variance' );
*
* var v = variance( 0.0, 1.0, 0.5 );
* // returns ~0.042
*
* v = variance( 4.0, 12.0, 5.0 );
* // returns ~3.167
*
* v = variance( 2.0, 8.0, 7.0 );
* // returns ~1.722
*/

// MODULES //

/* removed: var _$variance_1525 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1524 = _$variance_1525;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.134
*
* @example
* var y = logcdf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~-0.288
*
* @example
* var y = logcdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-1.281
*
* @example
* var y = logcdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __logcdf_1501( x, a, b, c ) {
	var denom1;
	var denom2;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x <= a ) {
		return _$FLOAT64_NINF_107;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );

	// Case: x > a
	if ( x <= c ) {
		return ( 2.0 * _$ln_376( x - a ) ) - _$ln_376( denom1 );
	}
	// Case: x > c
	if ( x < b ) {
		return _$ln_376( 1.0 - ( _$pow_396( b - x, 2.0 ) / denom2 ) );
	}
	// Case: x >= b
	return 0.0;
}


// EXPORTS //

var _$logcdf_1501 = __logcdf_1501;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0, 2.0 );
* var y = logcdf( 0.5 );
* // returns ~-4.382
*
* y = logcdf( 8.0 );
* // returns ~-0.051
*/
function __factory_1499( a, b, c ) {
	var denom1;
	var denom2;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c )
	) {
		return _$constantFunction_1600( NaN );
	}
	if ( !( a <= c && c <= b ) ) {
		return _$constantFunction_1600( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = ( b - a ) * ( b - c );
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x <= a ) {
			return _$FLOAT64_NINF_107;
		}
		// Case: x > a
		if ( x <= c ) {
			return ( 2.0 * _$ln_376( x - a ) ) - _$ln_376( denom1 );
		}
		// Case: x > c
		if ( x < b ) {
			return _$ln_376( 1.0 - ( _$pow_396( b - x, 2.0 ) / denom2 ) );
		}
		// Case: x >= b
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1499 = __factory_1499;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/triangular/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/triangular/logcdf' );
*
* var y = logcdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.134
*
* y = logcdf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~-0.288
*
* y = logcdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-1.281
*
* y = logcdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* var mylogcdf = logcdf.factory( 0.0, 10.0, 2.0 );
* y = mylogcdf( 0.5 );
* // returns ~-4.382
*
* y = mylogcdf( 8.0 );
* // returns ~-0.051
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1501 = require( './logcdf.js' ); */;
/* removed: var _$factory_1499 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1501, 'factory', _$factory_1499 );


// EXPORTS //

var _$logcdf_1500 = _$logcdf_1501;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.693
*
* @example
* var y = logpdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.0
*
* @example
* var y = logpdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-2.89
*
* @example
* var y = logpdf( -2.0, -1.0, 1.0, 0.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __logpdf_1504( x, a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return _$FLOAT64_NINF_107;
	}
	denom1 = _$ln_376( b - a ) + _$ln_376( c - a );
	denom2 = _$ln_376( b - a );
	denom3 = _$ln_376( b - a ) + _$ln_376( b - c );

	// Case: x >= a
	if ( x < c ) {
		return _$LN2_99 + _$ln_376( x - a ) - denom1;
	}
	if ( x === c ) {
		return _$LN2_99 - denom2;
	}
	// Case: x > c
	if ( x <= b ) {
		return _$LN2_99 + _$ln_376( b - x ) - denom3;
	}
	// Case: x > b
	return _$FLOAT64_NINF_107;
}


// EXPORTS //

var _$logpdf_1504 = __logpdf_1504;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0, 5.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.526
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function __factory_1502( a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return _$constantFunction_1600( NaN );
	}

	denom1 = _$ln_376( b - a ) + _$ln_376( c - a );
	denom2 = _$ln_376( b - a );
	denom3 = _$ln_376( b - a ) + _$ln_376( b - c );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 12.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return _$FLOAT64_NINF_107;
		}
		// Case: x >= a
		if ( x < c ) {
			return _$LN2_99 + _$ln_376( x - a ) - denom1;
		}
		if ( x === c ) {
			return _$LN2_99 - denom2;
		}
		// Case: x > c
		if ( x <= b ) {
			return _$LN2_99 + _$ln_376( b - x ) - denom3;
		}
		// Case: x > b
		return _$FLOAT64_NINF_107;
	}
}


// EXPORTS //

var _$factory_1502 = __factory_1502;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/triangular/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/triangular/logpdf' );
*
* var y = logpdf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~-0.693
*
* y = logpdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 0.0
*
* y = logpdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~-2.89
*
* var mylogpdf = logpdf.factory( 0.0, 10.0, 5.0 );
* y = mylogpdf( 2.0 );
* // returns ~-2.526
*
* y = mylogpdf( 12.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1504 = require( './logpdf.js' ); */;
/* removed: var _$factory_1502 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1504, 'factory', _$factory_1502 );


// EXPORTS //

var _$logpdf_1503 = _$logpdf_1504;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
*
* @example
* var y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
*
* @example
* var y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
*
* @example
* var y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
*
* @example
* var y = mgf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __mgf_1511( t, a, b, c ) {
	var bmc;
	var bma;
	var cma;
	var ret;

	if (
		_$isnan_130( t ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	bmc = b - c;
	bma = b - a;
	cma = c - a;
	ret = (bmc * _$exp_225( a * t )) - (bma * _$exp_225( c * t ));
	ret += cma * _$exp_225( b * t );
	ret *= 2.0;
	ret /= bma * cma * bmc * _$pow_396( t, 2.0 );
	return ret;
}


// EXPORTS //

var _$mgf_1511 = __mgf_1511;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) for a triangular distribution with lower limit `a`, upper limit `b`, and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} MGF
*
* @example
* var mgf = factory( 0.0, 2.0, 1.0 );
* var y = mgf( -1.0 );
* // returns ~0.3996
*
* y = mgf( 2.0 );
* // returns ~10.205
*/
function __factory_1509( a, b, c ) {
	var bmc;
	var bma;
	var cma;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return _$constantFunction_1600( NaN );
	}
	bmc = b - c;
	bma = b - a;
	cma = c - a;
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a triangular distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;

		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		ret = (bmc * _$exp_225( a * t )) - (bma * _$exp_225( c * t ));
		ret += cma * _$exp_225( b * t );
		ret *= 2.0;
		ret /= bma * cma * bmc * _$pow_396( t, 2.0 );
		return ret;
	}
}


// EXPORTS //

var _$factory_1509 = __factory_1509;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a triangular distribution.
*
* @module @stdlib/stats/base/dists/triangular/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/triangular/mgf' );
*
* var y = mgf( 0.5, -1.0, 1.0, 0.0 );
* // returns ~1.021
*
* y = mgf( 0.5, -1.0, 1.0, 0.5 );
* // returns ~1.111
*
* y = mgf( -0.3, -20.0, 0.0, -2.0 );
* // returns ~24.334
*
* y = mgf( -2.0, -1.0, 1.0, 0.0 );
* // returns ~1.381
*
* var mymgf = mgf.factory( 0.0, 2.0, 1.0 );
* y = mymgf( -1.0 );
* // returns ~0.3996
*
* y = mymgf( 2.0 );
* // returns ~10.205
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1511 = require( './mgf.js' ); */;
/* removed: var _$factory_1509 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1511, 'factory', _$factory_1509 );


// EXPORTS //

var _$mgf_1510 = _$mgf_1511;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
*
* @example
* var y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
*
* @example
* var y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.056
*
* @example
* var y = pdf( -2.0, -1.0, 1.0, 0.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __pdf_1516( x, a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );

	// Case: x >= a
	if ( x < c ) {
		return 2.0 * ( x - a ) / denom1;
	}
	if ( x === c ) {
		return 2.0 / denom2;
	}
	// Case: x > c
	if ( x <= b ) {
		return 2.0 * ( b - x ) / denom3;
	}
	// Case: x > b
	return 0.0;
}


// EXPORTS //

var _$pdf_1516 = __pdf_1516;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0, 5.0 );
* var y = pdf( 2.0 );
* // returns 0.08
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function __factory_1514( a, b, c ) {
	var denom1;
	var denom2;
	var denom3;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return _$constantFunction_1600( NaN );
	}

	denom1 = ( b - a ) * ( c - a );
	denom2 = b - a;
	denom3 = ( b - a ) * ( b - c );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a triangular distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 12.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		// Case: x >= a
		if ( x < c ) {
			return 2.0 * ( x - a ) / denom1;
		}
		if ( x === c ) {
			return 2.0 / denom2;
		}
		// Case: x > c
		if ( x <= b ) {
			return 2.0 * ( b - x ) / denom3;
		}
		// Case: x > b
		return 0.0;
	}
}


// EXPORTS //

var _$factory_1514 = __factory_1514;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/triangular/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/triangular/pdf' );
*
* var y = pdf( 0.5, -1.0, 1.0, 0.0 );
* // returns 0.5
*
* y = pdf( 0.5, -1.0, 1.0, 0.5 );
* // returns 1.0
*
* y = pdf( -10.0, -20.0, 0.0, -2.0 );
* // returns ~0.056
*
* var mypdf = pdf.factory( 0.0, 10.0, 5.0 );
* y = mypdf( 2.0 );
* // returns 0.08
*
* y = mypdf( 12.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1516 = require( './pdf.js' ); */;
/* removed: var _$factory_1514 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1516, 'factory', _$factory_1514 );


// EXPORTS //

var _$pdf_1515 = _$pdf_1516;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Evaluates the quantile function for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
*
* @example
* var y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
*
* @example
* var y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
*
* @example
* var y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
*
* @example
* var y = quantile( 1.1, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.1, -1.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, NaN, 1.0, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 0.0, NaN, 0.5 );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 1.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.3, 1.0, 0.0, 1.5 );
* // returns NaN
*/
function __quantile_1519( p, a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		_$isnan_130( p ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	if ( p < pInflection ) {
		return a + _$sqrt_437( fact1 * p );
	}
	if ( p > pInflection ) {
		return b - _$sqrt_437( fact2 * ( 1.0 - p ) );
	}
	// Case: p = pInflection
	return c;
}


// EXPORTS //

var _$quantile_1519 = __quantile_1519;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a triangular distribution with lower limit `a`, upper limit `b` and mode `c`.
*
* @param {number} a - lower limit
* @param {number} b - upper limit
* @param {number} c - mode
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0, 2.5 );
* var y = quantile( 0.4 );
* // returns ~2.658
*
* y = quantile( 0.8 );
* // returns ~3.225
*/
function __factory_1517( a, b, c ) {
	var pInflection;
	var fact1;
	var fact2;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( c ) ||
		a > c ||
		c > b
	) {
		return _$constantFunction_1600( NaN );
	}

	pInflection = ( c - a ) / ( b - a );
	fact1 = ( b - a ) * ( c - a);
	fact2 = ( b - a ) * ( b - c );
	return quantile;

	/**
	* Evaluates the quantile function for a triangular distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		if ( p < pInflection ) {
			return a + _$sqrt_437( fact1 * p );
		}
		if ( p > pInflection ) {
			return b - _$sqrt_437( fact2 * ( 1.0 - p ) );
		}
		// Case: p = pInflection
		return c;
	}
}


// EXPORTS //

var _$factory_1517 = __factory_1517;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution quantile function.
*
* @module @stdlib/stats/base/dists/triangular/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/triangular/quantile' );
*
* var y = quantile( 0.9, -1.0, 1.0, 0.0 );
* // returns ~0.553
*
* y = quantile( 0.1, -1.0, 1.0, 0.5 );
* // returns ~-0.452
*
* y = quantile( 0.1, -20.0, 0.0, -2.0 );
* // returns -14.0
*
* y = quantile( 0.8, 0.0, 20.0, 0.0 );
* // returns ~11.056
*
* var myquantile = quantile.factory( 2.0, 4.0, 2.5 );
* y = myquantile( 0.4 );
* // returns ~2.658
*
* y = myquantile( 0.8 );
* // returns ~3.225
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1519 = require( './quantile.js' ); */;
/* removed: var _$factory_1517 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1519, 'factory', _$factory_1517 );


// EXPORTS //

var _$quantile_1518 = _$quantile_1519;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isNumber_1493 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$entropy_1496 = require( '@stdlib/stats/base/dists/triangular/entropy' ); */;
/* removed: var _$kurtosis_1497 = require( '@stdlib/stats/base/dists/triangular/kurtosis' ); */;
/* removed: var _$mean_1505 = require( '@stdlib/stats/base/dists/triangular/mean' ); */;
/* removed: var _$median_1507 = require( '@stdlib/stats/base/dists/triangular/median' ); */;
/* removed: var _$mode_1512 = require( '@stdlib/stats/base/dists/triangular/mode' ); */;
/* removed: var _$skewness_1520 = require( '@stdlib/stats/base/dists/triangular/skewness' ); */;
/* removed: var _$stdev_1522 = require( '@stdlib/stats/base/dists/triangular/stdev' ); */;
/* removed: var _$variance_1524 = require( '@stdlib/stats/base/dists/triangular/variance' ); */;
/* removed: var _$cdf_1492 = require( '@stdlib/stats/base/dists/triangular/cdf' ); */;
/* removed: var _$logcdf_1500 = require( '@stdlib/stats/base/dists/triangular/logcdf' ); */;
/* removed: var _$logpdf_1503 = require( '@stdlib/stats/base/dists/triangular/logpdf' ); */;
/* removed: var _$mgf_1510 = require( '@stdlib/stats/base/dists/triangular/mgf' ); */;
/* removed: var _$pdf_1515 = require( '@stdlib/stats/base/dists/triangular/pdf' ); */;
/* removed: var _$quantile_1518 = require( '@stdlib/stats/base/dists/triangular/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function triangularCDF( x ) {
	return _$cdf_1492( x, this.a, this.b, this.c );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function triangularLogCDF( x ) {
	return _$logcdf_1500( x, this.a, this.b, this.c );
}

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function triangularLogPDF( x ) {
	return _$logpdf_1503( x, this.a, this.b, this.c );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function triangularMGF( t ) {
	return _$mgf_1510( t, this.a, this.b, this.c );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function triangularPDF( x ) {
	return _$pdf_1515( x, this.a, this.b, this.c );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function triangularQuantile( p ) {
	return _$quantile_1518( p, this.a, this.b, this.c );
}


// MAIN //

/**
* Triangular distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @param {number} [c=0.5] - mode
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {TypeError} `c` must be a number primitive
* @throws {RangeError} `a` must be smaller than or equal to `b` and `c`
* @throws {RangeError} `b` must be greater than or equal to `a` and `b`
* @throws {RangeError} `c` must be greater than or equal to `a` and smaller than or equal to `b`
* @returns {Triangular} distribution instance
*
* @example
* var triangular = new Triangular( 0.0, 1.0, 0.25 );
*
* var y = triangular.cdf( 0.8 );
* // returns ~0.947
*
* var mu = triangular.mean;
* // returns ~0.417
*/
function Triangular() {
	var a;
	var b;
	var c;
	if ( !(this instanceof Triangular) ) {
		if ( arguments.length === 0 ) {
			return new Triangular();
		}
		return new Triangular( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		c = arguments[ 2 ];
		if ( !__isNumber_1493( a ) || _$isnan_130( a ) ) {
			throw new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !__isNumber_1493( b ) || _$isnan_130( b ) ) {
			throw new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( !__isNumber_1493( c ) || _$isnan_130( c ) ) {
			throw new TypeError( 'invalid argument. Mode `c` must be a number primitive. Value: `' + c + '`' );
		}
		if ( !( a <= c && c <= b ) ) {
			throw new RangeError( 'invalid arguments. Parameters must satisfy `a <= c <= b`. Value: `' + a + ',' + b + ',' + c + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
		c = 0.5;
	}
	_$defineProperty_1606( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !__isNumber_1493( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value > b || value > c ) {
				throw new RangeError( 'invalid value. Must be smaller than or equal to `b` and `c`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isNumber_1493( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || c > value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and `c`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	_$defineProperty_1606( this, 'c', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return c;
		},
		'set': function set( value ) {
			if ( !__isNumber_1493( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a > value || b < value ) {
				throw new RangeError( 'invalid value. Must be greater than or equal to `a` and smaller than or equal to `b`. Value: `'+ value + '`' );
			}
			c = value;
		}
	});
	return this;
}

/**
* Triangular distribution differential entropy.
*
* @name entropy
* @memberof Triangular.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.entropy;
* // returns ~1.886
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'entropy', function get() {
	return _$entropy_1496( this.a, this.b, this.c );
});

/**
* Triangular distribution excess kurtosis.
*
* @name kurtosis
* @memberof Triangular.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.kurtosis;
* // returns -0.6
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'kurtosis', function get() {
	return _$kurtosis_1497( this.a, this.b, this.c );
});

/**
* Triangular distribution expected value.
*
* @name mean
* @memberof Triangular.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mean;
* // returns ~8.667
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'mean', function get() {
	return _$mean_1505( this.a, this.b, this.c );
});

/**
* Triangular distribution median.
*
* @name median
* @memberof Triangular.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.median;
* // returns ~8.899
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'median', function get() {
	return _$median_1507( this.a, this.b, this.c );
});

/**
* Triangular distribution mode.
*
* @name mode
* @memberof Triangular.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.mode;
* // returns 10.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'mode', function get() {
	return _$mode_1512( this.a, this.b, this.c );
});

/**
* Triangular distribution skewness.
*
* @name skewness
* @memberof Triangular.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.skewness;
* // returns ~-0.422
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'skewness', function get() {
	return _$skewness_1520( this.a, this.b, this.c );
});

/**
* Triangular distribution standard deviation.
*
* @name stdev
* @memberof Triangular.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.stdev;
* // returns ~1.7
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'stdev', function get() {
	return _$stdev_1522( this.a, this.b, this.c );
});

/**
* Triangular distribution variance.
*
* @name variance
* @memberof Triangular.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var triangular = new Triangular( 4.0, 12.0, 10.0 );
*
* var v = triangular.variance;
* // returns ~2.889
*/
_$setNonEnumerableReadOnlyAccessor_1601( Triangular.prototype, 'variance', function get() {
	return _$variance_1524( this.a, this.b, this.c );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {Probability} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.cdf( 3.0 );
* // returns 0.5
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'cdf', triangularCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF).
*
* @name logcdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.logcdf( 3.0 );
* // returns ~-0.693
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'logcdf', triangularLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (PDF).
*
* @name logpdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.logpdf( 2.4 );
* // returns ~-0.916
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'logpdf', triangularLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.mgf( 0.5 );
* // returns ~4.576
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'mgf', triangularMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Triangular.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.pdf( 2.4 );
* // returns ~0.40
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'pdf', triangularPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Triangular.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var triangular = new Triangular( 2.0, 4.0, 3.0 );
*
* var v = triangular.quantile( 0.5 );
* // returns 3.0
*/
_$setNonEnumerableReadOnly_1603( Triangular.prototype, 'quantile', triangularQuantile );


// EXPORTS //

var _$Triangular_1493 = Triangular;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Triangular distribution constructor.
*
* @module @stdlib/stats/base/dists/triangular/ctor
*
* @example
* var Triangular = require( '@stdlib/stats/base/dists/triangular/ctor' );
*
* var triangular = new Triangular( 0.0, 1.0, 0.5 );
*
* var y = triangular.cdf( 0.8 );
* // returns 0.92
*
* var mu = triangular.mean;
* // returns 0.5
*/

// MODULES //

/* removed: var _$Triangular_1493 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1494 = _$Triangular_1493;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$cdf_1323 = require( '@stdlib/stats/base/dists/normal/cdf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, location parameter `mu` and scale parameter `sigma` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {number} evaluated PDF
*/
function __pdf_1528( x, a, b, mu, sigma ) {
	var s2x2;
	var A;
	var B;
	var C;

	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		sigma <= 0.0 ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	s2x2 = 2.0 * _$pow_396( sigma, 2.0 );
	A = 1.0 / ( _$sqrt_437( s2x2 * _$PI_109 ) );
	B = -1.0 / ( s2x2 );
	C = _$cdf_1323( (b-mu)/sigma ) - _$cdf_1323( (a-mu)/sigma );
	return A * _$exp_225( B * _$pow_396( x - mu, 2.0 ) ) / C;
}


// EXPORTS //

var _$pdf_1528 = __pdf_1528;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$cdf_1323 = require( '@stdlib/stats/base/dists/normal/cdf' ); */;
/* removed: var _$PI_109 = require( '@stdlib/constants/math/float64-pi' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a truncated normal distribution with endpoints `a` and `b`, mean `mu` and standard deviation `sigma`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @param {number} mu - location parameter
* @param {PositiveNumber} sigma - scale parameter
* @returns {Function} PDF
*/
function __factory_1526( a, b, mu, sigma ) {
	var s2x2;
	var A;
	var B;
	var C;

	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		_$isnan_130( mu ) ||
		_$isnan_130( sigma ) ||
		sigma <= 0.0 ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	s2x2 = 2.0 * _$pow_396( sigma, 2.0 );
	A = 1.0 / ( _$sqrt_437( s2x2 * _$PI_109 ) );
	B = -1.0 / ( s2x2 );
	C = _$cdf_1323( (b-mu)/sigma ) - _$cdf_1323( (a-mu)/sigma );
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a truncated normal distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return A * _$exp_225( B * _$pow_396( x - mu, 2.0 ) ) / C;
	}
}


// EXPORTS //

var _$factory_1526 = __factory_1526;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Truncated normal distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/truncated-normal/pdf
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1528 = require( './pdf.js' ); */;
/* removed: var _$factory_1526 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1528, 'factory', _$factory_1526 );


// EXPORTS //

var _$pdf_1527 = _$pdf_1528;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 9.0, 0.0, 10.0 );
* // returns 0.9
*
* @example
* var y = cdf( 0.5, 0.0, 2.0 );
* // returns 0.25
*
* @example
* var y = cdf( +Infinity, 2.0, 4.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function __cdf_1529( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return 0.0;
	}
	if ( x >= b ) {
		return 1.0;
	}
	return ( x - a ) / ( b - a );
}


// EXPORTS //

var _$cdf_1529 = __cdf_1529;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} CDF
*
* @example
* var cdf = factory( 0.0, 10.0 );
* var y = cdf( 0.5 );
* // returns 0.05
*
* y = cdf( 8.0 );
* // returns 0.8
*/
function __factory_1530( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return 0.0;
		}
		if ( x >= b ) {
			return 1.0;
		}
		return ( x - a ) / ( b - a );
	}
}


// EXPORTS //

var _$factory_1530 = __factory_1530;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/uniform/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/uniform/cdf' );
*
* var y = cdf( 5.0, 0.0, 4.0 );
* // returns 1.0
*
* var mycdf = cdf.factory( 0.0, 10.0 );
* y = mycdf( 0.5 );
* // returns 0.05
*
* y = mycdf( 8.0 );
* // returns 0.8
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1529 = require( './cdf.js' ); */;
/* removed: var _$factory_1530 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1529, 'factory', _$factory_1530 );


// EXPORTS //

var _$cdf_1531 = _$cdf_1529;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;


// MAIN //

/**
* Returns the differential entropy of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} differential entropy
*
* @example
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.079
*
* @example
* var v = entropy( -4.0, 4.0 );
* // returns ~2.079
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_1534( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return _$ln_376( b-a );
}


// EXPORTS //

var _$entropy_1534 = __entropy_1534;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution differential entropy.
*
* @module @stdlib/stats/base/dists/uniform/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/uniform/entropy' );
*
* var v = entropy( 0.0, 1.0 );
* // returns 0.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.079
*
* v = entropy( 2.0, 8.0 );
* // returns ~1.792
*/

// MODULES //

/* removed: var _$entropy_1534 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1535 = _$entropy_1534;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} excess kurtosis
*
* @example
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns -1.2
*
* @example
* var v = kurtosis( -4.0, 4.0 );
* // returns -1.2
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_1537( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return -1.2;
}


// EXPORTS //

var _$kurtosis_1537 = __kurtosis_1537;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/uniform/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/uniform/kurtosis' );
*
* var v = kurtosis( 0.0, 1.0 );
* // returns -1.2
*
* v = kurtosis( 4.0, 12.0 );
* // returns -1.2
*
* v = kurtosis( 2.0, 8.0 );
* // returns -1.2
*/

// MODULES //

/* removed: var _$kurtosis_1537 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1536 = _$kurtosis_1537;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the expected value of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} expected value
*
* @example
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = mean( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_1545( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

var _$mean_1545 = __mean_1545;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution expected value.
*
* @module @stdlib/stats/base/dists/uniform/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/uniform/mean' );
*
* var v = mean( 0.0, 1.0 );
* // returns 0.5
*
* v = mean( 4.0, 12.0 );
* // returns 8.0
*
* v = mean( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

/* removed: var _$mean_1545 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1544 = _$mean_1545;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the median of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} median
*
* @example
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* @example
* var v = median( 4.0, 12.0 );
* // returns 8.0
*
* @example
* var v = median( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function __median_1547( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return 0.5 * ( a + b );
}


// EXPORTS //

var _$median_1547 = __median_1547;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution median.
*
* @module @stdlib/stats/base/dists/uniform/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/uniform/median' );
*
* var v = median( 0.0, 1.0 );
* // returns 0.5
*
* v = median( 4.0, 12.0 );
* // returns 8.0
*
* v = median( 2.0, 8.0 );
* // returns 5.0
*/

// MODULES //

/* removed: var _$median_1547 = require( './median.js' ); */;


// EXPORTS //

var _$median_1546 = _$median_1547;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns the skewness of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} skewness
*
* @example
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* @example
* var v = skewness( -4.0, 4.0 );
* // returns 0.0
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_1558( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	return 0.0;
}


// EXPORTS //

var _$skewness_1558 = __skewness_1558;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution skewness.
*
* @module @stdlib/stats/base/dists/uniform/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/uniform/skewness' );
*
* var v = skewness( 0.0, 1.0 );
* // returns 0.0
*
* v = skewness( 4.0, 12.0 );
* // returns 0.0
*
* v = skewness( 2.0, 8.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$skewness_1558 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1557 = _$skewness_1558;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// VARIABLES //

var __SQRT1O12_1560 = _$sqrt_437( 1.0/12.0 );


// MAIN //

/**
* Returns the standard deviation of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 0.0, 1.0 );
* // returns ~0.289
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~2.309
*
* @example
* var v = stdev( -4.0, 4.0 );
* // returns ~2.309
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_1560( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return __SQRT1O12_1560 * ( b-a );
}


// EXPORTS //

var _$stdev_1560 = __stdev_1560;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution standard deviation.
*
* @module @stdlib/stats/base/dists/uniform/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/uniform/stdev' );
*
* var v = stdev( 0.0, 1.0 );
* // returns ~0.288
*
* v = stdev( 4.0, 12.0 );
* // returns ~2.309
*
* v = stdev( 2.0, 8.0 );
* // returns ~1.732
*/

// MODULES //

/* removed: var _$stdev_1560 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1559 = _$stdev_1560;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the variance of a uniform distribution.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~5.333
*
* @example
* var v = variance( -4.0, 4.0 );
* // returns ~5.333
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_1562( a, b ) {
	if (
		a >= b
	) {
		return NaN;
	}
	return (1.0/12.0) * _$pow_396( b-a, 2.0 );
}


// EXPORTS //

var _$variance_1562 = __variance_1562;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution variance.
*
* @module @stdlib/stats/base/dists/uniform/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/uniform/variance' );
*
* var v = variance( 0.0, 1.0 );
* // returns ~0.083
*
* v = variance( 4.0, 12.0 );
* // returns ~5.333
*
* v = variance( 2.0, 8.0 );
* // returns 3.0
*/

// MODULES //

/* removed: var _$variance_1562 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1561 = _$variance_1562;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logCDF
*
* @example
* var y = logcdf( 9.0, 0.0, 10.0 );
* // returns ~-0.105
*
* @example
* var y = logcdf( 0.5, 0.0, 2.0 );
* // returns ~-1.386
*
* @example
* var y = logcdf( +Infinity, 2.0, 4.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 2.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 1.0, 0.0 );
* // returns NaN
*/
function __logcdf_1540( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x >= b ) {
		return 0.0;
	}
	return _$ln_376( ( x - a ) / ( b - a ) );
}


// EXPORTS //

var _$logcdf_1540 = __logcdf_1540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 0.0, 10.0 );
* var y = logcdf( 0.5 );
* // returns ~-2.996
*
* y = logcdf( 8.0 );
* // returns ~-0.223
*/
function __factory_1538( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the logarithm of the cumulative distribution function (CDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x >= b ) {
			return 0.0;
		}
		return _$ln_376( ( x - a ) / ( b - a ) );
	}
}


// EXPORTS //

var _$factory_1538 = __factory_1538;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/uniform/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/uniform/logcdf' );
*
* var y = logcdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* var mylogcdf = logcdf.factory( 0.0, 10.0 );
* y = mylogcdf( 0.5 );
* // returns ~-2.996
*
* y = mylogcdf( 8.0 );
* // returns ~-0.223
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1540 = require( './logcdf.js' ); */;
/* removed: var _$factory_1538 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1540, 'factory', _$factory_1538 );


// EXPORTS //

var _$logcdf_1539 = _$logcdf_1540;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated logPDF
*
* @example
* var y = logpdf( 2.0, 0.0, 4.0 );
* // returns ~-1.386
*
* @example
* var y = logpdf( 5.0, 0.0, 4.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( 0.25, 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = logpdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function __logpdf_1543( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return _$FLOAT64_NINF_107;
	}
	return -_$ln_376( b - a );
}


// EXPORTS //

var _$logpdf_1543 = __logpdf_1543;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the logarithm of the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} logPDF
*
* @example
* var logpdf = factory( 0.0, 10.0 );
* var y = logpdf( 2.0 );
* // returns ~-2.303
*
* y = logpdf( 12.0 );
* // returns -Infinity
*/
function __factory_1541( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return logpdf;

	/**
	* Evaluates the logarithm of the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.0 );
	* // returns <number>
	*/
	function logpdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return _$FLOAT64_NINF_107;
		}
		return -_$ln_376( b - a );
	}
}


// EXPORTS //

var _$factory_1541 = __factory_1541;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/uniform/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/uniform/logpdf' );
*
* var y = logpdf( 3.0, 2.0, 6.0 );
* // returns ~-1.386
*
* var mylogPDF = logpdf.factory( 6.0, 7.0 );
* y = mylogPDF( 7.0 );
* // returns 0.0
*
* y = mylogPDF( 5.0 );
* // returns -Infinity
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1543 = require( './logpdf.js' ); */;
/* removed: var _$factory_1541 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1543, 'factory', _$factory_1541 );


// EXPORTS //

var _$logpdf_1542 = _$logpdf_1543;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b` at a value `t`.
*
* @param {number} t - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* @example
* var y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* @example
* var y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* @example
* var y = mgf( 0.5, 3.0, 2.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.5, 3.0, 3.0 );
* // returns NaN
*
* @example
* var y = mgf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 0.0, NaN );
* // returns NaN
*/
function __mgf_1550( t, a, b ) {
	var ret;
	if (
		_$isnan_130( t ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( t === 0.0 ) {
		return 1.0;
	}
	// Case: t not equal to zero
	ret = _$exp_225( t * b ) - _$exp_225( t * a );
	ret /= t * ( b - a );
	return ret;
}


// EXPORTS //

var _$mgf_1550 = __mgf_1550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} MGF
*
* @example
* var mgf = factory( 6.0, 7.0 );
* var y = mgf( 0.1 );
* // returns ~1.916
*
* y = mgf( 1.1 );
* // returns ~1339.321
*/
function __factory_1548( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) of a uniform distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var ret;
		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		if ( t === 0.0 ) {
			return 1.0;
		}
		// Case: t not equal to zero
		ret = _$exp_225( t * b ) - _$exp_225( t * a );
		ret /= t * ( b - a );
		return ret;
	}
}


// EXPORTS //

var _$factory_1548 = __factory_1548;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) of a uniform distribution.
*
* @module @stdlib/stats/base/dists/uniform/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/uniform/mgf' );
*
* var y = mgf( 2.0, 0.0, 4.0 );
* // returns ~372.495
*
* y = mgf( -0.2, 0.0, 4.0 );
* // returns ~0.688
*
* y = mgf( 2.0, 0.0, 1.0 );
* // returns ~3.195
*
* var mymgf = mgf.factory( 6.0, 7.0 );
* y = mymgf( 0.1 );
* // returns ~1.916
*
* y = mymgf( 1.1 );
* // returns ~1339.321
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1550 = require( './mgf.js' ); */;
/* removed: var _$factory_1548 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1550, 'factory', _$factory_1548 );


// EXPORTS //

var _$mgf_1549 = _$mgf_1550;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.
*
* @param {number} x - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated PDF
*
* @example
* var y = pdf( 2.0, 0.0, 4.0 );
* // returns 0.25
*
* @example
* var y = pdf( 5.0, 0.0, 4.0 );
* // returns 0.0
*
* @example
* var y = pdf( 0.25, 0.0, 1.0 );
* // returns 1.0
*
* @example
* var y = pdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 3.0, 1.0 );
* // returns NaN
*/
function __pdf_1553( x, a, b ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( x < a || x > b ) {
		return 0.0;
	}
	return 1.0 / ( b - a );
}


// EXPORTS //

var _$pdf_1553 = __pdf_1553;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a uniform distribution with minimum support `a` and maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} PDF
*
* @example
* var pdf = factory( 0.0, 10.0 );
* var y = pdf( 2.0 );
* // returns 0.1
*
* y = pdf( 12.0 );
* // returns 0.0
*/
function __factory_1551( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a uniform distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.0 );
	* // returns <number>
	*/
	function pdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < a || x > b ) {
			return 0.0;
		}
		return 1.0 / ( b - a );
	}
}


// EXPORTS //

var _$factory_1551 = __factory_1551;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/uniform/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/uniform/pdf' );
*
* var y = pdf( 3.0, 2.0, 6.0 );
* // returns 0.25
*
* var myPDF = pdf.factory( 6.0, 7.0 );
* y = myPDF( 7.0 );
* // returns 1.0
*
* y = myPDF( 5.0 );
* // returns 0.0
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1553 = require( './pdf.js' ); */;
/* removed: var _$factory_1551 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1553, 'factory', _$factory_1551 );


// EXPORTS //

var _$pdf_1552 = _$pdf_1553;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a uniform distribution with minimum support `a` and maximum support `b` at a probability `p`.
*
* @param {Probability} p - input value
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 0.0, 1.0 );
* // returns 0.8
*
* @example
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* @example
* var y = quantile( 1.1, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 2.0, 1.0 );
* // returns NaN
*/
function __quantile_1556( p, a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return NaN;
	}
	if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
		return NaN;
	}
	return a + ( p * ( b - a ) );
}


// EXPORTS //

var _$quantile_1556 = __quantile_1556;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a uniform distribution with minimum support `a` an maximum support `b`.
*
* @param {number} a - minimum support
* @param {number} b - maximum support
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 4.0 );
* var y = quantile( 0.4 );
* // returns 2.8
*
* y = quantile( 0.8 );
* // returns 3.6
*/
function __factory_1554( a, b ) {
	if (
		_$isnan_130( a ) ||
		_$isnan_130( b ) ||
		a >= b
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a uniform distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return a + ( p * ( b - a ) );
	}
}


// EXPORTS //

var _$factory_1554 = __factory_1554;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution quantile function.
*
* @module @stdlib/stats/base/dists/uniform/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/uniform/quantile' );
*
* var y = quantile( 0.5, 0.0, 10.0 );
* // returns 5.0
*
* y = quantile( 0.8, 0.0, 1.0 );
* // returns 0.8
*
* var myQuantile = quantile.factory( 0.0, 4.0 );
* y = myQuantile( 0.8 );
* // returns 3.2
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1556 = require( './quantile.js' ); */;
/* removed: var _$factory_1554 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1556, 'factory', _$factory_1554 );


// EXPORTS //

var _$quantile_1555 = _$quantile_1556;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isNumber_1532 = _$isNumber_58.isPrimitive;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$entropy_1535 = require( '@stdlib/stats/base/dists/uniform/entropy' ); */;
/* removed: var _$kurtosis_1536 = require( '@stdlib/stats/base/dists/uniform/kurtosis' ); */;
/* removed: var _$mean_1544 = require( '@stdlib/stats/base/dists/uniform/mean' ); */;
/* removed: var _$median_1546 = require( '@stdlib/stats/base/dists/uniform/median' ); */;
/* removed: var _$skewness_1557 = require( '@stdlib/stats/base/dists/uniform/skewness' ); */;
/* removed: var _$stdev_1559 = require( '@stdlib/stats/base/dists/uniform/stdev' ); */;
/* removed: var _$variance_1561 = require( '@stdlib/stats/base/dists/uniform/variance' ); */;
/* removed: var _$cdf_1531 = require( '@stdlib/stats/base/dists/uniform/cdf' ); */;
/* removed: var _$logcdf_1539 = require( '@stdlib/stats/base/dists/uniform/logcdf' ); */;
/* removed: var _$logpdf_1542 = require( '@stdlib/stats/base/dists/uniform/logpdf' ); */;
/* removed: var _$mgf_1549 = require( '@stdlib/stats/base/dists/uniform/mgf' ); */;
/* removed: var _$pdf_1552 = require( '@stdlib/stats/base/dists/uniform/pdf' ); */;
/* removed: var _$quantile_1555 = require( '@stdlib/stats/base/dists/uniform/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated CDF
*/
function uniformCDF( x ) {
	return _$cdf_1531( x, this.a, this.b );
}

/**
* Evaluates the the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {Probability} evaluated logCDF
*/
function uniformLogCDF( x ) {
	return _$logcdf_1539( x, this.a, this.b );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function uniformLogPDF( x ) {
	return _$logpdf_1542( x, this.a, this.b );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function uniformMGF( t ) {
	return _$mgf_1549( t, this.a, this.b );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function uniformPDF( x ) {
	return _$pdf_1552( x, this.a, this.b );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function uniformQuantile( p ) {
	return _$quantile_1555( p, this.a, this.b );
}


// MAIN //

/**
* Uniform distribution constructor.
*
* @constructor
* @param {number} [a=0.0] - minimum support
* @param {number} [b=1.0] - maximum support
* @throws {TypeError} `a` must be a number primitive
* @throws {TypeError} `b` must be a number primitive
* @throws {RangeError} `a` must be smaller than `b`
* @returns {Uniform} distribution instance
*
* @example
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns 0.8
*
* var mu = uniform.mean;
* // returns 0.5
*/
function Uniform() {
	var a;
	var b;
	if ( !(this instanceof Uniform) ) {
		if ( arguments.length === 0 ) {
			return new Uniform();
		}
		return new Uniform( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		a = arguments[ 0 ];
		b = arguments[ 1 ];
		if ( !__isNumber_1532( a ) || _$isnan_130( a ) ) {
			throw new TypeError( 'invalid argument. Minimum support `a` must be a number primitive. Value: `' + a + '`' );
		}
		if ( !__isNumber_1532( b ) || _$isnan_130( b ) ) {
			throw new TypeError( 'invalid argument. Maximum support `b` must be a number primitive. Value: `' + b + '`' );
		}
		if ( a >= b ) {
			throw new RangeError( 'invalid arguments. Minimum support `a` must be less than maximum support `b`. Value: `' + a + ',' + b + '`' );
		}
	} else {
		a = 0.0;
		b = 1.0;
	}
	_$defineProperty_1606( this, 'a', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return a;
		},
		'set': function set( value ) {
			if ( !__isNumber_1532( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( value >= b ) {
				throw new RangeError( 'invalid value. Must be smaller than `b`. Value: `'+ value + '`' );
			}
			a = value;
		}
	});
	_$defineProperty_1606( this, 'b', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return b;
		},
		'set': function set( value ) {
			if ( !__isNumber_1532( value ) || _$isnan_130( value ) ) {
				throw new TypeError( 'invalid value. Must be a number primitive. Value: `' + value + '`' );
			}
			if ( a >= value ) {
				throw new RangeError( 'invalid value. Must be greater than `a`. Value: `'+ value + '`' );
			}
			b = value;
		}
	});
	return this;
}

/**
* Uniform distribution differential entropy.
*
* @name entropy
* @memberof Uniform.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.entropy;
* // returns ~2.079
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'entropy', function get() {
	return _$entropy_1535( this.a, this.b );
});

/**
* Uniform distribution excess kurtosis.
*
* @name kurtosis
* @memberof Uniform.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.kurtosis;
* // returns -1.2
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'kurtosis', function get() {
	return _$kurtosis_1536( this.a, this.b );
});

/**
* Uniform distribution expected value.
*
* @name mean
* @memberof Uniform.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.mean;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'mean', function get() {
	return _$mean_1544( this.a, this.b );
});

/**
* Uniform distribution median.
*
* @name median
* @memberof Uniform.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.median;
* // returns 8.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'median', function get() {
	return _$median_1546( this.a, this.b );
});

/**
* Uniform distribution skewness.
*
* @name skewness
* @memberof Uniform.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.skewness;
* // returns 0.0
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'skewness', function get() {
	return _$skewness_1557( this.a, this.b );
});

/**
* Uniform distribution standard deviation.
*
* @name stdev
* @memberof Uniform.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.stdev;
* // returns ~2.309
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'stdev', function get() {
	return _$stdev_1559( this.a, this.b );
});

/**
* Uniform distribution variance.
*
* @name variance
* @memberof Uniform.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var uniform = new Uniform( 4.0, 12.0 );
*
* var v = uniform.variance;
* // returns ~5.333
*/
_$setNonEnumerableReadOnlyAccessor_1601( Uniform.prototype, 'variance', function get() {
	return _$variance_1561( this.a, this.b );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.cdf( 3.0 );
* // returns ~0.5
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'cdf', uniformCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logcdf( 2.5 );
* // returns ~-1.386
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'logcdf', uniformLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.logpdf( 2.5 );
* // returns ~-0.693
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'logpdf', uniformLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.mgf( 0.5 );
* // returns ~4.671
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'mgf', uniformMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Uniform.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.pdf( 2.4 );
* // returns 0.5
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'pdf', uniformPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Uniform.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var uniform = new Uniform( 2.0, 4.0 );
*
* var v = uniform.quantile( 0.5 );
* // returns 3.0
*/
_$setNonEnumerableReadOnly_1603( Uniform.prototype, 'quantile', uniformQuantile );


// EXPORTS //

var _$Uniform_1532 = Uniform;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Uniform distribution constructor.
*
* @module @stdlib/stats/base/dists/uniform/ctor
*
* @example
* var Uniform = require( '@stdlib/stats/base/dists/uniform/ctor' );
*
* var uniform = new Uniform( 0.0, 1.0 );
*
* var y = uniform.cdf( 0.8 );
* // returns 0.8
*
* var mu = uniform.mean;
* // returns 0.5
*/

// MODULES //

/* removed: var _$Uniform_1532 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1533 = _$Uniform_1532;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Probability} evaluated CDF
*
* @example
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* @example
* var y = cdf( -1.0, 2.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( +Infinity, 4.0, 2.0 );
* // returns 1.0
*
* @example
* var y = cdf( -Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = cdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = cdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = cdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __cdf_1563( x, k, lambda ) {
	if (
		_$isnan_130( x ) ||
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	return -_$expm1_228( -_$pow_396( x / lambda, k ) );
}


// EXPORTS //

var _$cdf_1563 = __cdf_1563;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} CDF
*
* @example
* var cdf = factory( 2.0, 10.0 );
* var y = cdf( 12.0 );
* // returns ~0.763
*
* y = cdf( 8.0 );
* // returns ~0.473
*/
function __factory_1564( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return cdf;

	/**
	* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {Probability} evaluated CDF
	*
	* @example
	* var y = cdf( 2.0 );
	* // returns <number>
	*/
	function cdf( x ) {
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return 0.0;
		}
		return -_$expm1_228( -_$pow_396( x / lambda, k ) );
	}
}


// EXPORTS //

var _$factory_1564 = __factory_1564;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/weibull/cdf
*
* @example
* var cdf = require( '@stdlib/stats/base/dists/weibull/cdf' );
*
* var y = cdf( 2.0, 1.0, 1.0 );
* // returns ~0.865
*
* var myCDF = cdf.factory( 2.0, 10.0 );
* y = myCDF( 12.0 );
* // returns ~0.763
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$cdf_1563 = require( './cdf.js' ); */;
/* removed: var _$factory_1564 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$cdf_1563, 'factory', _$factory_1564 );


// EXPORTS //

var _$cdf_1565 = _$cdf_1563;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$GAMMA_88 = require( '@stdlib/constants/math/float64-eulergamma' ); */;


// MAIN //

/**
* Returns the differential entropy of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} entropy
*
* @example
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = entropy( 4.0, 12.0 );
* // returns ~2.532
*
* @example
* var v = entropy( 8.0, 2.0 );
* // returns ~0.119
*
* @example
* var v = entropy( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = entropy( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = entropy( 2.0, NaN );
* // returns NaN
*
* @example
* var v = entropy( NaN, 2.0 );
* // returns NaN
*/
function __entropy_1568( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return ( _$GAMMA_88 * ( 1.0 - (1.0/k) ) ) + _$ln_376( lambda/k ) + 1.0;
}


// EXPORTS //

var _$entropy_1568 = __entropy_1568;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution differential entropy.
*
* @module @stdlib/stats/base/dists/weibull/entropy
*
* @example
* var entropy = require( '@stdlib/stats/base/dists/weibull/entropy' );
*
* var v = entropy( 1.0, 1.0 );
* // returns 1.0
*
* v = entropy( 4.0, 12.0 );
* // returns ~2.532
*
* v = entropy( 8.0, 2.0 );
* // returns ~0.119
*/

// MODULES //

/* removed: var _$entropy_1568 = require( './entropy.js' ); */;


// EXPORTS //

var _$entropy_1569 = _$entropy_1568;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the excess kurtosis of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} kurtosis
*
* @example
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* @example
* var v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
*
* @example
* var v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
*
* @example
* var v = kurtosis( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = kurtosis( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = kurtosis( 2.0, NaN );
* // returns NaN
*
* @example
* var v = kurtosis( NaN, 2.0 );
* // returns NaN
*/
function __kurtosis_1571( k, lambda ) {
	var out;
	var g4;
	var g3;
	var g2;
	var g1;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1 = _$gamma_247( 1.0 + (1.0/k) );
	g2 = _$gamma_247( 1.0 + (2.0/k) );
	g3 = _$gamma_247( 1.0 + (3.0/k) );
	g4 = _$gamma_247( 1.0 + (4.0/k) );
	out = (-6.0*_$pow_396(g1, 4.0)) + (12.0*g1*g1*g2) - (3.0*g2*g2)- (4.0*g1*g3) + g4;
	out /= _$pow_396( g2 - (g1*g1), 2.0 );
	return out;
}


// EXPORTS //

var _$kurtosis_1571 = __kurtosis_1571;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution excess kurtosis.
*
* @module @stdlib/stats/base/dists/weibull/kurtosis
*
* @example
* var kurtosis = require( '@stdlib/stats/base/dists/weibull/kurtosis' );
*
* var v = kurtosis( 1.0, 1.0 );
* // returns 6.0
*
* v = kurtosis( 4.0, 12.0 );
* // returns ~-0.252
*
* v = kurtosis( 8.0, 2.0 );
* // returns ~0.328
*/

// MODULES //

/* removed: var _$kurtosis_1571 = require( './kurtosis.js' ); */;


// EXPORTS //

var _$kurtosis_1570 = _$kurtosis_1571;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;


// MAIN //

/**
* Returns the expected value of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} expected value
*
* @example
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = mean( 4.0, 12.0 );
* // returns ~10.877
*
* @example
* var v = mean( 8.0, 2.0 );
* // returns ~1.883
*
* @example
* var v = mean( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mean( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mean( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mean( NaN, 2.0 );
* // returns NaN
*/
function __mean_1579( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * _$gamma_247( 1.0 + ( 1.0/k ) );
}


// EXPORTS //

var _$mean_1579 = __mean_1579;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution expected value.
*
* @module @stdlib/stats/base/dists/weibull/mean
*
* @example
* var mean = require( '@stdlib/stats/base/dists/weibull/mean' );
*
* var v = mean( 1.0, 1.0 );
* // returns 1.0
*
* v = mean( 4.0, 12.0 );
* // returns ~10.877
*
* v = mean( 8.0, 2.0 );
* // returns ~1.883
*/

// MODULES //

/* removed: var _$mean_1579 = require( './mean.js' ); */;


// EXPORTS //

var _$mean_1578 = _$mean_1579;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$LN2_99 = require( '@stdlib/constants/math/float64-ln-two' ); */;


// MAIN //

/**
* Returns the median of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} median
*
* @example
* var v = median( 1.0, 1.0 );
* // returns ~0.693
*
* @example
* var v = median( 4.0, 12.0 );
* // returns ~10.949
*
* @example
* var v = median( 8.0, 2.0 );
* // returns ~1.91
*
* @example
* var v = median( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = median( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = median( 2.0, NaN );
* // returns NaN
*
* @example
* var v = median( NaN, 2.0 );
* // returns NaN
*/
function __median_1581( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	return lambda * _$pow_396( _$LN2_99, 1.0/k );
}


// EXPORTS //

var _$median_1581 = __median_1581;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution median.
*
* @module @stdlib/stats/base/dists/weibull/median
*
* @example
* var median = require( '@stdlib/stats/base/dists/weibull/median' );
*
* var v = median( 1.0, 1.0 );
* // returns ~0.693
*
* v = median( 4.0, 12.0 );
* // returns ~10.949
*
* v = median( 8.0, 2.0 );
* // returns ~1.91
*/

// MODULES //

/* removed: var _$median_1581 = require( './median.js' ); */;


// EXPORTS //

var _$median_1580 = _$median_1581;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the mode of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {NonNegativeNumber} mode
*
* @example
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* @example
* var v = mode( 4.0, 12.0 );
* // returns ~11.167
*
* @example
* var v = mode( 8.0, 2.0 );
* // returns ~1.967
*
* @example
* var v = mode( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = mode( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = mode( 2.0, NaN );
* // returns NaN
*
* @example
* var v = mode( NaN, 2.0 );
* // returns NaN
*/
function __mode_1586( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( k <= 1.0 ) {
		return 0.0;
	}
	return lambda * _$pow_396( ( k-1.0 ) / k, 1.0/k );
}


// EXPORTS //

var _$mode_1586 = __mode_1586;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution mode.
*
* @module @stdlib/stats/base/dists/weibull/mode
*
* @example
* var mode = require( '@stdlib/stats/base/dists/weibull/mode' );
*
* var v = mode( 1.0, 1.0 );
* // returns 0.0
*
* v = mode( 4.0, 12.0 );
* // returns ~11.167
*
* v = mode( 8.0, 2.0 );
* // returns ~1.967
*/

// MODULES //

/* removed: var _$mode_1586 = require( './mode.js' ); */;


// EXPORTS //

var _$mode_1585 = _$mode_1586;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$mean_1578 = require( '@stdlib/stats/base/dists/weibull/mean' ); */;


// MAIN //

/**
* Returns the variance of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} variance
*
* @example
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = variance( 4.0, 12.0 );
* // returns ~9.311
*
* @example
* var v = variance( 8.0, 2.0 );
* // returns ~0.078
*
* @example
* var v = variance( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = variance( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = variance( 2.0, NaN );
* // returns NaN
*
* @example
* var v = variance( NaN, 2.0 );
* // returns NaN
*/
function __variance_1598( k, lambda ) {
	var mu;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = _$mean_1578( k, lambda );
	return ( lambda*lambda * ( _$gamma_247( 1.0 + (2.0/k) ) ) ) - ( mu*mu );
}


// EXPORTS //

var _$variance_1598 = __variance_1598;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution variance.
*
* @module @stdlib/stats/base/dists/weibull/variance
*
* @example
* var variance = require( '@stdlib/stats/base/dists/weibull/variance' );
*
* var v = variance( 1.0, 1.0 );
* // returns 1.0
*
* v = variance( 4.0, 12.0 );
* // returns ~9.311
*
* v = variance( 8.0, 2.0 );
* // returns ~0.078
*/

// MODULES //

/* removed: var _$variance_1598 = require( './variance.js' ); */;


// EXPORTS //

var _$variance_1597 = _$variance_1598;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$variance_1597 = require( '@stdlib/stats/base/dists/weibull/variance' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;
/* removed: var _$mean_1578 = require( '@stdlib/stats/base/dists/weibull/mean' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;


// MAIN //

/**
* Returns the skewness of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} skewness
*
* @example
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* @example
* var v = skewness( 4.0, 12.0 );
* // returns ~-0.087
*
* @example
* var v = skewness( 8.0, 2.0 );
* // returns ~-0.534
*
* @example
* var v = skewness( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = skewness( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = skewness( 2.0, NaN );
* // returns NaN
*
* @example
* var v = skewness( NaN, 2.0 );
* // returns NaN
*/
function __skewness_1594( k, lambda ) {
	var sigma2;
	var sigma;
	var out;
	var mu;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	mu = _$mean_1578( k, lambda );
	sigma2 = _$variance_1597( k, lambda);
	sigma = _$sqrt_437( sigma2 );
	out = _$gamma_247( 1.0 + ( 3.0/k ) ) * _$pow_396( lambda, 3.0 );
	out -= ( 3.0*mu*sigma2 ) + _$pow_396( mu, 3.0 );
	out /= _$pow_396( sigma, 3.0 );
	return out;
}


// EXPORTS //

var _$skewness_1594 = __skewness_1594;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution skewness.
*
* @module @stdlib/stats/base/dists/weibull/skewness
*
* @example
* var skewness = require( '@stdlib/stats/base/dists/weibull/skewness' );
*
* var v = skewness( 1.0, 1.0 );
* // returns 2.0
*
* v = skewness( 4.0, 12.0 );
* // returns ~-0.087
*
* v = skewness( 8.0, 2.0 );
* // returns ~-0.534
*/

// MODULES //

/* removed: var _$skewness_1594 = require( './skewness.js' ); */;


// EXPORTS //

var _$skewness_1593 = _$skewness_1594;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$sqrt_437 = require( '@stdlib/math/base/special/sqrt' ); */;


// MAIN //

/**
* Returns the standard deviation of a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {PositiveNumber} standard deviation
*
* @example
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* @example
* var v = stdev( 4.0, 12.0 );
* // returns ~3.051
*
* @example
* var v = stdev( 8.0, 2.0 );
* // returns ~0.279
*
* @example
* var v = stdev( 1.0, -0.1 );
* // returns NaN
*
* @example
* var v = stdev( -0.1, 1.0 );
* // returns NaN
*
* @example
* var v = stdev( 2.0, NaN );
* // returns NaN
*
* @example
* var v = stdev( NaN, 2.0 );
* // returns NaN
*/
function __stdev_1596( k, lambda ) {
	var g1k;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	g1k = _$gamma_247( 1.0 + ( 1.0/k ) );
	return lambda * _$sqrt_437( _$gamma_247( 1.0 + ( 2.0/k ) ) - ( g1k*g1k ) );
}


// EXPORTS //

var _$stdev_1596 = __stdev_1596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution standard deviation.
*
* @module @stdlib/stats/base/dists/weibull/stdev
*
* @example
* var stdev = require( '@stdlib/stats/base/dists/weibull/stdev' );
*
* var v = stdev( 1.0, 1.0 );
* // returns 1.0
*
* v = stdev( 4.0, 12.0 );
* // returns ~3.051
*
* v = stdev( 8.0, 2.0 );
* // returns ~0.279
*/

// MODULES //

/* removed: var _$stdev_1596 = require( './stdev.js' ); */;


// EXPORTS //

var _$stdev_1595 = _$stdev_1596;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} natural logarithm of CDF
*
* @example
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
*
* @example
* var y = logcdf( -1.0, 2.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( +Infinity, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = logcdf( -Infinity, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logcdf( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logcdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logcdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logcdf_1574( x, k, lambda ) {
	var p;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	p = -_$pow_396( x / lambda, k );
	return ( p < _$LN_HALF_95 ) ? _$log1p_380( -_$exp_225( p ) ) : _$ln_376( -_$expm1_228( p ) );
}


// EXPORTS //

var _$logcdf_1574 = __logcdf_1574;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$expm1_228 = require( '@stdlib/math/base/special/expm1' ); */;
/* removed: var _$log1p_380 = require( '@stdlib/math/base/special/log1p' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$LN_HALF_95 = require( '@stdlib/constants/math/float64-ln-half' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} logCDF
*
* @example
* var logcdf = factory( 2.0, 10.0 );
* var y = logcdf( 12.0 );
* // returns ~-0.27
*
* y = logcdf( 8.0 );
* // returns ~-0.749
*/
function __factory_1572( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return logcdf;

	/**
	* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logCDF
	*
	* @example
	* var y = logcdf( 2.0 );
	* // returns <number>
	*/
	function logcdf( x ) {
		var p;
		if ( _$isnan_130( x ) ) {
			return NaN;
		}
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		p = -_$pow_396( x / lambda, k );
		return ( p < _$LN_HALF_95 ) ? _$log1p_380( -_$exp_225( p ) ) : _$ln_376( -_$expm1_228( p ) );
	}
}


// EXPORTS //

var _$factory_1572 = __factory_1572;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution logarithm of cumulative distribution function (CDF).
*
* @module @stdlib/stats/base/dists/weibull/logcdf
*
* @example
* var logcdf = require( '@stdlib/stats/base/dists/weibull/logcdf' );
*
* var y = logcdf( 2.0, 1.0, 1.0 );
* // returns ~-0.145
*
* var mylogcdf = logcdf.factory( 2.0, 10.0 );
* y = mylogcdf( 12.0 );
* // returns ~-0.27
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logcdf_1574 = require( './logcdf.js' ); */;
/* removed: var _$factory_1572 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logcdf_1574, 'factory', _$factory_1572 );


// EXPORTS //

var _$logcdf_1573 = _$logcdf_1574;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated logarithm of probability density function
*
* @example
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.307
*
* @example
* var y = logpdf( 0.1, 1.0, 1.0 );
* // returns ~-0.1
*
* @example
* var y = logpdf( -1.0, 4.0, 2.0 );
* // returns -Infinity
*
* @example
* var y = logpdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = logpdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = logpdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __logpdf_1577( x, k, lambda ) {
	var xol;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x === _$FLOAT64_PINF_110 || x === _$FLOAT64_NINF_107 ) {
		return _$FLOAT64_NINF_107;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? _$ln_376( k/lambda ): _$FLOAT64_NINF_107;
	}
	xol = x / lambda;
	return _$ln_376( k / lambda ) + ( ( k - 1.0 ) * _$ln_376( xol ) ) - _$pow_396( xol, k );
}


// EXPORTS //

var _$logpdf_1577 = __logpdf_1577;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the logarithm of the probability density function
*
* @example
* var logpdf = factory( 7.0, 6.0 );
* var y = logpdf( 7.0 );
* // returns ~-1.863
*
* y = logpdf( 5.0 );
* // returns ~-1.219
*/
function __factory_1575( k, lambda ) {
	var lnkl;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	lnkl = _$ln_376( k / lambda );
	return logpdf;

	/**
	* Evaluates the natural logarithm of the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated logPDF
	*
	* @example
	* var y = logpdf( 2.3 );
	* // returns <number>
	*/
	function logpdf( x ) {
		var xol;
		if ( x < 0.0 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x === _$FLOAT64_PINF_110 || x === _$FLOAT64_NINF_107 ) {
			return _$FLOAT64_NINF_107;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? _$ln_376( k / lambda ) : _$FLOAT64_NINF_107;
		}
		xol = x / lambda;
		return lnkl + ( ( k - 1.0 ) * _$ln_376( xol ) ) - _$pow_396( xol, k );
	}
}


// EXPORTS //

var _$factory_1575 = __factory_1575;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution logarithm of probability density function (PDF).
*
* @module @stdlib/stats/base/dists/weibull/logpdf
*
* @example
* var logpdf = require( '@stdlib/stats/base/dists/weibull/logpdf' );
*
* var y = logpdf( 2.0, 1.0, 0.5 );
* // returns ~-3.297
*
* var mylogpdf = logpdf.factory( 7.0, 6.0 );
* y = mylogpdf( 7.0 );
* // returns ~-1.864
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$logpdf_1577 = require( './logpdf.js' ); */;
/* removed: var _$factory_1575 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$logpdf_1577, 'factory', _$factory_1575 );


// EXPORTS //

var _$logpdf_1576 = _$logpdf_1577;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// MAIN //

/**
* Evaluates the moment-generating function (MGF) for a Weibull distribution with shape `k` and scale `lambda` at a value `t`.
*
* @param {number} t - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated MGF
*
* @example
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
*
* @example
* var y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
*
* @example
* var y = mgf( NaN, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* var y = mgf( 0.2, -1.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.0, 0.5 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, -1.0 );
* // returns NaN
*
* @example
* var y = mgf( 0.2, 0.5, 0.0 );
* // returns NaN
*/
function __mgf_1584( t, k, lambda ) {
	var summand;
	var sum;
	var c;
	var n;

	if (
		_$isnan_130( t ) ||
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	sum = 1.0;
	c = 1.0;
	n = 0;
	do {
		n += 1;
		c *= ( t * lambda ) / n;
		if ( c === 0.0 ) {
			summand = 0.0;
		} else {
			summand = c * _$gamma_247( 1.0 + (n / k) );
		}
		sum += summand;
	} while ( summand / sum > _$FLOAT64_EPSILON_87 );
	return sum;
}


// EXPORTS //

var _$mgf_1584 = __mgf_1584;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$gamma_247 = require( '@stdlib/math/base/special/gamma' ); */;
/* removed: var _$FLOAT64_EPSILON_87 = require( '@stdlib/constants/math/float64-eps' ); */;


// MAIN //

/**
* Returns a function for evaluating the moment-generating function (MGF) of a Weibull distribution with shape `k` and scale `lambda`.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} MGF
*
* @example
* var mgf = factory( 8.0, 10.0 );
*
* var y = mgf( 0.8 );
* // returns ~3150.149
*
* y = mgf( 0.08 );
* // returns ~2.137
*/
function __factory_1582( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return mgf;

	/**
	* Evaluates the moment-generating function (MGF) for a Weibull distribution.
	*
	* @private
	* @param {number} t - input value
	* @returns {number} evaluated MGF
	*
	* @example
	* var y = mgf( 0.5 );
	* // returns <number>
	*/
	function mgf( t ) {
		var summand;
		var sum;
		var c;
		var n;

		if ( _$isnan_130( t ) ) {
			return NaN;
		}
		sum = 1.0;
		c = 1.0;
		n = 0;
		do {
			n += 1;
			c *= ( t * lambda ) / n;
			if ( c === 0.0 ) {
				summand = 0.0;
			} else {
				summand = c * _$gamma_247( 1.0 + (n / k) );
			}
			sum += summand;
		} while ( summand / sum > _$FLOAT64_EPSILON_87 );
		return sum;
	}
}


// EXPORTS //

var _$factory_1582 = __factory_1582;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the moment-generating function (MGF) for a Weibull distribution.
*
* @module @stdlib/stats/base/dists/weibull/mgf
*
* @example
* var mgf = require( '@stdlib/stats/base/dists/weibull/mgf' );
*
* var y = mgf( 1.0, 1.0, 0.5 );
* // returns ~2.0
*
* y = mgf( -1.0, 4.0, 4.0 );
* // returns ~0.019
*
* var myMGF = mgf.factory( 8.0, 10.0 );
*
* y = myMGF( 0.8 );
* // returns ~3150.149
*
* y = myMGF( 0.08 );
* // returns ~2.137s
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$mgf_1584 = require( './mgf.js' ); */;
/* removed: var _$factory_1582 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$mgf_1584, 'factory', _$factory_1582 );


// EXPORTS //

var _$mgf_1583 = _$mgf_1584;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Evaluates the probability density function (PDF) for a Weibull distribution with shape parameter `k` and scale parameter `lambda` at a value `x`.
*
* @param {number} x - input value
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
*
* @example
* var y = pdf( 0.1, 1.0, 1.0 );
* // returns ~0.905
*
* @example
* var y = pdf( -1.0, 4.0, 2.0 );
* // returns 0.0
*
* @example
* var y = pdf( NaN, 0.6, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = pdf( 2.0, 0.0, -1.0 );
* // returns NaN
*/
function __pdf_1589( x, k, lambda ) {
	var xol;
	var z;
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return NaN;
	}
	if ( x < 0.0 ) {
		return 0.0;
	}
	if ( x === _$FLOAT64_PINF_110 || x === _$FLOAT64_NINF_107 ) {
		return 0.0;
	}
	if ( x === 0.0 ) {
		return ( k === 1.0 ) ? k/lambda : 0.0;
	}
	xol = x / lambda;
	z = _$pow_396( xol, k - 1.0 );
	return ( k / lambda ) * z * _$exp_225( -_$pow_396( xol, k ) );
}


// EXPORTS //

var _$pdf_1589 = __pdf_1589;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$exp_225 = require( '@stdlib/math/base/special/exp' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;
/* removed: var _$FLOAT64_PINF_110 = require( '@stdlib/constants/math/float64-pinf' ); */;
/* removed: var _$FLOAT64_NINF_107 = require( '@stdlib/constants/math/float64-ninf' ); */;


// MAIN //

/**
* Returns a function for evaluating the probability density function (PDF) for a Weibull distribution.
*
* @param {PositiveNumber} k - shape parameter
* @param {PositiveNumber} lambda - scale parameter
* @returns {Function} function to evaluate the probability density function
*
* @example
* var pdf = factory( 7.0, 6.0 );
* var y = pdf( 7.0 );
* // returns ~0.155
*
* y = pdf( 5.0 );
* // returns ~0.296
*/
function __factory_1587( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return pdf;

	/**
	* Evaluates the probability density function (PDF) for a Weibull distribution.
	*
	* @private
	* @param {number} x - input value
	* @returns {number} evaluated PDF
	*
	* @example
	* var y = pdf( 2.3 );
	* // returns <number>
	*/
	function pdf( x ) {
		var xol;
		var z;
		if ( x < 0.0 ) {
			return 0.0;
		}
		if ( x === _$FLOAT64_PINF_110 || x === _$FLOAT64_NINF_107 ) {
			return 0.0;
		}
		if ( x === 0.0 ) {
			return ( k === 1.0 ) ? k / lambda : 0.0;
		}
		xol = x / lambda;
		z = _$pow_396( xol, k - 1.0 );
		return ( k / lambda ) * z * _$exp_225( -_$pow_396( xol, k ) );
	}
}


// EXPORTS //

var _$factory_1587 = __factory_1587;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution probability density function (PDF).
*
* @module @stdlib/stats/base/dists/weibull/pdf
*
* @example
* var pdf = require( '@stdlib/stats/base/dists/weibull/pdf' );
*
* var y = pdf( 2.0, 1.0, 0.5 );
* // returns ~0.037
*
* var myPDF = pdf.factory( 7.0, 6.0 );
* y = myPDF( 7.0 );
* // returns ~0.155
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$pdf_1589 = require( './pdf.js' ); */;
/* removed: var _$factory_1587 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$pdf_1589, 'factory', _$factory_1587 );


// EXPORTS //

var _$pdf_1588 = _$pdf_1589;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Evaluates the quantile function for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a probability `p`.
*
* @param {Probability} p - input value
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {number} evaluated quantile function
*
* @example
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* @example
* var y = quantile( 0.5, 2.0, 4.0 );
* // returns ~3.33
*
* @example
* var y = quantile( 1.1, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( -0.2, 1.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( NaN, 0.0, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, NaN, 1.0 );
* // returns NaN
*
* @example
* var y = quantile( 0.0, 0.0, NaN );
* // returns NaN
*
* @example
* var y = quantile( 0.5, 1.0, -1.0 );
* // returns NaN
*/
function __quantile_1592( p, k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		_$isnan_130( p ) ||
		k <= 0.0 ||
		lambda <= 0.0 ||
		p < 0.0 ||
		p > 1.0
	) {
		return NaN;
	}
	return lambda * _$pow_396( -_$ln_376( 1.0 - p ), 1.0/k );
}


// EXPORTS //

var _$quantile_1592 = __quantile_1592;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

/* removed: var _$constantFunction_1600 = require( '@stdlib/utils/constant-function' ); */;
/* removed: var _$ln_376 = require( '@stdlib/math/base/special/ln' ); */;
/* removed: var _$pow_396 = require( '@stdlib/math/base/special/pow' ); */;
/* removed: var _$isnan_130 = require( '@stdlib/math/base/assert/is-nan' ); */;


// MAIN //

/**
* Returns a function for evaluating the quantile function for a Weibull distribution.
*
* @param {PositiveNumber} k - scale parameter
* @param {PositiveNumber} lambda - shape parameter
* @returns {Function} quantile function
*
* @example
* var quantile = factory( 2.0, 10.0 );
* var y = quantile( 0.4 );
* // returns ~7.147
*
* y = quantile( 0.8 );
* // returns ~12.686
*/
function __factory_1590( k, lambda ) {
	if (
		_$isnan_130( k ) ||
		_$isnan_130( lambda ) ||
		k <= 0.0 ||
		lambda <= 0.0
	) {
		return _$constantFunction_1600( NaN );
	}
	return quantile;

	/**
	* Evaluates the quantile function for a Weibull distribution.
	*
	* @private
	* @param {Probability} p - input value
	* @returns {number} evaluated quantile function
	*
	* @example
	* var y = quantile( 0.3 );
	* // returns <number>
	*/
	function quantile( p ) {
		if ( _$isnan_130( p ) || p < 0.0 || p > 1.0 ) {
			return NaN;
		}
		return lambda * _$pow_396( -_$ln_376( 1.0 - p ), 1.0/k );
	}
}


// EXPORTS //

var _$factory_1590 = __factory_1590;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution quantile function.
*
* @module @stdlib/stats/base/dists/weibull/quantile
*
* @example
* var quantile = require( '@stdlib/stats/base/dists/weibull/quantile' );
*
* var y = quantile( 0.8, 1.0, 1.0 );
* // returns ~1.609
*
* var myQuantile = quantile.factory( 2.0, 10.0 );
* y = myQuantile( 0.4 );
* // returns ~7.147
*/

// MODULES //

/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$quantile_1592 = require( './quantile.js' ); */;
/* removed: var _$factory_1590 = require( './factory.js' ); */;


// MAIN //

_$setNonEnumerableReadOnly_1603( _$quantile_1592, 'factory', _$factory_1590 );


// EXPORTS //

var _$quantile_1591 = _$quantile_1592;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

/* removed: var _$defineProperty_1606 = require( '@stdlib/utils/define-property' ); */;
/* removed: var _$setNonEnumerableReadOnly_1603 = require( '@stdlib/utils/define-nonenumerable-read-only-property' ); */;
/* removed: var _$setNonEnumerableReadOnlyAccessor_1601 = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' ); */;
var __isPositive_1566 = _$isPositiveNumber_70.isPrimitive;
/* removed: var _$entropy_1569 = require( '@stdlib/stats/base/dists/weibull/entropy' ); */;
/* removed: var _$kurtosis_1570 = require( '@stdlib/stats/base/dists/weibull/kurtosis' ); */;
/* removed: var _$mean_1578 = require( '@stdlib/stats/base/dists/weibull/mean' ); */;
/* removed: var _$median_1580 = require( '@stdlib/stats/base/dists/weibull/median' ); */;
/* removed: var _$mode_1585 = require( '@stdlib/stats/base/dists/weibull/mode' ); */;
/* removed: var _$skewness_1593 = require( '@stdlib/stats/base/dists/weibull/skewness' ); */;
/* removed: var _$stdev_1595 = require( '@stdlib/stats/base/dists/weibull/stdev' ); */;
/* removed: var _$variance_1597 = require( '@stdlib/stats/base/dists/weibull/variance' ); */;
/* removed: var _$cdf_1565 = require( '@stdlib/stats/base/dists/weibull/cdf' ); */;
/* removed: var _$logcdf_1573 = require( '@stdlib/stats/base/dists/weibull/logcdf' ); */;
/* removed: var _$logpdf_1576 = require( '@stdlib/stats/base/dists/weibull/logpdf' ); */;
/* removed: var _$mgf_1583 = require( '@stdlib/stats/base/dists/weibull/mgf' ); */;
/* removed: var _$pdf_1588 = require( '@stdlib/stats/base/dists/weibull/pdf' ); */;
/* removed: var _$quantile_1591 = require( '@stdlib/stats/base/dists/weibull/quantile' ); */;


// FUNCTIONS //

/**
* Evaluates the cumulative distribution function (CDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated CDF
*/
function weibullCDF( x ) {
	return _$cdf_1565( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logCDF
*/
function weibullLogCDF( x ) {
	return _$logcdf_1573( x, this.k, this.lambda );
}

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated logPDF
*/
function weibullLogPDF( x ) {
	return _$logpdf_1576( x, this.k, this.lambda );
}

/**
* Evaluates the moment-generating function (MGF).
*
* @private
* @param {number} t - input value
* @returns {number} evaluated MGF
*/
function weibullMGF( t ) {
	return _$mgf_1583( t, this.k, this.lambda );
}

/**
* Evaluates the probability density function (PDF).
*
* @private
* @param {number} x - input value
* @returns {number} evaluated PDF
*/
function weibullPDF( x ) {
	return _$pdf_1588( x, this.k, this.lambda );
}

/**
* Evaluates the quantile function.
*
* @private
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
*/
function weibullQuantile( p ) {
	return _$quantile_1591( p, this.k, this.lambda );
}


// MAIN //

/**
* Weibull distribution constructor.
*
* @constructor
* @param {PositiveNumber} [k=1.0] - shape parameter
* @param {PositiveNumber} [lambda=1.0] - scale parameter
* @throws {TypeError} `k` must be a positive number
* @throws {TypeError} `lambda` must be a positive number
* @returns {Weibull} distribution instance
*
* @example
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var v = weibull.mode;
* // returns 0.0
*/
function Weibull() {
	var lambda;
	var k;
	if ( !(this instanceof Weibull) ) {
		if ( arguments.length === 0 ) {
			return new Weibull();
		}
		return new Weibull( arguments[ 0 ], arguments[ 1 ] );
	}
	if ( arguments.length ) {
		k = arguments[ 0 ];
		lambda = arguments[ 1 ];
		if ( !__isPositive_1566( k ) ) {
			throw new TypeError( 'invalid argument. Shape parameter `k` must be a positive number. Value: `' + k + '`' );
		}
		if ( !__isPositive_1566( lambda ) ) {
			throw new TypeError( 'invalid argument. Scale parameter `lambda` must be a positive number. Value: `' + lambda + '`' );
		}
	} else {
		k = 1.0;
		lambda = 1.0;
	}
	_$defineProperty_1606( this, 'k', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return k;
		},
		'set': function set( value ) {
			if ( !__isPositive_1566( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			k = value;
		}
	});
	_$defineProperty_1606( this, 'lambda', {
		'configurable': false,
		'enumerable': true,
		'get': function get() {
			return lambda;
		},
		'set': function set( value ) {
			if ( !__isPositive_1566( value ) ) {
				throw new TypeError( 'invalid value. Must be a positive number. Value: `' + value + '`' );
			}
			lambda = value;
		}
	});
	return this;
}

/**
* Weibull distribution differential entropy.
*
* @name entropy
* @memberof Weibull.prototype
* @type {number}
* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.entropy;
* // returns ~2.532
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'entropy', function get() {
	return _$entropy_1569( this.k, this.lambda );
});

/**
* Weibull distribution excess kurtosis.
*
* @name kurtosis
* @memberof Weibull.prototype
* @type {number}
* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.kurtosis;
* // returns ~-0.252
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'kurtosis', function get() {
	return _$kurtosis_1570( this.k, this.lambda );
});

/**
* Weibull distribution expected value.
*
* @name mean
* @memberof Weibull.prototype
* @type {number}
* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mean;
* // returns ~10.877
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'mean', function get() {
	return _$mean_1578( this.k, this.lambda );
});

/**
* Weibull distribution median.
*
* @name median
* @memberof Weibull.prototype
* @type {number}
* @see [median]{@link https://en.wikipedia.org/wiki/Median}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.median;
* // returns ~10.949
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'median', function get() {
	return _$median_1580( this.k, this.lambda );
});

/**
* Weibull distribution mode.
*
* @name mode
* @memberof Weibull.prototype
* @type {number}
* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.mode;
* // returns ~11.167
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'mode', function get() {
	return _$mode_1585( this.k, this.lambda );
});

/**
* Weibull distribution skewness.
*
* @name skewness
* @memberof Weibull.prototype
* @type {number}
* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.skewness;
* // returns ~-0.087
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'skewness', function get() {
	return _$skewness_1593( this.k, this.lambda );
});

/**
* Weibull distribution standard deviation.
*
* @name stdev
* @memberof Weibull.prototype
* @type {PositiveNumber}
* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.stdev;
* // returns ~3.051
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'stdev', function get() {
	return _$stdev_1595( this.k, this.lambda );
});

/**
* Weibull distribution variance.
*
* @name variance
* @memberof Weibull.prototype
* @type {PositiveNumber}
* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}
*
* @example
* var weibull = new Weibull( 4.0, 12.0 );
*
* var v = weibull.variance;
* // returns ~9.311
*/
_$setNonEnumerableReadOnlyAccessor_1601( Weibull.prototype, 'variance', function get() {
	return _$variance_1597( this.k, this.lambda );
});

/**
* Evaluates the cumulative distribution function (CDF).
*
* @name cdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated CDF
* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.cdf( 0.5 );
* // returns ~0.016
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'cdf', weibullCDF );

/**
* Evaluates the natural logarithm of the cumulative distribution function (logCDF).
*
* @name logcdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logCDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logcdf( 0.8 );
* // returns ~-3.239
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'logcdf', weibullLogCDF );

/**
* Evaluates the natural logarithm of the probability density function (logPDF).
*
* @name logpdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated logPDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.logpdf( 0.8 );
* // returns ~-2.343
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'logpdf', weibullLogPDF );

/**
* Evaluates the moment-generating function (MGF).
*
* @name mgf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} t - input value
* @returns {number} evaluated MGF
* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.mgf( 0.5 );
* // returns ~9.878
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'mgf', weibullMGF );

/**
* Evaluates the probability density function (PDF).
*
* @name pdf
* @memberof Weibull.prototype
* @type {Function}
* @param {number} x - input value
* @returns {number} evaluated PDF
* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.pdf( 2.0 );
* // returns ~0.195
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'pdf', weibullPDF );

/**
* Evaluates the quantile function.
*
* @name quantile
* @memberof Weibull.prototype
* @type {Function}
* @param {Probability} p - input probability
* @returns {number} evaluated quantile function
* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}
*
* @example
* var weibull = new Weibull( 2.0, 4.0 );
*
* var v = weibull.quantile( 0.5 );
* // returns ~3.33
*/
_$setNonEnumerableReadOnly_1603( Weibull.prototype, 'quantile', weibullQuantile );


// EXPORTS //

var _$Weibull_1566 = Weibull;

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Weibull distribution constructor.
*
* @module @stdlib/stats/base/dists/weibull/ctor
*
* @example
* var Weibull = require( '@stdlib/stats/base/dists/weibull/ctor' );
*
* var weibull = new Weibull( 1.0, 1.0 );
*
* var y = weibull.cdf( 0.8 );
* // returns ~0.551
*
* var mode = weibull.mode;
* // returns 0.0
*/

// MODULES //

/* removed: var _$Weibull_1566 = require( './ctor.js' ); */;


// EXPORTS //

var _$ctor_1567 = _$Weibull_1566;

"use strict";

/* removed: var _$setReadOnly_1608 = require('@stdlib/utils/define-read-only-property'); */;

var ns = {};
_$setReadOnly_1608(ns,'base',{});
_$setReadOnly_1608(ns['base'],'dists',{});
_$setReadOnly_1608(ns['base']['dists'],'arcsine',{});
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'cdf',_$cdf_483);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'Arcsine',_$ctor_485);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'entropy',_$entropy_487);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'kurtosis',_$kurtosis_489);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'logcdf',_$logcdf_492);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'logpdf',_$logpdf_495);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'mean',_$mean_497);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'median',_$median_499);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'mode',_$mode_501);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'pdf',_$pdf_504);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'quantile',_$quantile_507);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'skewness',_$skewness_509);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'stdev',_$stdev_511);
_$setReadOnly_1608(ns['base']['dists']['arcsine'],'variance',_$variance_513);
_$setReadOnly_1608(ns['base']['dists'],'bernoulli',{});
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'cdf',_$cdf_517);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'Bernoulli',_$ctor_519);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'entropy',_$entropy_521);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'kurtosis',_$kurtosis_522);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'mean',_$mean_524);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'median',_$median_526);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'mgf',_$mgf_529);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'mode',_$mode_531);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'pmf',_$pmf_534);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'quantile',_$quantile_537);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'skewness',_$skewness_539);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'stdev',_$stdev_541);
_$setReadOnly_1608(ns['base']['dists']['bernoulli'],'variance',_$variance_543);
_$setReadOnly_1608(ns['base']['dists'],'beta',{});
_$setReadOnly_1608(ns['base']['dists']['beta'],'cdf',_$cdf_547);
_$setReadOnly_1608(ns['base']['dists']['beta'],'Beta',_$ctor_549);
_$setReadOnly_1608(ns['base']['dists']['beta'],'entropy',_$entropy_551);
_$setReadOnly_1608(ns['base']['dists']['beta'],'kurtosis',_$kurtosis_552);
_$setReadOnly_1608(ns['base']['dists']['beta'],'logcdf',_$logcdf_555);
_$setReadOnly_1608(ns['base']['dists']['beta'],'logpdf',_$logpdf_558);
_$setReadOnly_1608(ns['base']['dists']['beta'],'mean',_$mean_560);
_$setReadOnly_1608(ns['base']['dists']['beta'],'median',_$median_562);
_$setReadOnly_1608(ns['base']['dists']['beta'],'mgf',_$mgf_566);
_$setReadOnly_1608(ns['base']['dists']['beta'],'mode',_$mode_568);
_$setReadOnly_1608(ns['base']['dists']['beta'],'pdf',_$pdf_571);
_$setReadOnly_1608(ns['base']['dists']['beta'],'quantile',_$quantile_574);
_$setReadOnly_1608(ns['base']['dists']['beta'],'skewness',_$skewness_576);
_$setReadOnly_1608(ns['base']['dists']['beta'],'stdev',_$stdev_578);
_$setReadOnly_1608(ns['base']['dists']['beta'],'variance',_$variance_580);
_$setReadOnly_1608(ns['base']['dists'],'betaprime',{});
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'cdf',_$cdf_584);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'BetaPrime',_$ctor_586);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'kurtosis',_$kurtosis_587);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'logcdf',_$logcdf_590);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'logpdf',_$logpdf_593);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'mean',_$mean_595);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'mode',_$mode_597);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'pdf',_$pdf_600);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'quantile',_$quantile_603);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'skewness',_$skewness_605);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'stdev',_$stdev_607);
_$setReadOnly_1608(ns['base']['dists']['betaprime'],'variance',_$variance_609);
_$setReadOnly_1608(ns['base']['dists'],'binomial',{});
_$setReadOnly_1608(ns['base']['dists']['binomial'],'cdf',_$cdf_613);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'Binomial',_$ctor_615);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'entropy',_$entropy_617);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'kurtosis',_$kurtosis_618);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'logpmf',_$logpmf_621);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'mean',_$mean_623);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'median',_$median_625);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'mgf',_$mgf_628);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'mode',_$mode_630);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'pmf',_$pmf_633);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'quantile',_$quantile_636);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'skewness',_$skewness_640);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'stdev',_$stdev_642);
_$setReadOnly_1608(ns['base']['dists']['binomial'],'variance',_$variance_644);
_$setReadOnly_1608(ns['base']['dists'],'cauchy',{});
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'cdf',_$cdf_648);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'Cauchy',_$ctor_650);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'entropy',_$entropy_652);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'logcdf',_$logcdf_654);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'logpdf',_$logpdf_657);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'median',_$median_659);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'mode',_$mode_661);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'pdf',_$pdf_664);
_$setReadOnly_1608(ns['base']['dists']['cauchy'],'quantile',_$quantile_667);
_$setReadOnly_1608(ns['base']['dists'],'chi',{});
_$setReadOnly_1608(ns['base']['dists']['chi'],'cdf',_$cdf_671);
_$setReadOnly_1608(ns['base']['dists']['chi'],'Chi',_$ctor_673);
_$setReadOnly_1608(ns['base']['dists']['chi'],'entropy',_$entropy_675);
_$setReadOnly_1608(ns['base']['dists']['chi'],'kurtosis',_$kurtosis_676);
_$setReadOnly_1608(ns['base']['dists']['chi'],'logpdf',_$logpdf_679);
_$setReadOnly_1608(ns['base']['dists']['chi'],'mean',_$mean_681);
_$setReadOnly_1608(ns['base']['dists']['chi'],'mode',_$mode_683);
_$setReadOnly_1608(ns['base']['dists']['chi'],'pdf',_$pdf_686);
_$setReadOnly_1608(ns['base']['dists']['chi'],'quantile',_$quantile_689);
_$setReadOnly_1608(ns['base']['dists']['chi'],'skewness',_$skewness_691);
_$setReadOnly_1608(ns['base']['dists']['chi'],'stdev',_$stdev_693);
_$setReadOnly_1608(ns['base']['dists']['chi'],'variance',_$variance_695);
_$setReadOnly_1608(ns['base']['dists'],'chisquare',{});
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'cdf',_$cdf_699);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'ChiSquare',_$ctor_701);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'entropy',_$entropy_703);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'kurtosis',_$kurtosis_704);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'logpdf',_$logpdf_707);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'mean',_$mean_709);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'mgf',_$mgf_712);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'mode',_$mode_714);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'pdf',_$pdf_717);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'quantile',_$quantile_720);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'skewness',_$skewness_722);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'stdev',_$stdev_724);
_$setReadOnly_1608(ns['base']['dists']['chisquare'],'variance',_$variance_726);
_$setReadOnly_1608(ns['base']['dists'],'cosine',{});
_$setReadOnly_1608(ns['base']['dists']['cosine'],'cdf',_$cdf_730);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'Cosine',_$ctor_732);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'kurtosis',_$kurtosis_733);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'logcdf',_$logcdf_736);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'logpdf',_$logpdf_739);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'mean',_$mean_741);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'median',_$median_743);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'mgf',_$mgf_746);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'mode',_$mode_748);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'pdf',_$pdf_751);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'quantile',_$quantile_755);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'skewness',_$skewness_757);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'stdev',_$stdev_759);
_$setReadOnly_1608(ns['base']['dists']['cosine'],'variance',_$variance_761);
_$setReadOnly_1608(ns['base']['dists'],'degenerate',{});
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'cdf',_$cdf_765);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'Degenerate',_$ctor_767);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'entropy',_$entropy_769);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'logcdf',_$logcdf_771);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'logpdf',_$logpdf_774);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'logpmf',_$logpmf_777);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'mean',_$mean_779);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'median',_$median_781);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'mgf',_$mgf_784);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'mode',_$mode_786);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'pdf',_$pdf_789);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'pmf',_$pmf_792);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'quantile',_$quantile_795);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'stdev',_$stdev_797);
_$setReadOnly_1608(ns['base']['dists']['degenerate'],'variance',_$variance_799);
_$setReadOnly_1608(ns['base']['dists'],'discreteUniform',{});
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'cdf',_$cdf_803);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'DiscreteUniform',_$ctor_805);
_$setReadOnly_1608(ns,'entropy',_$entropy_807);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'kurtosis',_$kurtosis_808);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'logcdf',_$logcdf_811);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'logpmf',_$logpmf_814);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'mean',_$mean_816);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'median',_$median_818);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'mgf',_$mgf_821);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'pmf',_$pmf_824);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'quantile',_$quantile_827);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'skewness',_$skewness_829);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'stdev',_$stdev_831);
_$setReadOnly_1608(ns['base']['dists']['discreteUniform'],'variance',_$variance_833);
_$setReadOnly_1608(ns['base']['dists'],'erlang',{});
_$setReadOnly_1608(ns['base']['dists']['erlang'],'cdf',_$cdf_837);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'Erlang',_$ctor_839);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'entropy',_$entropy_841);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'kurtosis',_$kurtosis_842);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'logpdf',_$logpdf_845);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'mean',_$mean_847);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'mgf',_$mgf_850);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'mode',_$mode_852);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'pdf',_$pdf_855);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'quantile',_$quantile_858);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'skewness',_$skewness_860);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'stdev',_$stdev_862);
_$setReadOnly_1608(ns['base']['dists']['erlang'],'variance',_$variance_864);
_$setReadOnly_1608(ns['base']['dists'],'exponential',{});
_$setReadOnly_1608(ns['base']['dists']['exponential'],'cdf',_$cdf_868);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'Exponential',_$ctor_870);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'entropy',_$entropy_872);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'kurtosis',_$kurtosis_873);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'logcdf',_$logcdf_876);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'logpdf',_$logpdf_879);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'mean',_$mean_881);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'median',_$median_883);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'mgf',_$mgf_886);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'mode',_$mode_888);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'pdf',_$pdf_891);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'quantile',_$quantile_894);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'skewness',_$skewness_896);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'stdev',_$stdev_898);
_$setReadOnly_1608(ns['base']['dists']['exponential'],'variance',_$variance_900);
_$setReadOnly_1608(ns['base']['dists'],'f',{});
_$setReadOnly_1608(ns['base']['dists']['f'],'cdf',_$cdf_904);
_$setReadOnly_1608(ns['base']['dists']['f'],'F',_$ctor_906);
_$setReadOnly_1608(ns['base']['dists']['f'],'entropy',_$entropy_908);
_$setReadOnly_1608(ns['base']['dists']['f'],'kurtosis',_$kurtosis_909);
_$setReadOnly_1608(ns['base']['dists']['f'],'mean',_$mean_911);
_$setReadOnly_1608(ns['base']['dists']['f'],'mode',_$mode_913);
_$setReadOnly_1608(ns['base']['dists']['f'],'pdf',_$pdf_918);
_$setReadOnly_1608(ns['base']['dists']['f'],'quantile',_$quantile_921);
_$setReadOnly_1608(ns['base']['dists']['f'],'skewness',_$skewness_923);
_$setReadOnly_1608(ns['base']['dists']['f'],'stdev',_$stdev_925);
_$setReadOnly_1608(ns['base']['dists']['f'],'variance',_$variance_927);
_$setReadOnly_1608(ns['base']['dists'],'frechet',{});
_$setReadOnly_1608(ns['base']['dists']['frechet'],'cdf',_$cdf_931);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'Frechet',_$ctor_933);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'entropy',_$entropy_935);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'kurtosis',_$kurtosis_936);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'logcdf',_$logcdf_939);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'logpdf',_$logpdf_942);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'mean',_$mean_944);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'median',_$median_946);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'mode',_$mode_948);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'pdf',_$pdf_951);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'quantile',_$quantile_954);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'skewness',_$skewness_956);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'stdev',_$stdev_958);
_$setReadOnly_1608(ns['base']['dists']['frechet'],'variance',_$variance_960);
_$setReadOnly_1608(ns['base']['dists'],'gamma',{});
_$setReadOnly_1608(ns['base']['dists']['gamma'],'cdf',_$cdf_964);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'Gamma',_$ctor_966);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'entropy',_$entropy_968);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'kurtosis',_$kurtosis_969);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'logpdf',_$logpdf_973);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'mean',_$mean_976);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'mgf',_$mgf_979);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'mode',_$mode_981);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'pdf',_$pdf_985);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'quantile',_$quantile_989);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'skewness',_$skewness_991);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'stdev',_$stdev_993);
_$setReadOnly_1608(ns['base']['dists']['gamma'],'variance',_$variance_995);
_$setReadOnly_1608(ns['base']['dists'],'geometric',{});
_$setReadOnly_1608(ns['base']['dists']['geometric'],'cdf',_$cdf_999);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'Geometric',_$ctor_1001);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'entropy',_$entropy_1003);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'kurtosis',_$kurtosis_1004);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'logcdf',_$logcdf_1007);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'logpmf',_$logpmf_1010);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'mean',_$mean_1012);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'median',_$median_1014);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'mgf',_$mgf_1017);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'mode',_$mode_1019);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'pmf',_$pmf_1022);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'quantile',_$quantile_1025);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'skewness',_$skewness_1027);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'stdev',_$stdev_1029);
_$setReadOnly_1608(ns['base']['dists']['geometric'],'variance',_$variance_1031);
_$setReadOnly_1608(ns['base']['dists'],'gumbel',{});
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'cdf',_$cdf_1035);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'Gumbel',_$ctor_1037);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'entropy',_$entropy_1039);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'kurtosis',_$kurtosis_1040);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'logcdf',_$logcdf_1043);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'logpdf',_$logpdf_1046);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'mean',_$mean_1048);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'median',_$median_1050);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'mgf',_$mgf_1053);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'mode',_$mode_1055);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'pdf',_$pdf_1058);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'quantile',_$quantile_1061);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'skewness',_$skewness_1063);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'stdev',_$stdev_1065);
_$setReadOnly_1608(ns['base']['dists']['gumbel'],'variance',_$variance_1067);
_$setReadOnly_1608(ns['base']['dists'],'hypergeometric',{});
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'cdf',_$cdf_1071);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'Hypergeometric',_$ctor_1074);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'kurtosis',_$kurtosis_1075);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'logpmf',_$logpmf_1078);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'mean',_$mean_1080);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'mode',_$mode_1082);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'pmf',_$pmf_1085);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'quantile',_$quantile_1088);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'skewness',_$skewness_1090);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'stdev',_$stdev_1092);
_$setReadOnly_1608(ns['base']['dists']['hypergeometric'],'variance',_$variance_1094);
_$setReadOnly_1608(ns['base']['dists'],'invgamma',{});
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'cdf',_$cdf_1098);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'InvGamma',_$ctor_1100);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'entropy',_$entropy_1102);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'kurtosis',_$kurtosis_1103);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'logpdf',_$logpdf_1106);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'mean',_$mean_1108);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'mode',_$mode_1110);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'pdf',_$pdf_1113);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'quantile',_$quantile_1116);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'skewness',_$skewness_1118);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'stdev',_$stdev_1120);
_$setReadOnly_1608(ns['base']['dists']['invgamma'],'variance',_$variance_1122);
_$setReadOnly_1608(ns['base']['dists'],'kumaraswamy',{});
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'cdf',_$cdf_1126);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'Kumaraswamy',_$ctor_1128);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'kurtosis',_$kurtosis_1129);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'logcdf',_$logcdf_1132);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'logpdf',_$logpdf_1135);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'mean',_$mean_1137);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'median',_$median_1139);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'mode',_$mode_1141);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'pdf',_$pdf_1144);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'quantile',_$quantile_1147);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'skewness',_$skewness_1149);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'stdev',_$stdev_1151);
_$setReadOnly_1608(ns['base']['dists']['kumaraswamy'],'variance',_$variance_1153);
_$setReadOnly_1608(ns['base']['dists'],'laplace',{});
_$setReadOnly_1608(ns['base']['dists']['laplace'],'cdf',_$cdf_1157);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'Laplace',_$ctor_1159);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'entropy',_$entropy_1161);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'kurtosis',_$kurtosis_1162);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'logcdf',_$logcdf_1165);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'logpdf',_$logpdf_1168);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'mean',_$mean_1170);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'median',_$median_1172);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'mgf',_$mgf_1175);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'mode',_$mode_1177);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'pdf',_$pdf_1180);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'quantile',_$quantile_1183);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'skewness',_$skewness_1185);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'stdev',_$stdev_1187);
_$setReadOnly_1608(ns['base']['dists']['laplace'],'variance',_$variance_1189);
_$setReadOnly_1608(ns['base']['dists'],'levy',{});
_$setReadOnly_1608(ns['base']['dists']['levy'],'cdf',_$cdf_1193);
_$setReadOnly_1608(ns['base']['dists']['levy'],'Levy',_$ctor_1195);
_$setReadOnly_1608(ns['base']['dists']['levy'],'entropy',_$entropy_1197);
_$setReadOnly_1608(ns['base']['dists']['levy'],'logcdf',_$logcdf_1199);
_$setReadOnly_1608(ns['base']['dists']['levy'],'logpdf',_$logpdf_1202);
_$setReadOnly_1608(ns['base']['dists']['levy'],'mean',_$mean_1204);
_$setReadOnly_1608(ns['base']['dists']['levy'],'median',_$median_1206);
_$setReadOnly_1608(ns['base']['dists']['levy'],'mode',_$mode_1208);
_$setReadOnly_1608(ns['base']['dists']['levy'],'pdf',_$pdf_1211);
_$setReadOnly_1608(ns['base']['dists']['levy'],'quantile',_$quantile_1214);
_$setReadOnly_1608(ns['base']['dists']['levy'],'stdev',_$stdev_1216);
_$setReadOnly_1608(ns['base']['dists']['levy'],'variance',_$variance_1218);
_$setReadOnly_1608(ns['base']['dists'],'logistic',{});
_$setReadOnly_1608(ns['base']['dists']['logistic'],'cdf',_$cdf_1222);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'Logistic',_$ctor_1224);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'entropy',_$entropy_1226);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'kurtosis',_$kurtosis_1227);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'logcdf',_$logcdf_1230);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'logpdf',_$logpdf_1234);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'mean',_$mean_1236);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'median',_$median_1238);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'mgf',_$mgf_1241);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'mode',_$mode_1243);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'pdf',_$pdf_1246);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'quantile',_$quantile_1249);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'skewness',_$skewness_1251);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'stdev',_$stdev_1253);
_$setReadOnly_1608(ns['base']['dists']['logistic'],'variance',_$variance_1255);
_$setReadOnly_1608(ns['base']['dists'],'lognormal',{});
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'cdf',_$cdf_1259);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'LogNormal',_$ctor_1261);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'entropy',_$entropy_1263);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'kurtosis',_$kurtosis_1264);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'logpdf',_$logpdf_1267);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'mean',_$mean_1269);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'median',_$median_1271);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'mode',_$mode_1273);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'pdf',_$pdf_1276);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'quantile',_$quantile_1279);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'skewness',_$skewness_1281);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'stdev',_$stdev_1283);
_$setReadOnly_1608(ns['base']['dists']['lognormal'],'variance',_$variance_1285);
_$setReadOnly_1608(ns['base']['dists'],'negativeBinomial',{});
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'cdf',_$cdf_1289);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'NegativeBinomial',_$ctor_1291);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'kurtosis',_$kurtosis_1292);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'logpmf',_$logpmf_1297);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'mean',_$mean_1299);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'mgf',_$mgf_1302);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'mode',_$mode_1304);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'pmf',_$pmf_1309);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'quantile',_$quantile_1312);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'skewness',_$skewness_1315);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'stdev',_$stdev_1317);
_$setReadOnly_1608(ns['base']['dists']['negativeBinomial'],'variance',_$variance_1319);
_$setReadOnly_1608(ns['base']['dists'],'normal',{});
_$setReadOnly_1608(ns['base']['dists']['normal'],'cdf',_$cdf_1323);
_$setReadOnly_1608(ns['base']['dists']['normal'],'Normal',_$ctor_1325);
_$setReadOnly_1608(ns['base']['dists']['normal'],'entropy',_$entropy_1327);
_$setReadOnly_1608(ns['base']['dists']['normal'],'kurtosis',_$kurtosis_1328);
_$setReadOnly_1608(ns['base']['dists']['normal'],'logpdf',_$logpdf_1331);
_$setReadOnly_1608(ns['base']['dists']['normal'],'mean',_$mean_1333);
_$setReadOnly_1608(ns['base']['dists']['normal'],'median',_$median_1335);
_$setReadOnly_1608(ns['base']['dists']['normal'],'mgf',_$mgf_1338);
_$setReadOnly_1608(ns['base']['dists']['normal'],'mode',_$mode_1340);
_$setReadOnly_1608(ns['base']['dists']['normal'],'pdf',_$pdf_1343);
_$setReadOnly_1608(ns['base']['dists']['normal'],'quantile',_$quantile_1346);
_$setReadOnly_1608(ns['base']['dists']['normal'],'skewness',_$skewness_1348);
_$setReadOnly_1608(ns['base']['dists']['normal'],'stdev',_$stdev_1350);
_$setReadOnly_1608(ns['base']['dists']['normal'],'variance',_$variance_1352);
_$setReadOnly_1608(ns['base']['dists'],'pareto1',{});
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'cdf',_$cdf_1356);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'Pareto1',_$ctor_1358);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'entropy',_$entropy_1360);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'kurtosis',_$kurtosis_1361);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'logcdf',_$logcdf_1364);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'logpdf',_$logpdf_1367);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'mean',_$mean_1369);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'median',_$median_1371);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'mode',_$mode_1373);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'pdf',_$pdf_1376);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'quantile',_$quantile_1379);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'skewness',_$skewness_1381);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'stdev',_$stdev_1383);
_$setReadOnly_1608(ns['base']['dists']['pareto1'],'variance',_$variance_1385);
_$setReadOnly_1608(ns['base']['dists'],'poisson',{});
_$setReadOnly_1608(ns['base']['dists']['poisson'],'cdf',_$cdf_1389);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'Poisson',_$ctor_1391);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'entropy',_$entropy_1393);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'kurtosis',_$kurtosis_1394);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'logpmf',_$logpmf_1397);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'mean',_$mean_1399);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'median',_$median_1401);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'mgf',_$mgf_1404);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'mode',_$mode_1406);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'pmf',_$pmf_1409);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'quantile',_$quantile_1412);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'skewness',_$skewness_1415);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'stdev',_$stdev_1417);
_$setReadOnly_1608(ns['base']['dists']['poisson'],'variance',_$variance_1419);
_$setReadOnly_1608(ns['base']['dists'],'rayleigh',{});
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'cdf',_$cdf_1423);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'Rayleigh',_$ctor_1425);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'entropy',_$entropy_1427);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'kurtosis',_$kurtosis_1428);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'logcdf',_$logcdf_1431);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'logpdf',_$logpdf_1434);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'mean',_$mean_1436);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'median',_$median_1438);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'mgf',_$mgf_1441);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'mode',_$mode_1443);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'pdf',_$pdf_1446);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'quantile',_$quantile_1449);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'skewness',_$skewness_1451);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'stdev',_$stdev_1453);
_$setReadOnly_1608(ns['base']['dists']['rayleigh'],'variance',_$variance_1455);
_$setReadOnly_1608(ns['base']['dists'],'t',{});
_$setReadOnly_1608(ns['base']['dists']['t'],'cdf',_$cdf_1459);
_$setReadOnly_1608(ns['base']['dists']['t'],'T',_$ctor_1461);
_$setReadOnly_1608(ns['base']['dists']['t'],'entropy',_$entropy_1463);
_$setReadOnly_1608(ns['base']['dists']['t'],'kurtosis',_$kurtosis_1464);
_$setReadOnly_1608(ns,'logcdf',_$logcdf_1467);
_$setReadOnly_1608(ns,'logpdf',_$logpdf_1470);
_$setReadOnly_1608(ns['base']['dists']['t'],'mean',_$mean_1472);
_$setReadOnly_1608(ns['base']['dists']['t'],'median',_$median_1474);
_$setReadOnly_1608(ns['base']['dists']['t'],'mode',_$mode_1476);
_$setReadOnly_1608(ns['base']['dists']['t'],'pdf',_$pdf_1479);
_$setReadOnly_1608(ns['base']['dists']['t'],'quantile',_$quantile_1482);
_$setReadOnly_1608(ns['base']['dists']['t'],'skewness',_$skewness_1484);
_$setReadOnly_1608(ns['base']['dists']['t'],'stdev',_$stdev_1486);
_$setReadOnly_1608(ns['base']['dists']['t'],'variance',_$variance_1488);
_$setReadOnly_1608(ns['base']['dists'],'triangular',{});
_$setReadOnly_1608(ns['base']['dists']['triangular'],'cdf',_$cdf_1492);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'Triangular',_$ctor_1494);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'entropy',_$entropy_1496);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'kurtosis',_$kurtosis_1497);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'logcdf',_$logcdf_1500);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'logpdf',_$logpdf_1503);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'mean',_$mean_1505);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'median',_$median_1507);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'mgf',_$mgf_1510);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'mode',_$mode_1512);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'pdf',_$pdf_1515);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'quantile',_$quantile_1518);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'skewness',_$skewness_1520);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'stdev',_$stdev_1522);
_$setReadOnly_1608(ns['base']['dists']['triangular'],'variance',_$variance_1524);
_$setReadOnly_1608(ns,'pdf',_$pdf_1527);
_$setReadOnly_1608(ns['base']['dists'],'uniform',{});
_$setReadOnly_1608(ns['base']['dists']['uniform'],'cdf',_$cdf_1531);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'Uniform',_$ctor_1533);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'entropy',_$entropy_1535);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'kurtosis',_$kurtosis_1536);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'logcdf',_$logcdf_1539);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'logpdf',_$logpdf_1542);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'mean',_$mean_1544);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'median',_$median_1546);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'mgf',_$mgf_1549);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'pdf',_$pdf_1552);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'quantile',_$quantile_1555);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'skewness',_$skewness_1557);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'stdev',_$stdev_1559);
_$setReadOnly_1608(ns['base']['dists']['uniform'],'variance',_$variance_1561);
_$setReadOnly_1608(ns['base']['dists'],'weibull',{});
_$setReadOnly_1608(ns['base']['dists']['weibull'],'cdf',_$cdf_1565);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'Weibull',_$ctor_1567);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'entropy',_$entropy_1569);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'kurtosis',_$kurtosis_1570);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'logcdf',_$logcdf_1573);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'logpdf',_$logpdf_1576);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'mean',_$mean_1578);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'median',_$median_1580);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'mgf',_$mgf_1583);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'mode',_$mode_1585);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'pdf',_$pdf_1588);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'quantile',_$quantile_1591);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'skewness',_$skewness_1593);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'stdev',_$stdev_1595);
_$setReadOnly_1608(ns['base']['dists']['weibull'],'variance',_$variance_1597);

var _$ns_1620 = ns;

return _$ns_1620;

});

